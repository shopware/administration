{"version":3,"sources":["webpack:///./src/module/sw-custom-entity/component/sw-generic-cms-page-assignment/index.ts","webpack:///./src/module/sw-custom-entity/component/sw-generic-cms-page-assignment/sw-generic-cms-page-assignment.html.twig","webpack:///./src/module/sw-custom-entity/component/sw-generic-cms-page-assignment/sw-generic-cms-page-assignment.scss"],"names":["objectUtils","Shopware","Utils","object","Component","wrapComponentConfig","template","inject","props","cmsPageId","type","String","required","default","slotOverrides","Object","allowedPageTypes","Array","data","cmsPage","showLayoutSelection","isLoading","computed","cmsPageRepository","this","repositoryFactory","create","changesetGenerator","Data","ChangesetGenerator","cmsPageCriteria","criteria","Criteria","addAssociation","getAssociation","addSorting","sort","pageTypeTitle","name","_this$cmsPage","fallback","$tc","pageType","cmsPageTypeService","getType","title","watch","getCmsPage","handler","_newCmsPage","oldCmsPage","emitCmsPageOverrides","deep","created","methods","openLayoutModal","closeLayoutModal","onLayoutSelect","selectedLayoutId","$emit","openInCmsEditor","$router","push","params","id","createNewLayout","applySlotOverrides","_cmsPage$sections","_this","sections","forEach","section","_section$blocks","blocks","block","_block$slots","slots","slot","slotOverride","merge","config","cloneDeep","_this2","_asyncToGenerator","_regeneratorRuntime","mark","_callee","response","wrap","_context","prev","next","abrupt","setIds","search","sent","State","commit","stop","deleteSpecificKeys","values","configField","entity","hasOwnProperty","changes","generate","isArray","content","__esModule","module","i","locals","exports","add"],"mappings":"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","file":"static/js/aa3bf66f880e43847813.js","sourcesContent":["import type ChangesetGenerator from 'src/core/data/changeset-generator.data';\nimport type { Entity } from '@shopware-ag/admin-extension-sdk/es/data/_internals/Entity';\nimport type Repository from 'src/core/data/repository.data';\nimport type { PropType } from 'vue';\n\nimport Criteria from '@shopware-ag/admin-extension-sdk/es/data/Criteria';\nimport template from './sw-generic-cms-page-assignment.html.twig';\nimport './sw-generic-cms-page-assignment.scss';\n\nconst objectUtils = Shopware.Utils.object;\n\ninterface CmsSlotOverrides {\n    [key: string]: unknown\n}\n\n/**\n * @private\n * @package content\n */\nexport default Shopware.Component.wrapComponentConfig({\n    template,\n\n    inject: [\n        'repositoryFactory',\n        'cmsPageTypeService',\n    ],\n\n    props: {\n        cmsPageId: {\n            type: String as PropType<string | null>,\n            required: false,\n            default: null,\n        },\n\n        slotOverrides: {\n            type: Object as PropType<CmsSlotOverrides>,\n            required: false,\n            default: null,\n        },\n\n        allowedPageTypes: {\n            type: Array as PropType<string[]>,\n            required: false,\n            default: () => [],\n        },\n    },\n\n    data(): {\n        cmsPage: Entity<'cms_page'> | null,\n        showLayoutSelection: boolean,\n        isLoading: boolean\n        } {\n        return {\n            cmsPage: null,\n            showLayoutSelection: false,\n            isLoading: false,\n        };\n    },\n\n    computed: {\n        cmsPageRepository(): Repository<'cms_page'> {\n            return this.repositoryFactory.create('cms_page');\n        },\n\n        changesetGenerator(): ChangesetGenerator {\n            return new Shopware.Data.ChangesetGenerator();\n        },\n\n        cmsPageCriteria(): Criteria {\n            const criteria = new Criteria(1, 1);\n\n            criteria\n                .addAssociation('previewMedia')\n                .getAssociation('sections')\n                .addSorting(Criteria.sort('position'))\n                .getAssociation('blocks')\n                .addSorting(Criteria.sort('position', 'ASC'))\n                .addAssociation('slots');\n\n            return criteria;\n        },\n\n        pageTypeTitle(name?: string): string {\n            const fallback = this.$tc('sw-category.base.cms.defaultDesc');\n\n            if (!name) {\n                return fallback;\n            }\n\n            const pageType = this.cmsPageTypeService.getType(this.cmsPage?.type);\n            return pageType ? this.$tc(pageType.title) : fallback;\n        },\n    },\n\n    watch: {\n        cmsPageId(): void {\n            void this.getCmsPage();\n        },\n\n        cmsPage: {\n            handler(_newCmsPage, oldCmsPage): void {\n                if (oldCmsPage) {\n                    this.emitCmsPageOverrides();\n                }\n            },\n            deep: true,\n        },\n    },\n\n    created() {\n        void this.getCmsPage();\n    },\n\n    methods: {\n        openLayoutModal(): void {\n            this.showLayoutSelection = true;\n        },\n\n        closeLayoutModal(): void {\n            this.showLayoutSelection = false;\n        },\n\n        onLayoutSelect(selectedLayoutId: string | null): void {\n            this.$emit('update:cms-page-id', selectedLayoutId);\n        },\n\n        openInCmsEditor(): void {\n            if (!this.cmsPageId) {\n                return;\n            }\n\n            void this.$router.push({ name: 'sw.cms.detail', params: { id: this.cmsPageId } });\n        },\n\n        createNewLayout(): void {\n            this.$emit('create-layout');\n        },\n\n        applySlotOverrides(cmsPage: Entity<'cms_page'>): Entity<'cms_page'> {\n            if (!this.slotOverrides) {\n                return cmsPage;\n            }\n\n            cmsPage.sections?.forEach((section) => {\n                section.blocks?.forEach((block) => {\n                    block.slots?.forEach((slot) => {\n                        const slotOverride = this.slotOverrides[slot.id];\n                        if (!slotOverride) {\n                            return;\n                        }\n                        objectUtils.merge(slot.config, objectUtils.cloneDeep(slotOverride));\n                    });\n                });\n            });\n\n            return cmsPage;\n        },\n\n        async getCmsPage(): Promise<void> {\n            if (this.cmsPageId === null) {\n                this.cmsPage = null;\n                return;\n            }\n\n            this.isLoading = true;\n\n            const criteria = this.cmsPageCriteria;\n            criteria.setIds([this.cmsPageId]);\n\n            const response = await this.cmsPageRepository.search(criteria);\n            const cmsPage = this.applySlotOverrides(response[0]);\n\n            Shopware.State.commit('cmsPageState/setCurrentPage', cmsPage);\n            this.cmsPage = cmsPage;\n\n            this.isLoading = false;\n        },\n\n        deleteSpecificKeys(sections: Entity<'cms_section'>[]): void {\n            if (!sections) {\n                return;\n            }\n\n            sections.forEach((section) => {\n                if (!section.blocks) {\n                    return;\n                }\n\n                section.blocks.forEach((block) => {\n                    if (!block.slots) {\n                        return;\n                    }\n\n                    block.slots.forEach((slot) => {\n                        if (!slot.config) {\n                            return;\n                        }\n\n                        Object.values(slot.config as Record<string, {\n                            entity?: string,\n                            required?: boolean,\n                            type?: string\n                        }>).forEach((configField) => {\n                            if (!configField) {\n                                return;\n                            }\n\n                            if (configField.entity) {\n                                delete configField.entity;\n                            }\n                            // eslint-disable-next-line @typescript-eslint/no-unsafe-call\n                            if (configField.hasOwnProperty('required')) {\n                                delete configField.required;\n                            }\n                            if (configField.type) {\n                                delete configField.type;\n                            }\n                        });\n                    });\n                });\n            });\n        },\n\n        emitCmsPageOverrides(): void {\n            if (this.cmsPage === null) {\n                return;\n            }\n\n            if (this.cmsPage.sections) {\n                this.deleteSpecificKeys(this.cmsPage.sections);\n            }\n\n            const { changes } = this.changesetGenerator.generate(this.cmsPage) as { changes: Entity<'cms_page'> };\n\n            const slotOverrides = {} as Record<string, unknown>;\n            if (!changes) {\n                return;\n            }\n\n            if (Array.isArray(changes.sections)) {\n                changes.sections.forEach((section) => {\n                    if (Array.isArray(section.blocks)) {\n                        section.blocks.forEach((block) => {\n                            if (Array.isArray(block.slots)) {\n                                block.slots.forEach((slot) => {\n                                    slotOverrides[slot.id] = slot.config;\n                                });\n                            }\n                        });\n                    }\n                });\n            }\n\n            this.$emit('update:slot-overrides', slotOverrides);\n        },\n    },\n});\n","export default \"<div>\\n    <sw-card\\n        class=\\\"sw-generic-cms-page-assignment\\\"\\n        position-identifier=\\\"sw-generic-cms-page-assignment\\\"\\n        :title=\\\"$tc('sw-category.base.cms.title')\\\"\\n        :is-loading=\\\"isLoading\\\"\\n    >\\n        <div class=\\\"sw-generic-cms-page-assignment__base-layout\\\">\\n            <sw-cms-list-item\\n                active\\n                :page=\\\"cmsPage\\\"\\n                @on-item-click=\\\"openLayoutModal\\\"\\n            />\\n\\n            <div class=\\\"sw-generic-cms-page-assignment__page-selection\\\">\\n                <div class=\\\"sw-generic-cms-page-assignment__page-selection-info\\\">\\n                    <div\\n                        class=\\\"sw-generic-cms-page-assignment__page-selection-headline\\\"\\n                        :class=\\\"{ 'is--empty': !cmsPage }\\\"\\n                    >\\n                        {{ cmsPage ? cmsPage.name : $tc('sw-category.base.cms.defaultTitle') }}\\n                    </div>\\n                    <div\\n                        class=\\\"sw-generic-cms-page-assignment__page-selection-subheadline\\\"\\n                        :class=\\\"{ 'is--empty': !cmsPage }\\\"\\n                    >\\n                        {{ pageTypeTitle }}\\n                    </div>\\n                </div>\\n\\n                <div\\n                    v-if=\\\"cmsPage\\\"\\n                    class=\\\"sw-generic-cms-page-assignment__page-selection-actions\\\"\\n                >\\n                    <sw-button\\n                        class=\\\"sw-generic-cms-page-assignment__change-layout-action\\\"\\n                        size=\\\"small\\\"\\n                        @click=\\\"openLayoutModal\\\"\\n                    >\\n                        {{ $tc('sw-category.base.cms.changeLayout') }}\\n                    </sw-button>\\n\\n                    <sw-button\\n                        class=\\\"sw-generic-cms-page-assignment__open-in-pagebuilder\\\"\\n                        size=\\\"small\\\"\\n                        @click=\\\"openInCmsEditor\\\"\\n                    >\\n                        {{ $tc('sw-category.base.cms.editInPagebuilder') }}\\n                    </sw-button>\\n\\n                    <sw-button\\n                        size=\\\"small\\\"\\n                        class=\\\"sw-generic-cms-page-assignment__layout-reset\\\"\\n                        square\\n                        @click=\\\"onLayoutSelect(null)\\\"\\n                    >\\n                        <sw-icon\\n                            name=\\\"regular-trash\\\"\\n                            small\\n                        />\\n                    </sw-button>\\n                </div>\\n\\n                <div\\n                    v-else\\n                    class=\\\"sw-generic-cms-page-assignment__page-selection-actions\\\"\\n                >\\n                    <sw-button\\n                        class=\\\"sw-generic-cms-page-assignment__change-layout-action\\\"\\n                        size=\\\"small\\\"\\n                        @click=\\\"openLayoutModal\\\"\\n                    >\\n                        {{ $tc('sw-category.base.cms.changeLayoutEmpty') }}\\n                    </sw-button>\\n\\n                    <sw-button\\n                        class=\\\"sw-generic-cms-page-assignment__create-layout\\\"\\n                        size=\\\"small\\\"\\n                        @click=\\\"createNewLayout\\\"\\n                    >\\n                        {{ $tc('sw-category.base.cms.editInPagebuilderEmpty') }}\\n                    </sw-button>\\n                </div>\\n            </div>\\n        </div>\\n    </sw-card>\\n\\n    <sw-cms-page-form\\n        v-if=\\\"cmsPage\\\"\\n        :page=\\\"cmsPage\\\"\\n    />\\n\\n    <sw-cms-layout-modal\\n        v-if=\\\"showLayoutSelection\\\"\\n        :cms-page-types=\\\"allowedPageTypes\\\"\\n        :pre-selection=\\\"cmsPage\\\"\\n        @modal-layout-select=\\\"onLayoutSelect\\\"\\n        @modal-close=\\\"closeLayoutModal\\\"\\n    />\\n</div>\\n\";","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../../../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--15-1!../../../../../node_modules/css-loader/dist/cjs.js??ref--15-2!../../../../../node_modules/sass-loader/dist/cjs.js??ref--15-3!./sw-generic-cms-page-assignment.scss\");\nif(content.__esModule) content = content.default;\nif(typeof content === 'string') content = [[module.id, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar add = require(\"!../../../../../node_modules/vue-style-loader/lib/addStylesClient.js\").default\nvar update = add(\"a3a393b8\", content, true, {});"],"sourceRoot":""}