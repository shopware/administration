{"version":3,"sources":["webpack:///./src/module/sw-settings-tax/component/sw-tax-rule-card/sw-tax-rule-card.html.twig","webpack:///./src/module/sw-settings-tax/component/sw-tax-rule-card/index.js","webpack:///./src/module/sw-settings-tax/component/sw-tax-rule-card/sw-tax-rule-card.scss"],"names":["Context","Shopware","Criteria","Data","template","inject","props","tax","type","Object","required","isLoading","Boolean","disabled","default","data","taxRulesLoading","cardLoading","taxRules","showModal","showDeleteModal","currentRule","term","page","limit","sortBy","sortDirection","total","undefined","computed","taxRuleRepository","this","repositoryFactory","create","taxRulesEmpty","length","taxRuleCardClasses","taxRuleCriteria","criteria","addSorting","sort","addAssociation","addFilter","equals","id","multi","contains","getColumns","property","dataIndex","label","primary","assetFilter","Filter","getByName","dateFilter","created","createdComponent","methods","getList","_this","search","api","then","response","Promise","resolve","paginate","_ref","onColumnSort","column","onSearchTermChange","searchTerm","onModalClose","_this2","$nextTick","showRuleModal","taxRule","onDelete","onCloseDeleteModal","onConfirmDelete","_this3","delete","getTypeCellComponent","subComponentName","technicalName","replace","feature","isActive","Component","getComponentRegistry","get","concat","$options","components","content","__esModule","module","i","locals","exports","add"],"mappings":"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","file":"static/js/cdcdc16cf0814254be3f.js","sourcesContent":["export default \"\\n{% block sw_tax_rule_card %}\\n<sw-card\\n    :title=\\\"$tc('sw-settings-tax.taxRuleCard.cardTitle')\\\"\\n    class=\\\"sw-tax-rule-card\\\"\\n    position-identifier=\\\"sw-tax-rule\\\"\\n    :class=\\\"taxRuleCardClasses\\\"\\n    :is-loading=\\\"isLoading || taxRulesLoading || cardLoading\\\"\\n>\\n    <template #grid>\\n        <template v-if=\\\"!taxRulesEmpty && !disabled\\\">\\n            \\n            {% block sw_tax_rule_card_header %}\\n            <sw-card-section\\n                divider=\\\"bottom\\\"\\n                secondary\\n                slim\\n            >\\n                \\n                {% block sw_tax_rule_card_header_filter %}\\n                <sw-card-filter\\n                    :placeholder=\\\"$tc('sw-settings-tax.taxRuleCard.searchBarPlaceholder')\\\"\\n                    @sw-card-filter-term-change=\\\"onSearchTermChange\\\"\\n                >\\n                    <template #filter>\\n                        \\n                        {% block sw_tax_rule_card_header_create_rule_button %}\\n                        <sw-button\\n                            v-tooltip.bottom=\\\"{\\n                                message: $tc('sw-privileges.tooltip.warning'),\\n                                disabled: acl.can('tax.editor'),\\n                                showOnDisabledElements: true\\n                            }\\\"\\n                            class=\\\"sw-tax-rule-grid-button\\\"\\n                            size=\\\"small\\\"\\n                            :disabled=\\\"!acl.can('tax.editor')\\\"\\n                            @click=\\\"showModal = true\\\"\\n                        >\\n\\n                            \\n                            {% block sw_tax_rule_card_header_create_document_button_label %}\\n                            {{ $tc('sw-settings-tax.taxRuleCard.labelCreateNew') }}\\n                            {% endblock %}\\n\\n                        </sw-button>\\n                        {% endblock %}\\n                    </template>\\n                </sw-card-filter>\\n                {% endblock %}\\n\\n            </sw-card-section>\\n            {% endblock %}\\n\\n            \\n            {% block sw_tax_rule_card_grid %}\\n            <sw-data-grid\\n                :data-source=\\\"taxRules\\\"\\n                :columns=\\\"getColumns\\\"\\n                :full-page=\\\"false\\\"\\n                :show-settings=\\\"true\\\"\\n                :show-selection=\\\"false\\\"\\n                :show-actions=\\\"true\\\"\\n                :is-loading=\\\"isLoading\\\"\\n                :allow-column-edit=\\\"false\\\"\\n                :allow-inline-edit=\\\"false\\\"\\n                v-bind=\\\"{sortBy, sortDirection}\\\"\\n                identifier=\\\"sw-tax-rule-grid\\\"\\n                @column-sort=\\\"onColumnSort\\\"\\n            >\\n                \\n                {% block sw_settings_tax_rule_grid_column_tax_rate %}\\n                <template #column-taxRate=\\\"{ item, isInlineEdit, compact }\\\">\\n                    <template v-if=\\\"isInlineEdit\\\">\\n                        <sw-number-field\\n                            {% if VUE3 %}\\n                            v-model:value=\\\"item.taxRate\\\"\\n                            {% else %}\\n                            v-model=\\\"item.taxRate\\\"\\n                            {% endif %}\\n                            :digits=\\\"3\\\"\\n                            :size=\\\"compact ? 'small' : 'default'\\\"\\n                        >\\n                            <template #suffix>\\n                                <span>\\n                                    <span v-html=\\\"$sanitize($tc('sw-settings-tax.general.taxRateSymbol'))\\\"></span>\\n                                </span>\\n                            </template>\\n                        </sw-number-field>\\n                    </template>\\n                    <template v-else>\\n                        {{ item.taxRate }}%\\n                    </template>\\n                </template>\\n                {% endblock %}\\n\\n                \\n                {% block sw_settings_tax_rule_grid_column_tax_rule_type_type_name %}\\n                <template #column-type.typeName=\\\"{ item }\\\">\\n                    <component\\n                        :is=\\\"getTypeCellComponent(item)\\\"\\n                        v-if=\\\"getTypeCellComponent(item)\\\"\\n                        :tax-rule=\\\"item\\\"\\n                    />\\n                    <template v-else>\\n                        {{ item.type.typeName }}\\n                    </template>\\n                </template>\\n                {% endblock %}\\n\\n                \\n                {% block sw_settings_tax_rule_grid_column_tax_rule_active_from %}\\n                <template #column-activeFrom=\\\"{ item }\\\">\\n                    {{ dateFilter(item.activeFrom, {\\n                    hour: '2-digit',\\n                    minute: '2-digit',\\n                    day: '2-digit',\\n                    month: '2-digit',\\n                    year: 'numeric'\\n                    }) }}\\n                </template>\\n                {% endblock %}\\n\\n                \\n                {% block sw_settings_tax_list_grid_columns_actions %}\\n                <template #actions=\\\"{ item }\\\">\\n                    \\n                    {% block sw_settings_tax_list_grid_columns_actions_edit %}\\n                    <sw-context-menu-item\\n                        class=\\\"sw-tax-list__edit-action\\\"\\n                        :disabled=\\\"!acl.can('tax.editor')\\\"\\n                        @click=\\\"showRuleModal(item)\\\"\\n                    >\\n                        {{ $tc('sw-settings-tax.list.contextMenuEdit') }}\\n                    </sw-context-menu-item>\\n                    {% endblock %}\\n\\n                    \\n                    {% block sw_settings_tax_list_grid_columns_actions_delete %}\\n                    <sw-context-menu-item\\n                        class=\\\"sw-tax-list__delete-action\\\"\\n                        variant=\\\"danger\\\"\\n                        :disabled=\\\"!acl.can('tax.editor')\\\"\\n                        @click=\\\"onDelete(item.id)\\\"\\n                    >\\n                        {{ $tc('sw-settings-tax.list.contextMenuDelete') }}\\n                    </sw-context-menu-item>\\n                    {% endblock %}\\n                </template>\\n                {% endblock %}\\n\\n                \\n                {% block sw_settings_tax_list_grid_action_modals %}\\n                <template #action-modals=\\\"{ item }\\\">\\n                    \\n                    {% block sw_settings_tax_list_delete_modal %}\\n                    <sw-modal\\n                        v-if=\\\"showDeleteModal === item.id\\\"\\n                        :title=\\\"$tc('global.default.warning')\\\"\\n                        variant=\\\"small\\\"\\n                        @modal-close=\\\"onCloseDeleteModal\\\"\\n                    >\\n                        \\n                        {% block sw_settings_tax_list_delete_modal_confirm_delete_text %}\\n                        <p class=\\\"sw-settings-tax-list__confirm-delete-text\\\">\\n                            {{ $tc('sw-settings-tax.taxRuleCard.textDeleteConfirm', 0, { name: item.country.name, type: item.type.typeName }) }}\\n                        </p>\\n                        {% endblock %}\\n\\n                        \\n                        {% block sw_settings_tax_list_delete_modal_footer %}\\n                        <template #modal-footer>\\n                            \\n                            {% block sw_settings_tax_list_delete_modal_cancel %}\\n                            <sw-button\\n                                size=\\\"small\\\"\\n                                @click=\\\"onCloseDeleteModal\\\"\\n                            >\\n                                {{ $tc('sw-settings-tax.list.buttonCancel') }}\\n                            </sw-button>\\n                            {% endblock %}\\n\\n                            \\n                            {% block sw_settings_tax_list_delete_modal_confirm %}\\n                            <sw-button\\n                                variant=\\\"danger\\\"\\n                                size=\\\"small\\\"\\n                                @click=\\\"onConfirmDelete(item.id)\\\"\\n                            >\\n                                {{ $tc('sw-settings-tax.list.buttonDelete') }}\\n                            </sw-button>\\n                            {% endblock %}\\n                        </template>\\n                        {% endblock %}\\n                    </sw-modal>\\n                    {% endblock %}\\n                </template>\\n                {% endblock %}\\n\\n                \\n                {% block sw_settings_tax_list_grid_pagination %}\\n                <template #pagination>\\n                    <sw-pagination\\n                        v-bind=\\\"{ page, limit, total }\\\"\\n                        :total-visible=\\\"7\\\"\\n                        @page-change=\\\"paginate\\\"\\n                    />\\n                </template>\\n                {% endblock %}\\n\\n            </sw-data-grid>\\n            {% endblock %}\\n        </template>\\n    </template>\\n\\n    \\n    {% block sw_tax_rule_card_grid_column_modal %}\\n    <sw-settings-tax-rule-modal\\n        v-if=\\\"showModal\\\"\\n        :tax=\\\"tax\\\"\\n        :current-rule=\\\"currentRule\\\"\\n        @modal-close=\\\"onModalClose\\\"\\n    />\\n    {% endblock %}\\n\\n    \\n    {% block sw_tax_rule_card_empty_state %}\\n    <template v-if=\\\"taxRulesEmpty || disabled\\\">\\n        <div class=\\\"sw-settings-tax-rule-card__empty-state\\\">\\n            \\n            {% block sw_tax_rule_card_empty_state_image %}\\n            <img\\n                :src=\\\"assetFilter('administration/static/img/empty-states/settings-empty-state.svg')\\\"\\n                alt=\\\"\\\"\\n            >\\n            {% endblock %}\\n\\n            \\n            {% block sw_tax_rule_card_empty_state_label %}\\n            <div class=\\\"sw-settings-tax-rule-card__empty-state--label\\\">\\n                <p v-if=\\\"disabled\\\">\\n                    {{ $tc('sw-settings-tax.taxRuleCard.createStateDescription') }}\\n                </p>\\n                <p v-else>\\n                    {{ $tc('sw-settings-tax.taxRuleCard.emptyStateDescription') }}\\n                </p>\\n            </div>\\n            {% endblock %}\\n\\n            \\n            {% block sw_tax_rule_card_empty_state_button %}\\n            <sw-button\\n                v-tooltip.bottom=\\\"{\\n                    message: $tc('sw-privileges.tooltip.warning'),\\n                    disabled: acl.can('tax.editor'),\\n                    showOnDisabledElements: true\\n                }\\\"\\n                class=\\\"sw-settings-tax-rule-card__empty-state--button\\\"\\n                variant=\\\"ghost\\\"\\n                size=\\\"small\\\"\\n                :disabled=\\\"disabled || !acl.can('tax.editor')\\\"\\n                @click=\\\"showModal = true\\\"\\n            >\\n                {{ $tc('sw-settings-tax.taxRuleCard.labelCreateNew') }}\\n            </sw-button>\\n            {% endblock %}\\n        </div>\\n    </template>\\n    {% endblock %}\\n</sw-card>\\n{% endblock %}\\n\";","import template from './sw-tax-rule-card.html.twig';\nimport './sw-tax-rule-card.scss';\n\n/**\n * @package checkout\n */\n\nconst { Context } = Shopware;\nconst { Criteria } = Shopware.Data;\n\n// eslint-disable-next-line sw-deprecation-rules/private-feature-declarations\nexport default {\n    template,\n\n    inject: [\n        'repositoryFactory',\n        'acl',\n        'feature',\n    ],\n\n    props: {\n        tax: {\n            type: Object,\n            required: true,\n        },\n        isLoading: {\n            type: Boolean,\n            required: true,\n        },\n        disabled: {\n            type: Boolean,\n            required: false,\n            default: false,\n        },\n    },\n\n    data() {\n        return {\n            taxRulesLoading: false,\n            cardLoading: false,\n            taxRules: [],\n            showModal: false,\n            showDeleteModal: false,\n            currentRule: null,\n            term: '',\n            page: 1,\n            limit: 25,\n            sortBy: 'country.name',\n            sortDirection: 'ASC',\n            total: undefined,\n        };\n    },\n\n    computed: {\n        taxRuleRepository() {\n            return this.repositoryFactory.create('tax_rule');\n        },\n\n        taxRulesEmpty() {\n            return this.taxRules.length === 0 && !this.term;\n        },\n\n        taxRuleCardClasses() {\n            return {\n                'sw-tax-rule-card--is-empty': this.taxRulesEmpty,\n            };\n        },\n\n        taxRuleCriteria() {\n            const criteria = new Criteria(this.page, this.limit);\n\n            criteria.addSorting(Criteria.sort(this.sortBy, this.sortDirection));\n\n            criteria.addAssociation('type');\n            criteria.addAssociation('country');\n            criteria.addFilter(Criteria.equals('taxId', this.tax.id));\n\n            if (this.term) {\n                criteria.addFilter(Criteria.multi('OR', [\n                    Criteria.contains('taxRate', this.term),\n                    Criteria.contains('type.technicalName', this.term),\n                    Criteria.contains('type.typeName', this.term),\n                    Criteria.contains('country.name', this.term),\n                ]));\n            }\n\n            return criteria;\n        },\n\n        getColumns() {\n            return [{\n                property: 'country.name',\n                dataIndex: 'country.name',\n                label: 'sw-settings-tax.taxRuleCard.labelCountryName',\n                primary: true,\n            }, {\n                property: 'type.typeName',\n                dataIndex: 'type.typeName',\n                label: 'sw-settings-tax.taxRuleCard.labelAppliesOn',\n            }, {\n                property: 'taxRate',\n                dataIndex: 'taxRate',\n                label: 'sw-settings-tax.taxRuleCard.labelTaxRate',\n            }, {\n                property: 'activeFrom',\n                dataIndex: 'activeFrom',\n                label: 'sw-settings-tax.taxRuleCard.labelActiveFrom',\n            }];\n        },\n\n        assetFilter() {\n            return Shopware.Filter.getByName('asset');\n        },\n\n        dateFilter() {\n            return Shopware.Filter.getByName('date');\n        },\n    },\n\n    created() {\n        this.createdComponent();\n    },\n\n    methods: {\n        createdComponent() {\n            this.getList();\n        },\n\n        getList() {\n            this.taxRulesLoading = true;\n\n            return this.taxRuleRepository.search(this.taxRuleCriteria, Context.api).then((response) => {\n                this.total = response.total;\n                this.taxRules = response;\n                this.taxRulesLoading = false;\n                return Promise.resolve();\n            });\n        },\n\n        paginate({ page, limit }) {\n            this.page = page;\n            this.limit = limit;\n            this.getList();\n        },\n\n        onColumnSort(column) {\n            if (this.sortDirection === 'ASC' && column.dataIndex === this.sortBy) {\n                this.sortDirection = 'DESC';\n            } else {\n                this.sortDirection = 'ASC';\n            }\n\n            this.sortBy = column.dataIndex;\n            this.getList();\n        },\n\n        onSearchTermChange(searchTerm) {\n            this.term = searchTerm;\n            this.getList();\n        },\n\n        onModalClose() {\n            this.showModal = false;\n            this.currentRule = null;\n            this.$nextTick(() => this.getList());\n        },\n\n        showRuleModal(taxRule) {\n            this.currentRule = taxRule;\n            this.showModal = true;\n        },\n\n        onDelete(id) {\n            this.showDeleteModal = id;\n        },\n\n        onCloseDeleteModal() {\n            this.showDeleteModal = false;\n        },\n\n        onConfirmDelete(id) {\n            this.showDeleteModal = false;\n\n            return this.taxRuleRepository.delete(id, Context.api).then(() => {\n                this.getList();\n            });\n        },\n\n        getTypeCellComponent(taxRule) {\n            const subComponentName = taxRule.type.technicalName.replace(/_/g, '-');\n\n            if (this.feature.isActive('VUE3')) {\n                return Shopware.Component.getComponentRegistry().get(`sw-settings-tax-rule-type-${subComponentName}-cell`);\n            }\n\n            return this.$options.components[`sw-settings-tax-rule-type-${subComponentName}-cell`];\n        },\n    },\n};\n","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../../../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--15-1!../../../../../node_modules/css-loader/dist/cjs.js??ref--15-2!../../../../../node_modules/sass-loader/dist/cjs.js??ref--15-3!./sw-tax-rule-card.scss\");\nif(content.__esModule) content = content.default;\nif(typeof content === 'string') content = [[module.id, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar add = require(\"!../../../../../node_modules/vue-style-loader/lib/addStylesClient.js\").default\nvar update = add(\"8d090fe4\", content, true, {});"],"sourceRoot":""}