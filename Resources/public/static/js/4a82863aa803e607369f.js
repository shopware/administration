(window.webpackJsonpAdministration=window.webpackJsonpAdministration||[]).push([[5245],{32725:function(){},205245:function(t,e,n){"use strict";n.r(e),n.d(e,{default:function(){return l}}),n(614548);let{Mixin:s}=Shopware,{Criteria:i}=Shopware.Data;var l={template:'\n{% block sw_settings_list %}\n\n{% block sw_settings_tag_index %}\n<sw-page class="sw-settings-tag-list">\n    \n    {% block sw_settings_tag_list_search_bar %}\n    <template #search-bar>\n        <sw-search-bar\n            initial-search-type="tag"\n            :placeholder="$tc(\'sw-settings-tag.general.placeholderSearchBar\')"\n            :initial-search="term"\n            @search="onSearch"\n        />\n    </template>\n    {% endblock %}\n\n    \n    {% block sw_settings_tag_list_smart_bar_header %}\n    <template #smart-bar-header>\n        \n        {% block sw_settings_tag_list_smart_bar_header_title %}\n        <h2>\n            \n            {% block sw_settings_tag_list_smart_bar_header_title_text %}\n            {{ $tc(\'sw-settings.index.title\') }} <sw-icon\n                name="regular-chevron-right-xs"\n                small\n            /> {{ $tc(\'sw-settings-tag.list.textHeadline\') }}\n            {% endblock %}\n\n            \n            {% block sw_settings_tag_list_smart_bar_header_amount %}\n            <span\n                v-if="!isLoading"\n                class="sw-page__smart-bar-amount"\n            >\n                ({{ total }})\n            </span>\n            {% endblock %}\n        </h2>\n        {% endblock %}\n    </template>\n    {% endblock %}\n\n    \n    {% block sw_settings_tag_list_smart_bar_actions %}\n    <template #smart-bar-actions>\n        \n        {% block sw_settings_tag_list_smart_bar_actions_add %}\n        <sw-button\n            v-tooltip.bottom="{\n                message: $tc(\'sw-privileges.tooltip.warning\'),\n                disabled: acl.can(\'tag.creator\'),\n                showOnDisabledElements: true\n            }"\n            class="sw-settings-tag-list__button-create"\n            variant="primary"\n            :disabled="!acl.can(\'tag.creator\') || undefined"\n            @click="onDetail(null)"\n        >\n            {{ $tc(\'sw-settings-tag.list.buttonAddTag\') }}\n        </sw-button>\n        {% endblock %}\n    </template>\n    {% endblock %}\n\n    \n    {% block sw_settings_tag_list_content %}\n    <template #content>\n        <sw-card-view>\n            \n            {% block sw_settings_tag_list_content_card %}\n            <sw-card\n                class="sw-settings-tag-list__content"\n                position-identifier="sw-settings-tag-list-content"\n            >\n                <template #toolbar>\n                    \n                    {% block sw_settings_tag_list_grid_toolbar_search %}\n                    <sw-card-filter\n                        ref="swCardFilter"\n                        :placeholder="$tc(\'sw-settings-tag.list.searchPlaceholder\')"\n                        @sw-card-filter-term-change="onSearch"\n                    />\n                    {% endblock %}\n                    \n                    {% block sw_settings_tag_list_grid_toolbar_filter %}\n                    <sw-context-button\n                        :menu-width="300"\n                        :auto-close="false"\n                        :auto-close-outside-click="true"\n                        :z-index="1000"\n                        :additional-context-menu-classes="{ \'sw-settings-tag-list__filter\': true }"\n                    >\n                        <template #button>\n                            \n                            {% block sw_settings_tag_list_grid_toolbar_filter_menu_trigger %}\n                            <sw-button\n                                class="sw-settings-tag-list__filter-menu-trigger"\n                                size="small"\n                            >\n                                <sw-icon\n                                    name="regular-filter-s"\n                                    size="16"\n                                />\n                                {{ $tc(\'sw-settings-tag.list.filter\') }}\n                            </sw-button>\n                            <i\n                                v-if="filterCount > 0"\n                                class="filter-badge"\n                            >\n                                {{ filterCount }}\n                            </i>\n                            {% endblock %}\n                        </template>\n\n                        \n                        {% block sw_settings_tag_list_grid_toolbar_filter_header %}\n                        <h3>{{ $tc(\'sw-settings-tag.list.filter\') }}</h3>\n                        {% endblock %}\n\n                        \n                        {% block sw_settings_tag_list_grid_toolbar_filter_divider %}\n                        <sw-context-menu-divider />\n                        {% endblock %}\n\n                        \n                        {% block sw_settings_tag_list_grid_toolbar_filter_duplicate %}\n                        <sw-switch-field\n                            v-model:value="duplicateFilter"\n                            :label="$tc(\'sw-settings-tag.list.filterDuplicate\')"\n                            @update:value="onFilter"\n                        />\n                        {% endblock %}\n\n                        \n                        {% block sw_settings_tag_list_grid_toolbar_filter_empty %}\n                        <sw-switch-field\n                            v-model:value="emptyFilter"\n                            :label="$tc(\'sw-settings-tag.list.filterEmpty\')"\n                            @update:value="onFilter"\n                        />\n                        {% endblock %}\n\n                        \n                        {% block sw_settings_tag_list_grid_toolbar_filter_assignment %}\n                        <sw-multi-select\n                            v-model:value="assignmentFilter"\n                            class="sw-settings-tag-list__filter-assignment-select"\n                            :label="$tc(\'sw-settings-tag.list.filterAssignemnt\')"\n                            :placeholder="$tc(\'sw-settings-tag.list.placeholderFilterAssignemnt\')"\n                            :options="assignmentFilterOptions"\n                            :disabled="emptyFilter || undefined"\n                            @update:value="onFilter"\n                        />\n                        {% endblock %}\n\n                        \n                        {% block sw_settings_tag_list_grid_toolbar_filter_footer %}\n                        <div class="sw-settings-tag-list__filter-footer">\n                            <a\n                                href="#"\n                                @click.prevent="resetFilters"\n                            >\n                                {{ $tc(\'sw-settings-tag.list.resetFilters\') }}\n                            </a>\n                        </div>\n                        {% endblock %}\n                    </sw-context-button>\n                    {% endblock %}\n                </template>\n\n                <template #grid>\n                    \n                    {% block sw_settings_tag_list_grid %}\n                    <sw-entity-listing\n                        v-if="isLoading || total > 0"\n                        ref="swSettingsTagGrid"\n                        class="sw-settings-tag-list__grid"\n                        identifier="sw-settings-tag-list"\n                        :items="tags"\n                        :columns="tagColumns"\n                        :repository="tagRepository"\n                        :full-page="total > 0"\n                        :plain-appearance="true"\n                        :compact-mode="true"\n                        :show-selection="true"\n                        :is-loading="isLoading"\n                        :allow-view="acl.can(\'tag.viewer\')"\n                        :allow-edit="acl.can(\'tag.editor\')"\n                        :allow-delete="acl.can(\'tag.deleter\')"\n                        :disable-data-fetching="true"\n                        :sort-by="sortBy"\n                        :sort-direction="sortDirection"\n                        @column-sort="onSortColumn"\n                        @page-change="onPageChange"\n                    >\n                        \n                        {% block sw_settings_tag_list_grid_bulk %}\n                        <template #bulk-additional="{ selectionCount }">\n                            \n                            <a\n                                v-if="selectionCount > 1 && acl.can(\'tag.creator\') && acl.can(\'tag.deleter\')"\n                                class="link"\n                                role="button"\n                                tabindex="0"\n                                @click="showBulkMergeModal = true"\n                            >\n                                {{ $tc(\'sw-settings-tag.list.bulkMerge\') }}\n                            </a>\n                        </template>\n                        {% endblock %}\n\n                        \n                        {% block sw_settings_tag_list_grid_bulk_merge_modal %}\n                        <template #bulk-modals-additional="{ selection, ids }">\n                            <sw-modal\n                                v-if="showBulkMergeModal"\n                                variant="large"\n                                :title="$tc(\'sw-settings-tag.list.bulkMergeTitle\')"\n                                @modal-close="onCloseBulkMergeModal"\n                            >\n                                <slot\n                                    name="bulk-modal-merge-confirm-text"\n                                    v-bind="{ selection, ids }"\n                                >\n                                    <sw-alert variant="info">\n                                        {{ $tc(\'sw-settings-tag.list.bulkMergeNotice\') }}\n                                    </sw-alert>\n                                    <p class="sw-settings-tag-list__confirm-bulk-merge-text">\n                                        <span v-if="!bulkMergeProgress.isRunning">\n                                            {{ $tc(\'sw-settings-tag.list.bulkMergeMessage\') }}\n                                        </span>\n                                        <span v-else>\n                                            {{ $tc(\'sw-settings-tag.list.bulkMerging\') }}\n                                        </span>\n                                        <span\n                                            v-for="(id, index) in ids"\n                                            :key="index"\n                                            class="confirm-bulk-merge-text__label"\n                                        >\n                                            <sw-label v-tooltip="{ message: selection[id].name }">\n                                                {{ selection[id].name }}\n                                            </sw-label>&nbsp;{{ getBulkMergeMessageGlue(ids, id) }}\n                                        </span>\n                                        <span\n                                            v-if="bulkMergeProgress.isRunning"\n                                            class="confirm-bulk-merge-text__label-into"\n                                        >\n                                            <sw-label v-tooltip="{ message: duplicateName }">{{ duplicateName }}</sw-label>&nbsp;.\n                                        </span>\n                                    </p>\n                                    <p v-if="bulkMergeProgress.isRunning">\n                                        {{ $tc(\'sw-settings-tag.list.bulkMergeTimeNotice\') }}\n                                    </p>\n                                    <p v-else>\n                                        {{ $tc(\'sw-settings-tag.list.bulkMergeNoUndoNotice\') }}\n                                    </p>\n                                </slot>\n\n                                \n                                {% block sw_settings_tag_list_merge_modal_confirm_name_input %}\n                                <slot name="bulk-modal-merge-confirm-name-input">\n                                    <p\n                                        v-if="!bulkMergeProgress.isRunning"\n                                        class="sw-settings-tag-list__confirm-bulk-merge-name-input"\n                                    >\n                                        <sw-text-field\n                                            v-model:value="duplicateName"\n                                            :label="$tc(\'sw-settings-tag.list.bulkMergeName\')"\n                                            :placeholder="$tc(\'sw-settings-tag.list.placeholderTagName\')"\n                                            maxlength="255"\n                                            required\n                                        />\n                                    </p>\n                                </slot>\n                                {% endblock %}\n\n                                \n                                {% block sw_settings_tag_list_merge_modal_progress %}\n                                <slot name="bulk-modal-merge-progress">\n                                    <div\n                                        v-if="bulkMergeProgress.isRunning"\n                                        class="sw-settings-tag-list__bulk-merge-progress"\n                                    >\n                                        <sw-loader\n                                            class="sw-settings-tag-list__bulk-merge-progress-icon"\n                                            size="44px"\n                                        />\n                                    </div>\n                                </slot>\n                                {% endblock %}\n\n                                <template #modal-footer>\n                                    <slot\n                                        name="bulk-modal-merge-footer"\n                                        v-bind="{ selection }"\n                                    >\n                                        <sw-button\n                                            size="small"\n                                            @click="onCloseBulkMergeModal"\n                                        >\n                                            {{ $tc(\'global.default.cancel\') }}\n                                        </sw-button>\n\n                                        <sw-button\n                                            variant="primary"\n                                            size="small"\n                                            :is-loading="isLoading"\n                                            :disabled="!duplicateName || bulkMergeProgress.isRunning || undefined"\n                                            @click="onMergeTags(selection)"\n                                        >\n                                            {{ $tc(\'sw-settings-tag.list.bulkMerge\') }}\n                                        </sw-button>\n                                    </slot>\n                                </template>\n                            </sw-modal>\n                        </template>\n                        {% endblock %}\n\n                        \n                        {% block sw_settings_tag_list_grid_column_default_name %}\n                        <template #column-name="{ item, column }">\n                            <sw-label v-tooltip="{ message: item.name }">\n                                {{ item.name }}\n                            </sw-label>\n                        </template>\n                        {% endblock %}\n\n                        \n                        {% block sw_settings_tag_list_grid_column_assignments %}\n                        <template\n                            v-for="(propertyName, index) in assignmentProperties"\n                            :key="index"\n                            #[`column-${propertyName}`]="{ item }"\n                        >\n                            <span\n                                class="sw-data-grid__cell-value"\n                            >\n                                {{ getPropertyCounting(propertyName, item.id) }}\n                                {{ $tc(`sw-settings-tag.list.assignments.content.${propertyName}`, getPropertyCounting(propertyName, item.id)) }}\n                            </span>\n                        </template>\n                        {% endblock %}\n\n                        \n                        {% block sw_settings_tag_list_grid_columns_actions %}\n                        <template #actions="{ item }">\n                            \n                            {% block sw_settings_tag_list_grid_columns_actions_edit %}\n                            <sw-context-menu-item\n                                class="sw-settings-tag-list__edit-action"\n                                :disabled="!acl.can(\'tag.editor\') || undefined"\n                                @click="onDetail(item.id)"\n                            >\n                                {{ $tc(\'sw-settings-tag.list.contextMenuEdit\') }}\n                            </sw-context-menu-item>\n                            {% endblock %}\n\n                            \n                            {% block sw_settings_tag_list_grid_columns_actions_duplicate %}\n                            <sw-context-menu-item\n                                :disabled="!acl.can(\'tag.creator\') || undefined"\n                                class="sw-settings-tag-list__duplicate-action"\n                                @click="onDuplicate(item)"\n                            >\n                                {{ $tc(\'sw-settings-tag.list.contextMenuDuplicate\') }}\n                            </sw-context-menu-item>\n                            {% endblock %}\n\n                            \n                            {% block sw_settings_tag_list_grid_columns_actions_delete %}\n                            <sw-context-menu-item\n                                class="sw-settings-tag-list__delete-action"\n                                variant="danger"\n                                :disabled="!acl.can(\'tag.deleter\') || undefined"\n                                @click="onDelete(item.id)"\n                            >\n                                {{ $tc(\'sw-settings-tag.list.contextMenuDelete\') }}\n                            </sw-context-menu-item>\n                            {% endblock %}\n                        </template>\n                        {% endblock %}\n\n                        \n                        {% block sw_settings_tag_list_grid_action_modals %}\n                        <template #action-modals="{ item }">\n                            \n                            {% block sw_settings_tag_list_delete_modal %}\n                            <sw-modal\n                                v-if="showDeleteModal === item.id"\n                                :title="$tc(\'global.default.warning\')"\n                                variant="small"\n                                @modal-close="onCloseDeleteModal"\n                            >\n                                \n                                {% block sw_settings_tag_list_delete_modal_confirm_delete_text %}\n                                <p class="sw-settings-tag-list__confirm-delete-text">\n                                    {{ $tc(\'sw-settings-tag.list.textDeleteConfirm\', 0, { name: item.name }) }}\n                                </p>\n                                {% endblock %}\n\n                                \n                                {% block sw_settings_tag_list_delete_modal_footer %}\n                                <template #modal-footer>\n                                    \n                                    {% block sw_settings_tag_list_delete_modal_cancel %}\n                                    <sw-button\n                                        size="small"\n                                        @click="onCloseDeleteModal"\n                                    >\n                                        {{ $tc(\'sw-settings-tag.list.buttonCancel\') }}\n                                    </sw-button>\n                                    {% endblock %}\n\n                                    \n                                    {% block sw_settings_tag_list_delete_modal_confirm %}\n                                    <sw-button\n                                        variant="danger"\n                                        size="small"\n                                        @click="onConfirmDelete(item.id)"\n                                    >\n                                        {{ $tc(\'sw-settings-tag.list.buttonDelete\') }}\n                                    </sw-button>\n                                    {% endblock %}\n                                </template>\n                                {% endblock %}\n                            </sw-modal>\n                            {% endblock %}\n\n                            \n                            {% block sw_settings_tag_list_duplicate_modal %}\n                            <sw-modal\n                                v-if="showDuplicateModal === item.id"\n                                :title="$tc(\'sw-settings-tag.list.contextMenuDuplicate\')"\n                                variant="small"\n                                @modal-close="onCloseDuplicateModal"\n                            >\n                                \n                                {% block sw_settings_tag_list_delete_modal_confirm_duplicate_input %}\n                                <p class="sw-settings-tag-list__confirm-duplicate-input">\n                                    <sw-text-field\n                                        v-model:value="duplicateName"\n                                        :label="$tc(\'sw-settings-tag.list.columnName\')"\n                                        :placeholder="$tc(\'sw-settings-tag.list.placeholderTagName\')"\n                                        maxlength="255"\n                                        required\n                                    />\n                                </p>\n                                {% endblock %}\n\n                                \n                                {% block sw_settings_tag_list_duplicate_modal_footer %}\n                                <template #modal-footer>\n                                    \n                                    {% block sw_settings_tag_list_duplicate_modal_cancel %}\n                                    <sw-button\n                                        size="small"\n                                        @click="onCloseDuplicateModal"\n                                    >\n                                        {{ $tc(\'sw-settings-tag.list.buttonCancel\') }}\n                                    </sw-button>\n                                    {% endblock %}\n\n                                    \n                                    {% block sw_settings_tag_list_duplicate_modal_confirm %}\n                                    <sw-button\n                                        variant="primary"\n                                        size="small"\n                                        :disabled="!duplicateName"\n                                        @click="onConfirmDuplicate(item.id)"\n                                    >\n                                        {{ $tc(\'sw-settings-tag.list.buttonAddTag\') }}\n                                    </sw-button>\n                                    {% endblock %}\n                                </template>\n                                {% endblock %}\n                            </sw-modal>\n                            {% endblock %}\n\n                            \n                            {% block sw_settings_tag_list_detail_edit_modal %}\n                            <sw-settings-tag-detail-modal\n                                v-if="showDetailModal === item.id"\n                                :edited-tag="item"\n                                :counts="getCounts(item.id)"\n                                :property="detailProperty"\n                                :entity="detailEntity"\n                                @finish="onSaveFinish"\n                                @close="onCloseDetailModal"\n                            />\n                            {% endblock %}\n                        </template>\n                        {% endblock %}\n                    </sw-entity-listing>\n                    {% endblock %}\n\n                    \n                    {% block sw_settings_tag_list_empty_state %}\n                    <sw-empty-state\n                        v-else\n                        :absolute="false"\n                        :show-description="false"\n                        :title="$tc(\'sw-settings-tag.list.titleEmptyStateList\')"\n                    />\n                    {% endblock %}\n\n                    \n                    {% block sw_settings_tag_list_detail_add_modal %}\n                    <sw-settings-tag-detail-modal\n                        v-if="showDetailModal === true"\n                        @finish="onSaveFinish"\n                        @close="onCloseDetailModal"\n                    />\n                    {% endblock %}\n                </template>\n            </sw-card>\n            {% endblock %}\n        </sw-card-view>\n    </template>\n    {% endblock %}\n</sw-page>\n{% endblock %}\n{% endblock %}\n',compatConfig:Shopware.compatConfig,inject:["repositoryFactory","acl","tagApiService"],mixins:[s.getByName("listing"),s.getByName("notification")],data(){return{tags:null,sortBy:"name",isLoading:!1,sortDirection:"ASC",showDeleteModal:!1,showDuplicateModal:!1,showBulkMergeModal:!1,duplicateName:null,showDetailModal:!1,detailProperty:null,detailEntity:null,assignmentFilter:null,emptyFilter:!1,duplicateFilter:!1,bulkMergeProgress:{isRunning:!1,currentAssignment:null,progress:0,total:0}}},metaInfo(){return{title:this.$createTitle()}},computed:{tagRepository(){return this.repositoryFactory.create("tag")},tagDefinition(){return Shopware.EntityDefinition.get("tag")},assignmentProperties(){let t=[];return Object.entries(this.tagDefinition.properties).forEach(([e,n])=>{"many_to_many"===n.relation&&t.push(e)}),t},tagCriteria(){let t=new i(this.page,this.limit);t.setTerm(this.term),this.setAggregations(t);let e="createdAt"===this.sortBy,n=i.sort(this.sortBy,this.sortDirection,e);return this.assignmentProperties.includes(this.sortBy)&&(n.field+=".id",n.type="count"),t.addSorting(n),t},tagColumns(){let t=[{property:"name",dataIndex:"name",label:"sw-settings-tag.list.columnName",routerLink:"sw.settings.tag.detail",width:"200px",primary:!0,allowResize:!0}];return this.assignmentProperties.forEach(e=>{t.push({property:`${e}`,label:this.$tc(`sw-settings-tag.list.assignments.header.${e}`),width:"250px",allowResize:!0,sortable:!0})}),t},assignmentFilterOptions(){let t=[];return Object.entries(this.tagDefinition.properties).forEach(([e,n])=>{"many_to_many"===n.relation&&t.push({value:e,label:this.$tc(`sw-settings-tag.list.assignments.filter.${e}`)})}),t.sort((t,e)=>t.label>e.label?1:e.label>t.label?-1:0),t},hasAssignmentFilter(){return this.assignmentFilter&&this.assignmentFilter.length>0},filterCount(){let t=0;return(this.hasAssignmentFilter||this.emptyFilter)&&(t+=1),this.duplicateFilter&&(t+=1),t}},methods:{setAggregations(t){Object.entries(this.tagDefinition.properties).forEach(([e,n])=>{"many_to_many"===n.relation&&t.addAggregation(i.terms(e,"id",null,null,i.count(e,`tag.${e}.id`)))})},getList(){if(this.isLoading=!0,this.$refs.swCardFilter&&this.$refs.swCardFilter.term!==this.term&&(this.$refs.swCardFilter.term=this.term??""),this.duplicateFilter||this.emptyFilter||this.hasAssignmentFilter){this.tagApiService.filterIds(this.tagCriteria.parse(),{duplicateFilter:this.duplicateFilter,emptyFilter:this.emptyFilter,assignmentFilter:this.assignmentFilter}).then(({total:t,ids:e})=>{if(this.total=t,0===t){this.tags=null,this.isLoading=!1;return}let n=new i(1,this.limit);n.setIds(e),n.setTotalCountMode(0),n.aggregations=this.tagCriteria.aggregations,n.associations=this.tagCriteria.associations,this.tagRepository.search(n).then(n=>(n.total=t,this.tags=this.sortByIdsOrder(n,e),this.isLoading=!1,n)).catch(()=>{this.isLoading=!1})}).catch(()=>{this.isLoading=!1});return}this.tagRepository.search(this.tagCriteria).then(t=>(this.total=t.total,this.tags=t,this.isLoading=!1,t)).catch(()=>{this.isLoading=!1})},sortByIdsOrder(t,e){return t.sort((t,n)=>e.indexOf(t.id)>e.indexOf(n.id)?1:-1),t},getCounts(t){let e={};return Object.entries(this.tagDefinition.properties).forEach(([n,s])=>{if("many_to_many"===s.relation){let s=this.tags.aggregations[n].buckets.filter(e=>e.key===t)[0];s[n]&&s[n].count&&(e[n]=s[n].count)}}),e},getPropertyCounting(t,e){if(!this.tags.aggregations[t])return 0;let n=this.tags.aggregations[t].buckets.filter(t=>t.key===e)[0];return n&&n[t]&&n[t].count?n[t].count:0},onDelete(t){this.showDeleteModal=t},onCloseDeleteModal(){this.showDeleteModal=!1},onConfirmDelete(t){return this.showDeleteModal=!1,this.$nextTick().then(()=>{this.isLoading=!0}),this.tagRepository.delete(t).then(()=>{this.getList()})},onDuplicate(t){this.showDuplicateModal=t.id,this.duplicateName=`${t.name} ${this.$tc("global.default.copy")}`},onCloseDuplicateModal(){this.showDuplicateModal=!1,this.duplicateName=null},onConfirmDuplicate(t){this.showDuplicateModal=!1,this.$nextTick().then(()=>{this.isLoading=!0});let e={cloneChildren:!1,overwrites:{name:this.duplicateName}};return this.tagRepository.clone(t,e,Shopware.Context.api).then(()=>{this.duplicateName=null,this.getList()}).catch(()=>{this.isLoading=!1,this.duplicateName=null,this.createNotificationError({message:this.$tc("global.notification.unspecifiedSaveErrorMessage")})})},onDetail(t,e,n){this.showDetailModal=t??!0,e&&n&&(this.detailProperty=e,this.detailEntity=n)},onCloseDetailModal(){this.showDetailModal=!1,this.detailProperty=null,this.detailEntity=null},onCloseBulkMergeModal(){this.bulkMergeProgress.isRunning=!1,this.showBulkMergeModal=!1,this.duplicateName=null},onMergeTags(t){return this.tagApiService.merge(Object.keys(t),this.duplicateName,this.tagDefinition.properties,this.bulkMergeProgress).then(()=>{this.duplicateName=null,this.$refs.swSettingsTagGrid.resetSelection(),this.bulkMergeProgress.isRunning=!1,this.showBulkMergeModal=!1,this.$nextTick().then(()=>{this.isLoading=!0}),this.onFilter()}).catch(()=>{this.bulkMergeProgress.isRunning=!1,this.createNotificationError({message:this.$tc("global.notification.unspecifiedSaveErrorMessage")})})},getBulkMergeMessageGlue(t,e){return t.length-1===t.indexOf(e)?this.bulkMergeProgress.isRunning?this.$tc("sw-settings-tag.list.bulkMergeInto"):this.$tc("sw-settings-tag.list.bulkMergeMessageFinal"):t.length-2===t.indexOf(e)?this.$tc("sw-settings-tag.list.bulkMergeMessageAnd"):","},onSaveFinish(){this.onCloseDetailModal(),this.$nextTick().then(()=>{this.getList()})},onFilter(){this.assignmentFilter&&this.emptyFilter&&(this.assignmentFilter=null),this.page=1,this.getList()},resetFilters(){this.assignmentFilter=null,this.emptyFilter=!1,this.duplicateFilter=!1,this.onFilter()}}}},614548:function(t,e,n){var s=n(32725);s.__esModule&&(s=s.default),"string"==typeof s&&(s=[[t.id,s,""]]),s.locals&&(t.exports=s.locals),n(745346).Z("58d7efd7",s,!0,{})}}]);