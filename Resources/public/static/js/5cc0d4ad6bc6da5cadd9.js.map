{"version":3,"sources":["webpack:///./src/module/sw-product/component/sw-product-variants/sw-product-variants-configurator/sw-product-variants-configurator-prices/index.js","webpack:///./src/module/sw-product/component/sw-product-variants/sw-product-variants-configurator/sw-product-variants-configurator-prices/sw-product-variants-configurator-prices.html.twig","webpack:///./src/module/sw-product/component/sw-product-variants/sw-product-variants-configurator/sw-product-variants-configurator-prices/sw-product-variants-configurator-prices.scss"],"names":["Criteria","Shopware","Data","template","inject","props","product","type","Object","required","selectedGroups","Array","data","activeGroup","term","optionsForGroup","currencies","isLoading","computed","currencyRepository","this","repositoryFactory","create","currenciesList","map","currency","id","name","symbol","optionColumns","defaultColumns","property","label","$tc","rawData","currenciesColumns","concat","allowResize","width","_toConsumableArray","watch","getOptionsForGroup","mounted","mountedComponent","methods","onSearchTermChange","loadCurrencies","_this","search","then","searchResult","_this2","configuratorSettings","filter","element","option","groupId","resetSurcharges","translated","toLowerCase","includes","force","arguments","length","undefined","isArray","price","$set","forEach","find","currencyId","newPriceForCurrency","gross","linked","net","push","getCurrencyOfOption","content","__esModule","default","module","i","locals","exports","add"],"mappings":"qJAOQA,G,UAAaC,SAASC,KAAtBF,UAGO,WACXG,SCXW,w8JDaXC,OAAQ,CAAC,qBAETC,MAAO,CACHC,QAAS,CACLC,KAAMC,OACNC,UAAU,GAGdC,eAAgB,CACZH,KAAMI,MACNF,UAAU,IAIlBG,KAAI,WACA,MAAO,CACHC,YAAa,GACbC,KAAM,GACNC,gBAAiB,GACjBC,WAAY,GACZC,WAAW,IAInBC,SAAU,CACNC,mBAAkB,WACd,OAAOC,KAAKC,kBAAkBC,OAAO,aAGzCC,eAAc,WACV,OAAOH,KAAKJ,WAAWQ,KAAI,SAACC,GACxB,MAAO,CACHC,GAAID,EAASC,GACbC,KAAMF,EAASE,KACfC,OAAQH,EAASG,YAK7BC,cAAa,WACT,IAAMC,EAAiB,CACnB,CACIC,SAAU,OACVC,MAAOZ,KAAKa,IAAI,wDAChBC,SAAS,IAIXC,EAAoBf,KAAKG,eAAeC,KAAI,SAACC,GAC/C,MAAO,CACHM,SAAS,YAADK,OAAcX,EAASC,IAC/BM,MAAOP,EAASE,KAChBO,SAAS,EACTG,aAAa,EACbC,MAAO,YAIf,MAAM,GAANF,OAAWN,EAAcS,IAAKJ,MAItCK,MAAO,CACH,YAAa,WACTpB,KAAKqB,uBAIbC,QAAO,WACHtB,KAAKuB,oBAGTC,QAAS,CACLC,mBAAkB,WACdzB,KAAKqB,sBAETE,iBAAgB,WACZvB,KAAKH,WAAY,EACjBG,KAAK0B,kBAGTA,eAAc,WAAI,IAADC,EAAA,KACb3B,KAAKD,mBACA6B,OAAO,IAAIhD,EAAS,EAAG,KACvBiD,MAAK,SAACC,GACHH,EAAK/B,WAAakC,MAI9BT,mBAAkB,WAAI,IAADU,EAAA,KACjB/B,KAAKL,gBAAkBK,KAAKd,QAAQ8C,qBAE/BC,QAAO,SAACC,GACL,OAAIA,EAAQC,OAAOC,UAAYL,EAAKtC,YAAYa,KAC5CyB,EAAKM,gBAAgBH,IACd,MAKdD,QAAO,SAACC,GAAO,OAAKA,EAAQC,OAAOG,WAAW/B,KAAKgC,cAAcC,SAAST,EAAKrC,KAAK6C,mBAG7FF,gBAAe,SAACF,GAAwB,IAAhBM,EAAKC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,IAAAA,UAAA,GAErBnD,MAAMsD,QAAQV,EAAOW,QAAUX,EAAOW,OAASX,EAAOW,MAAMH,OAAS,IAAMF,IAK/EzC,KAAK+C,KAAKZ,EAAQ,QAAS,IAC3BnC,KAAKG,eAAe6C,SAAQ,SAAC3C,GACzB,IAAK8B,EAAOW,MAAMG,MAAK,SAAAH,GAAK,OAAIA,EAAMI,aAAe7C,EAASC,MAAK,CAC/D,IAAM6C,EAAsB,CACxBD,WAAY7C,EAASC,GACrB8C,MAAO,EACPC,QAAQ,EACRC,IAAK,GAETnB,EAAOW,MAAMS,KAAKJ,SAK9BK,oBAAmB,SAACrB,EAAQe,GACxB,OAAOf,EAAOW,MAAMG,MAAK,SAAC5C,GAAQ,OAAKA,EAAS6C,aAAeA,S,qBEvI3E,IAAIO,EAAU,EAAQ,QACnBA,EAAQC,aAAYD,EAAUA,EAAQE,SACnB,iBAAZF,IAAsBA,EAAU,CAAC,CAACG,EAAOC,EAAIJ,EAAS,MAC7DA,EAAQK,SAAQF,EAAOG,QAAUN,EAAQK,SAG/BE,EADH,EAAQ,QAA8EL,SAC/E,WAAYF,GAAS,EAAM,K","file":"static/js/5cc0d4ad6bc6da5cadd9.js","sourcesContent":["/*\n * @package inventory\n */\n\nimport template from './sw-product-variants-configurator-prices.html.twig';\nimport './sw-product-variants-configurator-prices.scss';\n\nconst { Criteria } = Shopware.Data;\n\n// eslint-disable-next-line sw-deprecation-rules/private-feature-declarations\nexport default {\n    template,\n\n    inject: ['repositoryFactory'],\n\n    props: {\n        product: {\n            type: Object,\n            required: true,\n        },\n\n        selectedGroups: {\n            type: Array,\n            required: true,\n        },\n    },\n\n    data() {\n        return {\n            activeGroup: {},\n            term: '',\n            optionsForGroup: [],\n            currencies: {},\n            isLoading: true,\n        };\n    },\n\n    computed: {\n        currencyRepository() {\n            return this.repositoryFactory.create('currency');\n        },\n\n        currenciesList() {\n            return this.currencies.map((currency) => {\n                return {\n                    id: currency.id,\n                    name: currency.name,\n                    symbol: currency.symbol,\n                };\n            });\n        },\n\n        optionColumns() {\n            const defaultColumns = [\n                {\n                    property: 'name',\n                    label: this.$tc('sw-product.variations.configuratorModal.priceOptions'),\n                    rawData: true,\n                },\n            ];\n\n            const currenciesColumns = this.currenciesList.map((currency) => {\n                return {\n                    property: `currency.${currency.id}`,\n                    label: currency.name,\n                    rawData: true,\n                    allowResize: true,\n                    width: '200px',\n                };\n            });\n\n            return [...defaultColumns, ...currenciesColumns];\n        },\n    },\n\n    watch: {\n        'activeGroup'() {\n            this.getOptionsForGroup();\n        },\n    },\n\n    mounted() {\n        this.mountedComponent();\n    },\n\n    methods: {\n        onSearchTermChange() {\n            this.getOptionsForGroup();\n        },\n        mountedComponent() {\n            this.isLoading = false;\n            this.loadCurrencies();\n        },\n\n        loadCurrencies() {\n            this.currencyRepository\n                .search(new Criteria(1, 25))\n                .then((searchResult) => {\n                    this.currencies = searchResult;\n                });\n        },\n\n        getOptionsForGroup() {\n            this.optionsForGroup = this.product.configuratorSettings\n                // Filter if option is in active group\n                .filter((element) => {\n                    if (element.option.groupId === this.activeGroup.id) {\n                        this.resetSurcharges(element);\n                        return true;\n                    }\n                    return false;\n                })\n                // Filter if search term matches option name\n                .filter((element) => element.option.translated.name.toLowerCase().includes(this.term.toLowerCase()));\n        },\n\n        resetSurcharges(option, force = false) {\n            // check if surcharge exists\n            if (Array.isArray(option.price) && option.price && option.price.length > 0 && !force) {\n                return;\n            }\n\n            // set empty surcharge\n            this.$set(option, 'price', []);\n            this.currenciesList.forEach((currency) => {\n                if (!option.price.find(price => price.currencyId === currency.id)) {\n                    const newPriceForCurrency = {\n                        currencyId: currency.id,\n                        gross: 0,\n                        linked: true,\n                        net: 0,\n                    };\n                    option.price.push(newPriceForCurrency);\n                }\n            });\n        },\n\n        getCurrencyOfOption(option, currencyId) {\n            return option.price.find((currency) => currency.currencyId === currencyId);\n        },\n    },\n};\n","export default \"\\n{% block sw_product_variants_configurator_prices %}\\n<div class=\\\"sw-product-variants-configurator-prices\\\">\\n    <sw-alert\\n        class=\\\"sw-product-variants-configurator-prices__alert\\\"\\n        variant=\\\"info\\\"\\n    >\\n        {{ $tc('sw-product.variations.configuratorModal.surchargeNotice') }}\\n    </sw-alert>\\n    <div class=\\\"sw-product-variants-configurator-prices__table\\\">\\n        \\n        {% block sw_product_variants_configurator_prices_groups %}\\n        <div class=\\\"sw-product-variants-configurator-prices__groups\\\">\\n            <ul>\\n                <li\\n                    v-for=\\\"group in selectedGroups\\\"\\n                    :key=\\\"group.id\\\"\\n                    class=\\\"sw-product-variants-configurator-prices__groupElement\\\"\\n                    :class=\\\"{'is--selected': activeGroup.id == group.id}\\\"\\n                    role=\\\"button\\\"\\n                    tabindex=\\\"0\\\"\\n                    @click=\\\"activeGroup = group\\\"\\n                    @keydown.enter=\\\"activeGroup = group\\\"\\n                >\\n                    <sw-icon\\n                        name=\\\"regular-folder\\\"\\n                        size=\\\"16px\\\"\\n                        multicolor\\n                    />\\n                    {{ group.translated.name }}\\n                </li>\\n            </ul>\\n        </div>\\n        {% endblock %}\\n\\n        \\n        {% block sw_product_variants_configurator_prices_prices %}\\n        <div class=\\\"sw-product-variants-configurator-prices__prices\\\">\\n            \\n            {% block sw_product_variants_configurator_prices_search %}\\n            <div class=\\\"sw-product-variants-configurator-prices__search\\\">\\n                \\n                {% block sw_product_variants_configurator_prices_search_field %}\\n                <sw-simple-search-field\\n                    v-model=\\\"term\\\"\\n                    size=\\\"small\\\"\\n                    variant=\\\"form\\\"\\n                    :placeholder=\\\"$tc('sw-product.variations.configuratorModal.searchPlaceholder')\\\"\\n                />\\n                {% endblock %}\\n            </div>\\n            {% endblock %}\\n\\n            \\n            {% block sw_product_variants_configurator_prices_grid_wrapper %}\\n            <div class=\\\"sw-product-variants-configurator-prices__grid-wrapper\\\">\\n                \\n                {% block sw_product_variants_configurator_prices_data_grid %}\\n                <sw-data-grid\\n                    v-if=\\\"optionsForGroup.length\\\"\\n                    :data-source=\\\"optionsForGroup\\\"\\n                    :show-selection=\\\"false\\\"\\n                    :columns=\\\"optionColumns\\\"\\n                    show-settings\\n                    full-page\\n                >\\n\\n                    \\n                    {% block sw_product_variants_configurator_prices_column_name %}\\n                    <template\\n                        #column-name=\\\"{ item, isInlineEdit, compact }\\\"\\n                    >\\n                        {{ item.option.translated.name }}\\n                    </template>\\n                    {% endblock %}\\n\\n                    \\n                    {% block sw_product_variants_configurator_prices_column_currency %}\\n                    <template\\n                        v-for=\\\"currency in currenciesList\\\"\\n                        {% if VUE3 %}\\n                        :key=\\\"currency.id\\\"\\n                        {% endif %}\\n                        #[`column-currency.${currency.id}`]=\\\"{ item, isInlineEdit, compact }\\\"\\n                    >\\n\\n                        <sw-product-variants-price-field\\n                            {% if VUE2 %}\\n                            :key=\\\"currency.id\\\"\\n                            {% endif %}\\n                            :price=\\\"getCurrencyOfOption(item, currency.id)\\\"\\n                            :tax-rate=\\\"product.taxId\\\"\\n                            :currency=\\\"currency\\\"\\n                            compact\\n                        />\\n                    </template>\\n                    {% endblock %}\\n\\n                    \\n                    {% block sw_product_variants_configurator_prices_actions %}\\n                    <template\\n                        #actions=\\\"{ item }\\\"\\n                    >\\n                        \\n                        {% block sw_product_variants_configurator_prices_actions_items %}\\n                        <sw-context-menu-item\\n                            variant=\\\"danger\\\"\\n                            @click=\\\"resetSurcharges(item, true)\\\"\\n                        >\\n                            {{ $tc('sw-product.variations.configuratorModal.resetSurcharges') }}\\n                        </sw-context-menu-item>\\n                        {% endblock %}\\n                    </template>\\n                    {% endblock %}\\n                </sw-data-grid>\\n                {% endblock %}\\n            </div>\\n            {% endblock %}\\n        </div>\\n        {% endblock %}\\n    </div>\\n    \\n    {% block sw_product_variants_configurator_prices_loader %}\\n    <sw-loader v-if=\\\"isLoading\\\" />\\n    {% endblock %}\\n\\n</div>\\n{% endblock %}\\n\";","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../../../../../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--15-1!../../../../../../../node_modules/css-loader/dist/cjs.js??ref--15-2!../../../../../../../node_modules/sass-loader/dist/cjs.js??ref--15-3!./sw-product-variants-configurator-prices.scss\");\nif(content.__esModule) content = content.default;\nif(typeof content === 'string') content = [[module.id, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar add = require(\"!../../../../../../../node_modules/vue-style-loader/lib/addStylesClient.js\").default\nvar update = add(\"7e5a9ac6\", content, true, {});"],"sourceRoot":""}