{"version":3,"sources":["webpack:///./src/module/sw-cms/component/sw-cms-product-assignment/sw-cms-product-assignment.scss","webpack:///./src/module/sw-cms/component/sw-cms-product-assignment/sw-cms-product-assignment.html.twig","webpack:///./src/module/sw-cms/component/sw-cms-product-assignment/index.js"],"names":["content","__esModule","default","module","i","locals","exports","add","Criteria","Shopware","Data","template","data","steps","watch","criteria","immediate","handler","this","gridCriteria","fromCriteria","searchCriteria","paginateGrid","entityCollection","selectedIds","getIds","languageId","created","createdComponent","methods","initData","page","searchItems","_this","searchRepository","search","context","then","result","limit","setIds","onItemSelect","item","isSelected","removeItem","gridData","$emit","remove","id","Promise","resolve","onSelectCollapsed","resultCollection","focusEl","blur","_ref","arguments","length","undefined","isLoadingGrid","currentPaginateCollection","slice","removeFromGrid","_this2"],"mappings":"wGAGA,IAAIA,EAAU,EAAQ,QACnBA,EAAQC,aAAYD,EAAUA,EAAQE,SACnB,iBAAZF,IAAsBA,EAAU,CAAC,CAACG,EAAOC,EAAIJ,EAAS,MAC7DA,EAAQK,SAAQF,EAAOG,QAAUN,EAAQK,SAG/BE,EADH,EAAQ,QAAwEL,SACzE,WAAYF,GAAS,EAAM,K,mDCT7B,ICGPQ,EAAaC,SAASC,KAAtBF,SAMO,WACXG,SDVW,mhPCWXC,KAAI,WACA,MAAO,CACHC,MAAO,CAAC,KAIhBC,MAAO,CACHC,SAAU,CACNC,WAAW,EACXC,QAAO,WACHC,KAAKC,aAAeX,EAASY,aAAaF,KAAKH,UAC/CG,KAAKG,eAAiBb,EAASY,aAAaF,KAAKH,UAEjDG,KAAKI,iBAIbC,iBAAgB,WACZL,KAAKM,YAAcN,KAAKK,iBAAiBE,SAEzCP,KAAKI,gBAGTI,WAAU,WACNR,KAAKI,iBAIbK,QAAO,WACHT,KAAKU,oBAGTC,QAAS,CACLD,iBAAgB,WACZV,KAAKY,YAGTA,SAAQ,WACJZ,KAAKa,KAAO,EACZb,KAAKM,YAAcN,KAAKK,iBAAiBE,UAG7CO,YAAW,WAAI,IAADC,EAAA,KACV,OAAOf,KAAKgB,iBAAiBC,OAAOjB,KAAKG,eAAgBH,KAAKkB,SAASC,MAAK,SAACC,GAIzE,OAHiB,IAAI9B,EAAS,EAAGyB,EAAKZ,eAAekB,OAC5CC,OAAOF,EAAOb,UAEhBa,MAIfG,aAAY,SAACC,GACLxB,KAAKyB,WAAWD,GAChBxB,KAAK0B,WAAWF,IAIpBxB,KAAKK,iBAAiBhB,IAAImC,GAE1BxB,KAAKM,YAAcN,KAAKK,iBAAiBE,SACzCP,KAAK2B,SAAW3B,KAAKK,iBAErBL,KAAK4B,MAAM,SAAU5B,KAAKK,oBAG9BqB,WAAU,SAACF,GAOP,OANAxB,KAAKK,iBAAiBwB,OAAOL,EAAKM,IAElC9B,KAAKM,YAAcN,KAAKK,iBAAiBE,SACzCP,KAAK2B,SAAW3B,KAAKK,iBACrBL,KAAK4B,MAAM,SAAU5B,KAAKK,kBAEnB0B,QAAQC,WAInBC,kBAAiB,WACbjC,KAAKkC,iBAAmB,KACxBlC,KAAKmC,QAAQC,OAEbpC,KAAKI,gBAGTA,aAAY,WAAuC,IAADiC,EAAAC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAnBtC,KAAKC,aAArBY,EAAIwB,EAAJxB,KAAMQ,EAAKgB,EAALhB,MACjBrB,KAAKC,aAAaY,KAAOA,EACzBb,KAAKC,aAAaoB,MAAQA,EAC1BrB,KAAKyC,eAAgB,EACrB,IAAMC,EAA4B1C,KAAKK,iBAAiBsC,OAAO9B,EAAO,GAAKQ,GAAQR,EAAO,GAAKQ,EAAQA,GACvGrB,KAAK2B,SAAWe,EAChB1C,KAAKyC,eAAgB,EACrBzC,KAAK4B,MAAM,WAAY5B,KAAK2B,WAGhCiB,eAAc,SAACpB,GAAO,IAADqB,EAAA,KACjB7C,KAAK0B,WAAWF,GAAML,MAAK,WACvB0B,EAAKzC,sB","file":"static/js/ff520ee0cb41c7baf20b.js","sourcesContent":["// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../../../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--15-1!../../../../../node_modules/css-loader/dist/cjs.js??ref--15-2!../../../../../node_modules/sass-loader/dist/cjs.js??ref--15-3!./sw-cms-product-assignment.scss\");\nif(content.__esModule) content = content.default;\nif(typeof content === 'string') content = [[module.id, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar add = require(\"!../../../../../node_modules/vue-style-loader/lib/addStylesClient.js\").default\nvar update = add(\"49fe2d68\", content, true, {});","export default \"\\n{% block sw_entity_many_to_many_assignment_card %}\\n<div\\n    class=\\\"sw-cms-product-assignment\\\"\\n    v-bind=\\\"$attrs\\\"\\n>\\n    \\n    {% block sw_cms_product_assignment_content %}\\n    <div class=\\\"sw-cms-product-assignment__select-container\\\">\\n        \\n        {% block sw_cms_product_assignment_select %}\\n        <slot name=\\\"select\\\">\\n            <sw-select-base\\n                v-bind=\\\"$attrs\\\"\\n                ref=\\\"selectBase\\\"\\n                class=\\\"sw-cms-product-assignment-select\\\"\\n                :disabled=\\\"disabled\\\"\\n                :label=\\\"selectLabel\\\"\\n                :is-loading=\\\"isLoadingResults\\\"\\n                v-on=\\\"$listeners\\\"\\n                @select-expanded=\\\"onSelectExpanded\\\"\\n                @select-collapsed=\\\"onSelectCollapsed\\\"\\n            >\\n\\n                <template #sw-select-selection=\\\"{ identification, error, disabled, size, expand, collapse }\\\">\\n                    \\n                    {% block sw_cms_product_assignment_search_field %}\\n                    <input\\n                        ref=\\\"searchInput\\\"\\n                        tabindex=\\\"-1\\\"\\n                        :placeholder=\\\"placeholder\\\"\\n                        :value=\\\"searchTerm\\\"\\n                        :disabled=\\\"disabled\\\"\\n                        @input=\\\"onSearchTermChange\\\"\\n                    >\\n                    {% endblock %}\\n                </template>\\n\\n                <template #results-list>\\n                    \\n                    {% block sw_cms_product_assignment_results_list %}\\n                    <sw-select-result-list\\n                        ref=\\\"swSelectResultList\\\"\\n                        :options=\\\"resultCollection\\\"\\n                        :is-loading=\\\"isLoadingResults\\\"\\n                        :empty-message=\\\"$tc('global.sw-entity-many-to-many-select.messageNoResults', 0, { term: searchTerm })\\\"\\n                        :focus-el=\\\"$refs.searchInput\\\"\\n                        @paginate=\\\"paginateResult\\\"\\n                        @item-select=\\\"onItemSelect\\\"\\n                    >\\n\\n                        \\n                        {% block sw_cms_product_assignment_results_list_before %}\\n                        <template #before-item-list>\\n                            \\n                            {% block sw_cms_product_assignment_results_list_before_content %}\\n                            <slot name=\\\"before-item-list\\\"></slot>\\n                        {% endblock %}\\n                        </template>\\n                        {% endblock %}\\n\\n                        \\n                        {% block sw_cms_product_assignment_results_list_result %}\\n                        <template #result-item=\\\"{ item, index }\\\">\\n                            \\n                            {% block sw_cms_product_assignment_results_list_result_content %}\\n                            <slot\\n                                name=\\\"result-item\\\"\\n                                v-bind=\\\"{ item, index, labelProperty, valueProperty: 'id', searchTerm, highlightSearchTerm, isSelected, onItemSelect, getKey }\\\"\\n                            >\\n\\n                                \\n                                {% block sw_cms_product_assignment_results_list_list_item %}\\n                                <sw-select-result\\n                                    :selected=\\\"isSelected(item)\\\"\\n                                    v-bind=\\\"{ item, index }\\\"\\n                                    @item-select=\\\"onItemSelect\\\"\\n                                >\\n\\n                                    \\n                                    {% block sw_cms_product_assignment_results_list_list_item_label %}\\n                                    <slot\\n                                        name=\\\"result-label-property\\\"\\n                                        v-bind=\\\"{ item, index, labelProperty, valueProperty: 'id', searchTerm, highlightSearchTerm, getKey }\\\"\\n                                    >\\n\\n                                        <sw-highlight-text\\n                                            v-if=\\\"highlightSearchTerm\\\"\\n                                            :text=\\\"getKey(item, `translated.${labelProperty}`)\\\"\\n                                            :search-term=\\\"searchTerm\\\"\\n                                        />\\n\\n                                        <template v-else>\\n                                            {{ getKey(item, `translated.${labelProperty}`) }}\\n                                        </template>\\n                                    </slot>\\n                                {% endblock %}\\n                                </sw-select-result>\\n                            {% endblock %}\\n                            </slot>\\n                        {% endblock %}\\n                        </template>\\n                        {% endblock %}\\n\\n                        \\n                        {% block sw_cms_product_assignment_results_list_after %}\\n                        <template #after-item-list>\\n                            \\n                            {% block sw_cms_product_assignment_results_list_after_content %}\\n                            <slot name=\\\"after-item-list\\\"></slot>\\n                        {% endblock %}\\n                        </template>\\n                    {% endblock %}\\n                    </sw-select-result-list>\\n                    {% endblock %}\\n                </template>\\n            </sw-select-base>\\n        </slot>\\n        {% endblock %}\\n    </div>\\n    {% endblock %}\\n\\n    \\n    {% block sw_cms_product_assignment_grid %}\\n    <sw-data-grid\\n        class=\\\"sw-cms-product-assignment__grid\\\"\\n        :data-source=\\\"gridData\\\"\\n        :is-loading=\\\"isLoadingGrid\\\"\\n        :columns=\\\"columns\\\"\\n        :v-bind=\\\"$attrs\\\"\\n        :show-selection=\\\"false\\\"\\n        :plain-appearance=\\\"true\\\"\\n    >\\n\\n        \\n        {% block sw_cms_product_assignment_grid_column %}\\n        <template\\n            v-for=\\\"column in columns\\\"\\n            #[`column-${column.property}`]=\\\"columnProps\\\"\\n        >\\n            \\n            {% block sw_cms_product_assignment_grid_column_content %}\\n            <slot\\n                :name=\\\"`column-${column.property}`\\\"\\n                v-bind=\\\"{ ...columnProps, searchTerm, highlightSearchTerm }\\\"\\n            ></slot>\\n            {% endblock %}\\n        </template>\\n        {% endblock %}\\n\\n        \\n        {% block sw_cms_product_assignment_grid_column_actions %}\\n        <template #actions=\\\"{ item }\\\">\\n            \\n            {% block sw_cms_product_assignment_grid_column_actions_content %}\\n            <sw-context-menu-item\\n                variant=\\\"danger\\\"\\n                :disabled=\\\"disabled\\\"\\n                @click=\\\"removeFromGrid(item)\\\"\\n            >\\n                {{ $tc('global.entity-components.labelRemoveAssociation') }}\\n            </sw-context-menu-item>\\n            {% endblock %}\\n        </template>\\n        {% endblock %}\\n\\n        \\n        {% block sw_cms_product_assignment_grid_footer %}\\n        <template #pagination>\\n            \\n            {% block sw_cms_product_assignment_grid_footer_content %}\\n            <sw-pagination\\n                v-if=\\\"total > 0\\\"\\n                v-bind=\\\"{ limit, page, total }\\\"\\n                :steps=\\\"steps\\\"\\n                :auto-hide=\\\"false\\\"\\n                @page-change=\\\"paginateGrid\\\"\\n            />\\n\\n            <div\\n                v-else\\n                class=\\\"sw-cms-product-assignment__empty-state\\\"\\n            >\\n                <slot name=\\\"empty-state\\\"></slot>\\n            </div>\\n            {% endblock %}\\n        </template>\\n        {% endblock %}\\n    </sw-data-grid>\\n    {% endblock %}\\n</div>\\n{% endblock %}\\n\";","import template from './sw-cms-product-assignment.html.twig';\nimport './sw-cms-product-assignment.scss';\n\nconst { Criteria } = Shopware.Data;\n\n/**\n * @private\n * @package buyers-experience\n */\nexport default {\n    template,\n    data() {\n        return {\n            steps: [5],\n        };\n    },\n\n    watch: {\n        criteria: {\n            immediate: true,\n            handler() {\n                this.gridCriteria = Criteria.fromCriteria(this.criteria);\n                this.searchCriteria = Criteria.fromCriteria(this.criteria);\n\n                this.paginateGrid();\n            },\n        },\n\n        entityCollection() {\n            this.selectedIds = this.entityCollection.getIds();\n\n            this.paginateGrid();\n        },\n\n        languageId() {\n            this.paginateGrid();\n        },\n    },\n\n    created() {\n        this.createdComponent();\n    },\n\n    methods: {\n        createdComponent() {\n            this.initData();\n        },\n\n        initData() {\n            this.page = 1;\n            this.selectedIds = this.entityCollection.getIds();\n        },\n\n        searchItems() {\n            return this.searchRepository.search(this.searchCriteria, this.context).then((result) => {\n                const criteria = new Criteria(1, this.searchCriteria.limit);\n                criteria.setIds(result.getIds());\n\n                return result;\n            });\n        },\n\n        onItemSelect(item) {\n            if (this.isSelected(item)) {\n                this.removeItem(item);\n                return;\n            }\n\n            this.entityCollection.add(item);\n\n            this.selectedIds = this.entityCollection.getIds();\n            this.gridData = this.entityCollection;\n\n            this.$emit('change', this.entityCollection);\n        },\n\n        removeItem(item) {\n            this.entityCollection.remove(item.id);\n\n            this.selectedIds = this.entityCollection.getIds();\n            this.gridData = this.entityCollection;\n            this.$emit('change', this.entityCollection);\n\n            return Promise.resolve();\n        },\n\n\n        onSelectCollapsed() {\n            this.resultCollection = null;\n            this.focusEl.blur();\n\n            this.paginateGrid();\n        },\n\n        paginateGrid({ page, limit } = this.gridCriteria) {\n            this.gridCriteria.page = page;\n            this.gridCriteria.limit = limit;\n            this.isLoadingGrid = true;\n            const currentPaginateCollection = this.entityCollection.slice((page - 1) * limit, (page - 1) * limit + limit);\n            this.gridData = currentPaginateCollection;\n            this.isLoadingGrid = false;\n            this.$emit('paginate', this.gridData);\n        },\n\n        removeFromGrid(item) {\n            this.removeItem(item).then(() => {\n                this.paginateGrid();\n            });\n        },\n    },\n};\n"],"sourceRoot":""}