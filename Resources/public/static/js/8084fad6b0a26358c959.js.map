{"version":3,"sources":["webpack:///./src/module/sw-settings-listing/page/sw-settings-listing/index.js","webpack:///./src/module/sw-settings-listing/page/sw-settings-listing/sw-settings-listing.html.twig","webpack:///./src/module/sw-settings-listing/page/sw-settings-listing/sw-settings-listing.scss"],"names":["Criteria","Shopware","Data","template","inject","mixins","data","isLoading","isSaveSuccessful","productSortingOptions","sortingOptionsGridLimit","sortingOptionsGridPage","modalVisible","toBeDeletedProductSortingOption","productSortingOptionsSearchTerm","isProductSortingOptionsCardLoading","isDefaultSalesChannelLoading","customFields","computed","productSortingOptionRepository","this","repositoryFactory","create","customFieldRepository","salesChannelRepository","productSortingsOptionsCriteria","criteria","addSorting","sort","addFilter","equals","productSortingOptionsSearchCriteria","contains","sortingOptionsGridTotal","total","customFieldCriteria","productSortingOptionColumns","property","routerLink","label","$tc","multiLine","inlineEdit","assetFilter","Filter","getByName","created","createdComponent","methods","saveFinish","fetchProductSortingOptions","fetchCustomFields","_this","search","then","response","_this2","onSave","_this3","_asyncToGenerator","_regeneratorRuntime","mark","_callee","saveSalesChannelConfig","saveProductSortingOptions","saveSalesChannelVisibilityConfig","wrap","_context","prev","next","$refs","systemConfig","saveAll","sent","setDefaultSortingActive","defaultSalesChannelCard","Promise","all","createNotificationSuccess","message","catch","createNotificationError","finally","stop","onDeleteProductSorting","item","_this4","delete","id","checkForPagination","newTotal","onPageChange","page","limit","_ref","_ref$page","_ref$limit","onEditProductSortingOption","productSortingId","$router","push","name","params","formatProductSortingOptionField","fields","_this5","Array","isArray","map","currentField","isItemACustomField","field","getCustomFieldLabelByCriteriaName","concat","join","criteriaName","technicalName","stripCustomFieldPath","customField","getCustomFieldByName","inlineSnippet","getInlineSnippet","config","find","currentCustomField","onAddNewProductSortingOption","onSearchProductSortingOptions","_this6","onSaveProductSortingOptionInlineEdit","newProductSortingOption","_this7","indexOfOldProductSortingOption","findIndex","currentElement","fieldName","strippedFieldName","some","getCustomFieldById","replace","isProductSortingEditable","locked","onChangeLanguage","defaultSortingKey","actualConfigData","null","Object","entries","forEach","_ref2","productSorting","_slicedToArray","key","active","isItemDefaultSorting","sortingKey","onLoadingChanged","loading","content","__esModule","default","module","i","locals","exports","add"],"mappings":"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","file":"static/js/8084fad6b0a26358c959.js","sourcesContent":["/**\n * @package inventory\n */\nimport template from './sw-settings-listing.html.twig';\nimport './sw-settings-listing.scss';\n\nconst { Criteria } = Shopware.Data;\n\n// eslint-disable-next-line sw-deprecation-rules/private-feature-declarations\nexport default {\n    template,\n\n    inject: ['repositoryFactory'],\n\n    mixins: [\n        'notification',\n        'sw-inline-snippet',\n    ],\n\n    data() {\n        return {\n            isLoading: false,\n            isSaveSuccessful: false,\n            productSortingOptions: [],\n            sortingOptionsGridLimit: 10,\n            sortingOptionsGridPage: 1,\n            modalVisible: false,\n            toBeDeletedProductSortingOption: null,\n            productSortingOptionsSearchTerm: null,\n            isProductSortingOptionsCardLoading: false,\n            isDefaultSalesChannelLoading: false,\n            customFields: [],\n        };\n    },\n\n    computed: {\n        productSortingOptionRepository() {\n            return this.repositoryFactory.create('product_sorting');\n        },\n\n        customFieldRepository() {\n            return this.repositoryFactory.create('custom_field');\n        },\n\n        salesChannelRepository() {\n            return this.repositoryFactory.create('sales_channel');\n        },\n\n        productSortingsOptionsCriteria() {\n            const criteria = new Criteria(this.sortingOptionsGridPage, this.sortingOptionsGridLimit);\n\n            criteria.addSorting(\n                Criteria.sort('priority', 'DESC'),\n            );\n\n            criteria.addFilter(\n                Criteria.equals('locked', false),\n            );\n\n            return criteria;\n        },\n\n        productSortingOptionsSearchCriteria() {\n            const criteria = new Criteria(1, 25);\n\n            criteria.addFilter(\n                Criteria.contains('label', this.productSortingOptionsSearchTerm),\n            );\n\n            return criteria;\n        },\n\n        sortingOptionsGridTotal() {\n            return this.productSortingOptions.total;\n        },\n\n        customFieldCriteria() {\n            return new Criteria(1, 25);\n        },\n\n        productSortingOptionColumns() {\n            return [\n                {\n                    property: 'label',\n                    routerLink: 'sw.settings.listing.edit',\n                    label: this.$tc('sw-settings-listing.index.productSorting.grid.header.name'),\n                },\n                {\n                    property: 'criteria',\n                    label: this.$tc('sw-settings-listing.index.productSorting.grid.header.criteria'),\n                    multiLine: true,\n                },\n                {\n                    property: 'priority',\n                    inlineEdit: 'number',\n                    label: this.$tc('sw-settings-listing.index.productSorting.grid.header.priority'),\n                },\n            ];\n        },\n\n        assetFilter() {\n            return Shopware.Filter.getByName('asset');\n        },\n    },\n\n    created() {\n        this.createdComponent();\n    },\n\n    methods: {\n        saveFinish() {\n            this.isSaveSuccessful = false;\n        },\n\n        createdComponent() {\n            this.fetchProductSortingOptions();\n            this.fetchCustomFields();\n        },\n\n        fetchProductSortingOptions() {\n            this.isProductSortingOptionsCardLoading = true;\n\n            this.productSortingOptionRepository.search(this.productSortingsOptionsCriteria).then(response => {\n                this.productSortingOptions = response;\n\n                this.isProductSortingOptionsCardLoading = false;\n            });\n        },\n\n        fetchCustomFields() {\n            this.customFieldRepository.search(this.customFieldCriteria).then(response => {\n                this.customFields = response;\n            });\n        },\n\n        async onSave() {\n            this.isSaveSuccessful = false;\n            this.isLoading = true;\n\n            const saveSalesChannelConfig = await this.$refs.systemConfig.saveAll();\n\n            this.setDefaultSortingActive();\n\n            const saveProductSortingOptions = await this.saveProductSortingOptions();\n\n            const saveSalesChannelVisibilityConfig = await this.$refs.defaultSalesChannelCard\n                .saveSalesChannelVisibilityConfig();\n\n            Promise.all([saveSalesChannelConfig, saveProductSortingOptions, saveSalesChannelVisibilityConfig])\n                .then(() => {\n                    this.isSaveSuccessful = true;\n\n                    this.createNotificationSuccess({\n                        message: this.$tc('sw-settings-listing.general.messageSaveSuccess'),\n                    });\n                })\n                .catch(() => {\n                    this.createNotificationError({\n                        message: this.$tc('sw-settings-listing.general.messageSaveError'),\n                    });\n                })\n                .finally(() => {\n                    this.isLoading = false;\n                });\n        },\n\n        saveProductSortingOptions() {\n            return this.productSortingOptionRepository.saveAll(this.productSortingOptions);\n        },\n\n        onDeleteProductSorting(item) {\n            // closes modal\n            this.toBeDeletedProductSortingOption = null;\n\n            this.productSortingOptionRepository.delete(item.id)\n                .catch(() => {\n                    this.createNotificationError({\n                        message: this.$tc('sw-settings-listing.index.productSorting.messageDeleteError'),\n                    });\n                })\n                .finally(() => {\n                    this.fetchProductSortingOptions();\n                    this.checkForPagination();\n                });\n        },\n\n        /**\n         * check, if we need to paginate back, when deleting the last sorting option on a page\n         */\n        checkForPagination() {\n            if (this.sortingOptionsGridPage !== 1) {\n                const newTotal = this.productSortingOptions.total - 1;\n\n                if ((this.sortingOptionsGridPage * this.sortingOptionsGridLimit) >= newTotal) {\n                    this.onPageChange({\n                        page: this.sortingOptionsGridPage - 1,\n                        limit: this.sortingOptionsGridLimit,\n                    });\n                }\n            }\n        },\n\n        onPageChange({ page = 1, limit = 10 }) {\n            this.sortingOptionsGridPage = page;\n            this.sortingOptionsGridLimit = limit;\n\n            this.fetchProductSortingOptions();\n        },\n\n        onEditProductSortingOption(productSortingId) {\n            this.$router.push({ name: 'sw.settings.listing.edit', params: { id: productSortingId } });\n        },\n\n        formatProductSortingOptionField(fields) {\n            if (!Array.isArray(fields)) {\n                return '';\n            }\n\n            const labels = fields.map(currentField => {\n                if (this.isItemACustomField(currentField.field)) {\n                    return this.getCustomFieldLabelByCriteriaName(currentField.field);\n                }\n\n                return this.$tc(\n                    `sw-settings-listing.general.productSortingCriteriaGrid.options.label.${currentField.field}`,\n                );\n            });\n\n            return labels.join(', ');\n        },\n\n        getCustomFieldLabelByCriteriaName(criteriaName) {\n            const technicalName = this.stripCustomFieldPath(criteriaName);\n            const customField = this.getCustomFieldByName(technicalName);\n\n            const inlineSnippet = this.getInlineSnippet(customField.config.label);\n\n            if (inlineSnippet === null) {\n                return technicalName;\n            }\n\n            return inlineSnippet;\n        },\n\n        getCustomFieldByName(technicalName) {\n            return this.customFields.find(currentCustomField => {\n                return currentCustomField.name === technicalName;\n            });\n        },\n\n        onAddNewProductSortingOption() {\n            this.$router.push({ name: 'sw.settings.listing.create' });\n        },\n\n        onSearchProductSortingOptions() {\n            const searchTerm = this.productSortingOptionsSearchTerm;\n\n            if (!searchTerm) {\n                this.fetchProductSortingOptions();\n                return;\n            }\n\n            this.productSortingOptionRepository.search(this.productSortingOptionsSearchCriteria).then(response => {\n                this.productSortingOptions = response;\n            });\n        },\n\n        onSaveProductSortingOptionInlineEdit(newProductSortingOption) {\n            const indexOfOldProductSortingOption = this.productSortingOptions.findIndex(currentElement => {\n                return currentElement.id === newProductSortingOption.id;\n            });\n\n            this.productSortingOptions[indexOfOldProductSortingOption] = newProductSortingOption;\n\n            this.onSave().then(() => {\n                this.fetchProductSortingOptions();\n            });\n        },\n\n        isItemACustomField(fieldName) {\n            const strippedFieldName = this.stripCustomFieldPath(fieldName);\n\n            return this.customFields.some(currentCustomField => {\n                return currentCustomField.name === strippedFieldName;\n            });\n        },\n\n        getCustomFieldById(id) {\n            const customField = this.customFields.find(currentCustomField => {\n                return currentCustomField.id === id;\n            });\n\n            return customField.name;\n        },\n\n        stripCustomFieldPath(fieldName) {\n            return fieldName.replace(/customFields\\./, '');\n        },\n\n        isProductSortingEditable(item) {\n            return !item.locked;\n        },\n\n        onChangeLanguage() {\n            this.fetchProductSortingOptions();\n        },\n\n        setDefaultSortingActive() {\n            const defaultSortingKey = this.$refs.systemConfig.actualConfigData.null['core.listing.defaultSorting'];\n\n            if (defaultSortingKey) {\n                Object.entries(this.productSortingOptions).forEach(([, productSorting]) => {\n                    if (productSorting.key === defaultSortingKey) {\n                        productSorting.active = true;\n                    }\n                });\n            }\n        },\n\n        isItemDefaultSorting(sortingKey) {\n            const systemSettingAvailable = !!this.$refs.systemConfig.actualConfigData.null;\n\n            if (!systemSettingAvailable) {\n                return null;\n            }\n\n            return sortingKey === this.$refs.systemConfig.actualConfigData.null['core.listing.defaultSorting'];\n        },\n\n        onLoadingChanged(loading) {\n            this.isLoading = loading;\n        },\n    },\n};\n","export default \"\\n{% block sw_settings_listing_index %}\\n<sw-page class=\\\"sw-settings-listing-index\\\">\\n\\n    \\n    {% block sw_settings_listing_search_bar %}\\n    <template #search-bar>\\n        <sw-search-bar />\\n    </template>\\n    {% endblock %}\\n\\n    <template #language-switch>\\n        <sw-language-switch @on-change=\\\"onChangeLanguage\\\" />\\n    </template>\\n\\n    \\n    {% block sw_settings_listing_smart_bar_header %}\\n    <template #smart-bar-header>\\n        \\n        {% block sw_settings_listing_smart_bar_header_title %}\\n        <h2>\\n            \\n            {% block sw_settings_listing_smart_bar_header_title_text %}\\n            {{ $tc('sw-settings.index.title') }}\\n            <sw-icon\\n                name=\\\"regular-chevron-right-xs\\\"\\n                small\\n            />\\n            {{ $tc('sw-settings-listing.general.textHeadline') }}\\n            {% endblock %}\\n\\n            \\n            {% block sw_settings_listing_smart_bar_header_amount %}{% endblock %}\\n        </h2>\\n        {% endblock %}\\n    </template>\\n    {% endblock %}\\n\\n    \\n    {% block sw_settings_listing_smart_bar_actions %}\\n    <template #smart-bar-actions>\\n        \\n        {% block sw_settings_listing_actions_save %}\\n        <sw-button-process\\n            class=\\\"sw-settings-listing__save-action\\\"\\n            :is-loading=\\\"isLoading\\\"\\n            :process-success=\\\"isSaveSuccessful\\\"\\n            :disabled=\\\"isLoading\\\"\\n            variant=\\\"primary\\\"\\n            {% if VUE3 %}\\n            @update:process-success=\\\"saveFinish\\\"\\n            {% else %}\\n            @process-finish=\\\"saveFinish\\\"\\n            {% endif %}\\n            @click=\\\"onSave\\\"\\n        >\\n            {{ $tc('sw-settings-listing.general.buttonSave') }}\\n        </sw-button-process>\\n        {% endblock %}\\n    </template>\\n    {% endblock %}\\n\\n    \\n    {% block sw_settings_listing_content %}\\n    <template #content>\\n\\n        \\n        {% block sw_settings_listing_content_card_view %}\\n        <sw-card-view>\\n            <template v-if=\\\"isLoading\\\">\\n                <sw-skeleton />\\n                <sw-skeleton />\\n            </template>\\n\\n            {# v-show is used here as underlying components influence the loading state and v-if would destroy this behaviour #}\\n            <div v-show=\\\"!isLoading\\\">\\n                \\n                {% block sw_settings_listing_content_card_view_default_sales_channel %}\\n                <sw-card\\n                    class=\\\"sw-settings-listing__sales-channel-card\\\"\\n                    position-identifier=\\\"sw-settings-listing-sales-channel\\\"\\n                    :title=\\\"$tc('sw-settings-listing.index.defaultSalesChannel.title')\\\"\\n                >\\n                    <sw-settings-listing-default-sales-channel\\n                        ref=\\\"defaultSalesChannelCard\\\"\\n                        :is-loading=\\\"isLoading\\\"\\n                    />\\n                </sw-card>\\n                {% endblock %}\\n\\n                \\n                {% block sw_settings_listing_content_card_view_system_config %}\\n                <sw-system-config\\n                    ref=\\\"systemConfig\\\"\\n                    sales-channel-switchable\\n                    domain=\\\"core.listing\\\"\\n                    @loading-changed=\\\"onLoadingChanged\\\"\\n                >\\n\\n                    <template #afterElements=\\\"{ config, index }\\\">\\n                        \\n                        {% block sw_settings_listing_content_card_view_system_config_default_sorting_select %}\\n                        <sw-single-select\\n                            v-if=\\\"config && index === 0\\\"\\n                            {% if VUE3 %}\\n                            v-model:value=\\\"config['core.listing.defaultSorting']\\\"\\n                            {% else %}\\n                            v-model=\\\"config['core.listing.defaultSorting']\\\"\\n                            {% endif %}\\n                            class=\\\"sw-settings-listing-index__default-sorting-select\\\"\\n                            :label=\\\"$tc('sw-settings-listing.general.labelDefaultSorting')\\\"\\n                            :placeholder=\\\"$tc('sw-settings-listing.general.placeholderDefaultSorting')\\\"\\n                            :options=\\\"productSortingOptions\\\"\\n                            label-property=\\\"label\\\"\\n                            value-property=\\\"key\\\"\\n                            show-clearable-button\\n                        />\\n                        {% endblock %}\\n                    </template>\\n\\n                </sw-system-config>\\n                {% endblock %}\\n\\n                \\n                {% block sw_settings_listing_content_card_view_options_card %}\\n                <sw-card\\n                    class=\\\"sw-settings-listing-index__sorting-options-card\\\"\\n                    position-identifier=\\\"sw-settings-listing-sorting-options\\\"\\n                    :title=\\\"$tc('sw-settings-listing.index.productSorting.title')\\\"\\n                    :is-loading=\\\"isProductSortingOptionsCardLoading\\\"\\n                >\\n\\n                    \\n                    {% block sw_settings_listing_content_card_view_options_card_toolbar %}\\n                    <template #toolbar>\\n\\n                        \\n                        {% block sw_settings_listing_content_card_view_options_card_toolbar_container %}\\n                        <sw-container\\n                            columns=\\\"1fr auto\\\"\\n                            gap=\\\"0 10px\\\"\\n                            align=\\\"start\\\"\\n                        >\\n\\n                            \\n                            {% block sw_settings_listing_content_card_view_options_card_toolbar_search_field %}\\n                            <sw-simple-search-field\\n                                {% if VUE3 %}\\n                                v-model:value=\\\"productSortingOptionsSearchTerm\\\"\\n                                {% else %}\\n                                v-model=\\\"productSortingOptionsSearchTerm\\\"\\n                                {% endif %}\\n                                variant=\\\"form\\\"\\n                                size=\\\"small\\\"\\n                                class=\\\"sw-settings-listing-index__sorting-options-search-field\\\"\\n                                @search-term-change=\\\"onSearchProductSortingOptions\\\"\\n                            />\\n                            {% endblock %}\\n\\n                            \\n                            {% block sw_settings_listing_content_card_view_options_card_toolbar_add_product_option %}\\n                            <sw-button\\n                                variant=\\\"ghost\\\"\\n                                size=\\\"small\\\"\\n                                @click=\\\"onAddNewProductSortingOption\\\"\\n                            >\\n                                {{ $tc('sw-settings-listing.index.productSorting.addButton') }}\\n                            </sw-button>\\n                            {% endblock %}\\n                        </sw-container>\\n                        {% endblock %}\\n                    </template>\\n                    {% endblock %}\\n\\n                    \\n                    {% block sw_settings_listing_content_card_view_options_card_grid %}\\n                    <sw-data-grid\\n                        v-if=\\\"productSortingOptions.length > 0\\\"\\n                        :compact-mode=\\\"false\\\"\\n                        :columns=\\\"productSortingOptionColumns\\\"\\n                        :data-source=\\\"productSortingOptions\\\"\\n                        allow-inline-edit\\n                        plain-appearance\\n                        :show-selection=\\\"false\\\"\\n                        :is-record-editable=\\\"item => !item.locked\\\"\\n                        @inline-edit-save=\\\"onSaveProductSortingOptionInlineEdit\\\"\\n                    >\\n\\n                        \\n                        {% block sw_settings_listing_content_card_view_options_card_grid_column_criteria %}\\n                        <template #column-criteria=\\\"{item}\\\">\\n\\n                            \\n                            {% block sw_settings_listing_content_card_view_options_card_grid_column_criteria_text %}\\n                            <span\\n                                class=\\\"is--truncate\\\"\\n                                :title=\\\"formatProductSortingOptionField(item.fields)\\\"\\n                            >\\n                                {{ formatProductSortingOptionField(item.fields) }}\\n                            </span>\\n                            {% endblock %}\\n                        </template>\\n                        {% endblock %}\\n\\n                        \\n                        {% block sw_settings_listing_content_card_view_options_card_grid_column_actions %}\\n                        <template #actions=\\\"{item}\\\">\\n\\n                            \\n                            {% block sw_settings_listing_content_card_view_options_card_grid_column_actions_edit %}\\n                            <sw-context-menu-item\\n                                :disabled=\\\"item.locked\\\"\\n                                @click=\\\"onEditProductSortingOption(item.id)\\\"\\n                            >\\n                                {{ $tc('global.default.edit') }}\\n                            </sw-context-menu-item>\\n                            {% endblock %}\\n\\n                            \\n                            {% block sw_settings_listing_content_card_view_options_card_grid_column_actions_delete %}\\n                            <sw-context-menu-item\\n                                variant=\\\"danger\\\"\\n                                :disabled=\\\"item.locked || isItemDefaultSorting(item.key)\\\"\\n                                @click=\\\"toBeDeletedProductSortingOption = item\\\"\\n                            >\\n                                {{ $tc('global.default.delete') }}\\n                            </sw-context-menu-item>\\n                            {% endblock %}\\n                        </template>\\n                        {% endblock %}\\n\\n                        \\n                        {% block sw_settings_listing_content_card_view_options_card_grid_pagination %}\\n                        <template #pagination>\\n                            <sw-pagination\\n                                :page=\\\"sortingOptionsGridPage\\\"\\n                                :total=\\\"sortingOptionsGridTotal\\\"\\n                                :limit=\\\"sortingOptionsGridLimit\\\"\\n                                :steps=\\\"[10]\\\"\\n                                @page-change=\\\"onPageChange\\\"\\n                            />\\n                        </template>\\n                        {% endblock %}\\n                    </sw-data-grid>\\n                    {% endblock %}\\n\\n                    \\n                    {% block sw_settings_listing_content_card_view_options_card_empty_state %}\\n                    <sw-empty-state\\n                        v-else\\n                        class=\\\"sw-settings-listing-index__sorting-options-empty-state\\\"\\n                        :title=\\\"$tc('sw-settings-listing.index.productSorting.emptyState.title')\\\"\\n                        :subline=\\\"$tc('sw-settings-listing.index.productSorting.emptyState.subline')\\\"\\n                        :absolute=\\\"false\\\"\\n                    >\\n\\n                        \\n                        {% block sw_settings_listing_content_card_view_options_card_empty_state_icon %}\\n                        <template #icon>\\n                            <img\\n                                :src=\\\"assetFilter('administration/static/img/empty-states/settings-empty-state.svg')\\\"\\n                                :alt=\\\"$tc('sw-settings-listing.index.productSorting.emptyState.title')\\\"\\n                            >\\n                        </template>\\n                        {% endblock %}\\n                    </sw-empty-state>\\n                    {% endblock %}\\n                </sw-card>\\n                {% endblock %}\\n            </div>\\n        </sw-card-view>\\n        {% endblock %}\\n\\n        \\n        {% block sw_settings_listing_content_card_view_options_delete_modal %}\\n        <sw-settings-listing-delete-modal\\n            v-if=\\\"toBeDeletedProductSortingOption\\\"\\n            :title=\\\"$tc('sw-settings-listing.index.deleteModal.title')\\\"\\n            :description=\\\"$t('sw-settings-listing.index.deleteModal.description', {\\n                'sortingOptionName': toBeDeletedProductSortingOption.label\\n            })\\\"\\n            @cancel=\\\"toBeDeletedProductSortingOption = null\\\"\\n            @delete=\\\"onDeleteProductSorting(toBeDeletedProductSortingOption)\\\"\\n        />\\n        {% endblock %}\\n    </template>\\n    {% endblock %}\\n</sw-page>\\n{% endblock %}\\n\";","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../../../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--15-1!../../../../../node_modules/css-loader/dist/cjs.js??ref--15-2!../../../../../node_modules/sass-loader/dist/cjs.js??ref--15-3!./sw-settings-listing.scss\");\nif(content.__esModule) content = content.default;\nif(typeof content === 'string') content = [[module.id, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar add = require(\"!../../../../../node_modules/vue-style-loader/lib/addStylesClient.js\").default\nvar update = add(\"2b989758\", content, true, {});"],"sourceRoot":""}