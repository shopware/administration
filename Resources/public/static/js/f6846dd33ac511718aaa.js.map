{"version":3,"sources":["webpack:///./src/module/sw-flow/component/modals/sw-flow-tag-modal/index.js","webpack:///./src/module/sw-flow/component/modals/sw-flow-tag-modal/sw-flow-tag-modal.html.twig"],"names":["_Shopware","Shopware","Component","Mixin","Context","ShopwareError","Classes","_Shopware$Data","Data","EntityCollection","Criteria","mapState","getComponentHelper","template","inject","mixins","getByName","props","sequence","type","Object","required","action","String","default","data","isLoading","entity","entityOptions","tagCollection","tagError","entityError","computed","_objectSpread","tagCriteria","criteria","config","this","tagIds","keys","length","addFilter","equalsAny","isNewTag","_this$sequence","id","tagRepository","repositoryFactory","create","tagTitle","match","$tc","watch","value","created","createdComponent","methods","getEntityOptions","createTagCollection","_this$sequence2","getTagCollection","_this","search","then","tags","catch","route","entityName","api","onAddTag","add","onRemoveTag","remove","_this$triggerEvent$aw","triggerEvent","allowedAware","aware","options","flowBuilderService","getAvailableEntities","triggerActions","getConfig","forEach","tag","assign","_defineProperty","name","fieldError","field","code","onSaveTag","$emit","onClose"],"mappings":"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","file":"static/js/f6846dd33ac511718aaa.js","sourcesContent":["import template from './sw-flow-tag-modal.html.twig';\n\nconst { Component, Mixin, Context } = Shopware;\nconst { ShopwareError } = Shopware.Classes;\nconst { EntityCollection, Criteria } = Shopware.Data;\nconst { mapState } = Component.getComponentHelper();\n\n/**\n * @private\n * @package services-settings\n */\nexport default {\n    template,\n\n    inject: [\n        'acl',\n        'repositoryFactory',\n        'flowBuilderService',\n    ],\n\n    mixins: [\n        Mixin.getByName('placeholder'),\n        Mixin.getByName('notification'),\n    ],\n\n    props: {\n        sequence: {\n            type: Object,\n            required: true,\n        },\n        action: {\n            type: String,\n            required: false,\n            default: null,\n        },\n    },\n\n    data() {\n        return {\n            isLoading: false,\n            entity: null,\n            entityOptions: [],\n            tagCollection: null,\n            tagError: null,\n            entityError: null,\n        };\n    },\n\n    computed: {\n        tagCriteria() {\n            const criteria = new Criteria(1, 25);\n            const { config } = this.sequence;\n            const tagIds = Object.keys(config.tagIds);\n            if (tagIds.length) {\n                criteria.addFilter(Criteria.equalsAny('id', tagIds));\n            }\n\n            return criteria;\n        },\n\n        isNewTag() {\n            return !this.sequence?.id;\n        },\n\n        tagRepository() {\n            return this.repositoryFactory.create('tag');\n        },\n\n        tagTitle() {\n            if (!this.action) return '';\n\n            if (this.action.match(/add.*tag/)) {\n                return this.$tc('sw-flow.modals.tag.labelAddTag');\n            }\n\n            if (this.action.match(/remove.*tag/)) {\n                return this.$tc('sw-flow.modals.tag.labelRemoveTag');\n            }\n\n            return '';\n        },\n\n        ...mapState('swFlowState', ['triggerEvent', 'triggerActions']),\n    },\n\n    watch: {\n        entity(value) {\n            if (value && this.entityError) {\n                this.entityError = null;\n            }\n        },\n\n        tagCollection(value) {\n            if (value && this.tagError) {\n                this.tagError = null;\n            }\n        },\n    },\n\n    created() {\n        this.createdComponent();\n    },\n\n    methods: {\n        createdComponent() {\n            this.getEntityOptions();\n            this.tagCollection = this.createTagCollection();\n\n            const { config, id } = this.sequence;\n\n            if (config?.entity) {\n                this.entity = config?.entity;\n            }\n\n            if (id && config?.tagIds) {\n                this.getTagCollection();\n            }\n        },\n\n        getTagCollection() {\n            return this.tagRepository.search(this.tagCriteria)\n                .then(tags => {\n                    this.tagCollection = tags;\n                })\n                .catch(() => {\n                    this.tagCollection = [];\n                });\n        },\n\n        createTagCollection() {\n            return new EntityCollection(\n                this.tagRepository.route,\n                this.tagRepository.entityName,\n                Context.api,\n            );\n        },\n\n        onAddTag(data) {\n            this.tagCollection.add(data);\n        },\n\n        onRemoveTag(data) {\n            this.tagCollection.remove(data);\n        },\n\n        getEntityOptions() {\n            if (!this.triggerEvent) {\n                this.entityOptions = [];\n                return;\n            }\n\n            const allowedAware = this.triggerEvent.aware ?? [];\n            // eslint-disable-next-line max-len\n            const options = this.flowBuilderService.getAvailableEntities(this.action, this.triggerActions, allowedAware, ['tags']);\n\n            if (options.length) {\n                this.entity = options[0].value;\n            }\n\n            this.entityOptions = options;\n        },\n\n        getConfig() {\n            const tagIds = {};\n            this.tagCollection.forEach(tag => {\n                Object.assign(tagIds, {\n                    [tag.id]: tag.name,\n                });\n            });\n\n            const config = {\n                entity: this.entity,\n                tagIds,\n            };\n            return config;\n        },\n\n        fieldError(field) {\n            if (!field || !field.length) {\n                return new ShopwareError({\n                    code: 'c1051bb4-d103-4f74-8988-acbcafc7fdc3',\n                });\n            }\n\n            return null;\n        },\n\n        onSaveTag() {\n            this.tagError = this.fieldError(this.tagCollection);\n            this.entityError = this.fieldError(this.entity);\n            if (this.tagError || this.entityError) {\n                return;\n            }\n\n            const config = this.getConfig();\n            const data = {\n                ...this.sequence,\n                config,\n            };\n            this.$emit('process-finish', data);\n            this.onClose();\n        },\n\n        onClose() {\n            this.tagError = null;\n            this.$emit('modal-close');\n        },\n    },\n};\n","export default \"\\n{% block sw_flow_tag_modal %}\\n<sw-modal\\n    class=\\\"sw-flow-tag-modal\\\"\\n    :title=\\\"tagTitle\\\"\\n    :closable=\\\"false\\\"\\n    @modal-close=\\\"onClose\\\"\\n>\\n    \\n    {% block sw_flow_tag_modal_content %}\\n    <div class=\\\"sw-flow-tag-modal__content\\\">\\n        \\n        {% block sw_flow_tag_modal_to_field %}\\n        <sw-single-select\\n            {% if VUE3 %}\\n            v-model:value=\\\"entity\\\"\\n            {% else %}\\n            v-model=\\\"entity\\\"\\n            {% endif %}\\n            class=\\\"sw-flow-tag-modal__to-field\\\"\\n            required\\n            show-clearable-button\\n            :label=\\\"$tc('sw-flow.modals.tag.labelToField')\\\"\\n            :placeholder=\\\"$tc('sw-flow.modals.tag.placeholderToField')\\\"\\n            :error=\\\"entityError\\\"\\n            :options=\\\"entityOptions\\\"\\n        />\\n        {% endblock %}\\n\\n        \\n        {% block sw_flow_tag_modal_tags_field %}\\n        <sw-entity-tag-select\\n            v-model=\\\"tagCollection\\\"\\n            class=\\\"sw-flow-tag-modal__tags-field\\\"\\n            required\\n            :label=\\\"$tc('sw-flow.modals.tag.labelTagsField')\\\"\\n            :placeholder=\\\"$tc('sw-flow.modals.tag.placeholderTagsField')\\\"\\n            :error=\\\"tagError\\\"\\n            @item-add=\\\"onAddTag\\\"\\n            @item-remove=\\\"onRemoveTag\\\"\\n        />\\n        {% endblock %}\\n\\n        \\n        {% block sw_flow_tag_modal_content_custom %}\\n        {% endblock %}\\n    </div>\\n    {% endblock %}\\n\\n    <template #modal-footer>\\n        \\n        {% block sw_flow_tag_modal_footer_cancel_button %}\\n        <sw-button\\n            class=\\\"sw-flow-tag-modal__cancel-button\\\"\\n            size=\\\"small\\\"\\n            @click=\\\"onClose\\\"\\n        >\\n            {{ $tc('global.default.cancel') }}\\n        </sw-button>\\n        {% endblock %}\\n\\n        \\n        {% block sw_flow_tag_modal_footer_save_button %}\\n        <sw-button\\n            class=\\\"sw-flow-tag-modal__save-button\\\"\\n            variant=\\\"primary\\\"\\n            size=\\\"small\\\"\\n            @click=\\\"onSaveTag\\\"\\n        >\\n            {{ isNewTag ? $tc('sw-flow.modals.buttonAddAction') : $tc('sw-flow.modals.buttonSaveAction') }}\\n        </sw-button>\\n        {% endblock %}\\n    </template>\\n</sw-modal>\\n{% endblock %}\\n\";"],"sourceRoot":""}