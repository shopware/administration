{"version":3,"sources":["webpack:///./src/module/sw-settings-product-feature-sets/service/feature-grid-translation.service.js","webpack:///./src/module/sw-settings-product-feature-sets/page/sw-settings-product-feature-sets-list/index.js","webpack:///./src/module/sw-settings-product-feature-sets/page/sw-settings-product-feature-sets-list/sw-settings-product-feature-sets-list.html.twig"],"names":["Criteria","Shopware","Data","FeatureGridTranslationService","component","propertyGroupRepository","customFieldRepository","_classCallCheck","this","entities","property","customField","_createClass","key","value","features","_fetchEntities","type","filterBy","repo","_this","length","Promise","resolve","identifier","filter","map","criteria","addFilter","equalsAny","search","Context","api","then","items","item","$tc","concat","name","group","id","translated","pop","language","State","get","currentLocale","fallback","app","fallbackLocale","field","config","label","Mixin","template","inject","mixins","getByName","data","entityName","productFeatureSets","sortBy","isLoading","sortDirection","naturalSorting","showDeleteModal","translationService","metaInfo","title","$createTitle","computed","productFeatureSetsRepository","repositoryFactory","create","featureGridTranslationService","methods","getList","page","limit","setTerm","term","addSorting","sort","total","allFeatures","reduce","featureSet","_toConsumableArray","all","fetchPropertyGroupEntities","fetchCustomFieldEntities","onChangeLanguage","languageId","commit","onInlineEditSave","promise","_this2","createNotificationSuccess","message","catch","createNotificationError","onDelete","onCloseDeleteModal","onConfirmDelete","_this3","delete","getProductFeatureSetsColumns","inlineEdit","routerLink","allowResize","primary","renderFeaturePreview","_this4","preview","slice","feature","getNameTranslation","join"],"mappings":"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","file":"static/js/be8e98140b0b7c1ed5f7.js","sourcesContent":["/**\n * @package inventory\n */\nconst { Criteria } = Shopware.Data;\n\n// eslint-disable-next-line sw-deprecation-rules/private-feature-declarations\nexport default class FeatureGridTranslationService {\n    /**\n     * @param {Vue} component\n     * @param {Repository} propertyGroupRepository\n     * @param {Repository} customFieldRepository\n     */\n    constructor(component, propertyGroupRepository, customFieldRepository) {\n        this.component = component;\n        this.propertyGroupRepository = propertyGroupRepository;\n        this.customFieldRepository = customFieldRepository;\n\n        this.entities = {\n            property: [],\n            customField: [],\n        };\n    }\n\n    /**\n     * @param {array} features\n     */\n    fetchPropertyGroupEntities(features) {\n        return this._fetchEntities(features, 'property', 'id', this.propertyGroupRepository);\n    }\n\n    /**\n     * @param {array} features\n     */\n    fetchCustomFieldEntities(features) {\n        return this._fetchEntities(features, 'customField', 'name', this.customFieldRepository);\n    }\n\n    /**\n     * @private\n     *\n     * @param {array} features\n     * @param {string} type\n     * @param {string} filterBy\n     * @param {Repository} repo\n     */\n    _fetchEntities(features, type, filterBy, repo) {\n        if (!features || features.length < 1) {\n            return Promise.resolve();\n        }\n\n        const identifier = features.filter(value => value.type === type).map(value => value[filterBy]);\n\n        if (identifier.length < 1) {\n            return Promise.resolve();\n        }\n\n        const criteria = new Criteria(1, 25);\n\n        criteria.addFilter(Criteria.equalsAny(\n            filterBy,\n            identifier,\n        ));\n\n        return repo.search(criteria, Shopware.Context.api).then((items) => {\n            this.entities[type] = items;\n        });\n    }\n\n    /**\n     * @param {Object} item\n     * @param {string} item.type\n     * @param {string} item.name\n     * @param {string} item.id\n     */\n    getNameTranslation(item) {\n        if (item.type === 'product') {\n            return this.component.$tc(`sw-settings-product-feature-sets.modal.label.${item.name}`);\n        }\n\n        if (item.type === 'property') {\n            return this.entities.property\n                .filter(group => group.id === item.id)\n                .map(group => group.translated.name)\n                .pop();\n        }\n\n        if (item.type === 'customField') {\n            const language = Shopware.State.get('session').currentLocale;\n            const fallback = Shopware.Context.app.fallbackLocale;\n\n            return this.entities.customField\n                .filter(field => field.name === item.name)\n                .map(field => (field.config.label[language] || field.config.label[fallback]))\n                .pop();\n        }\n\n        if (item.type === 'referencePrice') {\n            return this.component.$tc('sw-settings-product-feature-sets.modal.label.referencePrice');\n        }\n\n        return '';\n    }\n\n    /**\n     * @param {Object} item\n     * @param {string} item.type\n     * @param {string} item.name\n     */\n    getTypeTranslation(item) {\n        if (item.type === 'product') {\n            return this.component.$tc('sw-settings-product-feature-sets.modal.textProductInfoLabel');\n        }\n\n        if (item.type === 'property') {\n            return this.component.$tc('sw-settings-product-feature-sets.modal.textPropertyLabel');\n        }\n\n        if (item.type === 'customField') {\n            return this.component.$tc('sw-settings-product-feature-sets.modal.textCustomFieldLabel');\n        }\n\n        if (item.type === 'referencePrice') {\n            return this.component.$tc('sw-settings-product-feature-sets.modal.textReferencePriceLabel');\n        }\n\n        return '';\n    }\n}\n","/**\n * @package inventory\n */\n// eslint-disable-next-line max-len\nimport FeatureGridTranslationService from 'src/module/sw-settings-product-feature-sets/service/feature-grid-translation.service';\nimport template from './sw-settings-product-feature-sets-list.html.twig';\n\nconst { Mixin } = Shopware;\nconst { Criteria } = Shopware.Data;\n\n// eslint-disable-next-line sw-deprecation-rules/private-feature-declarations\nexport default {\n    template,\n\n    inject: ['repositoryFactory', 'acl'],\n\n    mixins: [\n        Mixin.getByName('listing'),\n        Mixin.getByName('notification'),\n    ],\n\n    data() {\n        return {\n            entityName: 'product_feature_set',\n            productFeatureSets: null,\n            sortBy: 'product_feature_set.name',\n            isLoading: false,\n            sortDirection: 'ASC',\n            naturalSorting: true,\n            showDeleteModal: false,\n            translationService: null,\n        };\n    },\n\n    metaInfo() {\n        return {\n            title: this.$createTitle(),\n        };\n    },\n\n    computed: {\n        productFeatureSetsRepository() {\n            return this.repositoryFactory.create('product_feature_set');\n        },\n\n        propertyGroupRepository() {\n            return this.repositoryFactory.create('property_group');\n        },\n\n        customFieldRepository() {\n            return this.repositoryFactory.create('custom_field');\n        },\n\n        featureGridTranslationService() {\n            if (this.translationService === null) {\n                // eslint-disable-next-line vue/no-side-effects-in-computed-properties\n                this.translationService = new FeatureGridTranslationService(\n                    this,\n                    this.propertyGroupRepository,\n                    this.customFieldRepository,\n                );\n            }\n\n            return this.translationService;\n        },\n    },\n\n    methods: {\n        metaInfo() {\n            return {\n                title: this.$createTitle(),\n            };\n        },\n\n        getList() {\n            this.isLoading = true;\n            this.naturalSorting = this.sortBy === 'name';\n\n            const criteria = new Criteria(this.page, this.limit);\n            criteria.setTerm(this.term);\n            criteria.addSorting(Criteria.sort(this.sortBy, this.sortDirection, this.naturalSorting));\n\n            this.productFeatureSetsRepository.search(criteria).then((items) => {\n                this.total = items.total;\n                this.productFeatureSets = items;\n\n                return items;\n            }).then((items) => {\n                const allFeatures = items.reduce((features, featureSet) => {\n                    if (featureSet.features && featureSet.features.length) {\n                        features = [...features, ...(featureSet.features || [])];\n                    }\n                    return features;\n                }, []);\n\n                return Promise.all([\n                    this.featureGridTranslationService.fetchPropertyGroupEntities(allFeatures),\n                    this.featureGridTranslationService.fetchCustomFieldEntities(allFeatures),\n                ]);\n            }).then(() => {\n                this.isLoading = false;\n            });\n        },\n\n        onChangeLanguage(languageId) {\n            Shopware.State.commit('context/setApiLanguageId', languageId);\n            this.getList();\n        },\n\n        onInlineEditSave(promise, productFeatureSets) {\n            promise.then(() => {\n                this.createNotificationSuccess({\n                    message: this.$tc(\n                        'sw-settings-product-feature-sets.detail.messageSaveSuccess',\n                        0,\n                        { name: productFeatureSets.name },\n                    ),\n                });\n            }).catch(() => {\n                this.getList();\n                this.createNotificationError({\n                    message: this.$tc('sw-settings-product-feature-sets.detail.messageSaveError'),\n                });\n            });\n        },\n\n        onDelete(id) {\n            this.showDeleteModal = id;\n        },\n\n        onCloseDeleteModal() {\n            this.showDeleteModal = false;\n        },\n\n        onConfirmDelete(id) {\n            this.showDeleteModal = false;\n\n            return this.productFeatureSetsRepository.delete(id).then(() => {\n                this.getList();\n            });\n        },\n\n        getProductFeatureSetsColumns() {\n            return [{\n                property: 'name',\n                inlineEdit: 'string',\n                label: 'sw-settings-product-feature-sets.list.columnTemplate',\n                routerLink: 'sw.settings.product.feature.sets.detail',\n                allowResize: true,\n                primary: true,\n            },\n            {\n                property: 'description',\n                inlineEdit: 'string',\n                label: 'sw-settings-product-feature-sets.list.columnDescription',\n                allowResize: true,\n            },\n            {\n                property: 'features',\n                label: 'sw-settings-product-feature-sets.list.columnValues',\n                allowResize: true,\n            }];\n        },\n\n        renderFeaturePreview(features) {\n            if (!features.length) {\n                return null;\n            }\n\n            const preview = features\n                .slice(0, 4)\n                .map(feature => this.featureGridTranslationService.getNameTranslation(feature))\n                .join(', ');\n\n            return features.length > 4 ? `${preview}, ...` : preview;\n        },\n    },\n};\n\n","export default \"\\n{% block sw_settings_list %}\\n\\n{% block sw_settings_product_feature_set_index %}\\n<sw-page class=\\\"sw-settings-product-feature-sets-list\\\">\\n\\n    \\n    {% block sw_settings_product_feature_set_list_search_bar %}\\n    <template #search-bar>\\n        <sw-search-bar\\n            initial-search-type=\\\"feature_set\\\"\\n            :placeholder=\\\"$tc('sw-settings-product-feature-sets.general.placeholderSearchBar')\\\"\\n            :initial-search=\\\"term\\\"\\n            @search=\\\"onSearch\\\"\\n        />\\n    </template>\\n    {% endblock %}\\n\\n    \\n    {% block sw_settings_product_feature_set_list_smart_bar_header %}\\n    <template #smart-bar-header>\\n        \\n        {% block sw_settings_product_feature_set_list_smart_bar_header_title %}\\n        <h2>\\n            \\n            {% block sw_settings_product_feature_set_list_smart_bar_header_title_text %}\\n            {{ $tc('sw-settings.index.title') }} <sw-icon\\n                name=\\\"regular-chevron-right-xs\\\"\\n                small\\n            /> {{ $tc('sw-settings-product-feature-sets.list.textHeadline') }}\\n            {% endblock %}\\n        </h2>\\n        {% endblock %}\\n    </template>\\n    {% endblock %}\\n\\n    \\n    {% block sw_settings_product_feature_set_list_smart_bar_actions %}\\n    <template #smart-bar-actions>\\n        \\n        {% block sw_settings_product_feature_set_list_smart_bar_actions_add %}\\n        <sw-button\\n            :router-link=\\\"{ name: 'sw.settings.product.feature.sets.create' }\\\"\\n            :disabled=\\\"!acl.can('product_feature_sets.creator')\\\"\\n            class=\\\"sw-settings-product-feature-sets-list-grid__create-button\\\"\\n            variant=\\\"primary\\\"\\n        >\\n            {{ $tc('sw-settings-product-feature-sets.list.buttonAddEssentialCharacteristics') }}\\n        </sw-button>\\n        {% endblock %}\\n    </template>\\n    {% endblock %}\\n\\n    \\n    {% block sw_settings_product_feature_set_list_smart_bar_language_switch %}\\n    <template #language-switch>\\n        <sw-language-switch @on-change=\\\"onChangeLanguage\\\" />\\n    </template>\\n    {% endblock %}\\n\\n    <template #content>\\n        \\n        {% block sw_settings_product_feature_set_list_content %}\\n        <div class=\\\"sw-product-feature-sets-list__content\\\">\\n\\n            <sw-entity-listing\\n                v-if=\\\"isLoading || productFeatureSets\\\"\\n                ref=\\\"swSettingsProductFeatureSetsGrid\\\"\\n                class=\\\"sw-settings-product-feature-sets-list-grid\\\"\\n                :items=\\\"productFeatureSets\\\"\\n                :columns=\\\"getProductFeatureSetsColumns()\\\"\\n                :repository=\\\"productFeatureSetsRepository\\\"\\n                detail-route=\\\"sw.settings.product.feature.sets.detail\\\"\\n                :disable-data-fetching=\\\"true\\\"\\n                :sort-by=\\\"sortBy\\\"\\n                :sort-direction=\\\"sortDirection\\\"\\n                :allow-inline-edit=\\\"acl.can('product_feature_sets.editor')\\\"\\n                :allow-edit=\\\"acl.can('product_feature_sets.editor')\\\"\\n                :allow-view=\\\"acl.can('product_feature_sets.viewer')\\\"\\n                :allow-delete=\\\"acl.can('product_feature_sets.deleter')\\\"\\n                :is-loading=\\\"isLoading\\\"\\n                @page-change=\\\"onPageChange\\\"\\n                @column-sort=\\\"onSortColumn\\\"\\n                @inline-edit-save=\\\"onInlineEditSave\\\"\\n            >\\n\\n                <template #column-features=\\\"{ item }\\\">\\n                    <span v-if=\\\"item.features\\\">\\n                        {{ renderFeaturePreview(item.features) }}\\n                    </span>\\n                </template>\\n\\n                \\n                {% block sw_settings_product_feature_set_list_grid_columns_actions %}\\n                <template #actions=\\\"{ item }\\\">\\n\\n                    \\n                    {% block sw_settings_product_feature_set_list_grid_columns_actions_edit %}\\n                    <sw-context-menu-item\\n                        :router-link=\\\"{ name: 'sw.settings.product.feature.sets.detail', params: { id: item.id, edit: 'edit' }}\\\"\\n                        :disabled=\\\"!acl.can('product_feature_sets.editor')\\\"\\n                        class=\\\"sw-product-feature-sets-list__edit-action\\\"\\n                    >\\n                        {{ $tc('sw-settings-product-feature-sets.list.contextMenuEdit') }}\\n                    </sw-context-menu-item>\\n                    {% endblock %}\\n\\n                    \\n                    {% block sw_settings_product_feature_set_list_grid_columns_actions_delete %}\\n                    <sw-context-menu-item\\n                        :disabled=\\\"item.isSystemDefault || !acl.can('product_feature_sets.deleter')\\\"\\n                        variant=\\\"danger\\\"\\n                        class=\\\"sw-product-feature-sets-list__delete-action\\\"\\n                        @click=\\\"onDelete(item.id)\\\"\\n                    >\\n                        {{ $tc('sw-settings-product-feature-sets.list.contextMenuDelete') }}\\n                    </sw-context-menu-item>\\n                    {% endblock %}\\n\\n                </template>\\n                {% endblock %}\\n\\n                \\n                {% block sw_settings_product_feature_set_list_grid_action_modals %}\\n                <template #action-modals=\\\"{ item }\\\">\\n\\n                    \\n                    {% block sw_settings_product_feature_set_list_delete_modal %}\\n                    <sw-modal\\n                        v-if=\\\"showDeleteModal\\\"\\n                        :title=\\\"$tc('global.default.warning')\\\"\\n                        variant=\\\"small\\\"\\n                        @modal-close=\\\"onCloseDeleteModal\\\"\\n                    >\\n\\n                        \\n                        {% block sw_settings_product_feature_set_list_delete_modal_confirm_delete_text %}\\n                        <p class=\\\"sw-settings-product-feature-sets-list__confirm-delete-text\\\">\\n                            {{ $tc('sw-settings-product-feature-sets.list.textDeleteConfirm', 0, { name: item.name }) }}\\n                        </p>\\n                        {% endblock %}\\n\\n                        \\n                        {% block sw_settings_product_feature_set_list_delete_modal_footer %}\\n                        <template #modal-footer>\\n\\n                            \\n                            {% block sw_settings_product_feature_set_list_delete_modal_cancel %}\\n                            <sw-button\\n                                size=\\\"small\\\"\\n                                @click=\\\"onCloseDeleteModal\\\"\\n                            >\\n                                {{ $tc('sw-settings-product-feature-sets.list.buttonCancel') }}\\n                            </sw-button>\\n                            {% endblock %}\\n\\n                            \\n                            {% block sw_settings_product_feature_set_list_delete_modal_confirm %}\\n                            <sw-button\\n                                variant=\\\"danger\\\"\\n                                size=\\\"small\\\"\\n                                @click=\\\"onConfirmDelete(item.id)\\\"\\n                            >\\n                                {{ $tc('sw-settings-product-feature-sets.list.buttonDelete') }}\\n                            </sw-button>\\n                            {% endblock %}\\n\\n                        </template>\\n                        {% endblock %}\\n                    </sw-modal>\\n                    {% endblock %}\\n\\n                </template>\\n                {% endblock %}\\n\\n            </sw-entity-listing>\\n\\n        </div>\\n        {% endblock %}\\n\\n    </template>\\n\\n</sw-page>\\n    {% endblock %}\\n{% endblock %}\\n\";"],"sourceRoot":""}