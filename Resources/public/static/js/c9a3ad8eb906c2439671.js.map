{"version":3,"sources":["webpack:///./src/module/sw-order/component/sw-order-customer-grid/sw-order-customer-grid.scss","webpack:///./src/module/sw-order/component/sw-order-customer-grid/index.ts","webpack:///./src/module/sw-order/component/sw-order-customer-grid/sw-order-customer-grid.html.twig"],"names":["content","__esModule","default","module","i","locals","exports","add","_Shopware","Shopware","Component","State","Mixin","Context","Criteria","Data","wrapComponentConfig","template","inject","mixins","getByName","data","customers","isLoading","isSwitchingCustomer","showNewCustomerModal","customer","disableRouteParams","computed","customerData","get","customerRepository","this","repositoryFactory","create","customerCriteria","criteria","page","limit","addAssociation","addSorting","sort","term","setTerm","customerCriterion","customerColumns","property","label","dataIndex","$tc","primary","showEmptyState","total","emptyTitle","name","cart","assetFilter","Filter","mounted","mountedComponent","methods","_this$customerData","$refs","customerFilter","customerNumber","onCheckCustomer","getList","_this","search","then","finally","onShowNewCustomerModal","isChecked","item","_this$customer","id","handleSelectCustomer","createCart","salesChannelId","dispatch","setCustomer","customerId","_this2","_asyncToGenerator","_regeneratorRuntime","mark","_callee","_customer$salesChanne","wrap","_context","prev","next","api","sent","token","updateCustomerContext","t0","createNotificationError","message","finish","stop","onAddNewCustomer","_this$customer2","_this$customer3","_this3","contextToken","response","status","getCart","_this$customer4"],"mappings":"wGAGA,IAAIA,EAAU,EAAQ,QACnBA,EAAQC,aAAYD,EAAUA,EAAQE,SACnB,iBAAZF,IAAsBA,EAAU,CAAC,CAACG,EAAOC,EAAIJ,EAAS,MAC7DA,EAAQK,SAAQF,EAAOG,QAAUN,EAAQK,SAG/BE,EADH,EAAQ,QAAwEL,SACzE,WAAYF,GAAS,EAAM,K,8GCK5CQ,G,UAA6CC,UAArCC,EAASF,EAATE,UAAWC,EAAKH,EAALG,MAAOC,EAAKJ,EAALI,MAAOC,EAAOL,EAAPK,QACzBC,EAAaL,SAASM,KAAtBD,SAUOJ,YAAUM,oBAAoB,CACzCC,SC1BW,48ID4BXC,OAAQ,CAAC,qBAETC,OAAQ,CACJP,EAAMQ,UAAU,WAChBR,EAAMQ,UAAU,iBAGpBC,KAAI,WAQA,MAAO,CACHC,UAAW,KACXC,WAAW,EACXC,qBAAqB,EACrBC,sBAAsB,EACtBC,SAAU,KACVC,oBAAoB,IAI5BC,SAAU,CACNC,aAAY,WACR,OAAOlB,EAAMmB,IAAI,WAAWJ,UAGhCK,mBAAkB,WACd,OAAOC,KAAKC,kBAAkBC,OAAO,aAGzCC,iBAAgB,WAEZ,IAAMC,EAAW,IAAItB,EAASkB,KAAKK,KAAML,KAAKM,OAS9C,OARAF,EAASG,eAAe,gBACxBH,EAASI,WAAW1B,EAAS2B,KAAK,YAAa,SAE3CT,KAAKU,MAELN,EAASO,QAAQX,KAAKU,MAGnBN,GAGXQ,kBAAiB,WACb,IAAMR,EAAW,IAAItB,EAAS,EAAG,IAgBjC,OAfAsB,EACKG,eAAe,aACfA,eAAe,SACfA,eAAe,cACfA,eAAe,gBACfA,eAAe,wBACfA,eAAe,qBACfA,eAAe,iCACfA,eAAe,sCACfA,eAAe,oCACfA,eAAe,kCACfA,eAAe,uCACfA,eAAe,qCACfA,eAAe,QAEbH,GAGXS,gBAAe,WACX,MAAO,CAAC,CACJC,SAAU,SACVC,MAAO,IACR,CACCD,SAAU,YACVE,UAAW,qBACXD,MAAOf,KAAKiB,IAAI,yDAChBC,SAAS,GACV,CACCJ,SAAU,iBACVC,MAAOf,KAAKiB,IAAI,4DAEpB,CACIH,SAAU,eACVC,MAAOf,KAAKiB,IAAI,0DACjB,CACCH,SAAU,QACVC,MAAOf,KAAKiB,IAAI,4DAIxBE,eAAc,WACV,OAAQnB,KAAKoB,QAAUpB,KAAKT,WAGhC8B,WAAU,WACN,OAAKrB,KAAKU,KAKHV,KAAKiB,IAAI,qDAAsD,EAAG,CAAEK,KAAMtB,KAAKU,OAJ3EV,KAAKiB,IAAI,kCAOxBM,KAAI,WACA,OAAO5C,EAAMmB,IAAI,WAAWyB,MAGhCC,YAAW,WACP,OAAO/C,SAASgD,OAAOrC,UAAU,WAIzCsC,QAAO,WACH1B,KAAK2B,oBAGTC,QAAS,CACLD,iBAAgB,WAAU,IAADE,EAChB7B,KAAKH,eAKVG,KAAK8B,MAAMC,eAAerB,KAAwB,QAApBmB,EAAG7B,KAAKH,oBAAY,IAAAgC,OAAA,EAAjBA,EAAmBG,eACpDhC,KAAKiC,gBAAgBjC,KAAKH,gBAG9BqC,QAAO,WAAI,IAADC,EAAA,KAEN,OADAnC,KAAKT,WAAY,EACVS,KAAKD,mBAAmBqC,OAAOpC,KAAKG,kBACtCkC,MAAK,SAAC/C,GACH6C,EAAK7C,UAAYA,EAEjB6C,EAAKf,MAAQ9B,EAAU8B,SACxBkB,SAAQ,WACPH,EAAK5C,WAAY,MAI7BgD,uBAAsB,WAClBvC,KAAKP,sBAAuB,GAGhC+C,UAAS,SAACC,GAAoC,IAADC,EACzC,OAAOD,EAAKE,MAAoB,QAAlBD,EAAK1C,KAAKN,gBAAQ,IAAAgD,OAAA,EAAbA,EAAeC,KAGtCV,gBAAe,SAACQ,GACZzC,KAAKN,SAAW+C,EACXzC,KAAK4C,qBAAqBH,EAAKE,KAGxCE,WAAU,SAACC,GAEP,OAAOnE,EAAMoE,SAAS,qBAAsB,CAAED,oBAGlDE,YAAW,SAACtD,GACHf,EAAMoE,SAAS,iCAAkC,CAAErD,cAGtDkD,qBAAoB,SAACK,GAAoC,IAADC,EAAA,YAAAC,IAAAC,IAAAC,MAAA,SAAAC,IAAA,IAAA5D,EAAA6D,EAAA,OAAAH,IAAAI,MAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OAC1B,OAAhCT,EAAK1D,qBAAsB,EAAKiE,EAAAC,KAAA,EAAAD,EAAAE,KAAA,EAGLT,EAAKnD,mBACvBD,IAAImD,EAAYpE,EAAQ+E,IAAKV,EAAKtC,mBAAmB,KAAD,EAD3C,GAARlB,EAAQ+D,EAAAI,KAGTX,EAAK3B,KAAKuC,MAAM,CAADL,EAAAE,KAAA,eAAAF,EAAAE,KAAA,EAEVT,EAAKL,WAAmC,QAAzBU,EAAC7D,aAAQ,EAARA,EAAUoD,sBAAc,IAAAS,IAAI,IAAI,KAAD,EAI9B,OAD3BL,EAAKxD,SAAWA,EAChBwD,EAAKF,YAAYtD,GAAU+D,EAAAE,KAAA,GAErBT,EAAKa,wBAAwB,KAAD,GAAAN,EAAAE,KAAA,iBAAAF,EAAAC,KAAA,GAAAD,EAAAO,GAAAP,EAAA,SAGlCP,EAAKe,wBAAwB,CACzBC,QAAShB,EAAKjC,IAAI,gDACnB,QAE8B,OAF9BwC,EAAAC,KAAA,GAEHR,EAAK1D,qBAAsB,EAAMiE,EAAAU,OAAA,6BAAAV,EAAAW,UAAAd,EAAA,wBAtBqBH,IA0B9DkB,iBAAgB,SAACpB,GACRA,IAKAjD,KAAKkC,UACVlC,KAAKK,KAAO,EACZL,KAAKU,KAAO,KAGhBqD,sBAAqB,WAAmB,IAADO,EAAAC,EAAAC,EAAA,KACnC,OAAO7F,EAAMoE,SAAS,gCAAiC,CACnDE,WAAyB,QAAfqB,EAAEtE,KAAKN,gBAAQ,IAAA4E,OAAA,EAAbA,EAAe3B,GAC3BG,eAA6B,QAAfyB,EAAEvE,KAAKN,gBAAQ,IAAA6E,OAAA,EAAbA,EAAezB,eAC/B2B,aAAczE,KAAKuB,KAAKuC,QACzBzB,MAAK,SAACqC,GAGmB,MAApBA,EAASC,QACJH,EAAKI,cAKtBA,QAAO,WAAmB,IAADC,EAErB,OAAOlG,EAAMoE,SAAS,kBAAmB,CACrCD,eAA6B,QAAf+B,EAAE7E,KAAKN,gBAAQ,IAAAmF,OAAA,EAAbA,EAAe/B,eAC/B2B,aAAczE,KAAKuB,KAAKuC","file":"static/js/c9a3ad8eb906c2439671.js","sourcesContent":["// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../../../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--15-1!../../../../../node_modules/css-loader/dist/cjs.js??ref--15-2!../../../../../node_modules/sass-loader/dist/cjs.js??ref--15-3!./sw-order-customer-grid.scss\");\nif(content.__esModule) content = content.default;\nif(typeof content === 'string') content = [[module.id, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar add = require(\"!../../../../../node_modules/vue-style-loader/lib/addStylesClient.js\").default\nvar update = add(\"0afe234c\", content, true, {});","import type { Entity } from '@shopware-ag/admin-extension-sdk/es/data/_internals/Entity';\nimport type EntityCollection from '@shopware-ag/admin-extension-sdk/es/data/_internals/EntityCollection';\nimport type CriteriaType from 'src/core/data/criteria.data';\nimport type RepositoryType from '../../../../core/data/repository.data';\n\nimport template from './sw-order-customer-grid.html.twig';\nimport './sw-order-customer-grid.scss';\n\nimport type { Cart } from '../../order.types';\n\n/**\n * @package checkout\n */\n\nconst { Component, State, Mixin, Context } = Shopware;\nconst { Criteria } = Shopware.Data;\n\ninterface GridColumn {\n    property: string,\n    dataIndex?: string,\n    label: string,\n    primary?: boolean,\n}\n\n// eslint-disable-next-line sw-deprecation-rules/private-feature-declarations\nexport default Component.wrapComponentConfig({\n    template,\n\n    inject: ['repositoryFactory'],\n\n    mixins: [\n        Mixin.getByName('listing'),\n        Mixin.getByName('notification'),\n    ],\n\n    data(): {\n        customers: EntityCollection<'customer'>|null,\n        isLoading: boolean,\n        isSwitchingCustomer: boolean,\n        showNewCustomerModal: boolean,\n        customer: Entity<'customer'>|null,\n        disableRouteParams: boolean,\n        } {\n        return {\n            customers: null,\n            isLoading: false,\n            isSwitchingCustomer: false,\n            showNewCustomerModal: false,\n            customer: null,\n            disableRouteParams: true,\n        };\n    },\n\n    computed: {\n        customerData(): Entity<'customer'>| null {\n            return State.get('swOrder').customer;\n        },\n\n        customerRepository(): RepositoryType<'customer'> {\n            return this.repositoryFactory.create('customer');\n        },\n\n        customerCriteria(): CriteriaType {\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n            const criteria = new Criteria(this.page, this.limit);\n            criteria.addAssociation('salesChannel');\n            criteria.addSorting(Criteria.sort('createdAt', 'DESC'));\n\n            if (this.term) {\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n                criteria.setTerm(this.term);\n            }\n\n            return criteria;\n        },\n\n        customerCriterion(): CriteriaType {\n            const criteria = new Criteria(1, 25);\n            criteria\n                .addAssociation('addresses')\n                .addAssociation('group')\n                .addAssociation('salutation')\n                .addAssociation('salesChannel')\n                .addAssociation('defaultPaymentMethod')\n                .addAssociation('lastPaymentMethod')\n                .addAssociation('defaultBillingAddress.country')\n                .addAssociation('defaultBillingAddress.countryState')\n                .addAssociation('defaultBillingAddress.salutation')\n                .addAssociation('defaultShippingAddress.country')\n                .addAssociation('defaultShippingAddress.countryState')\n                .addAssociation('defaultShippingAddress.salutation')\n                .addAssociation('tags');\n\n            return criteria;\n        },\n\n        customerColumns(): GridColumn[] {\n            return [{\n                property: 'select',\n                label: '',\n            }, {\n                property: 'firstName',\n                dataIndex: 'lastName,firstName',\n                label: this.$tc('sw-order.initialModal.customerGrid.columnCustomerName'),\n                primary: true,\n            }, {\n                property: 'customerNumber',\n                label: this.$tc('sw-order.initialModal.customerGrid.columnCustomerNumber'),\n            },\n            {\n                property: 'salesChannel',\n                label: this.$tc('sw-order.initialModal.customerGrid.columnSalesChannel'),\n            }, {\n                property: 'email',\n                label: this.$tc('sw-order.initialModal.customerGrid.columnEmailAddress'),\n            }];\n        },\n\n        showEmptyState(): boolean {\n            return !this.total && !this.isLoading;\n        },\n\n        emptyTitle(): string {\n            if (!this.term) {\n                return this.$tc('sw-customer.list.messageEmpty');\n            }\n\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n            return this.$tc('sw-order.initialModal.customerGrid.textEmptySearch', 0, { name: this.term });\n        },\n\n        cart(): Cart {\n            return State.get('swOrder').cart;\n        },\n\n        assetFilter() {\n            return Shopware.Filter.getByName('asset');\n        },\n    },\n\n    mounted() {\n        this.mountedComponent();\n    },\n\n    methods: {\n        mountedComponent(): void {\n            if (!this.customerData) {\n                return;\n            }\n\n            // @ts-expect-error\n            this.$refs.customerFilter.term = this.customerData?.customerNumber;\n            this.onCheckCustomer(this.customerData);\n        },\n\n        getList() {\n            this.isLoading = true;\n            return this.customerRepository.search(this.customerCriteria)\n                .then((customers) => {\n                    this.customers = customers;\n                    // @ts-expect-error\n                    this.total = customers.total;\n                }).finally(() => {\n                    this.isLoading = false;\n                });\n        },\n\n        onShowNewCustomerModal() {\n            this.showNewCustomerModal = true;\n        },\n\n        isChecked(item: Entity<'customer'>): boolean {\n            return item.id === this.customer?.id;\n        },\n\n        onCheckCustomer(item: Entity<'customer'>): void {\n            this.customer = item;\n            void this.handleSelectCustomer(item.id);\n        },\n\n        createCart(salesChannelId: string): Promise<void> {\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n            return State.dispatch('swOrder/createCart', { salesChannelId });\n        },\n\n        setCustomer(customer: Entity<'customer'>|null): void {\n            void State.dispatch('swOrder/selectExistingCustomer', { customer });\n        },\n\n        async handleSelectCustomer(customerId: string): Promise<void> {\n            this.isSwitchingCustomer = true;\n\n            try {\n                const customer = await this.customerRepository\n                    .get(customerId, Context.api, this.customerCriterion);\n\n                if (!this.cart.token) {\n                    // It is compulsory to create cart and get cart token first\n                    await this.createCart(customer?.salesChannelId ?? '');\n                }\n\n                this.customer = customer;\n                this.setCustomer(customer);\n\n                await this.updateCustomerContext();\n            } catch {\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-call\n                this.createNotificationError({\n                    message: this.$tc('sw-order.create.messageSwitchCustomerError'),\n                });\n            } finally {\n                this.isSwitchingCustomer = false;\n            }\n        },\n\n        onAddNewCustomer(customerId: string): void {\n            if (!customerId) {\n                return;\n            }\n\n            // Refresh customer list if new customer is created successfully\n            void this.getList();\n            this.page = 1;\n            this.term = '';\n        },\n\n        updateCustomerContext(): Promise<void> {\n            return State.dispatch('swOrder/updateCustomerContext', {\n                customerId: this.customer?.id,\n                salesChannelId: this.customer?.salesChannelId,\n                contextToken: this.cart.token,\n            }).then((response) => {\n                // Update cart after customer context is updated\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n                if (response.status === 200) {\n                    void this.getCart();\n                }\n            });\n        },\n\n        getCart(): Promise<void> {\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n            return State.dispatch('swOrder/getCart', {\n                salesChannelId: this.customer?.salesChannelId,\n                contextToken: this.cart.token,\n            });\n        },\n    },\n});\n","export default \"\\n{% block sw_order_customer_grid %}\\n<sw-card\\n    class=\\\"sw-order-customer-grid\\\"\\n    position-identifier=\\\"sw-order-customer-grid\\\"\\n    :is-loading=\\\"isSwitchingCustomer\\\"\\n>\\n    <template #toolbar>\\n        \\n        {% block sw_order_customer_grid_toolbar %}\\n        <div class=\\\"sw-order-customer-grid__toolbar\\\">\\n            \\n            {% block sw_order_customer_grid_search_input %}\\n            <sw-card-filter\\n                ref=\\\"customerFilter\\\"\\n                @sw-card-filter-term-change=\\\"onSearch\\\"\\n            />\\n            {% endblock %}\\n\\n            \\n            {% block sw_order_customer_grid_add_new_customer %}\\n            <sw-button\\n                class=\\\"sw-order-customer-grid__add-customer\\\"\\n                variant=\\\"ghost\\\"\\n                size=\\\"small\\\"\\n                @click=\\\"onShowNewCustomerModal\\\"\\n            >\\n                {{ $tc('sw-order.initialModal.customerGrid.buttonAddNewCustomer') }}\\n            </sw-button>\\n            {% endblock %}\\n        </div>\\n        {% endblock %}\\n    </template>\\n\\n    <template #grid>\\n        <div\\n            class=\\\"sw-order-customer-grid__container\\\"\\n        >\\n            \\n            {% block sw_order_customer_grid_content %}\\n            <sw-entity-listing\\n                class=\\\"sw-order-customer-grid__content\\\"\\n                :show-selection=\\\"false\\\"\\n                :show-settings=\\\"false\\\"\\n                :items=\\\"customers\\\"\\n                :columns=\\\"customerColumns\\\"\\n                :repository=\\\"customerRepository\\\"\\n                :is-loading=\\\"isLoading\\\"\\n            >\\n                \\n                {% block sw_order_customer_grid_content_column_select %}\\n                <template #column-select=\\\"{ item }\\\">\\n                    <div class=\\\"sw-field__radio-input\\\">\\n                        \\n                        <input\\n                            type=\\\"radio\\\"\\n                            :checked=\\\"isChecked(item)\\\"\\n                            @change=\\\"onCheckCustomer(item)\\\"\\n                        >\\n                        <div class=\\\"sw-field__radio-state\\\"></div>\\n                    </div>\\n                </template>\\n                {% endblock %}\\n\\n                \\n                {% block sw_order_customer_grid_content_grid_column_name %}\\n                <template #column-firstName=\\\"{ item }\\\">\\n                    <router-link :to=\\\"{ name: 'sw.customer.detail', params: { id: item.id } }\\\">\\n                        {{ item.firstName }} {{ item.lastName }}\\n                    </router-link>\\n                </template>\\n                {% endblock %}\\n\\n                <template #column-salesChannel=\\\"{ item }\\\">\\n                    {{ item.salesChannel.translated.name }}\\n                </template>\\n\\n                \\n                {% block sw_settings_product_feature_set_list_grid_columns_actions %}\\n                <template #actions=\\\"{ item }\\\">\\n                    <sw-context-menu-item\\n                        target=\\\"_blank\\\"\\n                        rel=\\\"noopener\\\"\\n                        :router-link=\\\"{ name: 'sw.customer.detail', params: { id: item.id } }\\\"\\n                    >\\n                        {{ $tc('sw-order.initialModal.customerGrid.contextOpenButton') }}\\n                    </sw-context-menu-item>\\n                </template>\\n                {% endblock %}\\n            </sw-entity-listing>\\n            {% endblock %}\\n\\n            \\n            {% block sw_order_customer_grid_empty_state %}\\n            <sw-empty-state\\n                v-if=\\\"showEmptyState\\\"\\n                class=\\\"sw-order-customer-grid__empty-state\\\"\\n                :show-description=\\\"false\\\"\\n                :title=\\\"emptyTitle\\\"\\n            >\\n                \\n                {% block sw_order_customer_grid_empty_state_icon %}\\n                <template #icon>\\n                    <img\\n                        :src=\\\"assetFilter('/administration/static/img/empty-states/customer-empty-state.svg')\\\"\\n                        :alt=\\\"$tc('sw-customer.list.messageEmpty')\\\"\\n                    >\\n                </template>\\n                {% endblock %}\\n            </sw-empty-state>\\n            {% endblock %}\\n        </div>\\n\\n        \\n        {% block sw_order_customer_grid_new_customer_modal %}\\n        <sw-order-new-customer-modal\\n            v-if=\\\"showNewCustomerModal\\\"\\n            @on-select-existing-customer=\\\"onAddNewCustomer\\\"\\n            @close=\\\"showNewCustomerModal = false\\\"\\n        />\\n        {% endblock %}\\n    </template>\\n</sw-card>\\n{% endblock %}\\n\";"],"sourceRoot":""}