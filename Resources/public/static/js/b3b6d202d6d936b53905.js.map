{"version":3,"sources":["webpack:///./src/module/sw-import-export/component/sw-import-export-activity/index.js","webpack:///./src/module/sw-import-export/component/sw-import-export-activity/sw-import-export-activity.html.twig","webpack:///./src/module/sw-import-export/component/sw-import-export-activity/sw-import-export-activity.scss"],"names":["Mixin","Shopware","Criteria","Data","format","Utils","template","inject","mixins","getByName","props","type","String","required","default","validValues","validator","value","includes","data","logs","isLoading","selectedProfile","selectedLog","selectedResult","activitiesReloadIntervall","activitiesReloadTimer","showDetailModal","showResultModal","stateText","import","succeeded","failed","dryrun","export","computed","logRepository","this","repositoryFactory","create","profileRepository","activityCriteria","criteria","addFilter","multi","equals","getAssociation","addAssociation","addSorting","sort","setPage","exportActivityColumns","property","dataIndex","label","allowResize","primary","concat","_toConsumableArray","hasActivitiesInProgress","filter","log","state","length","downloadFileText","$tc","showGrid","_this$logs","showEmptyState","_this$logs2","showSpinner","emptyStateSubLine","emptyStateTitle","dateFilter","Filter","watch","window","setInterval","updateActivitiesInProgress","bind","clearInterval","created","createdComponent","destroyed","methods","fetchActivities","addActivity","addAt","_this","_asyncToGenerator","_regeneratorRuntime","mark","_callee","wrap","_context","prev","next","search","sent","updateActivitiesFromLogs","stop","_this2","_callee2","currentInProgress","_context2","fromCriteria","setIds","getIds","_this3","Object","values","forEach","_this3$stateText$log$","_this3$stateText","_this3$stateText$log$2","activity","get","id","originalState","keys","key","config","message","$t","profile","profileName","autoClose","createNotificationSuccess","records","createNotificationWarning","createNotificationError","onOpenProfile","_this4","_callee3","_context3","onAbortProcess","item","_this5","importExport","cancel","then","closeSelectedProfile","onShowLog","onShowResult","closeSelectedLog","closeSelectedResult","openProcessFileDownload","_this6","_callee4","_context4","abrupt","t0","getDownloadUrl","fileId","t1","open","call","saveSelectedProfile","_this7","save","catch","finally","calculateFileSize","size","fileSize","getStateLabel","translationKey","$te","getStateClass","content","__esModule","module","i","locals","exports","add"],"mappings":"sNAMQA,G,UAAUC,SAAVD,OACAE,EAAaD,SAASE,KAAtBD,SACAE,EAAWH,SAASI,MAApBD,OAKO,WACXE,SCdW,iwODgBXC,OAAQ,CAAC,oBAAqB,eAAgB,WAE9CC,OAAQ,CACJR,EAAMS,UAAU,iBAGpBC,MAAO,CACHC,KAAM,CACFA,KAAMC,OACNC,UAAU,EACVC,QAAS,SACTC,YAAa,CACT,SACA,UAEJC,UAAS,SAACC,GACN,MAAO,CACH,SACA,UACFC,SAASD,MAKvBE,KAAI,WACA,MAAO,CACHC,KAAM,KACNC,WAAW,EACXC,gBAAiB,KACjBC,YAAa,KACbC,eAAgB,KAChBC,0BAA2B,IAC3BC,sBAAuB,KACvBC,iBAAiB,EACjBC,iBAAiB,EACjBC,UAAW,CACPC,OAAQ,CACJC,UAAW,iDACXC,OAAQ,gDAEZC,OAAQ,CACJF,UAAW,iDACXC,OAAQ,gDAEZE,OAAQ,CACJH,UAAW,qDAM3BI,SAAU,CACNC,cAAa,WACT,OAAOC,KAAKC,kBAAkBC,OAAO,sBAGzCC,kBAAiB,WACb,OAAOH,KAAKC,kBAAkBC,OAAO,0BAGzCE,iBAAgB,WACZ,IAAMC,EAAW,IAAIzC,SAASE,KAAKD,SAuBnC,MArBkB,WAAdmC,KAAK1B,MACL+B,EAASC,UAAUzC,EAAS0C,MACxB,KACA,CACI1C,EAAS2C,OAAO,WAAY,UAC5B3C,EAAS2C,OAAO,WAAY,aAGpCH,EAASI,eAAe,qBACnBC,eAAe,SACC,WAAdV,KAAK1B,MACZ+B,EAASC,UAAUzC,EAAS2C,OAAO,WAAY,WAGnDH,EAASM,WAAW9C,EAAS+C,KAAK,YAAa,SAE/CP,EAASQ,QAAQ,GACjBR,EAASK,eAAe,QACxBL,EAASK,eAAe,QACxBL,EAASK,eAAe,WAEjBL,GAGXS,sBAAqB,WACjB,MAAM,CACF,CACIC,SAAU,YACVC,UAAW,YACXC,MAAO,yCACPC,aAAa,EACbC,SAAS,GAEb,CACIJ,SAAU,cACVC,UAAW,gBACXC,MAAO,4CACPC,aAAa,EACbC,SAAS,GAEb,CACIJ,SAAU,QACVC,UAAW,QACXC,MAAO,0CACPC,aAAa,EACbC,SAAS,GAEb,CACIJ,SAAU,UACVC,UAAW,UACXC,MAAO,4CACPC,aAAa,EACbC,SAAS,IACZC,OAAAC,IACiB,WAAdrB,KAAK1B,KAAoB,CAAC,CAC1ByC,SAAU,iBACVC,UAAW,UACXC,MAAO,mDACPC,aAAa,EACbC,SAAS,IACR,IAAI,CACT,CACIJ,SAAU,YACVC,UAAW,YACXC,MAAO,yCACPC,aAAa,EACbC,SAAS,GAEb,CACIJ,SAAU,gBACVC,UAAW,gBACXC,MAAO,yCACPC,aAAa,EACbC,SAAS,MAIrBG,wBAAuB,WACnB,QAAKtB,KAAKjB,MAIHiB,KAAKjB,KAAKwC,QAAO,SAAAC,GAAG,MAAkB,aAAdA,EAAIC,SAAsBC,OAAS,GAGtEC,iBAAgB,WACZ,MAAqB,WAAd3B,KAAK1B,KACR0B,KAAK4B,IAAI,4DACT5B,KAAK4B,IAAI,6DAIjBC,SAAQ,WAAI,IAADC,EACP,OAAQ9B,KAAKhB,aAAwB,QAAV8C,EAAC9B,KAAKjB,YAAI,IAAA+C,IAATA,EAAWJ,QAAS,GAIpDK,eAAc,WAAI,IAADC,EACb,OAAQhC,KAAKhB,aAAwB,QAAVgD,EAAChC,KAAKjB,YAAI,IAAAiD,IAATA,EAAWN,SAAU,GAIrDO,YAAW,WACP,OAAOjC,KAAKhB,WAGhBkD,kBAAiB,WACb,MAAqB,WAAdlC,KAAK1B,KACR0B,KAAK4B,IAAI,sDACT5B,KAAK4B,IAAI,uDAGjBO,gBAAe,WACX,MAAqB,WAAdnC,KAAK1B,KACR0B,KAAK4B,IAAI,oDACT5B,KAAK4B,IAAI,qDAGjBQ,WAAU,WACN,OAAOxE,SAASyE,OAAOjE,UAAU,UAIzCkE,MAAO,CACHhB,wBAAuB,SAACA,GAChBA,IAA4BtB,KAAKX,sBACjCW,KAAKX,sBAAwBkD,OAAOC,YAChCxC,KAAKyC,2BAA2BC,KAAK1C,MACrCA,KAAKZ,2BAEFY,KAAKX,wBACZkD,OAAOI,cAAc3C,KAAKX,uBAC1BW,KAAKX,sBAAwB,QAKzCuD,QAAO,WACH5C,KAAK6C,oBAGTC,UAAS,WACD9C,KAAKX,uBACLkD,OAAOI,cAAc3C,KAAKX,wBAIlC0D,QAAS,CACLF,iBAAgB,WACZ,OAAO7C,KAAKgD,mBAGhBC,YAAW,SAACzB,GACRxB,KAAKjB,KAAKmE,MAAM1B,EAAK,IAGnBwB,gBAAe,WAAI,IAADG,EAAA,YAAAC,IAAAC,IAAAC,MAAA,SAAAC,IAAA,IAAAxE,EAAA,OAAAsE,IAAAG,MAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OACE,OAAtBR,EAAKnE,WAAY,EAAKyE,EAAAE,KAAA,EAEHR,EAAKpD,cAAc6D,OAAOT,EAAK/C,kBAAkB,KAAD,EAA7DrB,EAAI0E,EAAAI,KAENV,EAAKpE,MACLoE,EAAKW,yBAAyB/E,GAGlCoE,EAAKpE,KAAOA,EAEZoE,EAAKnE,WAAY,EAAM,wBAAAyE,EAAAM,UAAAR,MAXHH,IAclBX,2BAA0B,WAAI,IAADuB,EAAA,YAAAZ,IAAAC,IAAAC,MAAA,SAAAW,IAAA,IAAA5D,EAAA6D,EAAA,OAAAb,IAAAG,MAAA,SAAAW,GAAA,cAAAA,EAAAT,KAAAS,EAAAR,MAAA,OAGC,OAF1BtD,EAAWxC,EAASuG,aAAaJ,EAAK5D,mBACnCiE,OAAOL,EAAKjF,KAAKwC,QAAO,SAAAC,GAAG,MAAkB,aAAdA,EAAIC,SAAsB6C,UAClEjE,EAASK,eAAe,QAAQyD,EAAAR,KAAA,EACAK,EAAKjE,cAAc6D,OAAOvD,GAAU,KAAD,EAA7D6D,EAAiBC,EAAAN,KAEvBG,EAAKF,yBAAyBI,GAAmB,wBAAAC,EAAAJ,UAAAE,MANlBb,IASnCU,yBAAwB,SAAC/E,GAAO,IAADwF,EAAA,KAC3BC,OAAOC,OAAO1F,GAAM2F,SAAQ,SAAClD,GAAS,IAADmD,EAAAC,EAAAC,EAC3BC,EAAWP,EAAKxF,KAAKgG,IAAIvD,EAAIwD,IAEnC,GAAKF,EAAL,CAIA,IAAMG,EAAgBH,EAASrD,MAK/B,GAJA+C,OAAOU,KAAK1D,GAAKkD,SAAQ,SAAAS,GACrBL,EAASK,GAAO3D,EAAI2D,MAGpBF,IAAkBzD,EAAIC,MAA1B,CAIA,IAAM2D,EAAS,CACXC,QAASd,EAAKe,GAA+C,QAA7CX,EAAgB,QAAhBC,EAAEL,EAAK/E,iBAAS,IAAAoF,GAAgB,QAAhBC,EAAdD,EAAiBpD,EAAIsD,iBAAS,IAAAD,OAAhB,EAAdA,EAAiCrD,EAAIC,cAAM,IAAAkD,IAAI,GAAK,CAClEY,QAAS/D,EAAIgE,cAEjBC,WAAW,GAGf,GAAkB,cAAdjE,EAAIC,MAUJ,OATA8C,EAAKmB,0BAA0BN,QAEV,WAAjB5D,EAAIsD,UAAyC,IAAhBtD,EAAImE,SACjCpB,EAAKqB,0BAA0B,CAC3BP,QAASd,EAAK3C,IAAI,iDAAkD,GACpE6D,WAAW,KAOvBlB,EAAKsB,wBAAwBT,SAI/BU,cAAa,SAACd,GAAK,IAADe,EAAA,YAAA3C,IAAAC,IAAAC,MAAA,SAAA0C,IAAA,OAAA3C,IAAAG,MAAA,SAAAyC,GAAA,cAAAA,EAAAvC,KAAAuC,EAAAtC,MAAA,cAAAsC,EAAAtC,KAAA,EACSoC,EAAK5F,kBAAkB4E,IAAIC,GAAI,KAAD,EAA3De,EAAK9G,gBAAegH,EAAApC,KAAA,wBAAAoC,EAAAlC,UAAAiC,MADA5C,IAIxB8C,eAAc,SAACC,GAAO,IAADC,EAAA,KACjBpG,KAAKqG,aAAaC,OAAOH,EAAKnB,IAAIuB,MAAK,WACnCH,EAAKpD,sBAIbwD,qBAAoB,WAChBxG,KAAKf,gBAAkB,MAG3BwH,UAAS,SAACN,GACNnG,KAAKd,YAAciH,EACnBnG,KAAKV,iBAAkB,GAG3BoH,aAAY,SAACP,GACTnG,KAAKd,YAAciH,EACnBnG,KAAKT,iBAAkB,GAG3BoH,iBAAgB,WACZ3G,KAAKd,YAAc,KACnBc,KAAKV,iBAAkB,GAG3BsH,oBAAmB,WACf5G,KAAKb,eAAiB,KACtBa,KAAKT,iBAAkB,GAGrBsH,wBAAuB,SAACV,GAAO,IAADW,EAAA,YAAA1D,IAAAC,IAAAC,MAAA,SAAAyD,IAAA,OAAA1D,IAAAG,MAAA,SAAAwD,GAAA,cAAAA,EAAAtD,KAAAsD,EAAArD,MAAA,UACd,WAAdmD,EAAKxI,MAAoC,cAAf6H,EAAK1E,MAAqB,CAAAuF,EAAArD,KAAA,eAAAqD,EAAAC,OAAA,SAC7C,MAAI,OAGF,OAHED,EAAAE,GAGR3E,OAAMyE,EAAArD,KAAA,EAAYmD,EAAKT,aAAac,eAAehB,EAAKiB,QAAO,cAAAJ,EAAAK,GAAAL,EAAAnD,KAAAmD,EAAAC,OAAA,SAAAD,EAAAE,GAAxDI,KAAIC,KAAAP,EAAAE,GAAAF,EAAAK,GAAsD,WAAQ,wBAAAL,EAAAjD,UAAAgD,MALhD3D,IAQpCoE,oBAAmB,WAAI,IAADC,EAAA,KAClBzH,KAAKhB,WAAY,EACjBgB,KAAKG,kBAAkBuH,KAAK1H,KAAKf,iBAAiBsH,MAAK,WACnDkB,EAAKxI,gBAAkB,KACvBwI,EAAK/B,0BAA0B,CAC3BL,QAASoC,EAAK7F,IAAI,8CAA+C,QAEtE+F,OAAM,WACLF,EAAK5B,wBAAwB,CACzBR,QAASoC,EAAK7F,IAAI,4CAA6C,QAEpEgG,SAAQ,WACPH,EAAKzI,WAAY,MAIzB6I,kBAAiB,SAACC,GACd,OAAO/J,EAAOgK,SAASD,IAG3BE,cAAa,SAACvG,GACV,IAAMwG,EAAc,oCAAA7G,OAAuCK,GAE3D,OAAOzB,KAAKkI,IAAID,GAAkBjI,KAAK4B,IAAIqG,GAAkBxG,GAGjE0G,cAAa,SAAC1G,GACV,MAAO,CACH,gDAA2D,aAAVA,O,qBE9WjE,IAAI2G,EAAU,EAAQ,QACnBA,EAAQC,aAAYD,EAAUA,EAAQ3J,SACnB,iBAAZ2J,IAAsBA,EAAU,CAAC,CAACE,EAAOC,EAAIH,EAAS,MAC7DA,EAAQI,SAAQF,EAAOG,QAAUL,EAAQI,SAG/BE,EADH,EAAQ,QAAwEjK,SACzE,WAAY2J,GAAS,EAAM","file":"static/js/b3b6d202d6d936b53905.js","sourcesContent":["/**\n * @package services-settings\n */\nimport template from './sw-import-export-activity.html.twig';\nimport './sw-import-export-activity.scss';\n\nconst { Mixin } = Shopware;\nconst { Criteria } = Shopware.Data;\nconst { format } = Shopware.Utils;\n\n/**\n * @private\n */\nexport default {\n    template,\n\n    inject: ['repositoryFactory', 'importExport', 'feature'],\n\n    mixins: [\n        Mixin.getByName('notification'),\n    ],\n\n    props: {\n        type: {\n            type: String,\n            required: false,\n            default: 'import',\n            validValues: [\n                'import',\n                'export',\n            ],\n            validator(value) {\n                return [\n                    'import',\n                    'export',\n                ].includes(value);\n            },\n        },\n    },\n\n    data() {\n        return {\n            logs: null,\n            isLoading: false,\n            selectedProfile: null,\n            selectedLog: null,\n            selectedResult: null,\n            activitiesReloadIntervall: 10000,\n            activitiesReloadTimer: null,\n            showDetailModal: false,\n            showResultModal: false,\n            stateText: {\n                import: {\n                    succeeded: 'sw-import-export.importer.messageImportSuccess',\n                    failed: 'sw-import-export.importer.messageImportError',\n                },\n                dryrun: {\n                    succeeded: 'sw-import-export.importer.messageImportSuccess',\n                    failed: 'sw-import-export.importer.messageImportError',\n                },\n                export: {\n                    succeeded: 'sw-import-export.exporter.messageExportSuccess',\n                },\n            },\n        };\n    },\n\n    computed: {\n        logRepository() {\n            return this.repositoryFactory.create('import_export_log');\n        },\n\n        profileRepository() {\n            return this.repositoryFactory.create('import_export_profile');\n        },\n\n        activityCriteria() {\n            const criteria = new Shopware.Data.Criteria();\n\n            if (this.type === 'import') {\n                criteria.addFilter(Criteria.multi(\n                    'OR',\n                    [\n                        Criteria.equals('activity', 'import'),\n                        Criteria.equals('activity', 'dryrun'),\n                    ],\n                ));\n                criteria.getAssociation('invalidRecordsLog')\n                    .addAssociation('file');\n            } else if (this.type === 'export') {\n                criteria.addFilter(Criteria.equals('activity', 'export'));\n            }\n\n            criteria.addSorting(Criteria.sort('createdAt', 'DESC'));\n\n            criteria.setPage(1);\n            criteria.addAssociation('user');\n            criteria.addAssociation('file');\n            criteria.addAssociation('profile');\n\n            return criteria;\n        },\n\n        exportActivityColumns() {\n            return [\n                {\n                    property: 'createdAt',\n                    dataIndex: 'createdAt',\n                    label: 'sw-import-export.activity.columns.date',\n                    allowResize: true,\n                    primary: true,\n                },\n                {\n                    property: 'profileName',\n                    dataIndex: 'profile.label',\n                    label: 'sw-import-export.activity.columns.profile',\n                    allowResize: true,\n                    primary: false,\n                },\n                {\n                    property: 'state',\n                    dataIndex: 'state',\n                    label: 'sw-import-export.activity.columns.state',\n                    allowResize: true,\n                    primary: false,\n                },\n                {\n                    property: 'records',\n                    dataIndex: 'records',\n                    label: 'sw-import-export.activity.columns.records',\n                    allowResize: true,\n                    primary: false,\n                },\n                ...(this.type === 'import' ? [{\n                    property: 'invalidRecords',\n                    dataIndex: 'records',\n                    label: 'sw-import-export.activity.columns.invalidRecords',\n                    allowResize: true,\n                    primary: false,\n                }] : []),\n                {\n                    property: 'file.size',\n                    dataIndex: 'file.size',\n                    label: 'sw-import-export.activity.columns.size',\n                    allowResize: true,\n                    primary: false,\n                },\n                {\n                    property: 'user.lastName',\n                    dataIndex: 'user.lastName',\n                    label: 'sw-import-export.activity.columns.user',\n                    allowResize: true,\n                    primary: false,\n                }];\n        },\n\n        hasActivitiesInProgress() {\n            if (!this.logs) {\n                return false;\n            }\n\n            return this.logs.filter(log => log.state === 'progress').length > 0;\n        },\n\n        downloadFileText() {\n            return this.type === 'export' ?\n                this.$tc('sw-import-export.activity.contextMenu.downloadExportFile') :\n                this.$tc('sw-import-export.activity.contextMenu.downloadImportFile');\n        },\n\n        // show when not loading and logs are there\n        showGrid() {\n            return !this.isLoading && !!this.logs?.length > 0;\n        },\n\n        // show when not loading and logs aren't there\n        showEmptyState() {\n            return !this.isLoading && !!this.logs?.length <= 0;\n        },\n\n        // show when loading\n        showSpinner() {\n            return this.isLoading;\n        },\n\n        emptyStateSubLine() {\n            return this.type === 'export' ?\n                this.$tc('sw-import-export.activity.emptyState.subLineExport') :\n                this.$tc('sw-import-export.activity.emptyState.subLineImport');\n        },\n\n        emptyStateTitle() {\n            return this.type === 'export' ?\n                this.$tc('sw-import-export.activity.emptyState.titleExport') :\n                this.$tc('sw-import-export.activity.emptyState.titleImport');\n        },\n\n        dateFilter() {\n            return Shopware.Filter.getByName('date');\n        },\n    },\n\n    watch: {\n        hasActivitiesInProgress(hasActivitiesInProgress) {\n            if (hasActivitiesInProgress && !this.activitiesReloadTimer) {\n                this.activitiesReloadTimer = window.setInterval(\n                    this.updateActivitiesInProgress.bind(this),\n                    this.activitiesReloadIntervall,\n                );\n            } else if (this.activitiesReloadTimer) {\n                window.clearInterval(this.activitiesReloadTimer);\n                this.activitiesReloadTimer = null;\n            }\n        },\n    },\n\n    created() {\n        this.createdComponent();\n    },\n\n    destroyed() {\n        if (this.activitiesReloadTimer) {\n            window.clearInterval(this.activitiesReloadTimer);\n        }\n    },\n\n    methods: {\n        createdComponent() {\n            return this.fetchActivities();\n        },\n\n        addActivity(log) {\n            this.logs.addAt(log, 0);\n        },\n\n        async fetchActivities() {\n            this.isLoading = true;\n\n            const logs = await this.logRepository.search(this.activityCriteria);\n\n            if (this.logs) {\n                this.updateActivitiesFromLogs(logs);\n            }\n\n            this.logs = logs;\n\n            this.isLoading = false;\n        },\n\n        async updateActivitiesInProgress() {\n            const criteria = Criteria.fromCriteria(this.activityCriteria);\n            criteria.setIds(this.logs.filter(log => log.state === 'progress').getIds());\n            criteria.addAssociation('file');\n            const currentInProgress = await this.logRepository.search(criteria);\n\n            this.updateActivitiesFromLogs(currentInProgress);\n        },\n\n        updateActivitiesFromLogs(logs) {\n            Object.values(logs).forEach((log) => {\n                const activity = this.logs.get(log.id);\n\n                if (!activity) {\n                    return;\n                }\n\n                const originalState = activity.state;\n                Object.keys(log).forEach(key => {\n                    activity[key] = log[key];\n                });\n\n                if (originalState === log.state) {\n                    return;\n                }\n\n                const config = {\n                    message: this.$t((this.stateText?.[log.activity]?.[log.state] ?? ''), {\n                        profile: log.profileName,\n                    }),\n                    autoClose: false,\n                };\n\n                if (log.state === 'succeeded') {\n                    this.createNotificationSuccess(config);\n\n                    if (log.activity === 'import' && log.records === 0) {\n                        this.createNotificationWarning({\n                            message: this.$tc('sw-import-export.importer.messageImportWarning', 0),\n                            autoClose: false,\n                        });\n                    }\n\n                    return;\n                }\n\n                this.createNotificationError(config);\n            });\n        },\n\n        async onOpenProfile(id) {\n            this.selectedProfile = await this.profileRepository.get(id);\n        },\n\n        onAbortProcess(item) {\n            this.importExport.cancel(item.id).then(() => {\n                this.fetchActivities();\n            });\n        },\n\n        closeSelectedProfile() {\n            this.selectedProfile = null;\n        },\n\n        onShowLog(item) {\n            this.selectedLog = item;\n            this.showDetailModal = true;\n        },\n\n        onShowResult(item) {\n            this.selectedLog = item;\n            this.showResultModal = true;\n        },\n\n        closeSelectedLog() {\n            this.selectedLog = null;\n            this.showDetailModal = false;\n        },\n\n        closeSelectedResult() {\n            this.selectedResult = null;\n            this.showResultModal = false;\n        },\n\n        async openProcessFileDownload(item) {\n            if (this.type === 'export' && item.state !== 'succeeded') {\n                return null;\n            }\n\n            return window.open(await this.importExport.getDownloadUrl(item.fileId), '_blank');\n        },\n\n        saveSelectedProfile() {\n            this.isLoading = true;\n            this.profileRepository.save(this.selectedProfile).then(() => {\n                this.selectedProfile = null;\n                this.createNotificationSuccess({\n                    message: this.$tc('sw-import-export.profile.messageSaveSuccess', 0),\n                });\n            }).catch(() => {\n                this.createNotificationError({\n                    message: this.$tc('sw-import-export.profile.messageSaveError', 0),\n                });\n            }).finally(() => {\n                this.isLoading = false;\n            });\n        },\n\n        calculateFileSize(size) {\n            return format.fileSize(size);\n        },\n\n        getStateLabel(state) {\n            const translationKey = `sw-import-export.activity.status.${state}`;\n\n            return this.$te(translationKey) ? this.$tc(translationKey) : state;\n        },\n\n        getStateClass(state) {\n            return {\n                'sw-import-export-activity__progress-indicator': state === 'progress',\n            };\n        },\n    },\n};\n","export default \"\\n{% block sw_import_export_activity %}\\n<div class=\\\"sw-import-export-activity\\\">\\n    \\n    {% block sw_import_export_activity_listing %}\\n    <sw-entity-listing\\n        v-if=\\\"showGrid\\\"\\n        :repository=\\\"logRepository\\\"\\n        :items=\\\"logs\\\"\\n        :columns=\\\"exportActivityColumns\\\"\\n        sort-by=\\\"createdAt\\\"\\n        sort-direction=\\\"DESC\\\"\\n        :show-selection=\\\"false\\\"\\n        :allow-column-edit=\\\"false\\\"\\n        :full-page=\\\"true\\\"\\n    >\\n        \\n        {% block sw_import_export_activity_listing_size %}\\n        <template #column-file.size=\\\"{ item }\\\">\\n            {{ calculateFileSize(item.file.size) }}\\n        </template>\\n        {% endblock %}\\n        \\n        {% block sw_import_export_activity_listing_records %}\\n        <template #column-records=\\\"{ item }\\\">\\n            {{ item.records }}\\n        </template>\\n        {% endblock %}\\n        <template #column-label-invalidRecords=\\\"{ column }\\\">\\n            {{ $te(column.label) ? $tc(column.label) : column.label }}\\n            <sw-help-text\\n                class=\\\"sw-import-export-activity__invalid-records-help-text\\\"\\n                :text=\\\"$tc('sw-import-export.activity.invalidHelpText')\\\"\\n            />\\n        </template>\\n        \\n        {% block sw_import_export_activity_listing_invalid_records %}\\n        <template #column-invalidRecords=\\\"{ item }\\\">\\n            <template v-if=\\\"item.invalidRecordsLog\\\">\\n                {{ item.invalidRecordsLog.records }}\\n            </template>\\n            <template v-else>\\n                0\\n            </template>\\n        </template>\\n        {% endblock %}\\n        \\n        {% block sw_import_export_activity_listing_createdAt %}\\n        <template #column-createdAt=\\\"{ item }\\\">\\n            <sw-label\\n                v-if=\\\"item.activity === 'dryrun'\\\"\\n                size=\\\"small\\\"\\n                appearance=\\\"pill\\\"\\n            >\\n                {{ $tc('sw-import-export.activity.dryrun') }}\\n            </sw-label>\\n            <a\\n                href=\\\"#\\\"\\n                @click.prevent=\\\"onShowLog(item)\\\"\\n            >\\n                {{ dateFilter(item.createdAt, { hour: '2-digit', minute: '2-digit' }) }}\\n            </a>\\n        </template>\\n        {% endblock %}\\n\\n        \\n        {% block sw_import_export_activity_listing_state %}\\n        <template #column-state=\\\"{ item }\\\">\\n            <sw-color-badge\\n                v-if=\\\"item.state === 'failed'\\\"\\n                variant=\\\"error\\\"\\n                rounded\\n            />\\n            <sw-color-badge\\n                v-else-if=\\\"item.state === 'succeeded'\\\"\\n                variant=\\\"success\\\"\\n                rounded\\n            />\\n            <sw-color-badge\\n                v-else\\n                rounded\\n            />\\n            <span :class=\\\"getStateClass(item.state)\\\">{{ getStateLabel(item.state) }}</span>\\n        </template>\\n        {% endblock %}\\n\\n        \\n        {% block sw_import_export_activity_listing_actions %}\\n        <template #actions=\\\"{ item }\\\">\\n            \\n            {% block sw_import_export_activity_listing_actions_show_results %}\\n            <sw-context-menu-item\\n                v-if=\\\"item.result && Object.keys(item.result).length\\\"\\n                class=\\\"sw-import-export-activity__results-action\\\"\\n                @click=\\\"onShowResult(item)\\\"\\n            >\\n                {{ $tc('sw-import-export.activity.contextMenu.showResults') }}\\n            </sw-context-menu-item>\\n            {% endblock %}\\n            \\n            {% block sw_import_export_activity_listing_actions_show_log_info %}\\n            <sw-context-menu-item\\n                v-if=\\\"type === 'export'\\\"\\n                class=\\\"sw-import-export-activity__log-info-action\\\"\\n                @click=\\\"onShowLog(item)\\\"\\n            >\\n                {{ $tc('sw-import-export.activity.contextMenu.showLogInfo') }}\\n            </sw-context-menu-item>\\n            {% endblock %}\\n            \\n            {% block sw_import_export_activity_listing_actions_download_file %}\\n            <a\\n                class=\\\"sw-import-export-activity__download-action\\\"\\n                role=\\\"button\\\"\\n                tabindex=\\\"0\\\"\\n                @click=\\\"openProcessFileDownload(item)\\\"\\n                @keydown.enter=\\\"openProcessFileDownload(item)\\\"\\n            >\\n                <sw-context-menu-item :disabled=\\\"type === 'export' && item.state !== 'succeeded'\\\">\\n                    {{ downloadFileText }}\\n                </sw-context-menu-item>\\n            </a>\\n            {% endblock %}\\n            \\n            {% block sw_import_export_activity_listing_actions_open_profile %}\\n            <sw-context-menu-item @click=\\\"onOpenProfile(item.profileId)\\\">\\n                {{ $tc('sw-import-export.activity.contextMenu.showProfile') }}\\n            </sw-context-menu-item>\\n            {% endblock %}\\n            \\n            {% block sw_import_export_activity_listing_actions_abort_process %}\\n            <sw-context-menu-item\\n                v-if=\\\"item.state === 'progress'\\\"\\n                class=\\\"sw-import-export-activity__abort-process-action\\\"\\n                variant=\\\"danger\\\"\\n                @click=\\\"onAbortProcess(item)\\\"\\n            >\\n                {{ $tc('sw-import-export.activity.contextMenu.abortProcess') }}\\n            </sw-context-menu-item>\\n            {% endblock %}\\n            \\n            {% block sw_import_export_activity_listing_actions_download_invalid %}\\n            <template v-if=\\\"item.invalidRecordsLog\\\">\\n                <a\\n                    class=\\\"sw-import-export-activity__download-action\\\"\\n                    role=\\\"button\\\"\\n                    tabindex=\\\"0\\\"\\n                    @click=\\\"openProcessFileDownload(item.invalidRecordsLog)\\\"\\n                    @keydown.enter=\\\"openProcessFileDownload(item.invalidRecordsLog)\\\"\\n                >\\n                    <sw-context-menu-item>\\n                        {{ $tc('sw-import-export.activity.contextMenu.downloadInvalidFile') }}\\n                    </sw-context-menu-item>\\n                </a>\\n            </template>\\n            {% endblock %}\\n        </template>\\n        {% endblock %}\\n    </sw-entity-listing>\\n    {% endblock %}\\n\\n    \\n    {% block sw_import_export_activity_spinner %}\\n    <sw-loader v-else-if=\\\"showSpinner\\\" />\\n    {% endblock %}\\n\\n    \\n    {% block sw_import_export_activity_empty_state %}\\n    <sw-empty-state\\n        v-if=\\\"showEmptyState\\\"\\n        :title=\\\"emptyStateTitle\\\"\\n        :subline=\\\"emptyStateSubLine\\\"\\n        :absolute=\\\"false\\\"\\n        icon=\\\"regular-database\\\"\\n    />\\n    {% endblock %}\\n\\n    \\n    {% block sw_import_export_activity_log_info_modal %}\\n    <sw-import-export-activity-log-info-modal\\n        v-if=\\\"showDetailModal\\\"\\n        :log-entity=\\\"selectedLog\\\"\\n        @log-close=\\\"closeSelectedLog\\\"\\n    />\\n    {% endblock %}\\n\\n    \\n    {% block sw_import_export_activity_result_modal %}\\n    <sw-import-export-activity-result-modal\\n        v-if=\\\"showResultModal\\\"\\n        :log-entity=\\\"selectedLog\\\"\\n        :result=\\\"selectedResult\\\"\\n        @result-close=\\\"closeSelectedResult\\\"\\n    />\\n    {% endblock %}\\n\\n    \\n    {% block sw_import_export_activity_modal %}\\n    <sw-import-export-edit-profile-modal\\n        :profile=\\\"selectedProfile\\\"\\n        @profile-save=\\\"saveSelectedProfile\\\"\\n        @profile-close=\\\"closeSelectedProfile\\\"\\n    />\\n    {% endblock %}\\n</div>\\n{% endblock %}\\n\";","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../../../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--15-1!../../../../../node_modules/css-loader/dist/cjs.js??ref--15-2!../../../../../node_modules/sass-loader/dist/cjs.js??ref--15-3!./sw-import-export-activity.scss\");\nif(content.__esModule) content = content.default;\nif(typeof content === 'string') content = [[module.id, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar add = require(\"!../../../../../node_modules/vue-style-loader/lib/addStylesClient.js\").default\nvar update = add(\"e7b10830\", content, true, {});"],"sourceRoot":""}