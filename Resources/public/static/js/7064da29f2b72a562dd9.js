(this.webpackJsonpAdministration=this.webpackJsonpAdministration||[]).push([[397],{YsWm:function(e,t,n){"use strict";n.r(t);var r=n("7yzw"),o=n.n(r),s=n("92Mt"),i=n.n(s),l=(n("kym9"),Shopware.Mixin),a=Shopware.Data.Criteria;t.default={template:'\n{% block sw_property_list %}\n<sw-page class="sw-property-list">\n\n    \n    {% block sw_property_list_search_bar %}\n    <template #search-bar>\n        <sw-search-bar\n            initial-search-type="property"\n            :placeholder="$tc(\'sw-property.general.placeholderSearchBar\')"\n            @search="onSearch"\n        />\n    </template>\n    {% endblock %}\n\n    \n    {% block sw_property_list_smart_bar_header %}\n    <template #smart-bar-header>\n\n        \n        {% block sw_property_list_smart_bar_header_title %}\n        <h2>\n\n            \n            {% block sw_property_list_smart_bar_header_title_text %}\n            {{ $tc(\'sw-property.list.textProperties\') }}\n            {% endblock %}\n\n            \n            {% block sw_property_list_smart_bar_header_title_amount %}\n            <span\n                v-if="!isLoading"\n                class="sw-page__smart-bar-amount"\n            >\n                ({{ total }})\n            </span>\n            {% endblock %}\n\n        </h2>\n        {% endblock %}\n\n    </template>\n    {% endblock %}\n\n    \n    {% block sw_property_list_ %}\n    <template #smart-bar-actions>\n\n        \n        {% block sw_property_list_add_button %}\n        <sw-button\n            v-tooltip="{\n                message: $tc(\'sw-privileges.tooltip.warning\'),\n                disabled: acl.can(\'property.creator\'),\n                showOnDisabledElements: true\n            }"\n            class="sw-property-list__button-create"\n            :disabled="!acl.can(\'property.creator\')"\n            :router-link="{ name: \'sw.property.create\' }"\n            variant="primary"\n        >\n            {{ $tc(\'sw-property.list.buttonAddProperty\') }}\n        </sw-button>\n        {% endblock %}\n\n    </template>\n    {% endblock %}\n\n    \n    {% block sw_property_list_language_switch %}\n    <template #language-switch>\n        <sw-language-switch @on-change="onChangeLanguage" />\n    </template>\n    {% endblock %}\n\n    <template #content>\n\n        \n        {% block sw_property_list_content %}\n        <div class="sw-property-list__content">\n\n            \n            {% block sw_property_list_grid %}\n            <sw-entity-listing\n                v-if="entitySearchable"\n                ref="propertyList"\n                class="sw-property-list-grid"\n                :items="propertyGroup"\n                :columns="getPropertyColumns()"\n                :repository="propertyRepository"\n                :show-selection="false"\n                :show-settings="true"\n                :full-page="true"\n                :sort-by="currentSortBy"\n                :sort-direction="sortDirection"\n                :is-loading="isLoading"\n                :allow-column-edit="true"\n                :compact-mode="false"\n                :allow-edit="acl.can(\'property.editor\')"\n                :allow-delete="acl.can(\'property.deleter\')"\n                :allow-inline-edit="acl.can(\'property.editor\')"\n                identifier="sw-properties-list"\n                :disable-data-fetching="true"\n                @column-sort="onSortColumn"\n                @page-change="onPageChange"\n            >\n\n                \n                {% block sw_property_list_grid_options %}\n                <template\n                    #column-options="{ item }"\n                >\n                    <span\n                        v-for="(option, index) in item.options.slice(0, 4)"\n                        :key="option.id"\n                    >\n                        {{ (index > 0) ? `, ${option.translated.name}` : option.translated.name }}\n                    </span>\n                    <span v-if="item.options.length >= 5">\n                        , ...\n                    </span>\n                </template>\n                {% endblock %}\n\n                \n                {% block sw_property_list_grid_filterable %}\n                <template #column-filterable="{ item, isInlineEdit }">\n                    \n                    {% block sw_property_list_grid_columns_filterable_inline_edit %}\n                    <template v-if="isInlineEdit">\n                        <sw-checkbox-field\n                            {% if VUE3 %}\n                            v-model:value="item.filterable"\n                            {% else %}\n                            v-model="item.filterable"\n                            {% endif %}\n                        />\n                    </template>\n                    {% endblock %}\n\n                    \n                    {% block sw_property_list_grid_columns_filterable_content %}\n                    <template v-else>\n                        <sw-icon\n                            v-if="item.filterable"\n                            name="regular-checkmark-xs"\n                            class="is--active"\n                        />\n                        <sw-icon\n                            v-else\n                            name="regular-times-s"\n                            class="is--inactive"\n                        />\n                    </template>\n                    {% endblock %}\n                </template>\n                {% endblock %}\n\n                \n                {% block sw_property_list_grid_columns_actions %}\n                <template\n                    #actions="{ item }"\n                >\n                    \n                    {% block sw_property_list_grid_columns_actions_detail %}\n                    <sw-context-menu-item\n                        class="sw-property-list__edit-action"\n                        :router-link="{ name: \'sw.property.detail\', params: { id: item.id } }"\n                        :disabled="!acl.can(\'property.editor\')"\n                    >\n                        {{ $tc(\'sw-property.list.contextMenuView\') }}\n                    </sw-context-menu-item>\n                    {% endblock %}\n\n                    \n                    {% block sw_property_list_grid_columns_actions_delete %}\n                    <sw-context-menu-item\n                        class="sw-property-list__delete-action"\n                        variant="danger"\n                        :disabled=" !acl.can(\'property.deleter\')"\n                        @click="onDelete(item.id)"\n                    >\n                        {{ $tc(\'sw-property.list.contextMenuDelete\') }}\n                    </sw-context-menu-item>\n                    {% endblock %}\n                </template>\n                {% endblock %}\n\n                \n                {% block sw_product_list_grid_action_modals %}\n                <template\n                    #action-modals="{ item }"\n                >\n                    <sw-modal\n                        v-if="showDeleteModal === item.id"\n                        variant="small"\n                        :title="$tc(\'global.default.warning\')"\n                        @modal-close="onCloseDeleteModal"\n                    >\n                        <p class="sw-property-list__confirm-delete-text">\n                            {{ $tc(\'sw-property.list.textDeleteConfirm\', 0, { name: item.translated.name }) }}\n                        </p>\n\n                        <template #modal-footer>\n                            <sw-button\n                                size="small"\n                                @click="onCloseDeleteModal"\n                            >\n                                {{ $tc(\'sw-property.list.buttonCancel\') }}\n                            </sw-button>\n\n                            <sw-button\n                                variant="danger"\n                                size="small"\n                                @click="onConfirmDelete(item.id)"\n                            >\n                                {{ $tc(\'sw-property.list.buttonDelete\') }}\n                            </sw-button>\n                        </template>\n                    </sw-modal>\n                </template>\n                {% endblock %}\n\n            </sw-entity-listing>\n            {% endblock %}\n\n            \n            {% block sw_property_list_empty_state %}\n            <template v-if="!isLoading && !total">\n                <sw-empty-state\n                    v-if="isValidTerm(term)"\n                    :title="$tc(\'sw-empty-state.messageNoResultTitle\')"\n                >\n                    <template #default>\n                        {{ $tc(\'sw-empty-state.messageNoResultSublineBefore\') }}\n                        <router-link\n                            class="sw-empty-state__description-link"\n                            :to="{ name: \'sw.profile.index.searchPreferences\' }"\n                        >\n                            {{ $tc(\'sw-empty-state.messageNoResultSublineLink\') }}\n                        </router-link>\n                        {{ $tc(\'sw-empty-state.messageNoResultSublineAfter\') }}\n                    </template>\n                </sw-empty-state>\n\n                <sw-empty-state\n                    v-else\n                    :title="$tc(\'sw-property.list.messageEmpty\')"\n                />\n            </template>\n            {% endblock %}\n        </div>\n        {% endblock %}\n    </template>\n\n    \n    {% block sw_property_list_sidebar %}\n    <template #sidebar>\n        <sw-sidebar>\n            \n            {% block sw_property_list_sidebar_refresh_item %}\n            <sw-sidebar-item\n                icon="regular-undo"\n                :title="$tc(\'sw-property.list.titleSidebarItemRefresh\')"\n                @click="onRefresh"\n            />\n            {% endblock %}\n        </sw-sidebar>\n    </template>\n    {% endblock %}\n</sw-page>\n{% endblock %}\n',inject:["repositoryFactory","acl"],mixins:[l.getByName("listing")],data:function(){return{propertyGroup:null,sortBy:"name",isLoading:!1,sortDirection:"ASC",showDeleteModal:!1,searchConfigEntity:"property_group"}},metaInfo:function(){return{title:this.$createTitle()}},computed:{propertyRepository:function(){return this.repositoryFactory.create("property_group")},defaultCriteria:function(){var e=new a(this.page,this.limit);return e.setTerm(this.term),e.addSorting(a.sort(this.sortBy,this.sortDirection,this.useNaturalSorting)),e.addAssociation("options"),e},useNaturalSorting:function(){return"property.name"===this.sortBy}},methods:{onDelete:function(e){this.showDeleteModal=e},onCloseDeleteModal:function(){this.showDeleteModal=!1},onConfirmDelete:function(e){var t=this;return this.showDeleteModal=!1,this.propertyRepository.delete(e).then((function(){t.getList()}))},onChangeLanguage:function(){this.getList()},getList:function(){var e=this;return o()(i.a.mark((function t(){var n;return i.a.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return e.isLoading=!0,t.next=3,e.addQueryScores(e.term,e.defaultCriteria);case 3:if(n=t.sent,e.entitySearchable){t.next=8;break}return e.isLoading=!1,e.total=0,t.abrupt("return",!1);case 8:return e.freshSearchTerm&&n.resetSorting(),t.abrupt("return",e.propertyRepository.search(n).then((function(t){return e.total=t.total,e.propertyGroup=t,e.isLoading=!1,t})).catch((function(){e.isLoading=!1})));case 10:case"end":return t.stop()}}),t)})))()},getPropertyColumns:function(){return[{property:"name",label:"sw-property.list.columnName",routerLink:"sw.property.detail",inlineEdit:"string",allowResize:!0,primary:!0},{property:"options",label:"sw-property.list.columnOptions",allowResize:!0},{property:"description",label:"sw-property.list.columnDescription",allowResize:!0},{property:"filterable",label:"sw-property.list.columnFilterable",inlineEdit:"boolean",allowResize:!0,align:"center"}]}}}},Zujq:function(e,t,n){},kym9:function(e,t,n){var r=n("Zujq");r.__esModule&&(r=r.default),"string"==typeof r&&(r=[[e.i,r,""]]),r.locals&&(e.exports=r.locals);(0,n("P8hj").default)("6610f926",r,!0,{})}}]);
//# sourceMappingURL=7064da29f2b72a562dd9.js.map