{"version":3,"sources":["webpack:///./src/module/sw-settings-currency/component/sw-settings-currency-country-modal/index.js","webpack:///./src/module/sw-settings-currency/component/sw-settings-currency-country-modal/sw-settings-currency-country-modal.html.twig"],"names":["Mixin","Shopware","Criteria","Data","mapPropertyErrors","Component","getComponentHelper","template","inject","mixins","getByName","props","currencyCountryRounding","type","Object","required","data","assignedCountryIds","computed","_objectSpread","countryCriteria","criteria","addSorting","sort","countryRepository","this","repositoryFactory","create","assignedCountriesCriteria","addAssociation","addFilter","equals","currencyId","created","createdComponent","methods","_this","searchIds","Context","api","then","res","onCancel","$emit","onSave","shouldDisableCountry","country","countryId","id","includes"],"mappings":"mXAKA,IAAQA,EAAUC,SAAVD,MACAE,EAAaD,SAASE,KAAtBD,SACAE,EAAsBH,SAASI,UAAUC,qBAAzCF,kBAGO,WACXG,SCXW,4wGDaXC,OAAQ,CAAC,qBAETC,OAAQ,CACJT,EAAMU,UAAU,iBAGpBC,MAAO,CACHC,wBAAyB,CACrBC,KAAMC,OACNC,UAAU,IAIlBC,KAAI,WACA,MAAO,CACHC,mBAAoB,KAI5BC,S,iWAAQC,CAAA,CACJC,gBAAe,WACX,IAAMC,EAAW,IAAInB,EAAS,EAAG,IAEjC,OADAmB,EAASC,WAAWpB,EAASqB,KAAK,OAAQ,QACnCF,GAGXG,kBAAiB,WACb,OAAOC,KAAKC,kBAAkBC,OAAO,YAGzCC,0BAAyB,WACrB,IAAMP,EAAW,IAAInB,EAAS,EAAG,KASjC,OARAmB,EAASQ,eAAe,4BACxBR,EAASS,UACL5B,EAAS6B,OACL,sCACAN,KAAKb,wBAAwBoB,aAI9BX,IAGRjB,EAAkB,0BAA2B,CAAC,eAGrD6B,QAAO,WACHR,KAAKS,oBAGTC,QAAS,CACLD,iBAAgB,WAAI,IAADE,EAAA,KACfX,KAAKD,kBAAkBa,UAAUZ,KAAKG,0BAA2B3B,SAASqC,QAAQC,KAAKC,MAAK,SAAAC,GACxFL,EAAKnB,mBAAqBwB,EAAIzB,SAItC0B,SAAQ,WACJjB,KAAKkB,MAAM,gBAGfC,OAAM,WACFnB,KAAKkB,MAAM,SAGfE,qBAAoB,SAACC,GAEjB,OAAIrB,KAAKb,wBAAwBmC,YAAcD,EAAQE,IAIhDvB,KAAKR,mBAAmBgC,SAASH,EAAQE","file":"static/js/2be5a23209e1506eab6e.js","sourcesContent":["/**\n * @package buyers-experience\n */\nimport template from './sw-settings-currency-country-modal.html.twig';\n\nconst { Mixin } = Shopware;\nconst { Criteria } = Shopware.Data;\nconst { mapPropertyErrors } = Shopware.Component.getComponentHelper();\n\n// eslint-disable-next-line sw-deprecation-rules/private-feature-declarations\nexport default {\n    template,\n\n    inject: ['repositoryFactory'],\n\n    mixins: [\n        Mixin.getByName('notification'),\n    ],\n\n    props: {\n        currencyCountryRounding: {\n            type: Object,\n            required: true,\n        },\n    },\n\n    data() {\n        return {\n            assignedCountryIds: [],\n        };\n    },\n\n    computed: {\n        countryCriteria() {\n            const criteria = new Criteria(1, 25);\n            criteria.addSorting(Criteria.sort('name', 'ASC'));\n            return criteria;\n        },\n\n        countryRepository() {\n            return this.repositoryFactory.create('country');\n        },\n\n        assignedCountriesCriteria() {\n            const criteria = new Criteria(1, 500);\n            criteria.addAssociation('currencyCountryRoundings');\n            criteria.addFilter(\n                Criteria.equals(\n                    'currencyCountryRoundings.currencyId',\n                    this.currencyCountryRounding.currencyId,\n                ),\n            );\n\n            return criteria;\n        },\n\n        ...mapPropertyErrors('currencyCountryRounding', ['countryId']),\n    },\n\n    created() {\n        this.createdComponent();\n    },\n\n    methods: {\n        createdComponent() {\n            this.countryRepository.searchIds(this.assignedCountriesCriteria, Shopware.Context.api).then(res => {\n                this.assignedCountryIds = res.data;\n            });\n        },\n\n        onCancel() {\n            this.$emit('edit-cancel');\n        },\n\n        onSave() {\n            this.$emit('save');\n        },\n\n        shouldDisableCountry(country) {\n            // Do not disable if the country is already selected for this currency country rounding\n            if (this.currencyCountryRounding.countryId === country.id) {\n                return false;\n            }\n\n            return this.assignedCountryIds.includes(country.id);\n        },\n    },\n};\n","export default \"\\n{% block sw_settings_currency_country_modal %}\\n<sw-modal\\n    class=\\\"sw-settings-currency-country-modal\\\"\\n    :title=\\\"$tc('sw-settings-currency.currency-country-modal.titleNewCurrencyCountry')\\\"\\n    @modal-close=\\\"onCancel\\\"\\n>\\n    \\n    {% block sw_settings_currency_country_modal_country_select %}\\n    <sw-entity-single-select\\n        {% if VUE3 %}\\n        v-model:value=\\\"currencyCountryRounding.countryId\\\"\\n        {% else %}\\n        v-model=\\\"currencyCountryRounding.countryId\\\"\\n        {% endif %}\\n        required\\n        show-clearable-button\\n        class=\\\"sw-settings-currency-country-modal__select-country\\\"\\n        :label=\\\"$tc('sw-settings-currency.currency-country-modal.labelCountrySelect')\\\"\\n        entity=\\\"country\\\"\\n        :criteria=\\\"countryCriteria\\\"\\n        :error=\\\"currencyCountryRoundingCountryIdError\\\"\\n    >\\n        <template #result-item=\\\"{ item, index, labelProperty, searchTerm, highlightSearchTerm, isSelected, setValue, getKey }\\\">\\n            <sw-select-result\\n                v-tooltip=\\\"{\\n                    showDelay: 300,\\n                    showOnDisabledElements: true,\\n                    message: $tc('sw-settings-currency.currency-country-modal.countryAlreadyAssigned'),\\n                    disabled: !shouldDisableCountry(item)\\n                }\\\"\\n                :selected=\\\"isSelected(item)\\\"\\n                :disabled=\\\"shouldDisableCountry(item)\\\"\\n                v-bind=\\\"{ item, index }\\\"\\n                @item-select=\\\"setValue\\\"\\n            >\\n                <slot\\n                    name=\\\"result-label-property\\\"\\n                    v-bind=\\\"{ item, index, labelProperty, searchTerm, highlightSearchTerm, getKey }\\\"\\n                >\\n                    <sw-highlight-text\\n                        v-if=\\\"highlightSearchTerm\\\"\\n                        :text=\\\"getKey(item, labelProperty) || getKey(item, `translated.${labelProperty}`)\\\"\\n                        :search-term=\\\"searchTerm\\\"\\n                    />\\n                    <template v-else>\\n                        {{ getKey(item, labelProperty) || getKey(item, `translated.${labelProperty}`) }}\\n                    </template>\\n                </slot>\\n            </sw-select-result>\\n        </template>\\n    </sw-entity-single-select>\\n    {% endblock %}\\n\\n    \\n    {% block sw_settings_currency_country_modal_price_rounding %}\\n    <sw-settings-price-rounding\\n        :item-rounding=\\\"currencyCountryRounding.itemRounding\\\"\\n        :total-rounding=\\\"currencyCountryRounding.totalRounding\\\"\\n    />\\n    {% endblock %}\\n\\n    \\n    {% block sw_settings_currency_country_modal_footer %}\\n    <template #modal-footer>\\n        \\n        {% block sw_settings_currency_country_modal_footer_cancel %}\\n        <sw-button\\n            size=\\\"small\\\"\\n            @click=\\\"onCancel\\\"\\n        >\\n            {{ $tc('global.default.cancel') }}\\n        </sw-button>\\n        {% endblock %}\\n\\n        \\n        {% block sw_settings_currency_country_modal_footer_save %}\\n        <sw-button\\n            variant=\\\"primary\\\"\\n            size=\\\"small\\\"\\n            class=\\\"sw-settings-currency-country-modal__button-save\\\"\\n            @click=\\\"onSave\\\"\\n        >\\n            {{ $tc('global.default.save') }}\\n        </sw-button>\\n        {% endblock %}\\n    </template>\\n    {% endblock %}\\n</sw-modal>\\n{% endblock %}\\n\";"],"sourceRoot":""}