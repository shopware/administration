{"version":3,"sources":["webpack:///./src/app/asyncComponent/media/sw-media-preview-v2/sw-media-preview-v2.scss","webpack:///./src/app/asyncComponent/media/sw-media-preview-v2/index.js","webpack:///./src/app/asyncComponent/media/sw-media-preview-v2/sw-media-preview-v2.html.twig"],"names":["content","__esModule","default","module","i","locals","exports","add","_Shopware","Shopware","Context","Filter","fileReader","Utils","template","inject","playableVideoFormats","playableAudioFormats","placeholderThumbnailsBasePath","placeHolderThumbnails","application","illustrator","postscript","msword","pdf","video","quicktime","mp4","text","csv","plain","image","gif","jpeg","props","source","required","showControls","type","Boolean","autoplay","transparency","useThumbnails","hideTooltip","mediaIsPrivate","data","trueSource","width","dataUrl","urlPreviewFailed","imagePreviewFailed","computed","mediaRepository","this","repositoryFactory","create","mediaPreviewClasses","isIcon","transparencyClass","canBeTransparent","mimeTypeGroup","mimeType","File","URL","split","isPlayable","$options","includes","test","placeholderIcon","mediaTypeIconGroup","mediaTypeIcon","concat","placeholderIconPath","lockIsVisible","previewUrl","isFile","getDataUrlFromFile","isUrl","href","feature","isActive","url","createId","alt","fileName","mediaName","mediaNameFilter","$tc","getByName","assetFilter","sourceSet","_this","thumbnails","length","sources","forEach","thumbnail","encoded","encodeURI","push","join","watch","fetchSourceIfNecessary","created","createdComponent","mounted","mountedComponent","methods","$el","offsetWidth","_this2","_asyncToGenerator","_regeneratorRuntime","mark","_callee","wrap","_context","prev","next","abrupt","get","api","sent","stop","onPlayClick","originalDomEvent","shiftKey","ctrlKey","stopPropagation","$emit","item","_this3","_callee2","_context2","readAsDataURL","removeUrlPreview","showEvent"],"mappings":"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","file":"static/js/e1245758735a46f5350f.js","sourcesContent":["// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../../../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--15-1!../../../../../node_modules/css-loader/dist/cjs.js??ref--15-2!../../../../../node_modules/sass-loader/dist/cjs.js??ref--15-3!./sw-media-preview-v2.scss\");\nif(content.__esModule) content = content.default;\nif(typeof content === 'string') content = [[module.id, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar add = require(\"!../../../../../node_modules/vue-style-loader/lib/addStylesClient.js\").default\nvar update = add(\"08899646\", content, true, {});","import template from './sw-media-preview-v2.html.twig';\nimport './sw-media-preview-v2.scss';\n\nconst { Context, Filter } = Shopware;\nconst { fileReader } = Shopware.Utils;\n\n/**\n * @status ready\n * @description The <u>sw-media-preview-v2</u> component is used to show a preview of media objects.\n * @package content\n * @example-type code-only\n * @component-example\n * <sw-media-preview-v2\n *      :source=\"item.id\"\n *      :show-controls=\"true\"\n *      :autoplay=\"false\"\n *      :use-thumbnails=\"false\">\n * </sw-media-preview-v2>\n */\n// eslint-disable-next-line sw-deprecation-rules/private-feature-declarations\nexport default {\n    template,\n\n    inject: ['repositoryFactory', 'feature'],\n\n    playableVideoFormats: [\n        'video/mp4',\n        'video/ogg',\n        'video/webm',\n    ],\n\n    playableAudioFormats: [\n        'audio/mp3',\n        'audio/mpeg',\n        'audio/ogg',\n        'audio/wav',\n    ],\n\n    placeholderThumbnailsBasePath: '/administration/static/img/media-preview/',\n\n    placeHolderThumbnails: {\n        application: {\n            'adobe.illustrator': 'icons-multicolor-file-thumbnail-ai',\n            illustrator: 'icons-multicolor-file-thumbnail-ai',\n            postscript: 'icons-multicolor-file-thumbnail-ai',\n            msword: 'icons-multicolor-file-thumbnail-doc',\n            'vnd.openxmlformats-officedocument.wordprocessingml.document': 'icons-multicolor-file-thumbnail-doc',\n            pdf: 'icons-multicolor-file-thumbnail-pdf',\n            'vnd.ms-excel': 'icons-multicolor-file-thumbnail-xls',\n            'vnd.openxmlformats-officedocument.spreadsheetml.sheet': 'icons-multicolor-file-thumbnail-xls',\n            'vnd.ms-powerpoint': 'icons-multicolor-file-thumbnail-ppt',\n            'vnd.openxmlformats-officedocument.presentationml.presentation': 'icons-multicolor-file-thumbnail-ppt',\n        },\n        video: {\n            'x-msvideo': 'icons-multicolor-file-thumbnail-avi',\n            quicktime: 'icons-multicolor-file-thumbnail-mov',\n            mp4: 'icons-multicolor-file-thumbnail-mp4',\n        },\n        text: {\n            csv: 'icons-multicolor-file-thumbnail-csv',\n            plain: 'icons-multicolor-file-thumbnail-csv',\n        },\n        image: {\n            gif: 'icons-multicolor-file-thumbnail-gif',\n            jpeg: 'icons-multicolor-file-thumbnail-jpg',\n            'svg+xml': 'icons-multicolor-file-thumbnail-svg',\n        },\n    },\n\n    props: {\n        // FIXME: add type to property\n        // eslint-disable-next-line vue/require-prop-types\n        source: {\n            required: true,\n        },\n\n        showControls: {\n            type: Boolean,\n            required: false,\n            default: false,\n        },\n\n        autoplay: {\n            type: Boolean,\n            required: false,\n            default: false,\n        },\n\n        transparency: {\n            type: Boolean,\n            required: false,\n            // TODO: Boolean props should only be opt in and therefore default to false\n            // eslint-disable-next-line vue/no-boolean-default\n            default: true,\n        },\n\n        useThumbnails: {\n            type: Boolean,\n            required: false,\n            // TODO: Boolean props should only be opt in and therefore default to false\n            // eslint-disable-next-line vue/no-boolean-default\n            default: true,\n        },\n\n        hideTooltip: {\n            type: Boolean,\n            required: false,\n            // TODO: Boolean props should only be opt in and therefore default to false\n            // eslint-disable-next-line vue/no-boolean-default\n            default: true,\n        },\n\n        mediaIsPrivate: {\n            type: Boolean,\n            required: false,\n            default: false,\n        },\n    },\n\n    data() {\n        return {\n            trueSource: null,\n            width: 0,\n            dataUrl: '',\n            urlPreviewFailed: false,\n            imagePreviewFailed: false,\n        };\n    },\n\n    computed: {\n        mediaRepository() {\n            return this.repositoryFactory.create('media');\n        },\n\n        mediaPreviewClasses() {\n            return {\n                'is--icon': this.isIcon,\n                'is--no-media': !this.source,\n            };\n        },\n\n        transparencyClass() {\n            return {\n                'shows--transparency': this.canBeTransparent,\n            };\n        },\n\n        canBeTransparent() {\n            if (!this.transparency) {\n                return false;\n            }\n\n            return this.isIcon || this.mimeTypeGroup === 'image';\n        },\n\n        mimeType() {\n            if (!this.trueSource) {\n                return '';\n            }\n\n            if (this.trueSource instanceof File) {\n                return this.trueSource.type;\n            }\n\n            if (this.trueSource instanceof URL) {\n                return 'application/octet-stream';\n            }\n\n            return this.trueSource.mimeType;\n        },\n\n        mimeTypeGroup() {\n            if (!this.mimeType) {\n                return '';\n            }\n\n            return this.mimeType.split('/')[0];\n        },\n\n        isPlayable() {\n            if (this.$options.playableVideoFormats.includes(this.mimeType)) {\n                return true;\n            }\n\n            if (this.$options.playableAudioFormats.includes(this.mimeType)) {\n                return true;\n            }\n\n            return false;\n        },\n\n        isIcon() {\n            return /.*svg.*/.test(this.mimeType);\n        },\n\n        placeholderIcon() {\n            if (!this.mimeType) {\n                return 'icons-multicolor-file-thumbnail-broken';\n            }\n\n            const mediaTypeIconGroup = this.$options.placeHolderThumbnails[this.mimeTypeGroup];\n            if (mediaTypeIconGroup) {\n                const mediaTypeIcon = mediaTypeIconGroup[`${this.mimeType.split('/')[1]}`];\n                if (mediaTypeIcon) {\n                    return mediaTypeIcon;\n                }\n            }\n\n            return 'icons-multicolor-file-thumbnail-normal';\n        },\n\n        placeholderIconPath() {\n            return `${this.$options.placeholderThumbnailsBasePath}${this.placeholderIcon}.svg`;\n        },\n\n        lockIsVisible() {\n            return this.width > 40;\n        },\n\n        previewUrl() {\n            if (this.isFile) {\n                this.getDataUrlFromFile();\n                return this.dataUrl;\n            }\n\n            if (this.isUrl) {\n                return this.trueSource.href;\n            }\n\n            if (this.feature.isActive('MEDIA_PATH') || this.feature.isActive('v6.6.0.0')) {\n                return this.trueSource.url;\n            }\n\n            return `${this.trueSource.url}?${Shopware.Utils.createId()}`;\n        },\n\n        isUrl() {\n            return this.trueSource instanceof URL;\n        },\n\n        isFile() {\n            return this.trueSource instanceof File;\n        },\n\n        alt() {\n            if (this.trueSource.alt) {\n                return this.trueSource.alt;\n            }\n            return this.trueSource.fileName;\n        },\n\n        mediaName() {\n            if (!this.trueSource) {\n                return this.$tc('global.sw-media-preview-v2.textNoMedia');\n            }\n\n            return this.mediaNameFilter(this.trueSource, this.trueSource.fileName);\n        },\n\n        mediaNameFilter() {\n            return Filter.getByName('mediaName');\n        },\n\n        assetFilter() {\n            return Filter.getByName('asset');\n        },\n\n        sourceSet() {\n            if (this.isFile || this.isUrl) {\n                return '';\n            }\n\n            if (this.trueSource.thumbnails.length === 0) {\n                return '';\n            }\n\n            const sources = [];\n            this.trueSource.thumbnails.forEach((thumbnail) => {\n                let url;\n\n                if (this.feature.isActive('MEDIA_PATH') || this.feature.isActive('v6.6.0.0')) {\n                    url = thumbnail.url;\n                } else {\n                    url = `${thumbnail.url}?${Shopware.Utils.createId()}`;\n                }\n\n                const encoded = encodeURI(url);\n                sources.push(`${encoded} ${thumbnail.width}w`);\n            });\n\n            return sources.join(', ');\n        },\n    },\n\n    watch: {\n        source() {\n            this.urlPreviewFailed = false;\n            this.imagePreviewFailed = false;\n            this.fetchSourceIfNecessary();\n        },\n    },\n\n    created() {\n        this.createdComponent();\n    },\n\n    mounted() {\n        this.mountedComponent();\n    },\n\n    methods: {\n        createdComponent() {\n            this.fetchSourceIfNecessary();\n        },\n\n        mountedComponent() {\n            this.width = this.$el.offsetWidth;\n        },\n\n        async fetchSourceIfNecessary() {\n            if (!this.source) {\n                return;\n            }\n\n            if (typeof this.source === 'string') {\n                this.trueSource = await this.mediaRepository.get(this.source, Context.api);\n            } else {\n                this.trueSource = this.source;\n                if (this.source[0]) {\n                    this.trueSource = this.source[0];\n                }\n            }\n        },\n\n        onPlayClick(originalDomEvent) {\n            if (!(originalDomEvent.shiftKey || originalDomEvent.ctrlKey)) {\n                originalDomEvent.stopPropagation();\n                this.$emit('media-preview-play', {\n                    originalDomEvent,\n                    item: this.trueSource,\n                });\n            }\n        },\n\n        async getDataUrlFromFile() {\n            if (this.mimeTypeGroup !== 'image') {\n                return;\n            }\n\n            this.dataUrl = await fileReader.readAsDataURL(this.trueSource);\n        },\n\n        removeUrlPreview() {\n            this.urlPreviewFailed = true;\n        },\n\n        showEvent() {\n            if (!this.isFile) {\n                this.imagePreviewFailed = true;\n            }\n        },\n    },\n};\n","export default \"\\n{% block sw_media_preview_v2 %}\\n<div\\n    v-tooltip.bottom=\\\"{ message: mediaName, disabled: hideTooltip }\\\"\\n    class=\\\"sw-media-preview-v2\\\"\\n    :class=\\\"mediaPreviewClasses\\\"\\n>\\n    \\n    {% block sw_media_preview_v2_no_media %}\\n    <template v-if=\\\"!source\\\">\\n        \\n        {% block sw_media_preview_v2_no_media_icon %}\\n        <sw-icon\\n            name=\\\"regular-image\\\"\\n            size=\\\"16px\\\"\\n        />\\n        {% endblock %}\\n    </template>\\n    {% endblock %}\\n\\n    \\n    {% block sw_media_preview_v2_file_types %}\\n    <template v-else>\\n        \\n        {% block sw_media_preview_v2_file_type_check %}\\n        <template v-if=\\\"mimeTypeGroup === 'image'\\\">\\n            \\n            {% block sw_media_preview_v2_file_type_image %}\\n            \\n            <img\\n                v-if=\\\"!imagePreviewFailed\\\"\\n                class=\\\"sw-media-preview-v2__item\\\"\\n                :class=\\\"transparencyClass\\\"\\n                :src=\\\"previewUrl\\\"\\n                :alt=\\\"alt\\\"\\n                :srcset=\\\"sourceSet\\\"\\n                :sizes=\\\"`${width}px`\\\"\\n                draggable=\\\"false\\\"\\n                @click=\\\"$emit('click')\\\"\\n                @error=\\\"showEvent\\\"\\n            >\\n            <img\\n                v-else\\n                class=\\\"sw-media-preview-v2__item\\\"\\n                :src=\\\"assetFilter(placeholderIconPath)\\\"\\n                :alt=\\\"mimeType\\\"\\n            >\\n            <sw-icon\\n                v-if=\\\"mediaIsPrivate && lockIsVisible\\\"\\n                class=\\\"sw-media-preview-v2__locked-icon sw-icon--small\\\"\\n                name=\\\"regular-lock\\\"\\n                multicolor\\n            />\\n            {% endblock %}\\n        </template>\\n\\n        <template v-else-if=\\\"isPlayable && mimeTypeGroup === 'video'\\\">\\n            \\n            {% block sw_media_preview_v2_file_type_video %}\\n            <img\\n                v-if=\\\"mediaIsPrivate\\\"\\n                class=\\\"sw-media-preview-v2__item\\\"\\n                :src=\\\"assetFilter(placeholderIconPath)\\\"\\n                :alt=\\\"mimeType\\\"\\n            >\\n            \\n            <video\\n                :controls=\\\"showControls\\\"\\n                :autoplay=\\\"autoplay\\\"\\n                controlsList=\\\"nodownload\\\"\\n                class=\\\"sw-media-preview-v2__item\\\"\\n            >\\n                <source\\n                    :src=\\\"previewUrl\\\"\\n                    :type=\\\"mimeType\\\"\\n                >\\n                {{ $tc('global.sw-media-preview-v2.fallbackVideoTagSupport') }}\\n            </video>\\n            <button\\n                v-if=\\\"!showControls && !mediaIsPrivate\\\"\\n                class=\\\"sw-media-preview-v2__play-button\\\"\\n                @click=\\\"onPlayClick\\\"\\n            >\\n                <sw-icon\\n                    class=\\\"sw-media-preview-v2__play-icon\\\"\\n                    name=\\\"multicolor-action-play\\\"\\n                    multicolor\\n                />\\n            </button>\\n            <sw-icon\\n                v-if=\\\"mediaIsPrivate && lockIsVisible\\\"\\n                class=\\\"sw-media-preview-v2__locked-icon sw-icon--small\\\"\\n                name=\\\"regular-lock\\\"\\n                multicolor\\n            />\\n            {% endblock %}\\n        </template>\\n\\n        <template v-else-if=\\\"isPlayable && mimeTypeGroup === 'audio'\\\">\\n            \\n            {% block sw_media_preview_v2_file_type_audio %}\\n            <img\\n                class=\\\"sw-media-preview-v2__item\\\"\\n                :src=\\\"assetFilter(placeholderIconPath)\\\"\\n                :alt=\\\"mimeType\\\"\\n            >\\n            \\n            <audio\\n                :controls=\\\"showControls\\\"\\n                :autoplay=\\\"autoplay\\\"\\n                controlsList=\\\"nodownload\\\"\\n                class=\\\"sw-media-preview-v2__item sw-media-preview-v2__item--audio\\\"\\n            >\\n                <source\\n                    :src=\\\"previewUrl\\\"\\n                    :type=\\\"mimeType\\\"\\n                >\\n                {{ $tc('global.sw-media-preview-v2.fallbackAudioTagSupport') }}\\n            </audio>\\n            <button\\n                v-if=\\\"!showControls\\\"\\n                class=\\\"sw-media-preview-v2__play-button\\\"\\n                @click=\\\"onPlayClick\\\"\\n            >\\n                <sw-icon\\n                    class=\\\"sw-media-preview-v2__play-icon\\\"\\n                    name=\\\"multicolor-action-play\\\"\\n                    multicolor\\n                />\\n            </button>\\n            <sw-icon\\n                v-if=\\\"mediaIsPrivate && lockIsVisible\\\"\\n                class=\\\"sw-media-preview-v2__locked-icon sw-icon--small\\\"\\n                name=\\\"regular-lock\\\"\\n                multicolor\\n            />\\n            {% endblock %}\\n        </template>\\n\\n        <template v-else-if=\\\"isUrl && !urlPreviewFailed\\\">\\n            <img\\n                :src=\\\"previewUrl\\\"\\n                class=\\\"sw-media-preview-v2__item\\\"\\n                draggable=\\\"false\\\"\\n                :alt=\\\"mimeType\\\"\\n                @error=\\\"removeUrlPreview\\\"\\n            >\\n        </template>\\n\\n        <template v-else>\\n            \\n            {% block sw_media_preview_v2_file_type_placeholder %}\\n            <img\\n                class=\\\"sw-media-preview-v2__item sw-media-preview-v2__placeholder\\\"\\n                :src=\\\"assetFilter(placeholderIconPath)\\\"\\n                :alt=\\\"mimeType\\\"\\n            >\\n            {% endblock %}\\n            <sw-icon\\n                v-if=\\\"mediaIsPrivate && lockIsVisible\\\"\\n                class=\\\"sw-media-preview-v2__locked-icon sw-icon--small\\\"\\n                name=\\\"regular-lock\\\"\\n                multicolor\\n            />\\n        </template>\\n        {% endblock %}\\n    </template>\\n    {% endblock %}\\n</div>\\n{% endblock %}\\n\";"],"sourceRoot":""}