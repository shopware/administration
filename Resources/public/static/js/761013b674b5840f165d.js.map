{"version":3,"sources":["webpack:///./src/app/asyncComponent/media/sw-media-modal-folder-settings/index.js","webpack:///./src/app/asyncComponent/media/sw-media-modal-folder-settings/sw-media-modal-folder-settings.html.twig","webpack:///./src/app/asyncComponent/media/sw-media-modal-folder-settings/sw-media-modal-folder-settings.scss"],"names":["_Shopware","Shopware","Component","Mixin","Context","Criteria","Data","mapPropertyErrors","getComponentHelper","template","inject","mixins","getByName","props","mediaFolderId","required","type","String","disabled","Boolean","default","data","modalClass","thumbnailSizes","isEditThumbnails","parent","configuration","mediaFolderConfigurationThumbnailSizeRepository","originalConfiguration","mediaFolder","computed","_objectSpread","mediaFolderRepository","this","repositoryFactory","create","mediaDefaultFolderRepository","mediaThumbnailSizeRepository","mediaFolderConfigurationRepository","notEditable","useParentConfiguration","createThumbnails","thumbnailListClass","labelToggleButton","$tc","thumbnailSizeFilter","Filter","created","createdComponent","methods","_this","_asyncToGenerator","_regeneratorRuntime","mark","_callee","wrap","_context","prev","next","loadMediaFolder","sent","getThumbnailSizes","get","configurationId","api","mediaThumbnailSizes","entity","source","search","parentId","stop","getItemName","item","entityNameIdentifier","concat","_this2","_callee2","criteria","_context2","addSorting","sort","toggleEditThumbnails","addThumbnail","_ref","_this3","_callee3","width","height","thumbnailSize","_context3","checkIfThumbnailExists","abrupt","save","_ref2","exists","some","size","deleteThumbnail","_this4","_callee4","_context4","id","delete","remove","isThumbnailSizeActive","value","thumbnailSizeCheckboxName","onActiveTabChanged","activeTab","onChangeThumbnailSize","add","onChangeInheritance","_this5","_callee5","newConfiguration","_context5","Object","keys","forEach","key","onClickSave","_this6","_callee6","_context6","keepAspectRatio","defaultFolderId","ensureUniqueDefaultFolder","then","getEntityName","createNotificationSuccess","title","$root","message","$nextTick","$emit","t0","createNotificationError","folderId","_this7","_callee7","items","_context7","addFilter","multi","equals","not","Promise","all","map","folder","onClickCancel","originalDomEvent","discard","closeModal","onInputDefaultFolder","content","__esModule","module","i","locals","exports"],"mappings":"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","file":"static/js/761013b674b5840f165d.js","sourcesContent":["import template from './sw-media-modal-folder-settings.html.twig';\nimport './sw-media-modal-folder-settings.scss';\n\nconst { Component, Mixin, Context } = Shopware;\nconst { Criteria } = Shopware.Data;\nconst { mapPropertyErrors } = Component.getComponentHelper();\n\n/**\n * @private\n * @package content\n */\nexport default {\n    template,\n\n    inject: ['repositoryFactory'],\n\n    mixins: [\n        Mixin.getByName('notification'),\n    ],\n\n    props: {\n        mediaFolderId: {\n            required: true,\n            type: String,\n        },\n        disabled: {\n            required: false,\n            type: Boolean,\n            default: false,\n        },\n    },\n\n    data() {\n        return {\n            modalClass: 'sw-media-modal-folder-settings--shows-overflow',\n            thumbnailSizes: [],\n            isEditThumbnails: false,\n            parent: null,\n            configuration: null,\n            mediaFolderConfigurationThumbnailSizeRepository: null,\n            originalConfiguration: null,\n            mediaFolder: null,\n        };\n    },\n\n    computed: {\n        mediaFolderRepository() {\n            return this.repositoryFactory.create('media_folder');\n        },\n        mediaDefaultFolderRepository() {\n            return this.repositoryFactory.create('media_default_folder');\n        },\n        mediaThumbnailSizeRepository() {\n            return this.repositoryFactory.create('media_thumbnail_size');\n        },\n        mediaFolderConfigurationRepository() {\n            return this.repositoryFactory.create('media_folder_configuration');\n        },\n        notEditable() {\n            return this.mediaFolder.useParentConfiguration\n                || !this.configuration.createThumbnails\n                || this.disabled;\n        },\n\n        thumbnailListClass() {\n            return {\n                'is--editable': this.isEditThumbnails,\n            };\n        },\n\n        labelToggleButton() {\n            return this.isEditThumbnails ?\n                this.$tc('global.sw-media-modal-folder-settings.labelStopEdit') :\n                this.$tc('global.sw-media-modal-folder-settings.labelEditList');\n        },\n\n        thumbnailSizeFilter() {\n            return Shopware.Filter.getByName('thumbnailSize');\n        },\n\n        ...mapPropertyErrors('mediaFolder', ['name']),\n    },\n\n    created() {\n        this.createdComponent();\n    },\n\n    methods: {\n        async createdComponent() {\n            this.mediaFolder = await this.loadMediaFolder();\n\n            await this.getThumbnailSizes();\n            this.configuration = await this.mediaFolderConfigurationRepository.get(\n                this.mediaFolder.configurationId,\n                Context.api,\n            );\n\n            this.mediaFolderConfigurationThumbnailSizeRepository = this.repositoryFactory.create(\n                this.configuration.mediaThumbnailSizes.entity,\n                this.configuration.mediaThumbnailSizes.source,\n            );\n\n            this.configuration.mediaThumbnailSizes = await this.mediaFolderConfigurationThumbnailSizeRepository\n                .search(new Criteria(1, 25), Context.api);\n\n            if (this.mediaFolder.parentId !== null) {\n                this.parent = await this.mediaFolderRepository.get(this.mediaFolder.parentId, Context.api);\n                this.parent.configuration = await this.mediaFolderConfigurationRepository\n                    .get(this.parent.configurationId, Context.api);\n            }\n        },\n\n        getItemName(item) {\n            const entityNameIdentifier = `global.entities.${item.entity}`;\n\n            return `${item.entity} (${this.$tc(entityNameIdentifier)})`;\n        },\n\n        async getThumbnailSizes() {\n            const criteria = new Criteria(1, 50)\n                .addSorting(Criteria.sort('width'));\n\n            this.thumbnailSizes = await this.mediaThumbnailSizeRepository.search(criteria, Context.api);\n        },\n\n        toggleEditThumbnails() {\n            this.isEditThumbnails = !this.isEditThumbnails;\n        },\n\n        async addThumbnail({ width, height }) {\n            if (this.checkIfThumbnailExists({ width, height })) {\n                return;\n            }\n\n            const thumbnailSize = this.mediaThumbnailSizeRepository.create(Context.api);\n            thumbnailSize.width = width;\n            thumbnailSize.height = height;\n\n            await this.mediaThumbnailSizeRepository.save(thumbnailSize, Context.api);\n            this.getThumbnailSizes();\n        },\n\n        checkIfThumbnailExists({ width, height }) {\n            const exists = this.thumbnailSizes.some((size) => {\n                return size.width === width && size.height === height;\n            });\n\n            this.disabled = exists;\n\n            return exists;\n        },\n\n        async deleteThumbnail(thumbnailSize) {\n            if (await this.mediaFolderConfigurationThumbnailSizeRepository.get(thumbnailSize.id, Context.api)) {\n                await this.mediaFolderConfigurationThumbnailSizeRepository.delete(thumbnailSize.id, Context.api);\n            }\n\n            this.configuration.mediaThumbnailSizes.remove(thumbnailSize.id);\n            await this.mediaThumbnailSizeRepository.delete(thumbnailSize.id, Context.api);\n            this.getThumbnailSizes();\n        },\n\n        isThumbnailSizeActive(size) {\n            if (!this.configuration.mediaThumbnailSizes) {\n                return false;\n            }\n\n            return this.configuration.mediaThumbnailSizes.some((value) => {\n                return value.id === size.id;\n            });\n        },\n\n        thumbnailSizeCheckboxName(size) {\n            return `thumbnail-size-${size.width}-${size.height}-active`;\n        },\n\n        onActiveTabChanged(activeTab) {\n            if (activeTab === 'settings') {\n                this.modalClass = 'sw-media-modal-folder-settings--shows-overflow';\n                return;\n            }\n            this.modalClass = '';\n        },\n\n        onChangeThumbnailSize(value, size) {\n            if (value === true) {\n                this.configuration.mediaThumbnailSizes.add(size);\n                return;\n            }\n\n            this.configuration.mediaThumbnailSizes.remove(size.id);\n        },\n\n        async onChangeInheritance(value) {\n            if (value === true) {\n                this.originalConfiguration = this.configuration;\n                this.configuration = this.parent.configuration;\n\n                return;\n            }\n\n            if (this.originalConfiguration) {\n                this.configuration = this.originalConfiguration;\n\n                return;\n            }\n\n            const newConfiguration = this.mediaFolderConfigurationRepository.create();\n            Object.keys(this.configuration).forEach((key) => {\n                if (key === 'id') {\n                    return;\n                }\n                newConfiguration[key] = this.configuration[key];\n            });\n            this.configuration = newConfiguration;\n        },\n\n        async onClickSave() {\n            this.mediaFolder.configurationId = this.configuration.id;\n\n            // if the config is created all properties that are null won't be sent to the server\n            // this leads to setting default values for this properties on the server side\n            // these properties are null because the value of an unchecked checkbox is null\n            // ToDo fix this with NEXT-1544\n            if (this.configuration.keepAspectRatio === null) {\n                this.configuration.keepAspectRatio = false;\n            }\n\n            if (this.configuration.createThumbnails === null) {\n                this.configuration.createThumbnails = false;\n            }\n\n            if (this.mediaFolder.defaultFolderId) {\n                await this.ensureUniqueDefaultFolder(this.mediaFolder.id, this.mediaFolder.defaultFolderId);\n            } else {\n                this.mediaFolder.defaultFolderId = null;\n            }\n\n            try {\n                await this.mediaFolderConfigurationRepository.save(this.configuration)\n                    .then(() => {\n                        // Delete the original configuration if we inherit again\n                        if (this.originalConfiguration && this.configuration.id === this.parent.configuration.id) {\n                            this.mediaFolderConfigurationRepository.delete(this.originalConfiguration.id);\n                        }\n                    });\n\n                if (this.mediaFolder && this.mediaFolder.getEntityName) {\n                    await this.mediaFolderRepository.save(this.mediaFolder, Context.api);\n                }\n\n                this.createNotificationSuccess({\n                    title: this.$root.$tc('global.default.success'),\n                    message: this.$root.$tc(\n                        'global.sw-media-modal-folder-settings.notification.success.message',\n                    ),\n                });\n\n                this.$nextTick(() => {\n                    this.$emit('media-settings-modal-save', this.mediaFolder);\n                });\n            } catch (e) {\n                this.createNotificationError({\n                    title: this.$root.$tc('global.default.error'),\n                    message: this.$root.$tc(\n                        'global.sw-media-modal-folder-settings.notification.error.message',\n                    ),\n                });\n            }\n        },\n\n        async ensureUniqueDefaultFolder(folderId, defaultFolderId) {\n            const criteria = new Criteria(1, 25)\n                .addFilter(\n                    Criteria.multi('and', [\n                        Criteria.equals('defaultFolderId', defaultFolderId),\n                        Criteria.not('or', [Criteria.equals('id', folderId)]),\n                    ]),\n                );\n\n            const items = await this.mediaFolderRepository.search(criteria, Context.api);\n\n            await Promise.all(items.map((folder) => {\n                folder.defaultFolderId = null;\n                return this.mediaFolderRepository.save(folder, Context.api);\n            }));\n        },\n\n        onClickCancel(originalDomEvent) {\n            this.mediaFolderRepository.discard(this.mediaFolder);\n\n            this.closeModal(originalDomEvent);\n        },\n\n        closeModal(originalDomEvent) {\n            this.$emit('media-settings-modal-close', { originalDomEvent });\n        },\n\n        onInputDefaultFolder(defaultFolderId) {\n            this.mediaFolder.defaultFolderId = defaultFolderId;\n        },\n\n        loadMediaFolder() {\n            return this.mediaFolderRepository.get(this.mediaFolderId, Context.api);\n        },\n    },\n};\n","export default \"\\n{% block sw_media_modal_folder_settings %}\\n<sw-modal\\n    v-if=\\\"!!mediaFolder\\\"\\n    class=\\\"sw-media-modal-folder-settings\\\"\\n    :class=\\\"modalClass\\\"\\n    :title=\\\"mediaFolder.name\\\"\\n    variant=\\\"large\\\"\\n    @modal-close=\\\"closeModal\\\"\\n>\\n\\n    \\n    {% block sw_media_modal_folder_settings_tabs %}\\n    <sw-tabs\\n        position-identifier=\\\"sw-media-modal-folder-settings\\\"\\n        :is-small=\\\"false\\\"\\n        default-item=\\\"settings\\\"\\n    >\\n        <template #default=\\\"{ active }\\\">\\n            \\n            {% block sw_media_modal_folder_settings_tab_item_settings %}\\n            <sw-tabs-item\\n                class=\\\"sw-media-folder-settings__settings-tab\\\"\\n                name=\\\"settings\\\"\\n                :active-tab=\\\"active\\\"\\n                :has-error=\\\"!!mediaFolderNameError\\\"\\n                :native=\\\"true\\\"\\n            >\\n                {{ $tc('global.sw-media-modal-folder-settings.labelSettings') }}\\n            </sw-tabs-item>\\n            {% endblock %}\\n\\n            \\n            {% block sw_media_modal_folder_settings_tab_item_thumbnails %}\\n            <sw-tabs-item\\n                class=\\\"sw-media-folder-settings__thumbnails-tab\\\"\\n                name=\\\"thumbnails\\\"\\n                :active-tab=\\\"active\\\"\\n                :native=\\\"true\\\"\\n            >\\n                {{ $tc('global.sw-media-modal-folder-settings.labelThumbnails') }}\\n            </sw-tabs-item>\\n            {% endblock %}\\n        </template>\\n\\n        <template\\n            #content=\\\"{ active }\\\"\\n        >\\n            \\n            {% block sw_media_modal_folder_settings_tab_content_settings %}\\n            <sw-container\\n                v-if=\\\"active === 'settings'\\\"\\n                columns=\\\"1fr 1fr\\\"\\n                gap=\\\"32px\\\"\\n            >\\n                \\n                {% block sw_media_modal_folder_settings_name_field %}\\n                <sw-text-field\\n                    {% if VUE3 %}\\n                    v-model:value=\\\"mediaFolder.name\\\"\\n                    {% else %}\\n                    v-model=\\\"mediaFolder.name\\\"\\n                    {% endif %}\\n                    :disabled=\\\"disabled\\\"\\n                    :error=\\\"mediaFolderNameError\\\"\\n                    :label=\\\"$tc('global.sw-media-modal-folder-settings.labelFolderName')\\\"\\n                />\\n                {% endblock %}\\n\\n                \\n                {% block sw_media_modal_folder_settings_default_folder %}\\n                <sw-entity-single-select\\n                    id=\\\"defaultFolder\\\"\\n                    :disabled=\\\"disabled\\\"\\n                    entity=\\\"media_default_folder\\\"\\n                    :placeholder=\\\"$tc('global.sw-media-modal-folder-settings.placeholderDefaultFolder')\\\"\\n                    :value=\\\"mediaFolder.defaultFolderId ? mediaFolder.defaultFolderId : ''\\\"\\n                    :label=\\\"$tc('global.sw-media-modal-folder-settings.labelDefaultFolder')\\\"\\n                    show-clearable-button\\n                    {% if VUE3 %}\\n                    @update:value=\\\"onInputDefaultFolder\\\"\\n                    {% else %}\\n                    @change=\\\"onInputDefaultFolder\\\"\\n                    {% endif %}\\n                >\\n\\n                    <template #selection-label-property=\\\"{ item: item }\\\">\\n                        {{ getItemName(item) }}\\n                    </template>\\n\\n                    <template #result-item=\\\"{ isSelected, setValue, item, index, searchTerm, highlightSearchTerm }\\\">\\n                        <sw-select-result\\n                            :selected=\\\"isSelected(item)\\\"\\n                            v-bind=\\\"{ item, index }\\\"\\n                            @item-select=\\\"setValue\\\"\\n                        >\\n                            <sw-highlight-text\\n                                v-if=\\\"highlightSearchTerm\\\"\\n                                :text=\\\"getItemName(item)\\\"\\n                                :search-term=\\\"searchTerm\\\"\\n                            />\\n                            <template v-else>\\n                                {{ getItemName(item) }}\\n                            </template>\\n                        </sw-select-result>\\n                    </template>\\n                </sw-entity-single-select>\\n                {% endblock %}\\n            </sw-container>\\n            {% endblock %}\\n\\n            \\n            {% block sw_media_modal_folder_settings_tab_content_thumbnails %}\\n            <sw-container\\n                v-if=\\\"active === 'thumbnails'\\\"\\n                class=\\\"sw-media-modal-folder-settings__thumbnails-container\\\"\\n                columns=\\\"1fr 1fr\\\"\\n                gap=\\\"32px\\\"\\n            >\\n\\n                \\n                {% block sw_media_modal_folder_settings_tab_content_thumbnails_left_container %}\\n                <div class=\\\"sw-media-modal-folder-settings__thumbnails-left-container\\\">\\n                    \\n                    {% block sw_media_modal_folder_settings_inherit_settings_field %}\\n                    <sw-field\\n                        {% if VUE3 %}\\n                        v-model:value=\\\"mediaFolder.useParentConfiguration\\\"\\n                        {% else %}\\n                        v-model=\\\"mediaFolder.useParentConfiguration\\\"\\n                        {% endif %}\\n                        type=\\\"switch\\\"\\n                        :label=\\\"$tc('global.sw-media-modal-folder-settings.labelInheritSettings')\\\"\\n                        :disabled=\\\"mediaFolder.parentId === null\\\"\\n                        {% if VUE3 %}\\n                        @update:value=\\\"onChangeInheritance\\\"\\n                        {% else %}\\n                        @change=\\\"onChangeInheritance\\\"\\n                        {% endif %}\\n                    />\\n                    {% endblock %}\\n\\n                    \\n                    {% block sw_media_modal_folder_settings_generate_thumbnails_field %}\\n                    <sw-field\\n                        {% if VUE3 %}\\n                        v-model:value=\\\"configuration.createThumbnails\\\"\\n                        {% else %}\\n                        v-model=\\\"configuration.createThumbnails\\\"\\n                        {% endif %}\\n                        type=\\\"switch\\\"\\n                        :label=\\\"$tc('global.sw-media-modal-folder-settings.labelGenerateThumbnails')\\\"\\n                        :disabled=\\\"mediaFolder.useParentConfiguration || disabled\\\"\\n                    />\\n                    {% endblock %}\\n\\n                    \\n                    {% block sw_media_modal_folder_settings_keep_proportions_field %}\\n                    <sw-switch-field\\n                        {% if VUE3 %}\\n                        v-model:value=\\\"configuration.keepAspectRatio\\\"\\n                        {% else %}\\n                        v-model=\\\"configuration.keepAspectRatio\\\"\\n                        {% endif %}\\n                        :label=\\\"$tc('global.sw-media-modal-folder-settings.labelKeepProportions')\\\"\\n                        :disabled=\\\"notEditable\\\"\\n                    />\\n                    {% endblock %}\\n\\n                    \\n                    {% block sw_media_modal_folder_settings_thumbnails_quality_field %}\\n                    <sw-number-field\\n                        {% if VUE3 %}\\n                        v-model:value=\\\"configuration.thumbnailQuality\\\"\\n                        {% else %}\\n                        v-model=\\\"configuration.thumbnailQuality\\\"\\n                        {% endif %}\\n                        number-type=\\\"int\\\"\\n                        :label=\\\"$tc('global.sw-media-modal-folder-settings.labelThumbnailQuality')\\\"\\n                        :min=\\\"0\\\"\\n                        :max=\\\"100\\\"\\n                        :step=\\\"1\\\"\\n                        :disabled=\\\"notEditable\\\"\\n                        autocomplete=\\\"off\\\"\\n                    />\\n                    {% endblock %}\\n                </div>\\n                {% endblock %}\\n\\n                \\n                {% block sw_media_modal_folder_settings_tab_content_thumbnails_right_container %}\\n                <div class=\\\"sw-media-modal-folder-settings__thumbnails-right-container\\\">\\n                    \\n                    {% block sw_media_modal_folder_settings_thumbnail_list_caption %}\\n                    <div class=\\\"sw-media-modal-folder-settings__thumbnails-list-caption\\\">\\n                        \\n                        <label>{{ $tc('global.sw-media-modal-folder-settings.labelThumbnailSize') }}</label>\\n\\n                        \\n                        {% block sw_media_modal_folder_settings_edit_thumbnail_list_button %}\\n                        <sw-button\\n                            class=\\\"sw-media-modal-folder-settings__switch-mode\\\"\\n                            :disabled=\\\"notEditable\\\"\\n                            @click=\\\"toggleEditThumbnails\\\"\\n                        >\\n                            {{ labelToggleButton }}\\n                        </sw-button>\\n                        {% endblock %}\\n                    </div>\\n                    {% endblock %}\\n\\n                    \\n                    {% block sw_media_modal_folder_settings_thumbnail_list_container %}\\n                    <div class=\\\"sw-media-modal-folder-settings__thumbnails-list-container\\\">\\n                        \\n                        {% block sw_media_modal_folder_settings_thumbnail_list %}\\n                        <ul\\n                            class=\\\"sw-media-modal-folder-settings__thumbnails-list\\\"\\n                            :class=\\\"thumbnailListClass\\\"\\n                        >\\n\\n                            \\n                            {% block sw_media_modal_folder_settings_thumbnail_size %}\\n                            <li\\n                                v-for=\\\"(size, index) in thumbnailSizes\\\"\\n                                :key=\\\"`thumbnail-size-${index}`\\\"\\n                                class=\\\"sw-media-modal-folder-settings__thumbnail-size-entry\\\"\\n                                :class=\\\"'sw-media-modal-folder-settings__entry--' + index\\\"\\n                            >\\n\\n                                \\n                                {% block sw_media_modal_folder_settings_thumbnail_size_switch %}\\n                                <sw-switch-field\\n                                    :value=\\\"isThumbnailSizeActive(size)\\\"\\n                                    :name=\\\"thumbnailSizeCheckboxName(size)\\\"\\n                                    :label=\\\"thumbnailSizeFilter(size)\\\"\\n                                    :disabled=\\\"notEditable\\\"\\n                                    {% if VUE3 %}\\n                                    @update:value=\\\"onChangeThumbnailSize($event, size)\\\"\\n                                    {% else %}\\n                                    @change=\\\"onChangeThumbnailSize($event, size)\\\"\\n                                    {% endif %}\\n                                />\\n                                {% endblock %}\\n\\n                                \\n                                {% block sw_media_modal_folder_settings_thumbnail_size_delete_button %}\\n                                <button\\n                                    v-if=\\\"isEditThumbnails\\\"\\n                                    class=\\\"sw-media-modal-folder-settings__delete-thumbnail\\\"\\n                                    :title=\\\"$tc('global.default.delete')\\\"\\n                                    :aria-label=\\\"$tc('global.default.delete')\\\"\\n                                    @click=\\\"deleteThumbnail(size)\\\"\\n                                >\\n                                    <sw-icon\\n                                        name=\\\"regular-times-s\\\"\\n                                        small\\n                                        size=\\\"12px\\\"\\n                                    />\\n                                </button>\\n                                {% endblock %}\\n                            </li>\\n                            {% endblock %}\\n                        </ul>\\n                        {% endblock %}\\n\\n                        \\n                        {% block sw_media_modal_folder_settings_add_thumbnail_size_form %}\\n                        <sw-media-add-thumbnail-form\\n                            v-if=\\\"!notEditable && isEditThumbnails\\\"\\n                            :disabled=\\\"disabled\\\"\\n                            @on-input=\\\"checkIfThumbnailExists\\\"\\n                            @thumbnail-form-size-add=\\\"addThumbnail\\\"\\n                        />\\n                        {% endblock %}\\n                    </div>\\n                    {% endblock %}\\n                </div>\\n                {% endblock %}\\n            </sw-container>\\n            {% endblock %}\\n        </template>\\n    </sw-tabs>\\n    {% endblock %}\\n\\n    \\n    {% block sw_media_modal_folder_settings_footer %}\\n    <template #modal-footer>\\n\\n        \\n        {% block sw_media_modal_folder_settings_cancel_button %}\\n        <sw-button\\n            size=\\\"small\\\"\\n            @click=\\\"onClickCancel\\\"\\n        >\\n            {{ $tc('global.default.cancel') }}\\n        </sw-button>\\n        {% endblock %}\\n\\n        \\n        {% block sw_media_modal_folder_settings_confirm_button %}\\n        <sw-button\\n            v-tooltip=\\\"{\\n                message: $tc('sw-privileges.tooltip.warning'),\\n                disabled: !disabled,\\n                showOnDisabledElements: true\\n            }\\\"\\n            class=\\\"sw-media-modal-folder-settings__confirm\\\"\\n            size=\\\"small\\\"\\n            :disabled=\\\"disabled || isEditThumbnails\\\"\\n            variant=\\\"primary\\\"\\n            @click=\\\"onClickSave\\\"\\n        >\\n            {{ $tc('global.default.save') }}\\n        </sw-button>\\n        {% endblock %}\\n\\n    </template>\\n    {% endblock %}\\n</sw-modal>\\n{% endblock %}\\n\";","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../../../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--15-1!../../../../../node_modules/css-loader/dist/cjs.js??ref--15-2!../../../../../node_modules/sass-loader/dist/cjs.js??ref--15-3!./sw-media-modal-folder-settings.scss\");\nif(content.__esModule) content = content.default;\nif(typeof content === 'string') content = [[module.id, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar add = require(\"!../../../../../node_modules/vue-style-loader/lib/addStylesClient.js\").default\nvar update = add(\"9ade12b6\", content, true, {});"],"sourceRoot":""}