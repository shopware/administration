{"version":3,"sources":["webpack:///./src/module/sw-flow/view/listing/sw-flow-list/sw-flow-list.scss","webpack:///./src/module/sw-flow/view/listing/sw-flow-list/index.js","webpack:///./src/module/sw-flow/view/listing/sw-flow-list/sw-flow-list.html.twig"],"names":["content","__esModule","default","module","i","locals","exports","add","_Shopware","Shopware","Mixin","Criteria","Data","mapState","Component","getComponentHelper","template","inject","mixins","getByName","props","searchTerm","type","String","required","data","sortBy","sortDirection","total","isLoading","isDeleting","isDownloading","flows","currentFlow","selectedItems","metaInfo","title","this","$createTitle","computed","_objectSpread","flowRepository","repositoryFactory","create","flowCriteria","criteria","page","limit","setTerm","addSorting","sort","flowColumns","property","label","$tc","width","sortable","dataIndex","allowResize","routerLink","primary","multiLine","detailPageLinkText","acl","can","assetFilter","Filter","watch","value","onSearch","created","createComponent","methods","getList","_this","State","dispatch","search","then","finally","isValidTrigger","eventName","triggerEvents","some","event","name","onDuplicateFlow","item","_this2","behavior","overwrites","concat","clone","id","Context","api","response","createNotificationSuccess","message","$router","push","params","catch","createNotificationError","onEditFlow","onDeleteFlow","onCloseDeleteModal","isDownload","onConfirmDelete","_this3","delete","updateRecords","result","$emit","getTranslatedEventName","snippetKey","replace","globalKey","customKey","$te","selectionChange","selection","Object","values","deleteWarningMessage","bulkDeleteWarningMessage","selectionCount","count"],"mappings":"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","file":"static/js/32e719cde889e5cc3bf4.js","sourcesContent":["// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../../../../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--15-1!../../../../../../node_modules/css-loader/dist/cjs.js??ref--15-2!../../../../../../node_modules/sass-loader/dist/cjs.js??ref--15-3!./sw-flow-list.scss\");\nif(content.__esModule) content = content.default;\nif(typeof content === 'string') content = [[module.id, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar add = require(\"!../../../../../../node_modules/vue-style-loader/lib/addStylesClient.js\").default\nvar update = add(\"5f1efa45\", content, true, {});","import template from './sw-flow-list.html.twig';\nimport './sw-flow-list.scss';\n\nconst { Mixin, Data: { Criteria }, Component } = Shopware;\nconst { mapState } = Component.getComponentHelper();\n\n/**\n * @private\n * @package services-settings\n */\nexport default {\n    template,\n\n    inject: ['acl', 'repositoryFactory'],\n\n    mixins: [\n        Mixin.getByName('notification'),\n        Mixin.getByName('listing'),\n    ],\n\n    props: {\n        searchTerm: {\n            type: String,\n            required: false,\n            default: '',\n        },\n    },\n\n    data() {\n        return {\n            sortBy: 'createdAt',\n            sortDirection: 'DESC',\n            total: 0,\n            isLoading: false,\n            isDeleting: false,\n            isDownloading: false,\n            flows: null,\n            currentFlow: {},\n            selectedItems: [],\n        };\n    },\n\n    metaInfo() {\n        return {\n            title: this.$createTitle(),\n        };\n    },\n\n    computed: {\n        flowRepository() {\n            return this.repositoryFactory.create('flow');\n        },\n\n        flowCriteria() {\n            const criteria = new Criteria(this.page, this.limit);\n\n            if (this.searchTerm) {\n                criteria.setTerm(this.searchTerm);\n            }\n\n            criteria\n                .addSorting(Criteria.sort(this.sortBy, this.sortDirection))\n                .addSorting(Criteria.sort('updatedAt', 'DESC'));\n\n            return criteria;\n        },\n\n        flowColumns() {\n            return [\n                {\n                    property: 'active',\n                    label: this.$tc('sw-flow.list.labelColumnActive'),\n                    width: '80px',\n                    sortable: true,\n                },\n                {\n                    property: 'name',\n                    dataIndex: 'name',\n                    label: this.$tc('sw-flow.list.labelColumnName'),\n                    allowResize: true,\n                    routerLink: 'sw.flow.detail',\n                    primary: true,\n                },\n                {\n                    property: 'eventName',\n                    dataIndex: 'eventName',\n                    label: this.$tc('sw-flow.list.labelColumnTrigger'),\n                    allowResize: true,\n                    multiLine: true,\n                },\n                {\n                    property: 'description',\n                    label: this.$tc('sw-flow.list.labelColumnDescription'),\n                    allowResize: true,\n                    sortable: false,\n                },\n            ];\n        },\n\n        detailPageLinkText() {\n            if (!this.acl.can('flow.editor') && this.acl.can('flow.viewer')) {\n                return this.$tc('global.default.view');\n            }\n\n            return this.$tc('global.default.edit');\n        },\n\n        assetFilter() {\n            return Shopware.Filter.getByName('asset');\n        },\n\n        ...mapState('swFlowState', ['triggerEvents']),\n    },\n\n    watch: {\n        searchTerm(value) {\n            this.onSearch(value);\n        },\n    },\n\n    created() {\n        this.createComponent();\n    },\n\n    methods: {\n        createComponent() {\n            this.getList();\n        },\n\n        getList() {\n            this.isLoading = true;\n            Shopware.State.dispatch('swFlowState/fetchTriggerActions');\n\n            this.flowRepository.search(this.flowCriteria)\n                .then((data) => {\n                    this.total = data.total;\n                    this.flows = data;\n                })\n                .finally(() => {\n                    this.isLoading = false;\n                });\n        },\n\n        isValidTrigger(eventName) {\n            return this.triggerEvents.some(event => event.name === eventName);\n        },\n\n        onDuplicateFlow(item) {\n            const behavior = {\n                overwrites: {\n                    name: `${item.name} - ${this.$tc('global.default.copy')}`,\n                },\n            };\n\n            this.flowRepository.clone(item.id, Shopware.Context.api, behavior)\n                .then((response) => {\n                    this.createNotificationSuccess({\n                        message: this.$tc('sw-flow.flowNotification.messageDuplicateSuccess'),\n                    });\n\n                    if (response?.id) {\n                        this.$router.push({ name: 'sw.flow.detail', params: { id: response.id } });\n                    }\n                })\n                .catch(() => {\n                    this.createNotificationError({\n                        message: this.$tc('sw-flow.flowNotification.messageDuplicateError'),\n                    });\n                });\n        },\n\n        onEditFlow(item) {\n            if (item?.id) {\n                this.$router.push({\n                    name: 'sw.flow.detail',\n                    params: {\n                        id: item.id,\n                    },\n                });\n            }\n        },\n\n        onDeleteFlow(item) {\n            this.isDeleting = true;\n            this.currentFlow = item;\n        },\n\n        onCloseDeleteModal() {\n            this.isDownload = false;\n            this.currentFlow = {};\n        },\n\n        onConfirmDelete(item) {\n            this.isDeleting = false;\n            this.currentFlow = {};\n\n            return this.flowRepository.delete(item.id)\n                .then(() => {\n                    this.createNotificationSuccess({\n                        message: this.$tc('sw-flow.flowNotification.messageDeleteSuccess'),\n                    });\n                    this.getList();\n                })\n                .catch(() => {\n                    this.createNotificationError({\n                        message: this.$tc('sw-flow.flowNotification.messageDeleteError'),\n                    });\n                });\n        },\n\n        updateRecords(result) {\n            this.flows = result;\n            this.total = result.total;\n\n            this.$emit('on-update-total', this.total);\n        },\n\n        getTranslatedEventName(value) {\n            const snippetKey = value.replace(/\\./g, '_');\n            const globalKey = `global.businessEvents.${snippetKey}`;\n            const customKey = `sw-flow-custom-event.flow-list.${snippetKey}`;\n            return this.$te(globalKey) ? this.$tc(globalKey) : this.$tc(customKey);\n        },\n\n        selectionChange(selection) {\n            this.selectedItems = Object.values(selection);\n        },\n\n        deleteWarningMessage() {\n            return `${this.$tc('sw-flow.list.warningDeleteText')} ${this.$tc('sw-flow.list.confirmText')}`;\n        },\n\n        bulkDeleteWarningMessage(selectionCount) {\n            return `${this.$tc('sw-flow.list.warningDeleteText')}\n            ${this.$tc('global.entity-components.deleteMessage', selectionCount, { count: selectionCount })}`;\n        },\n    },\n};\n","export default \"\\n{% block sw_flow_list %}\\n<div class=\\\"sw-flow-list\\\">\\n    \\n    {% block sw_flow_list_search_bar %}{% endblock %}\\n\\n    \\n    {% block sw_flow_list_smart_bar_header %}{% endblock %}\\n\\n    \\n    {% block sw_flow_list_smart_bar_actions %}{% endblock %}\\n\\n    \\n    {% block sw_flow_list_content %}\\n    <sw-card\\n        class=\\\"sw-flow-list-card\\\"\\n        position-identifier=\\\"sw-flow-list-card\\\"\\n    >\\n        <sw-entity-listing\\n            class=\\\"sw-flow-list__grid\\\"\\n            show-selection\\n            :show-settings=\\\"false\\\"\\n            :allow-column-edit=\\\"false\\\"\\n            :allow-view=\\\"acl.can('flow.viewer')\\\"\\n            :allow-edit=\\\"acl.can('flow.editor')\\\"\\n            :allow-delete=\\\"acl.can('flow.deleter')\\\"\\n            :columns=\\\"flowColumns\\\"\\n            :sort-by=\\\"sortBy\\\"\\n            :sort-direction=\\\"sortDirection\\\"\\n            :repository=\\\"flowRepository\\\"\\n            :items=\\\"flows\\\"\\n            :is-loading=\\\"isLoading\\\"\\n            :full-page=\\\"false\\\"\\n            :plain-appearance=\\\"true\\\"\\n            @column-sort=\\\"onSortColumn\\\"\\n            @page-change=\\\"onPageChange\\\"\\n            @update-records=\\\"updateRecords\\\"\\n            @selection-change=\\\"selectionChange\\\"\\n        >\\n            \\n            {% block sw_flow_list_grid_columns %}\\n\\n            \\n            {% block sw_flow_list_grid_columns_active %}\\n            <template #column-active=\\\"{ item }\\\">\\n                \\n                {% block sw_flow_list_columns_active_label %}\\n                <sw-icon\\n                    size=\\\"12px\\\"\\n                    :color=\\\"item.active ? `#37d046` : `#de294c`\\\"\\n                    :name=\\\"item.active ? `regular-checkmark-xs` : `regular-times-s`\\\"\\n                />\\n                {% endblock %}\\n            </template>\\n            {% endblock %}\\n\\n            \\n            {% block sw_flow_list_grid_columns_event_name %}\\n            <template #column-eventName=\\\"{ item }\\\">\\n                <div v-if=\\\"isValidTrigger(item.eventName)\\\">\\n                    <strong>\\n                        {{ getTranslatedEventName(item.eventName) }}\\n                    </strong>\\n                    <p>{{ item.eventName }}</p>\\n                </div>\\n                <div v-else>\\n                    <p>{{ $tc('sw-flow.list.unknownTrigger') }}</p>\\n                </div>\\n            </template>\\n            {% endblock %}\\n            {% endblock %}\\n\\n            \\n            {% block sw_flow_list_grid_actions %}\\n            <template #actions=\\\"{ item }\\\">\\n\\n                \\n                {% block sw_flow_list_grid_actions_duplicate %}\\n                <sw-context-menu-item\\n                    class=\\\"sw-flow-list__item-duplicate\\\"\\n                    :disabled=\\\"!acl.can('flow.creator')\\\"\\n                    @click=\\\"onDuplicateFlow(item)\\\"\\n                >\\n                    {{ $tc('global.default.duplicate') }}\\n                </sw-context-menu-item>\\n                {% endblock %}\\n\\n                \\n                {% block sw_flow_list_grid_actions_edit %}\\n                <sw-context-menu-item\\n                    class=\\\"sw-flow-list__item-edit\\\"\\n                    :disabled=\\\"!acl.can('flow.editor') && !acl.can('flow.viewer')\\\"\\n                    @click=\\\"onEditFlow(item)\\\"\\n                >\\n                    {{ detailPageLinkText }}\\n                </sw-context-menu-item>\\n                {% endblock %}\\n\\n                \\n                {% block sw_flow_list_grid_actions_custom %}\\n                {% endblock %}\\n\\n                \\n                {% block sw_flow_list_grid_actions_delete %}\\n                <sw-context-menu-item\\n                    class=\\\"sw-context-menu-item--danger sw-flow-list__item-delete\\\"\\n                    :disabled=\\\"!acl.can('flow.deleter')\\\"\\n                    @click=\\\"onDeleteFlow(item)\\\"\\n                >\\n                    {{ $tc('global.default.delete') }}\\n                </sw-context-menu-item>\\n                {% endblock %}\\n            </template>\\n            {% endblock %}\\n\\n            \\n            {% block sw_flow_list_grid_action_modal %}\\n            <template #action-modals=\\\"{ item }\\\">\\n                <sw-modal\\n                    v-if=\\\"currentFlow.id === item.id && isDeleting\\\"\\n                    variant=\\\"small\\\"\\n                    :title=\\\"$tc('global.default.warning')\\\"\\n                    @modal-close=\\\"onCloseDeleteModal\\\"\\n                >\\n                    \\n                    {% block sw_flow_list_grid_action_modal_confirm_delete_text %}\\n                    <sw-alert variant=\\\"warning\\\">\\n                        {{ deleteWarningMessage() }}\\n                    </sw-alert>\\n                    {% endblock %}\\n\\n                    <template #modal-footer>\\n                        \\n                        {% block sw_flow_list_grid_action_modal_buttons %}\\n                        <sw-button\\n                            size=\\\"small\\\"\\n                            @click=\\\"onCloseDeleteModal\\\"\\n                        >\\n                            {{ $tc('global.default.cancel') }}\\n                        </sw-button>\\n                        <sw-button\\n                            size=\\\"small\\\"\\n                            variant=\\\"danger\\\"\\n                            @click=\\\"onConfirmDelete(item)\\\"\\n                        >\\n                            {{ $tc('global.default.delete') }}\\n                        </sw-button>\\n                        {% endblock %}\\n                    </template>\\n                </sw-modal>\\n            </template>\\n            {% endblock %}\\n\\n            \\n            {% block sw_flow_list_grid_bulk_modal_delete_confirm_text %}\\n            <template #bulk-modal-delete-confirm-text=\\\"{ selectionCount }\\\">\\n                <sw-alert variant=\\\"warning\\\">\\n                    {{ bulkDeleteWarningMessage(selectionCount) }}\\n                </sw-alert>\\n            </template>\\n            {% endblock %}\\n        </sw-entity-listing>\\n\\n        \\n        {% block sw_flow_list_empty_state %}\\n        <sw-empty-state\\n            v-if=\\\"!total && !isLoading\\\"\\n            class=\\\"sw-flow-list__empty-state\\\"\\n            :title=\\\"$tc('sw-flow.list.emptyStateTitle')\\\"\\n            :subline=\\\"$tc('sw-flow.list.emptyStateSubTitle')\\\"\\n        >\\n            \\n            {% block sw_flow_list_empty_state_icon %}\\n            <template #icon>\\n                <img\\n                    :alt=\\\"$tc('sw-flow.list.emptyStateTitle')\\\"\\n                    :src=\\\"assetFilter('/administration/static/img/empty-states/settings-empty-state.svg')\\\"\\n                >\\n            </template>\\n            {% endblock %}\\n        </sw-empty-state>\\n        {% endblock %}\\n\\n        \\n        {% block sw_flow_list_modal_content_custom %}\\n        {% endblock %}\\n    </sw-card>\\n    {% endblock %}\\n</div>\\n{% endblock %}\\n\";"],"sourceRoot":""}