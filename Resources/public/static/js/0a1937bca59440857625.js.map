{"version":3,"sources":["webpack:///./src/module/sw-order/component/sw-order-create-details-footer/sw-order-create-details-footer.html.twig","webpack:///./src/module/sw-order/component/sw-order-create-details-footer/index.js"],"names":["_Shopware","Shopware","State","Service","Criteria","Data","template","props","cart","type","Object","required","customer","default","isCustomerActive","Boolean","computed","context","get","this","salesChannel","set","salesChannelId","salesChannelCriteria","criteria","addFilter","equals","paymentMethodCriteria","currencyRepository","create","currentCurrencyId","getters","defaultSalesChannel","isCartTokenAvailable","watch","immediate","deep","handler","token","updateContext","updateOrderContext","methods","_this","forEach","key","_this2","dispatch","contextToken","then","updateCustomerContext","currencyId","getCurrency","_this3","customerId","id","response","status","getCart","_this4","$emit","finally","currency","commit"],"mappings":"4HAAe,ICMfA,EAA2BC,SAAnBC,EAAKF,EAALE,MAAOC,EAAOH,EAAPG,QACPC,EAAaH,SAASI,KAAtBD,SAGO,WACXE,SDXW,65HCaXC,MAAO,CACHC,KAAM,CACFC,KAAMC,OACNC,UAAU,GAGdC,SAAU,CACNH,KAAMC,OACNG,QAAS,MAGbC,iBAAkB,CACdL,KAAMM,QACNF,SAAS,IAIjBG,SAAU,CACNC,QAAS,CACLC,IAAG,WACC,OAAOC,KAAKP,SAAWO,KAAKP,SAASQ,aAAe,IAGxDC,IAAG,SAACJ,GACIE,KAAKP,WAAUO,KAAKP,SAASQ,aAAeH,KAIxDK,eAAgB,CACZJ,IAAG,WACC,OAAOC,KAAKP,SAAWO,KAAKP,SAASU,eAAiB,MAG1DD,IAAG,SAACC,GACIH,KAAKP,WAAUO,KAAKP,SAASU,eAAiBA,KAI1DC,qBAAoB,WAChB,IAAMC,EAAW,IAAIpB,EAAS,EAAG,IAMjC,OAJIe,KAAKG,gBACLE,EAASC,UAAUrB,EAASsB,OAAO,mBAAoBP,KAAKG,iBAGzDE,GAGXG,sBAAqB,WACjB,IAAMH,EAAW,IAAIpB,EAAS,EAAG,IAQjC,OANIe,KAAKG,gBACLE,EAASC,UAAUrB,EAASsB,OAAO,mBAAoBP,KAAKG,iBAGhEE,EAASC,UAAUrB,EAASsB,OAAO,oBAAqB,IAEjDF,GAGXI,mBAAkB,WACd,OAAOzB,EAAQ,qBAAqB0B,OAAO,aAG/CC,kBAAiB,WACb,OAAO5B,EAAM6B,QAAQ,uBAGzBC,oBAAmB,WACf,OAAO9B,EAAMgB,IAAI,WAAWc,qBAGhCC,qBAAoB,WAChB,OAAO/B,EAAM6B,QAAQ,kCAI7BG,MAAO,CACHjB,QAAS,CACLkB,WAAW,EACXC,MAAM,EACNC,QAAO,WACElB,KAAKP,UAAaO,KAAKX,KAAK8B,QAIjCnB,KAAKoB,gBACLpB,KAAKqB,wBAIbP,qBAAsB,CAClBE,WAAW,EACXE,QAAO,WACClB,KAAKc,sBAAwBd,KAAKP,UAClCO,KAAKqB,wBAMrBC,QAAS,CACLF,cAAa,WAAI,IAADG,EAAA,KACQ,CAAC,aAAc,aAAc,mBAAoB,mBACzDC,SAAQ,SAACC,GACjBF,EAAKzB,QAAQ2B,GAAOF,EAAKzB,QAAQ2B,IAAQF,EAAKV,oBAAoBY,OAI1EJ,mBAAkB,WAAI,IAADK,EAAA,KACjB3C,EAAM4C,SAAS,6BAA8B,CACzC7B,QAASE,KAAKF,QACdK,eAAgBH,KAAKP,SAASU,eAC9ByB,aAAc5B,KAAKX,KAAK8B,QACzBU,MAAK,WAEJH,EAAKI,wBAEDJ,EAAKf,oBAAsBe,EAAK5B,QAAQiC,YACxCL,EAAKM,kBAKjBF,sBAAqB,WAAI,IAADG,EAAA,KAEpBlD,EAAM4C,SAAS,gCAAiC,CAC5CO,WAAYlC,KAAKP,SAAS0C,GAC1BhC,eAAgBH,KAAKP,SAASU,eAC9ByB,aAAc5B,KAAKX,KAAK8B,QACzBU,MAAK,SAACO,GACmB,MAApBA,EAASC,QACTJ,EAAKK,cAKjBA,QAAO,WAAI,IAADC,EAAA,KACNvC,KAAKwC,MAAM,kBAAkB,GAE7BzD,EAAM4C,SAAS,kBAAmB,CAC9BxB,eAAgBH,KAAKP,SAASU,eAC9ByB,aAAc5B,KAAKX,KAAK8B,QACzBsB,SAAQ,WACPF,EAAKC,MAAM,kBAAkB,OAIrCR,YAAW,WACP,OAAOhC,KAAKS,mBAAmBV,IAAIC,KAAKF,QAAQiC,YAAYF,MAAK,SAACa,GAC9D3D,EAAM4D,OAAO,sBAAuBD","file":"static/js/0a1937bca59440857625.js","sourcesContent":["export default \"\\n{% block sw_order_create_details_footer %}\\n<sw-container\\n    class=\\\"sw-order-create-details-footer\\\"\\n    columns=\\\"minmax(min-content, 1fr) minmax(min-content, 1fr)\\\"\\n    gap=\\\"0 32px\\\"\\n>\\n    <div>\\n        \\n        {% block sw_order_create_details_footer_sales_channel %}\\n        <sw-entity-single-select\\n            {% if VUE3 %}\\n            v-model:value=\\\"salesChannelId\\\"\\n            {% else %}\\n            v-model=\\\"salesChannelId\\\"\\n            {% endif %}\\n            disabled\\n            size=\\\"small\\\"\\n            entity=\\\"sales_channel\\\"\\n            class=\\\"sw-order-create-details-footer__item\\\"\\n            :label=\\\"$tc('sw-order.createBase.detailsFooter.labelSalesChannel')\\\"\\n            :placeholder=\\\"$tc('sw-order.createBase.detailsFooter.placeholderSalesChannel')\\\"\\n            show-clearable-button\\n        />\\n        {% endblock %}\\n\\n        \\n        {% block sw_order_create_details_footer_payment_method %}\\n        <sw-entity-single-select\\n            {% if VUE3 %}\\n            v-model:value=\\\"context.paymentMethodId\\\"\\n            {% else %}\\n            v-model=\\\"context.paymentMethodId\\\"\\n            {% endif %}\\n            size=\\\"small\\\"\\n            entity=\\\"payment_method\\\"\\n            label-property=\\\"distinguishableName\\\"\\n            class=\\\"sw-order-create-details-footer__item\\\"\\n            :disabled=\\\"!isCustomerActive\\\"\\n            :criteria=\\\"paymentMethodCriteria\\\"\\n            :label=\\\"$tc('sw-order.createBase.detailsFooter.labelPaymentMethod')\\\"\\n            :help-text=\\\"$tc('sw-order.createBase.detailsFooter.helpTextPaymentMethod')\\\"\\n            :placeholder=\\\"$tc('sw-order.createBase.detailsFooter.placeholderPaymentMethod')\\\"\\n            show-clearable-button\\n        />\\n        {% endblock %}\\n\\n        \\n        {% block sw_order_create_details_footer_shipping_method %}\\n        <sw-entity-single-select\\n            {% if VUE3 %}\\n            v-model:value=\\\"context.shippingMethodId\\\"\\n            {% else %}\\n            v-model=\\\"context.shippingMethodId\\\"\\n            {% endif %}\\n            size=\\\"small\\\"\\n            entity=\\\"shipping_method\\\"\\n            class=\\\"sw-order-create-details-footer__item\\\"\\n            :disabled=\\\"!isCustomerActive\\\"\\n            :criteria=\\\"salesChannelCriteria\\\"\\n            :label=\\\"$tc('sw-order.createBase.detailsFooter.labelShippingMethod')\\\"\\n            :placeholder=\\\"$tc('sw-order.createBase.detailsFooter.placeholderShippingMethod')\\\"\\n        />\\n        {% endblock %}\\n    </div>\\n\\n    <div>\\n        \\n        {% block sw_order_create_details_footer_order_language %}\\n        <sw-entity-single-select\\n            {% if VUE3 %}\\n            v-model:value=\\\"context.languageId\\\"\\n            {% else %}\\n            v-model=\\\"context.languageId\\\"\\n            {% endif %}\\n            size=\\\"small\\\"\\n            entity=\\\"language\\\"\\n            class=\\\"sw-order-create-details-footer__item\\\"\\n            :disabled=\\\"!isCustomerActive\\\"\\n            :criteria=\\\"salesChannelCriteria\\\"\\n            :label=\\\"$tc('sw-order.createBase.detailsFooter.labelOrderLanguage')\\\"\\n            :placeholder=\\\"$tc('sw-order.createBase.detailsFooter.placeholderOrderLanguage')\\\"\\n            show-clearable-button\\n        />\\n        {% endblock %}\\n\\n        \\n        {% block sw_order_create_details_footer_currency %}\\n        <sw-entity-single-select\\n            {% if VUE3 %}\\n            v-model:value=\\\"context.currencyId\\\"\\n            {% else %}\\n            v-model=\\\"context.currencyId\\\"\\n            {% endif %}\\n            size=\\\"small\\\"\\n            entity=\\\"currency\\\"\\n            class=\\\"sw-order-create-details-footer__item\\\"\\n            :disabled=\\\"!isCustomerActive\\\"\\n            :criteria=\\\"salesChannelCriteria\\\"\\n            :label=\\\"$tc('sw-order.createBase.detailsFooter.labelCurrency')\\\"\\n            :placeholder=\\\"$tc('sw-order.createBase.detailsFooter.placeholderCurrency')\\\"\\n            show-clearable-button\\n        />\\n        {% endblock %}\\n    </div>\\n</sw-container>\\n{% endblock %}\\n\";","import template from './sw-order-create-details-footer.html.twig';\n\n/**\n * @package checkout\n */\n\nconst { State, Service } = Shopware;\nconst { Criteria } = Shopware.Data;\n\n// eslint-disable-next-line sw-deprecation-rules/private-feature-declarations\nexport default {\n    template,\n\n    props: {\n        cart: {\n            type: Object,\n            required: true,\n        },\n\n        customer: {\n            type: Object,\n            default: null,\n        },\n\n        isCustomerActive: {\n            type: Boolean,\n            default: false,\n        },\n    },\n\n    computed: {\n        context: {\n            get() {\n                return this.customer ? this.customer.salesChannel : {};\n            },\n\n            set(context) {\n                if (this.customer) this.customer.salesChannel = context;\n            },\n        },\n\n        salesChannelId: {\n            get() {\n                return this.customer ? this.customer.salesChannelId : null;\n            },\n\n            set(salesChannelId) {\n                if (this.customer) this.customer.salesChannelId = salesChannelId;\n            },\n        },\n\n        salesChannelCriteria() {\n            const criteria = new Criteria(1, 25);\n\n            if (this.salesChannelId) {\n                criteria.addFilter(Criteria.equals('salesChannels.id', this.salesChannelId));\n            }\n\n            return criteria;\n        },\n\n        paymentMethodCriteria() {\n            const criteria = new Criteria(1, 25);\n\n            if (this.salesChannelId) {\n                criteria.addFilter(Criteria.equals('salesChannels.id', this.salesChannelId));\n            }\n\n            criteria.addFilter(Criteria.equals('afterOrderEnabled', 1));\n\n            return criteria;\n        },\n\n        currencyRepository() {\n            return Service('repositoryFactory').create('currency');\n        },\n\n        currentCurrencyId() {\n            return State.getters['swOrder/currencyId'];\n        },\n\n        defaultSalesChannel() {\n            return State.get('swOrder').defaultSalesChannel;\n        },\n\n        isCartTokenAvailable() {\n            return State.getters['swOrder/isCartTokenAvailable'];\n        },\n    },\n\n    watch: {\n        context: {\n            immediate: true,\n            deep: true,\n            handler() {\n                if (!this.customer || !this.cart.token) {\n                    return;\n                }\n\n                this.updateContext();\n                this.updateOrderContext();\n            },\n        },\n\n        isCartTokenAvailable: {\n            immediate: true,\n            handler() {\n                if (this.isCartTokenAvailable && this.customer) {\n                    this.updateOrderContext();\n                }\n            },\n        },\n    },\n\n    methods: {\n        updateContext() {\n            const contextKeys = ['currencyId', 'languageId', 'shippingMethodId', 'paymentMethodId'];\n            contextKeys.forEach((key) => {\n                this.context[key] = this.context[key] || this.defaultSalesChannel[key];\n            });\n        },\n\n        updateOrderContext() {\n            State.dispatch('swOrder/updateOrderContext', {\n                context: this.context,\n                salesChannelId: this.customer.salesChannelId,\n                contextToken: this.cart.token,\n            }).then(() => {\n                // Make sure updateCustomerContext() is run when updateOrderContext() completed\n                this.updateCustomerContext();\n\n                if (this.currentCurrencyId !== this.context.currencyId) {\n                    this.getCurrency();\n                }\n            });\n        },\n\n        updateCustomerContext() {\n            // We do getCart() only when user just changes the order context items. Otherwise, we do updateCustomerContext()\n            State.dispatch('swOrder/updateCustomerContext', {\n                customerId: this.customer.id,\n                salesChannelId: this.customer.salesChannelId,\n                contextToken: this.cart.token,\n            }).then((response) => {\n                if (response.status === 200) {\n                    this.getCart();\n                }\n            });\n        },\n\n        getCart() {\n            this.$emit('loading-change', true);\n\n            State.dispatch('swOrder/getCart', {\n                salesChannelId: this.customer.salesChannelId,\n                contextToken: this.cart.token,\n            }).finally(() => {\n                this.$emit('loading-change', false);\n            });\n        },\n\n        getCurrency() {\n            return this.currencyRepository.get(this.context.currencyId).then((currency) => {\n                State.commit('swOrder/setCurrency', currency);\n            });\n        },\n    },\n};\n"],"sourceRoot":""}