{"version":3,"sources":["webpack:///./src/module/sw-settings-logging/page/sw-settings-logging-list/index.js","webpack:///./src/module/sw-settings-logging/page/sw-settings-logging-list/sw-settings-logging-list.html.twig"],"names":["Mixin","Shopware","Criteria","Data","template","inject","mixins","getByName","data","entityName","sortBy","sortDirection","isLoading","logs","displayedLog","logLevels","Debug","Info","Notice","Warning","Error","Critical","Alert","Emergency","metaInfo","title","this","$createTitle","computed","logEntryRepository","repositoryFactory","create","logColumns","getLogColumns","modalNameFromLogEntry","subComponentName","message","replace","$options","components","concat","dateFilter","Filter","methods","showInfoModal","entryContents","closeInfoModal","getList","_this","criteria","page","limit","setTerm","term","addSorting","sort","search","then","response","total","catch","logLevelToString","level","distances","Object","values","map","x","Math","abs","stringLevel","keys","findIndex","min","apply","_toConsumableArray","$tc","property","dataIndex","label","allowResize","primary"],"mappings":"qJAEQA,EAAUC,SAAVD,MACAE,EAAaD,SAASE,KAAtBD,SAGO,WACXE,SCPW,qwJDSXC,OAAQ,CAAC,qBAETC,OAAQ,CACJN,EAAMO,UAAU,oBAChBP,EAAMO,UAAU,gBAGpBC,KAAI,WACA,MAAO,CACHC,WAAY,YACZC,OAAQ,sBACRC,cAAe,OACfC,WAAW,EACXC,KAAM,GACNC,aAAc,KACdC,UAAW,CACPC,MAAO,IACPC,KAAM,IACNC,OAAQ,IACRC,QAAS,IACTC,MAAO,IACPC,SAAU,IACVC,MAAO,IACPC,UAAW,OAKvBC,SAAQ,WACJ,MAAO,CACHC,MAAOC,KAAKC,iBAIpBC,SAAU,CACNC,mBAAkB,WACd,OAAOH,KAAKI,kBAAkBC,OAAO,cAGzCC,WAAU,WACN,OAAON,KAAKO,iBAGhBC,sBAAqB,WACjB,IAEMC,EAFYT,KAAKZ,aAAasB,QAEDC,QAAQ,QAAS,KACpD,OAAIX,KAAKY,SAASC,WAAW,uBAADC,OAAwBL,EAAgB,UAC1D,uBAANK,OAA8BL,EAAgB,SAE3C,kCAGXM,WAAU,WACN,OAAOxC,SAASyC,OAAOnC,UAAU,UAIzCoC,QAAS,CACLC,cAAa,SAACC,GACVnB,KAAKZ,aAAe+B,GAGxBC,eAAc,WACVpB,KAAKZ,aAAe,MAGxBiC,QAAO,WAAI,IAADC,EAAA,KACNtB,KAAKd,WAAY,EAEjB,IAAMqC,EAAW,IAAI/C,EAASwB,KAAKwB,KAAMxB,KAAKyB,OAK9C,OAHAF,EAASG,QAAQ1B,KAAK2B,MACtBJ,EAASK,WAAWpD,EAASqD,KAAK7B,KAAKhB,OAAQgB,KAAKf,gBAE7Ce,KAAKG,mBAAmB2B,OAAOP,GAAUQ,MAAK,SAACC,GAKlD,OAJAV,EAAKW,MAAQD,EAASC,MACtBX,EAAKnC,KAAO6C,EACZV,EAAKpC,WAAY,EAEV8C,KACRE,OAAM,WACLZ,EAAKpC,WAAY,MAIzBiD,iBAAgB,SAACC,GACb,IAAMC,EAAYC,OAAOC,OAAOvC,KAAKX,WAAWmD,KAAI,SAACC,GACjD,OAAOC,KAAKC,IAAIF,EAAIL,MAGlBQ,EAAcN,OAAOO,KAAK7C,KAAKX,WAAWgD,EAAUS,WAAU,SAACL,GACjE,OAAOA,IAAMC,KAAKK,IAAGC,MAARN,KAAIO,IAAQZ,QAG7B,OAAOrC,KAAKkD,IAAI,iCAADpC,OAAkC8B,KAGrDrC,cAAa,WACT,MAAO,CAAC,CACJ4C,SAAU,YACVC,UAAW,YACXC,MAAO,sCACPC,aAAa,EACbC,SAAS,GACV,CACCJ,SAAU,UACVC,UAAW,UACXC,MAAO,yCACPC,aAAa,GACd,CACCH,SAAU,QACVC,UAAW,QACXC,MAAO,uCACPC,aAAa,GACd,CACCH,SAAU,UACVC,UAAW,UACXC,MAAO,yCACPC,aAAa","file":"static/js/e6570eae7885c52a41f7.js","sourcesContent":["import template from './sw-settings-logging-list.html.twig';\n\nconst { Mixin } = Shopware;\nconst { Criteria } = Shopware.Data;\n\n// eslint-disable-next-line sw-deprecation-rules/private-feature-declarations\nexport default {\n    template,\n\n    inject: ['repositoryFactory'],\n\n    mixins: [\n        Mixin.getByName('sw-settings-list'),\n        Mixin.getByName('placeholder'),\n    ],\n\n    data() {\n        return {\n            entityName: 'log_entry',\n            sortBy: 'log_entry.createdAt',\n            sortDirection: 'DESC',\n            isLoading: true,\n            logs: [],\n            displayedLog: null,\n            logLevels: {\n                Debug: 100,\n                Info: 200,\n                Notice: 250,\n                Warning: 300,\n                Error: 400,\n                Critical: 500,\n                Alert: 550,\n                Emergency: 600,\n            },\n        };\n    },\n\n    metaInfo() {\n        return {\n            title: this.$createTitle(),\n        };\n    },\n\n    computed: {\n        logEntryRepository() {\n            return this.repositoryFactory.create('log_entry');\n        },\n\n        logColumns() {\n            return this.getLogColumns();\n        },\n\n        modalNameFromLogEntry() {\n            const eventName = this.displayedLog.message;\n\n            const subComponentName = eventName.replace(/[._]/g, '-');\n            if (this.$options.components[`sw-settings-logging-${subComponentName}-info`]) {\n                return `sw-settings-logging-${subComponentName}-info`;\n            }\n            return 'sw-settings-logging-entry-info';\n        },\n\n        dateFilter() {\n            return Shopware.Filter.getByName('date');\n        },\n    },\n\n    methods: {\n        showInfoModal(entryContents) {\n            this.displayedLog = entryContents;\n        },\n\n        closeInfoModal() {\n            this.displayedLog = null;\n        },\n\n        getList() {\n            this.isLoading = true;\n\n            const criteria = new Criteria(this.page, this.limit);\n\n            criteria.setTerm(this.term);\n            criteria.addSorting(Criteria.sort(this.sortBy, this.sortDirection));\n\n            return this.logEntryRepository.search(criteria).then((response) => {\n                this.total = response.total;\n                this.logs = response;\n                this.isLoading = false;\n\n                return response;\n            }).catch(() => {\n                this.isLoading = false;\n            });\n        },\n\n        logLevelToString(level) {\n            const distances = Object.values(this.logLevels).map((x) => {\n                return Math.abs(x - level);\n            });\n\n            const stringLevel = Object.keys(this.logLevels)[distances.findIndex((x) => {\n                return x === Math.min(...distances);\n            })];\n\n            return this.$tc(`sw-settings-logging.list.level${stringLevel}`);\n        },\n\n        getLogColumns() {\n            return [{\n                property: 'createdAt',\n                dataIndex: 'createdAt',\n                label: 'sw-settings-logging.list.columnDate',\n                allowResize: true,\n                primary: true,\n            }, {\n                property: 'message',\n                dataIndex: 'message',\n                label: 'sw-settings-logging.list.columnMessage',\n                allowResize: true,\n            }, {\n                property: 'level',\n                dataIndex: 'level',\n                label: 'sw-settings-logging.list.columnLevel',\n                allowResize: true,\n            }, {\n                property: 'context',\n                dataIndex: 'context',\n                label: 'sw-settings-logging.list.columnContent',\n                allowResize: true,\n            }];\n        },\n    },\n};\n","export default \"\\n{% block sw_settings_list %}\\n<sw-page class=\\\"sw-settings-logging-list\\\">\\n\\n    \\n    {% block sw_settings_logging_list_search_bar %}\\n    <template #search-bar>\\n        <sw-search-bar\\n            initial-search-type=\\\"Logs\\\"\\n            :placeholder=\\\"$tc('sw-settings-logging.general.placeholderSearchBar')\\\"\\n            :initial-search=\\\"term\\\"\\n            @search=\\\"onSearch\\\"\\n        />\\n    </template>\\n    {% endblock %}\\n\\n    \\n    {% block sw_settings_logging_list_smart_bar_header %}\\n    <template #smart-bar-header>\\n        \\n        {% block sw_settings_logging_list_smart_bar_header_title %}\\n        <h2>\\n            \\n            {% block sw_settings_logging_list_smart_bar_header_title_text %}\\n            {{ $tc('sw-settings.index.title') }}\\n            <sw-icon\\n                name=\\\"regular-chevron-right-xs\\\"\\n                small\\n            />\\n            {{ $tc('sw-settings-logging.list.title') }}\\n            {% endblock %}\\n        </h2>\\n        {% endblock %}\\n    </template>\\n    {% endblock %}\\n\\n    \\n    {% block sw_settings_logging_list_smart_bar_actions %}\\n    <template #smart-bar-actions></template>\\n    {% endblock %}\\n\\n    \\n    {% block sw_settings_logging_list_content %}\\n    <template #content>\\n        \\n        {% block sw_settings_logging_list_content_listing %}\\n        <sw-entity-listing\\n            :data-source=\\\"logs\\\"\\n            :columns=\\\"logColumns\\\"\\n            :full-page=\\\"true\\\"\\n            :show-settings=\\\"true\\\"\\n            :show-selection=\\\"false\\\"\\n            :show-actions=\\\"true\\\"\\n            :sort-by=\\\"sortBy\\\"\\n            :sort-direction=\\\"sortDirection\\\"\\n            :is-loading=\\\"isLoading\\\"\\n            :allow-column-edit=\\\"true\\\"\\n            :repository=\\\"logEntryRepository\\\"\\n            identifier=\\\"sw-log-entry-list\\\"\\n        >\\n\\n            <template\\n                #column-createdAt=\\\"{ item }\\\"\\n            >\\n                \\n                {% block sw_settings_logging_list_column_created_at %}\\n                {{ dateFilter(item.createdAt, { hour: '2-digit', minute: '2-digit' }) }}\\n                {% endblock %}\\n            </template>\\n\\n            <template\\n                #column-level=\\\"{ item }\\\"\\n            >\\n                \\n                {% block sw_settings_logging_list_column_level %}\\n                {{ logLevelToString(item.level) }} ({{ item.level }})\\n                {% endblock %}\\n            </template>\\n\\n            <template\\n                #column-context=\\\"{ item }\\\"\\n            >\\n                \\n                {% block sw_settings_logging_list_column_context %}\\n                <a\\n                    role=\\\"button\\\"\\n                    tabindex=\\\"0\\\"\\n                    @click=\\\"showInfoModal(item)\\\"\\n                    @keydown.enter=\\\"showInfoModal(item)\\\">\\n                    {{ item.context }}\\n                </a>\\n                {% endblock %}\\n            </template>\\n\\n            <template #pagination>\\n                \\n                {% block sw_settings_logging_list_content_listing_pagination %}\\n                <sw-pagination\\n                    :page=\\\"page\\\"\\n                    :limit=\\\"limit\\\"\\n                    :total=\\\"total\\\"\\n                    :total-visible=\\\"7\\\"\\n                    @page-change=\\\"onPageChange\\\"\\n                />\\n                {% endblock %}\\n            </template>\\n\\n            <template\\n                #actions=\\\"{ item }\\\"\\n            >\\n                \\n                {% block sw_settings_logging_list_content_listing_actions %}\\n                <sw-context-menu-item @click=\\\"showInfoModal(item)\\\">\\n                    \\n                    {% block sw_settings_logging_list_content_listing_action_show_label %}\\n                    {{ $tc('sw-settings-logging.list.actionShowInfo') }}\\n                    {% endblock %}\\n                </sw-context-menu-item>\\n                {% endblock %}\\n            </template>\\n\\n        </sw-entity-listing>\\n        {% endblock %}\\n\\n        \\n        {% block sw_settings_logging_list_content_info_modal %}\\n        <component\\n            :is=\\\"modalNameFromLogEntry\\\"\\n            v-if=\\\"displayedLog !== null\\\"\\n            :log-entry=\\\"displayedLog\\\"\\n            @close=\\\"closeInfoModal\\\"\\n        />\\n        {% endblock %}\\n    </template>\\n    {% endblock %}\\n\\n    \\n    {% block sw_settings_logging_list_sidebar %}\\n    <template #sidebar>\\n        <sw-sidebar class=\\\"sw-settings-logging-list__sidebar\\\">\\n            \\n            {% block sw_settings_logging_list_sidebar_refresh %}\\n            <sw-sidebar-item\\n                icon=\\\"regular-undo\\\"\\n                :title=\\\"$tc('sw-settings-logging.list.titleSidebarItemRefresh')\\\"\\n                @click=\\\"onRefresh\\\"\\n            />\\n            {% endblock %}\\n        </sw-sidebar>\\n    </template>\\n    {% endblock %}\\n</sw-page>\\n{% endblock %}\\n\";"],"sourceRoot":""}