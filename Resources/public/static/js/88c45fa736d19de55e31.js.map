{"version":3,"sources":["webpack:///./src/module/sw-settings-payment/page/sw-settings-payment-overview/index.ts","webpack:///./src/module/sw-settings-payment/page/sw-settings-payment-overview/sw-settings-payment-overview.html.twig","webpack:///./src/module/sw-settings-payment/page/sw-settings-payment-overview/sw-settings-payment-overview.scss"],"names":["Mixin","Shopware","Criteria","Data","cloneDeep","Utils","object","Component","wrapComponentConfig","template","inject","mixins","getByName","data","paymentMethods","isLoading","showSortingModal","metaInfo","title","this","$createTitle","computed","customCards","_Shopware$State$get$c","State","get","cards","paymentMethodRepository","repositoryFactory","create","paymentMethodCriteria","criteria","addAssociation","addSorting","sort","isEmpty","length","paymentMethodCards","forEach","customCard","customPaymentMethods","filter","pm","paymentMethodHandlers","includes","formattedHandlerIdentifier","push","id","hasCustomCard","component","position","Math","min","apply","_toConsumableArray","map","positionId","paymentMethod","a","b","created","createdComponent","methods","loadPaymentMethods","_this","search","then","items","finally","onChangeLanguage","languageId","commit","togglePaymentMethodActive","_this2","paymentMethodEntity","find","active","save","_paymentMethodEntity$","_paymentMethodEntity$2","showActivationSuccessNotification","translated","name","catch","_paymentMethodEntity$3","_paymentMethodEntity$4","showActivationErrorNotification","$nextTick","message","$tc","createNotificationSuccess","createNotificationError","content","__esModule","default","module","i","locals","exports","add"],"mappings":"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","file":"static/js/88c45fa736d19de55e31.js","sourcesContent":["import type CriteriaType from 'src/core/data/criteria.data';\nimport type Repository from 'src/core/data/repository.data';\nimport type { Entity } from '@shopware-ag/admin-extension-sdk/es/data/_internals/Entity';\nimport type EntityCollection from '@shopware-ag/admin-extension-sdk/es/data/_internals/EntityCollection';\nimport type { MetaInfo } from 'vue-meta';\nimport type { PaymentOverviewCard } from '../../state/overview-cards.store';\nimport template from './sw-settings-payment-overview.html.twig';\nimport './sw-settings-payment-overview.scss';\n\n/**\n * @package checkout\n */\n\ninterface PaymentMethodCard {\n    id: string;\n    hasCustomCard: boolean;\n    component?: string;\n    positionId: string;\n    position: number;\n    paymentMethod?: Entity<'payment_method'>;\n    paymentMethods?: EntityCollection<'payment_method'>;\n}\n\nconst { Mixin } = Shopware;\nconst { Criteria } = Shopware.Data;\nconst { cloneDeep } = Shopware.Utils.object;\n\n// eslint-disable-next-line sw-deprecation-rules/private-feature-declarations\nexport default Shopware.Component.wrapComponentConfig({\n    template,\n\n    inject: ['repositoryFactory', 'acl'],\n\n    mixins: [\n        Mixin.getByName('notification'),\n    ],\n\n    data(): {\n        isLoading: boolean,\n        showSortingModal: boolean,\n        paymentMethods: EntityCollection<'payment_method'>|[],\n        } {\n        return {\n            paymentMethods: [],\n            isLoading: false,\n            showSortingModal: false,\n        };\n    },\n\n    metaInfo(): MetaInfo {\n        return {\n            title: this.$createTitle(),\n        };\n    },\n\n    computed: {\n        customCards(): PaymentOverviewCard[] {\n            return Shopware.State.get('paymentOverviewCardState').cards ?? [];\n        },\n\n        paymentMethodRepository(): Repository<'payment_method'> {\n            return this.repositoryFactory.create('payment_method');\n        },\n\n        paymentMethodCriteria(): CriteriaType {\n            const criteria = new Criteria(1, 500);\n\n            criteria.addAssociation('media');\n            criteria.addSorting(Criteria.sort('position', 'ASC'));\n\n            return criteria;\n        },\n\n        isEmpty(): boolean {\n            return !this.isLoading && this.paymentMethods.length === 0;\n        },\n\n        paymentMethodCards(): PaymentMethodCard[] {\n            if (this.paymentMethods.length === 0) {\n                return [];\n            }\n\n            const paymentMethodCards = [];\n            let paymentMethods = cloneDeep(this.paymentMethods);\n\n            this.customCards.forEach((customCard: PaymentOverviewCard) => {\n                const customPaymentMethods = paymentMethods\n                    // @ts-expect-error - can be undefined\n                    .filter(pm => customCard.paymentMethodHandlers.includes(pm.formattedHandlerIdentifier));\n\n                if (customPaymentMethods.length === 0) {\n                    return;\n                }\n\n                paymentMethodCards.push(<PaymentMethodCard>{\n                    id: customPaymentMethods[0].id,\n                    hasCustomCard: true,\n                    component: customCard.component,\n                    // @ts-expect-error - can be undefined\n                    position: Math.min(...customPaymentMethods.map(pm => pm.position)),\n                    positionId: customCard.positionId,\n                    paymentMethods: customPaymentMethods,\n                });\n\n                // @ts-expect-error - can be undefined\n                paymentMethods = paymentMethods\n                    // @ts-expect-error - can be undefined\n                    .filter(pm => !customCard.paymentMethodHandlers.includes(pm.formattedHandlerIdentifier));\n            });\n\n            paymentMethodCards.push(...paymentMethods.map(paymentMethod => <PaymentMethodCard>{\n                id: paymentMethod.id,\n                hasCustomCard: false,\n                paymentMethod,\n                position: paymentMethod.position,\n                positionId: '',\n            }));\n\n            return paymentMethodCards.sort((a: PaymentMethodCard, b: PaymentMethodCard) => {\n                return a.position - b.position;\n            });\n        },\n    },\n\n    created(): void {\n        this.createdComponent();\n    },\n\n    methods: {\n        createdComponent(): void {\n            this.loadPaymentMethods();\n        },\n\n        loadPaymentMethods(): void {\n            this.isLoading = true;\n\n            this.paymentMethodRepository.search(this.paymentMethodCriteria).then((items) => {\n                this.paymentMethods = items;\n            }).finally(() => {\n                this.isLoading = false;\n            });\n        },\n\n        onChangeLanguage(languageId: string): void {\n            Shopware.State.commit('context/setApiLanguageId', languageId);\n            this.loadPaymentMethods();\n        },\n\n        togglePaymentMethodActive(paymentMethod: Entity<'payment_method'>): void {\n            const paymentMethodEntity = this.paymentMethods\n                .find((pm) => pm.id === paymentMethod.id);\n\n            if (!paymentMethodEntity) {\n                return;\n            }\n\n            paymentMethodEntity.active = paymentMethod.active;\n\n            this.paymentMethodRepository.save(paymentMethodEntity).then(() => {\n                this.loadPaymentMethods();\n                this.showActivationSuccessNotification(\n                    paymentMethodEntity.translated?.name ?? '',\n                    // @ts-expect-error - can be undefined\n                    paymentMethodEntity.active,\n                );\n            }).catch(() => {\n                // @ts-expect-error - can be undefined\n                this.showActivationErrorNotification(paymentMethodEntity.translated?.name ?? '', paymentMethodEntity.active);\n                this.$nextTick(() => {\n                    paymentMethodEntity.active = !paymentMethodEntity.active;\n                });\n            });\n        },\n\n        showActivationSuccessNotification(name: string, active: boolean) {\n            const message = active ?\n                this.$tc('sw-settings-payment.overview.notification.activationSuccess', 0, { name }) :\n                this.$tc('sw-settings-payment.overview.notification.deactivationSuccess', 0, { name });\n\n            this.createNotificationSuccess({ message });\n        },\n\n        showActivationErrorNotification(name: string, active: boolean) {\n            const message = active ?\n                this.$tc('sw-settings-payment.overview.notification.activationError', 0, { name }) :\n                this.$tc('sw-settings-payment.overview.notification.deactivationError', 0, { name });\n\n            this.createNotificationError({ message });\n        },\n    },\n});\n","export default \"\\n{% block sw_settings_payment_overview %}\\n<sw-page class=\\\"sw-settings-payment-overview\\\">\\n\\n    \\n    {% block sw_settings_payment_overview_smart_bar_actions %}\\n    <template #smart-bar-actions>\\n\\n        \\n        {% block sw_settings_payment_overview_smart_bar_actions_add %}\\n        <sw-button\\n            v-tooltip=\\\"{\\n                message: $tc('sw-privileges.tooltip.warning'),\\n                disabled: acl.can('payment.creator'),\\n                showOnDisabledElements: true\\n            }\\\"\\n            class=\\\"sw-settings-payment-overview__button-create\\\"\\n            :disabled=\\\"!acl.can('payment.creator')\\\"\\n            :router-link=\\\"{ name: 'sw.settings.payment.create' }\\\"\\n            variant=\\\"primary\\\"\\n        >\\n            {{ $tc('sw-settings-payment.list.buttonAddPaymentMethod') }}\\n        </sw-button>\\n        {% endblock %}\\n\\n    </template>\\n    {% endblock %}\\n\\n    \\n    {% block sw_settings_payment_overview_smart_bar_header %}\\n    <template #smart-bar-header>\\n\\n        \\n        {% block sw_settings_payment_overview_smart_bar_header_title %}\\n        <h2 class=\\\"sw-settings-payment-overview__title\\\">\\n            {{ $tc('sw-settings-payment.general.mainMenuItemGeneral') }}\\n        </h2>\\n        {% endblock %}\\n\\n    </template>\\n    {% endblock %}\\n\\n    \\n    {% block sw_settings_payment_overview_language_switch %}\\n    <template #language-switch>\\n        <sw-language-switch @on-change=\\\"onChangeLanguage\\\" />\\n    </template>\\n    {% endblock %}\\n\\n    \\n    {% block sw_settings_payment_overview_content %}\\n    <template #content>\\n\\n        \\n        {% block sw_settings_payment_overview_content_inner %}\\n        <sw-card-view class=\\\"sw-settings-payment-overview__content\\\">\\n\\n            \\n            {% block sw_settings_payment_overview_sorting_modal_card %}\\n            <sw-card\\n                class=\\\"sw-settings-payment-overview__sorting_modal_card\\\"\\n                position-identifier=\\\"sw-settings-payment-overview-sorting-modal-card\\\"\\n            >\\n                <sw-button-process\\n                    :disabled=\\\"isLoading\\\"\\n                    :is-loading=\\\"isLoading\\\"\\n                    :process-success=\\\"false\\\"\\n                    variant=\\\"ghost\\\"\\n                    @click=\\\"showSortingModal = true\\\"\\n                >\\n                    {{ $tc('sw-settings-payment.overview.openSortingModalButton') }}\\n                </sw-button-process>\\n            </sw-card>\\n            {% endblock %}\\n\\n            \\n            {% block sw_settings_payment_overview_list %}\\n            <template\\n                v-for=\\\"card in paymentMethodCards\\\"\\n                {% if VUE3 %}\\n                :key=\\\"card.id\\\"\\n                {% endif %}\\n            >\\n\\n                <template v-if=\\\"card.hasCustomCard\\\">\\n                    \\n                    {% block sw_settings_payment_overview_list_card_custom_location %}\\n                    <sw-extension-component-section\\n                        :key=\\\"`extension-${card.id}`\\\"\\n                        :position-identifier=\\\"card.positionId\\\"\\n                    />\\n                    {% endblock %}\\n                </template>\\n\\n                <template v-if=\\\"card.hasCustomCard && card.component\\\">\\n                    \\n                    {% block sw_settings_payment_overview_list_card_custom_card %}\\n                    <component\\n                        :is=\\\"card.component\\\"\\n                        :key=\\\"`component-${card.id}`\\\"\\n                        :payment-methods=\\\"card.paymentMethods\\\"\\n                        @set-payment-active=\\\"togglePaymentMethodActive\\\"\\n                    />\\n                    {% endblock %}\\n                </template>\\n\\n                <template v-if=\\\"!card.hasCustomCard\\\">\\n                    \\n                    {% block sw_settings_payment_overview_list_card_default %}\\n                    <sw-payment-card\\n                        :key=\\\"`default-${card.id}`\\\"\\n                        :payment-method=\\\"card.paymentMethod\\\"\\n                        @set-payment-active=\\\"togglePaymentMethodActive\\\"\\n                    />\\n                    {% endblock %}\\n                </template>\\n\\n            </template>\\n            {% endblock %}\\n\\n            \\n            {% block sw_settings_payment_overview_empty_state %}\\n            <sw-empty-state\\n                v-if=\\\"isEmpty\\\"\\n                :title=\\\"$tc('sw-empty-state.messageNoResultTitle')\\\"\\n            >\\n                <template #default>\\n                    {{ $tc('sw-empty-state.messageNoResultSublineBefore') }}\\n                    <router-link\\n                        class=\\\"sw-empty-state__description-link\\\"\\n                        :to=\\\"{ name: 'sw.profile.index.searchPreferences' }\\\"\\n                    >\\n                        {{ $tc('sw-empty-state.messageNoResultSublineLink') }}\\n                    </router-link>\\n                    {{ $tc('sw-empty-state.messageNoResultSublineAfter') }}\\n                </template>\\n            </sw-empty-state>\\n            {% endblock %}\\n\\n        </sw-card-view>\\n        {% endblock %}\\n\\n        \\n        {% block sw_settings_payment_overview_sorting_modal %}\\n        <sw-settings-payment-sorting-modal\\n            v-if=\\\"showSortingModal\\\"\\n            :payment-methods=\\\"paymentMethods\\\"\\n            @modal-close=\\\"showSortingModal = false\\\"\\n            @modal-save=\\\"loadPaymentMethods\\\"\\n        />\\n        {% endblock %}\\n    </template>\\n    {% endblock %}\\n</sw-page>\\n{% endblock %}\\n\";","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../../../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--15-1!../../../../../node_modules/css-loader/dist/cjs.js??ref--15-2!../../../../../node_modules/sass-loader/dist/cjs.js??ref--15-3!./sw-settings-payment-overview.scss\");\nif(content.__esModule) content = content.default;\nif(typeof content === 'string') content = [[module.id, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar add = require(\"!../../../../../node_modules/vue-style-loader/lib/addStylesClient.js\").default\nvar update = add(\"67a306a8\", content, true, {});"],"sourceRoot":""}