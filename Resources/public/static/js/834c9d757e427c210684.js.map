{"version":3,"sources":["webpack:///./src/module/sw-settings-custom-field/component/sw-custom-field-translated-labels/index.js","webpack:///./src/module/sw-settings-custom-field/component/sw-custom-field-translated-labels/sw-custom-field-translated-labels.html.twig","webpack:///./src/module/sw-settings-custom-field/component/sw-custom-field-translated-labels/sw-custom-field-translated-labels.scss"],"names":["Mixin","Shopware","template","inject","mixins","getByName","model","prop","props","locales","required","config","type","Object","propertyNames","disabled","Boolean","default","computed","locale","this","$root","$i18n","fallbackLocale","localeCount","keys","length","watch","initializeConfiguration","created","createdComponent","methods","_this","forEach","property","hasOwnProperty","$set","_defineProperty","getLabel","label","snippet","getInlineSnippet","language","$tc","concat","onInput","input","propertyName","content","__esModule","module","i","locals","exports","add"],"mappings":"gLAMQA,G,UAAUC,SAAVD,OAGO,WACXE,SCVW,2jGDYXC,OAAQ,CAAC,OAETC,OAAQ,CACJJ,EAAMK,UAAU,sBAGpBC,MAAO,CACHC,KAAM,UAGVC,MAAO,CAGHC,QAAS,CACLC,UAAU,GAEdC,OAAQ,CACJC,KAAMC,OACNH,UAAU,GAEdI,cAAe,CACXF,KAAMC,OACNH,UAAU,GAEdK,SAAU,CACNH,KAAMI,QACNN,UAAU,EACVO,SAAS,IAIjBC,SAAU,CACNC,OAAM,WACF,OAAOC,KAAKC,MAAMC,MAAMH,QAE5BI,eAAc,WACV,OAAOH,KAAKC,MAAMC,MAAMC,gBAE5BC,YAAW,WACP,OAAOX,OAAOY,KAAKL,KAAKX,SAASiB,SAIzCC,MAAO,CACHlB,QAAO,WACHW,KAAKQ,4BAIbC,QAAO,WACHT,KAAKU,oBAGTC,QAAS,CACLD,iBAAgB,WACZV,KAAKQ,2BAETA,wBAAuB,WAAI,IAADI,EAAA,KACtBnB,OAAOY,KAAKL,KAAKN,eAAemB,SAAQ,SAACC,GAChCF,EAAKrB,OAAOwB,eAAeD,IAC5BF,EAAKI,KAAKJ,EAAKrB,OAAQuB,EAAQG,IAAA,GAAKL,EAAKT,eAAiB,WAItEe,SAAQ,SAACC,EAAOpB,GACZ,IAAMqB,EAAUpB,KAAKqB,iBAAiBF,GAChCG,EAAWtB,KAAKuB,IAAI,UAADC,OAAWzB,IAEpC,MAAM,GAANyB,OAAUJ,EAAO,MAAAI,OAAKF,EAAQ,MAElCG,QAAO,SAACC,EAAOC,EAAc5B,GACX,KAAV2B,IACA1B,KAAKT,OAAOoC,GAAc5B,GAAU,U,qBEjFpD,IAAI6B,EAAU,EAAQ,QACnBA,EAAQC,aAAYD,EAAUA,EAAQ/B,SACnB,iBAAZ+B,IAAsBA,EAAU,CAAC,CAACE,EAAOC,EAAIH,EAAS,MAC7DA,EAAQI,SAAQF,EAAOG,QAAUL,EAAQI,SAG/BE,EADH,EAAQ,QAAwErC,SACzE,WAAY+B,GAAS,EAAM","file":"static/js/834c9d757e427c210684.js","sourcesContent":["/**\n * @package services-settings\n */\nimport template from './sw-custom-field-translated-labels.html.twig';\nimport './sw-custom-field-translated-labels.scss';\n\nconst { Mixin } = Shopware;\n\n// eslint-disable-next-line sw-deprecation-rules/private-feature-declarations\nexport default {\n    template,\n\n    inject: ['acl'],\n\n    mixins: [\n        Mixin.getByName('sw-inline-snippet'),\n    ],\n\n    model: {\n        prop: 'config',\n    },\n\n    props: {\n        // FIXME: add type to locales\n        // eslint-disable-next-line vue/require-prop-types\n        locales: {\n            required: true,\n        },\n        config: {\n            type: Object,\n            required: true,\n        },\n        propertyNames: {\n            type: Object,\n            required: true,\n        },\n        disabled: {\n            type: Boolean,\n            required: false,\n            default: false,\n        },\n    },\n\n    computed: {\n        locale() {\n            return this.$root.$i18n.locale;\n        },\n        fallbackLocale() {\n            return this.$root.$i18n.fallbackLocale;\n        },\n        localeCount() {\n            return Object.keys(this.locales).length;\n        },\n    },\n\n    watch: {\n        locales() {\n            this.initializeConfiguration();\n        },\n    },\n\n    created() {\n        this.createdComponent();\n    },\n\n    methods: {\n        createdComponent() {\n            this.initializeConfiguration();\n        },\n        initializeConfiguration() {\n            Object.keys(this.propertyNames).forEach((property) => {\n                if (!this.config.hasOwnProperty(property)) {\n                    this.$set(this.config, property, { [this.fallbackLocale]: null });\n                }\n            });\n        },\n        getLabel(label, locale) {\n            const snippet = this.getInlineSnippet(label);\n            const language = this.$tc(`locale.${locale}`);\n\n            return `${snippet} (${language})`;\n        },\n        onInput(input, propertyName, locale) {\n            if (input === '') {\n                this.config[propertyName][locale] = null;\n            }\n        },\n    },\n};\n","export default \"\\n{% block sw_custom_field_translated_labels %}\\n<div class=\\\"sw-custom-field-translated-labels\\\">\\n    \\n    {% block sw_custom_field_translated_labels_single %}\\n    <template v-if=\\\"localeCount == 1\\\">\\n        <div\\n            v-for=\\\"locale in locales\\\"\\n            :key=\\\"locale\\\"\\n        >\\n            <sw-text-field\\n                v-for=\\\"(label, name) in propertyNames\\\"\\n                :key=\\\"getInlineSnippet(name)\\\"\\n                {% if VUE3 %}\\n                v-model:value=\\\"config[name][locale]\\\"\\n                {% else %}\\n                v-model=\\\"config[name][locale]\\\"\\n                {% endif %}\\n                :disabled=\\\"disabled\\\"\\n                :label=\\\"getLabel(label, locale)\\\"\\n                {% if VUE3 %}\\n                @update:value=\\\"onInput($event, name, locale)\\\"\\n                {% else %}\\n                @input=\\\"onInput($event, name, locale)\\\"\\n                {% endif %}\\n            />\\n        </div>\\n    </template>\\n    {% endblock %}\\n\\n    \\n    {% block sw_custom_field_translated_labels_translated %}\\n    <sw-tabs\\n        v-else\\n        variant=\\\"minimal\\\"\\n        position-identifier=\\\"sw-custom-field-translated-labels\\\"\\n        :default-item=\\\"fallbackLocale\\\"\\n    >\\n        \\n        {% block sw_custom_field_translated_labels_translated_tabs %}\\n        <template #default=\\\"{ active }\\\">\\n            <sw-tabs-item\\n                v-for=\\\"locale in locales\\\"\\n                :key=\\\"locale\\\"\\n                class=\\\"sw-custom-field-translated-labels__translated-labels-field\\\"\\n                variant=\\\"minimal\\\"\\n                :name=\\\"locale\\\"\\n                :active-tab=\\\"active\\\"\\n            >\\n                {{ $tc(`locale.${locale}`) }}\\n            </sw-tabs-item>\\n        </template>\\n        {% endblock %}\\n\\n        \\n        {% block sw_custom_field_translated_labels_translated_content %}\\n        <template\\n            #content=\\\"{ active }\\\"\\n        >\\n            \\n            <div\\n                v-for=\\\"locale in locales\\\"\\n                v-if=\\\"active === locale\\\"\\n                :key=\\\"locale\\\"\\n            >\\n                \\n                {% block sw_custom_field_translated_labels_translated_content_field %}\\n                <sw-text-field\\n                    v-for=\\\"(label, name) in propertyNames\\\"\\n                    :key=\\\"getInlineSnippet(name)\\\"\\n                    {% if VUE3 %}\\n                    v-model:value=\\\"config[name][locale]\\\"\\n                    {% else %}\\n                    v-model=\\\"config[name][locale]\\\"\\n                    {% endif %}\\n                    class=\\\"sw-custom-field-translated-labels__translated-content-field\\\"\\n                    :disabled=\\\"disabled\\\"\\n                    :label=\\\"getLabel(label, locale)\\\"\\n                    {% if VUE3 %}\\n                    @update:value=\\\"onInput($event, name, locale)\\\"\\n                    {% else %}\\n                    @input=\\\"onInput($event, name, locale)\\\"\\n                    {% endif %}\\n                />\\n                {% endblock %}\\n            </div>\\n        </template>\\n        {% endblock %}\\n    </sw-tabs>\\n    {% endblock %}\\n</div>\\n{% endblock %}\\n\";","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../../../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--15-1!../../../../../node_modules/css-loader/dist/cjs.js??ref--15-2!../../../../../node_modules/sass-loader/dist/cjs.js??ref--15-3!./sw-custom-field-translated-labels.scss\");\nif(content.__esModule) content = content.default;\nif(typeof content === 'string') content = [[module.id, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar add = require(\"!../../../../../node_modules/vue-style-loader/lib/addStylesClient.js\").default\nvar update = add(\"5abea475\", content, true, {});"],"sourceRoot":""}