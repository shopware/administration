{"version":3,"sources":["webpack:///./src/module/sw-order/component/sw-order-state-history-modal/index.ts","webpack:///./src/module/sw-order/component/sw-order-state-history-modal/sw-order-state-history-modal.html.twig"],"names":["_Shopware","Shopware","Component","Mixin","Criteria","Data","wrapComponentConfig","template","inject","mixins","getByName","props","order","type","Object","required","isLoading","Boolean","data","dataSource","statesLoading","limit","page","total","steps","computed","stateMachineHistoryRepository","this","repositoryFactory","create","stateMachineHistoryCriteria","_this$order$transacti","_this$order$deliverie","criteria","entityIds","id","concat","_toConsumableArray","transactions","map","transaction","deliveries","delivery","addFilter","equalsAny","addAssociation","addSorting","field","naturalSorting","columns","property","label","$tc","created","createdComponent","methods","loadHistory","_this","_asyncToGenerator","_regeneratorRuntime","mark","_callee","_error$response","_error$response$data","_error$response$data$","_error$response$data$2","errorMessage","wrap","_context","prev","next","getStateHistoryEntries","t0","response","errors","detail","createNotificationError","message","finish","stop","_this2","search","then","fetchedEntries","_fetchedEntries$total","buildStateHistory","Promise","resolve","allEntries","_allEntries$filter$0$","_allEntries$filter$","_allEntries$filter$0$2","_allEntries$filter$2","_this$order$transacti2","_this$order$transacti3","_allEntries$filter$0$3","_allEntries$filter$3","_this$order$deliverie2","_this$order$deliverie3","_this3","states","filter","entry","entityName","fromStateMachineState","stateMachineState","order_transaction","last","order_delivery","first","entries","push","createEntry","forEach","toStateMachineState","createdAt","orderDateTime","user","undefined","entity","getVariantState","state","stateStyleDataProviderService","getStyle","technicalName","variant","onClose","$emit","onPageChange","_ref"],"mappings":"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","file":"static/js/f9708787bcdbb84fc35f.js","sourcesContent":["import type { Entity } from '@shopware-ag/admin-extension-sdk/es/data/_internals/Entity';\nimport type EntityCollection from '@shopware-ag/admin-extension-sdk/es/data/_internals/EntityCollection';\nimport type { PropType } from 'vue';\nimport type RepositoryType from 'src/core/data/repository.data';\nimport type CriteriaType from 'src/core/data/criteria.data';\nimport template from './sw-order-state-history-modal.html.twig';\n\n/**\n * @package checkout\n */\n\nconst { Component, Mixin } = Shopware;\nconst { Criteria } = Shopware.Data;\n\ninterface StateMachineHistoryData {\n    order: Entity<'state_machine_state'>,\n    transaction: Entity<'state_machine_state'>,\n    delivery: Entity<'state_machine_state'>,\n    createdAt: string,\n    user?: {\n        username: string\n    },\n    entity: string,\n}\n\ninterface CombinedStates {\n    order: Entity<'state_machine_state'>,\n    ['order_transaction']: Entity<'state_machine_state'>,\n    ['order_delivery']: Entity<'state_machine_state'>,\n}\n\n// eslint-disable-next-line sw-deprecation-rules/private-feature-declarations\nexport default Component.wrapComponentConfig({\n    template,\n\n    inject: [\n        'repositoryFactory',\n        'stateStyleDataProviderService',\n    ],\n\n    mixins: [\n        Mixin.getByName('notification'),\n    ],\n\n    props: {\n        order: {\n            type: Object as PropType<Entity<'order'>>,\n            required: true,\n        },\n        isLoading: {\n            type: Boolean,\n            required: true,\n        },\n    },\n\n    data(): {\n        dataSource: StateMachineHistoryData[],\n        statesLoading: boolean,\n        limit: number,\n        page: number,\n        total: number,\n        steps: number[],\n        } {\n        return {\n            dataSource: [],\n            statesLoading: true,\n            limit: 10,\n            page: 1,\n            total: 0,\n            steps: [5, 10, 25],\n        };\n    },\n\n    computed: {\n        stateMachineHistoryRepository(): RepositoryType<'state_machine_history'> {\n            return this.repositoryFactory.create('state_machine_history');\n        },\n\n        stateMachineHistoryCriteria(): CriteriaType {\n            const criteria = new Criteria(this.page, this.limit);\n\n            const entityIds = [\n                this.order.id,\n                ...(this.order.transactions ?? []).map((transaction) => {\n                    return transaction.id;\n                }),\n                ...(this.order.deliveries ?? []).map((delivery) => {\n                    return delivery.id;\n                }),\n            ];\n\n            criteria.addFilter(\n                Criteria.equalsAny(\n                    'state_machine_history.entityId.id',\n                    entityIds,\n                ),\n            );\n            criteria.addFilter(\n                Criteria.equalsAny(\n                    'state_machine_history.entityName',\n                    ['order', 'order_transaction', 'order_delivery'],\n                ),\n            );\n            criteria.addAssociation('fromStateMachineState');\n            criteria.addAssociation('toStateMachineState');\n            criteria.addAssociation('user');\n            criteria.addSorting({\n                field: 'state_machine_history.createdAt',\n                order: 'ASC',\n                naturalSorting: false,\n            });\n\n            return criteria;\n        },\n\n        columns(): Array<{property: string, label: string}> {\n            return [\n                { property: 'createdAt', label: this.$tc('sw-order.stateHistoryModal.column.createdAt') },\n                { property: 'entity', label: this.$tc('sw-order.stateHistoryModal.column.entity') },\n                { property: 'user', label: this.$tc('sw-order.stateHistoryModal.column.user') },\n                { property: 'transaction', label: this.$tc('sw-order.stateHistoryModal.column.transaction') },\n                { property: 'delivery', label: this.$tc('sw-order.stateHistoryModal.column.delivery') },\n                { property: 'order', label: this.$tc('sw-order.stateHistoryModal.column.order') },\n            ];\n        },\n    },\n\n    created() {\n        this.createdComponent();\n    },\n\n    methods: {\n        createdComponent(): void {\n            void this.loadHistory();\n        },\n\n        async loadHistory(): Promise<void> {\n            this.statesLoading = true;\n\n            try {\n                await this.getStateHistoryEntries();\n            } catch (error: unknown) {\n                // @ts-expect-error\n                // eslint-disable-next-line max-len\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access,@typescript-eslint/no-unsafe-assignment\n                const errorMessage = error?.response?.data?.errors?.[0]?.detail || '';\n\n                this.createNotificationError({\n                    // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n                    message: errorMessage,\n                });\n            } finally {\n                this.statesLoading = false;\n            }\n        },\n\n        getStateHistoryEntries(): Promise<EntityCollection<'state_machine_history'>> {\n            return this.stateMachineHistoryRepository.search(this.stateMachineHistoryCriteria)\n                .then((fetchedEntries) => {\n                    this.dataSource = this.buildStateHistory(fetchedEntries);\n                    this.total = fetchedEntries.total ?? 1;\n                    return Promise.resolve(fetchedEntries);\n                });\n        },\n\n        buildStateHistory(allEntries: EntityCollection<'state_machine_history'>): StateMachineHistoryData[] {\n            const states = {\n                order: allEntries.filter((entry) => {\n                    return entry.entityName === 'order';\n                })[0]?.fromStateMachineState ?? this.order.stateMachineState,\n                order_transaction: allEntries.filter((entry) => {\n                    return entry.entityName === 'order_transaction';\n                })[0]?.fromStateMachineState ?? this.order.transactions?.last()?.stateMachineState,\n                order_delivery: allEntries.filter((entry) => {\n                    return entry.entityName === 'order_delivery';\n                })[0]?.fromStateMachineState ?? this.order.deliveries?.first()?.stateMachineState,\n            };\n\n            const entries = [] as Array<StateMachineHistoryData>;\n\n            if (this.page === 1) {\n                // @ts-expect-error - states exists\n                // Prepend start state\n                entries.push(this.createEntry(states, this.order));\n            }\n\n            allEntries.forEach((entry: Entity<'state_machine_history'>) => {\n                // @ts-expect-error - the entityName have to be order, order_transaction or order_delivery\n                states[entry.entityName] = entry.toStateMachineState;\n                // @ts-expect-error - states exists\n                entries.push(this.createEntry(states, entry));\n            });\n\n            return entries;\n        },\n\n        createEntry(\n            states: CombinedStates,\n            entry: Entity<'state_machine_history'> | Entity<'order'>,\n        ): StateMachineHistoryData {\n            return {\n                order: states.order,\n                transaction: states.order_transaction,\n                delivery: states.order_delivery,\n                createdAt: 'orderDateTime' in entry ? entry.orderDateTime : entry.createdAt,\n                user: 'user' in entry ? entry.user : undefined,\n                entity: 'entityName' in entry ? entry.entityName : 'order',\n            };\n        },\n\n        getVariantState(entity: string, state: Entity<'state_machine_state'>): string {\n            // eslint-disable-next-line max-len\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access,@typescript-eslint/no-unsafe-call,@typescript-eslint/no-unsafe-return\n            return this.stateStyleDataProviderService\n                .getStyle(`${entity}.state`, state.technicalName).variant;\n        },\n\n        onClose(): void {\n            this.$emit('modal-close');\n        },\n\n        onPageChange({ page, limit }: { page: number, limit: number }): void {\n            this.page = page;\n            this.limit = limit;\n\n            void this.loadHistory();\n        },\n    },\n});\n","export default \"\\n{% block sw_order_state_history_modal %}\\n<sw-modal\\n    :title=\\\"$tc('sw-order.stateHistoryModal.modalTitle')\\\"\\n    :is-loading=\\\"isLoading\\\"\\n    variant=\\\"large\\\"\\n    @modal-close=\\\"onClose\\\"\\n>\\n    \\n    {% block sw_order_state_history_modal_content %}\\n    <sw-data-grid\\n        :columns=\\\"columns\\\"\\n        :data-source=\\\"dataSource\\\"\\n        :is-loading=\\\"isLoading || statesLoading\\\"\\n        :plain-appearance=\\\"true\\\"\\n        :show-selection=\\\"false\\\"\\n        :show-actions=\\\"false\\\"\\n    >\\n\\n        \\n        {% block sw_order_state_history_modal_content_columns_created_at %}\\n        <template #column-createdAt=\\\"{ item }\\\">\\n            <sw-time-ago :date=\\\"item.createdAt\\\" />\\n        </template>\\n        {% endblock %}\\n\\n        \\n        {% block sw_order_state_history_modal_content_columns_entity %}\\n        <template #column-entity=\\\"{ item }\\\">\\n            {{ $tc('global.entities.' + item.entity) }}\\n        </template>\\n        {% endblock %}\\n\\n        \\n        {% block sw_order_state_history_modal_content_columns_user %}\\n        <template #column-user=\\\"{ item }\\\">\\n            {{ item.user?.username ?? $tc('sw-order.stateHistoryModal.labelSystemUser') }}\\n        </template>\\n        {% endblock %}\\n\\n        \\n        {% block sw_order_state_history_modal_content_columns_order_state %}\\n        <template #column-order=\\\"{ item }\\\">\\n            <sw-label\\n                :variant=\\\"getVariantState('order', item.order)\\\"\\n                appearance=\\\"badged\\\"\\n            >\\n                {{ item.order.translated.name }}\\n            </sw-label>\\n        </template>\\n        {% endblock %}\\n\\n        \\n        {% block sw_order_state_history_modal_content_columns_delivery_state %}\\n        <template #column-delivery=\\\"{ item }\\\">\\n            <sw-label\\n                v-if=\\\"item.delivery\\\"\\n                :variant=\\\"getVariantState('order_delivery', item.delivery)\\\"\\n                appearance=\\\"badged\\\"\\n            >\\n                {{ item.delivery.translated.name }}\\n            </sw-label>\\n        </template>\\n        {% endblock %}\\n\\n        \\n        {% block sw_order_state_history_modal_content_columns_transaction_state %}\\n        <template #column-transaction=\\\"{ item }\\\">\\n            <sw-label\\n                :variant=\\\"getVariantState('order_transaction', item.transaction)\\\"\\n                appearance=\\\"badged\\\"\\n            >\\n                {{ item.transaction.translated.name }}\\n            </sw-label>\\n        </template>\\n        {% endblock %}\\n\\n        <template #pagination>\\n            <sw-pagination\\n                :page=\\\"page\\\"\\n                :limit=\\\"limit\\\"\\n                :total=\\\"total\\\"\\n                :steps=\\\"steps\\\"\\n                @page-change=\\\"onPageChange\\\"\\n            />\\n        </template>\\n    </sw-data-grid>\\n    {% endblock %}\\n\\n    \\n    {% block sw_order_state_history_modal_actions %}\\n    <template #modal-footer>\\n        \\n        {% block sw_order_state_history_modal_action_close %}\\n        <sw-button\\n            size=\\\"small\\\"\\n            @click=\\\"onClose\\\"\\n        >\\n            {{ $tc('global.default.close') }}\\n        </sw-button>\\n        {% endblock %}\\n    </template>\\n    {% endblock %}\\n</sw-modal>\\n{% endblock %}\\n\\n\";"],"sourceRoot":""}