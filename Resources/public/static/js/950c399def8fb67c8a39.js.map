{"version":3,"sources":["webpack:///./src/module/sw-product/component/sw-product-variants/sw-product-variants-delivery/sw-product-variants-delivery-order/index.js","webpack:///./src/module/sw-product/component/sw-product-variants/sw-product-variants-delivery/sw-product-variants-delivery-order/sw-product-variants-delivery-order.html.twig","webpack:///./src/module/sw-product/component/sw-product-variants/sw-product-variants-delivery/sw-product-variants-delivery-order/sw-product-variants-delivery-order.scss"],"names":["template","props","product","type","Object","required","selectedGroups","Array","data","groups","orderObjects","mounted","this","mountedComponent","methods","createOrderObjects","_this","sortedGroups","selectedGroupsCopy","_toConsumableArray","variantListingConfig","configuratorGroupConfig","length","reduce","acc","configGroup","relatedGroup","find","group","id","push","splice","indexOf","concat","map","index","children","getOptionsForGroup","name","translated","childCount","parentId","afterId","storeObject","result","options","optionsForGroup","sort","elementA","elementB","position","element","option","groupId","configuratorSettings","filter","isDeleted","orderChanged","_this$product$variant","object","orderedGroupIds","latestGroup","forEach","undefined","thisGroup","newConfiguratorGroupConfig","currentConfiguratorGroupConfig","foundGroup","expressionForListings","representation","latestOption","thisOption","content","__esModule","default","module","i","locals","exports","add"],"mappings":"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","file":"static/js/950c399def8fb67c8a39.js","sourcesContent":["/*\n * @package inventory\n */\n\nimport template from './sw-product-variants-delivery-order.html.twig';\nimport './sw-product-variants-delivery-order.scss';\n\n// eslint-disable-next-line sw-deprecation-rules/private-feature-declarations\nexport default {\n    template,\n\n    props: {\n        product: {\n            type: Object,\n            required: true,\n        },\n\n        selectedGroups: {\n            type: Array,\n            required: true,\n        },\n    },\n\n    data() {\n        return {\n            groups: [],\n            orderObjects: [],\n        };\n    },\n\n    mounted() {\n        this.mountedComponent();\n    },\n\n    methods: {\n        mountedComponent() {\n            this.createOrderObjects();\n        },\n\n        createOrderObjects() {\n            // prepare group sorting\n            let sortedGroups = [];\n            const selectedGroupsCopy = [...this.selectedGroups];\n\n            // check if sorting exists on server\n            if (this.product.variantListingConfig.configuratorGroupConfig\n                && this.product.variantListingConfig.configuratorGroupConfig.length > 0) {\n                // add server sorting to the sortedGroups\n                sortedGroups = this.product.variantListingConfig.configuratorGroupConfig.reduce((acc, configGroup) => {\n                    const relatedGroup = selectedGroupsCopy.find(group => group.id === configGroup.id);\n\n                    if (relatedGroup) {\n                        acc.push(relatedGroup);\n\n                        // remove from original array\n                        selectedGroupsCopy.splice(selectedGroupsCopy.indexOf(relatedGroup), 1);\n                    }\n\n                    return acc;\n                }, []);\n            }\n\n            // add non sorted groups at the end of the sorted array\n            sortedGroups = [...sortedGroups, ...selectedGroupsCopy];\n\n            // prepare groups\n            const groups = sortedGroups.map((group, index) => {\n                const children = this.getOptionsForGroup(group.id);\n\n                return {\n                    id: group.id,\n                    name: group.translated.name,\n                    childCount: children.length,\n                    parentId: null,\n                    afterId: index > 0 ? sortedGroups[index - 1].id : null,\n                    storeObject: group,\n                };\n            });\n\n            // prepare options\n            const children = groups.reduce((result, group) => {\n                const options = this.getOptionsForGroup(group.id);\n\n                // iterate for each group options\n                const optionsForGroup = options.sort((elementA, elementB) => {\n                    return elementA.position - elementB.position;\n                }).map((element, index) => {\n                    const option = element.option;\n\n                    // get previous element\n                    let afterId = null;\n                    if (index > 0) {\n                        afterId = options[index - 1].option.id;\n                    }\n\n                    return {\n                        id: option.id,\n                        name: option.translated.name,\n                        childCount: 0,\n                        parentId: option.groupId,\n                        afterId,\n                        storeObject: element,\n                    };\n                });\n\n                return [...result, ...optionsForGroup];\n            }, []);\n\n            // assign groups and children to order objects\n            this.orderObjects = [...groups, ...children];\n        },\n\n        getOptionsForGroup(groupId) {\n            return this.product.configuratorSettings.filter((element) => {\n                return !element.isDeleted && element.option.groupId === groupId;\n            });\n        },\n\n        orderChanged() {\n            const groups = this.orderObjects.filter((object) => object.parentId === null);\n\n            // when configuratorGroupConfig is null then add empty array\n            if (!this.product.variantListingConfig.configuratorGroupConfig) {\n                this.product.variantListingConfig.configuratorGroupConfig = [];\n            }\n\n            // get order from administration ui\n            const orderedGroupIds = [];\n            let latestGroup = groups.find(group => group.afterId === null);\n            groups.forEach(() => {\n                if (latestGroup !== undefined) {\n                    orderedGroupIds.push(latestGroup.id);\n                    latestGroup = groups.find(thisGroup => thisGroup.afterId === latestGroup.id);\n                }\n            });\n\n            // create new groupConfig Objects in sorted order\n            const newConfiguratorGroupConfig = [];\n            const currentConfiguratorGroupConfig = this.product.variantListingConfig.configuratorGroupConfig ?? [];\n\n            if (currentConfiguratorGroupConfig.length) {\n                orderedGroupIds.forEach((groupId) => {\n                    const foundGroup = currentConfiguratorGroupConfig.find((group) => group.id === groupId);\n                    // when group exists\n                    if (foundGroup) {\n                        // add to newConfiguratorGroupConfig\n                        newConfiguratorGroupConfig.push(foundGroup);\n                    } else {\n                        // otherwise create new group\n                        newConfiguratorGroupConfig.push({\n                            id: groupId,\n                            expressionForListings: false,\n                            representation: 'box',\n                        });\n                    }\n                });\n            } else {\n                orderedGroupIds.forEach((groupId) => {\n                    newConfiguratorGroupConfig.push({\n                        id: groupId,\n                        expressionForListings: false,\n                        representation: 'box',\n                    });\n                });\n            }\n\n            // set new order\n            this.product.variantListingConfig.configuratorGroupConfig = newConfiguratorGroupConfig;\n\n            // Set option ordering\n            const options = this.orderObjects.filter((object) => object.parentId);\n\n            groups.forEach((group) => {\n                const optionsForGroup = options.filter((option) => option.parentId === group.id);\n                let latestOption = optionsForGroup.find(option => option.afterId === null);\n\n                optionsForGroup.forEach((option, index) => {\n                    if (latestOption !== undefined) {\n                        latestOption.storeObject.position = index + 1;\n                        latestOption = optionsForGroup.find(thisOption => thisOption.afterId === latestOption.id);\n                    }\n                });\n            });\n        },\n    },\n};\n","export default \"\\n{% block sw_product_variants_delivery_order %}\\n<div class=\\\"sw-product-variants-delivery-order\\\">\\n    \\n    {% block sw_product_variants_delivery_order_groups %}\\n    <div class=\\\"sw-product-variants-delivery-order__groups\\\">\\n        \\n        {% block sw_product_variants_delivery_order_groups_sw_tree %}\\n        <sw-tree\\n            v-if=\\\"orderObjects.length\\\"\\n            :items=\\\"orderObjects\\\"\\n            :searchable=\\\"false\\\"\\n            :disable-context-menu=\\\"true\\\"\\n            bind-items-to-folder\\n            @drag-end=\\\"orderChanged\\\"\\n        >\\n\\n            <template\\n                #items=\\\"{ treeItems, sortable, draggedItem, disableContextMenu, onChangeRoute }\\\"\\n            >\\n                <sw-tree-item\\n                    v-for=\\\"item in treeItems\\\"\\n                    :key=\\\"item.id\\\"\\n                    :item=\\\"item\\\"\\n                    :disable-context-menu=\\\"true\\\"\\n                    :sortable=\\\"true\\\"\\n                />\\n            </template>\\n        </sw-tree>\\n        {% endblock %}\\n\\n        \\n        {% block sw_product_variants_delivery_order_loader %}\\n        <sw-loader v-else />\\n        {% endblock %}\\n    </div>\\n    {% endblock %}\\n</div>\\n{% endblock %}\\n\";","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../../../../../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--15-1!../../../../../../../node_modules/css-loader/dist/cjs.js??ref--15-2!../../../../../../../node_modules/sass-loader/dist/cjs.js??ref--15-3!./sw-product-variants-delivery-order.scss\");\nif(content.__esModule) content = content.default;\nif(typeof content === 'string') content = [[module.id, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar add = require(\"!../../../../../../../node_modules/vue-style-loader/lib/addStylesClient.js\").default\nvar update = add(\"1aec290e\", content, true, {});"],"sourceRoot":""}