{"version":3,"sources":["webpack:///./src/module/sw-order/component/sw-order-address-modal/sw-order-address-modal.html.twig","webpack:///./src/module/sw-order/component/sw-order-address-modal/index.js","webpack:///./src/module/sw-order/component/sw-order-address-modal/sw-order-address-modal.scss"],"names":["Mixin","Shopware","Criteria","Data","template","inject","mixins","getByName","props","address","type","Object","required","default","countries","Array","order","versionContext","data","availableAddresses","selectedAddressId","isLoading","addressCustomFieldSets","computed","customerCriteria","criteria","setIds","this","orderCustomer","customerId","addAssociation","customFieldSetCriteria","addFilter","equals","customerRepository","repositoryFactory","create","orderRepository","customFieldSetRepository","salutationFilter","Filter","created","createdComponent","methods","getCustomerInfo","getCustomFieldSetData","_this","search","then","customer","addresses","State","dispatch","finally","onNewActiveItem","addressButtonClasses","addressId","concat","onExistingAddressSelected","id","onClose","$emit","onSave","_this2","isShippingAvailable","country","shippingAvailable","createNotificationError","message","$tc","Promise","resolve","find","addr","save","catch","_this3","response","content","__esModule","module","i","locals","exports","add"],"mappings":"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","file":"static/js/5d917ffc625a404854e4.js","sourcesContent":["export default \"\\n{% block sw_order_address_modal %}\\n<sw-modal\\n    :title=\\\"$tc('sw-order.addressSelection.modalTitleEditAddress')\\\"\\n    :is-loading=\\\"isLoading\\\"\\n    @modal-close=\\\"onClose\\\"\\n>\\n    \\n    {% block sw_order_address_modal_content %}\\n    <sw-tabs\\n        class=\\\"sw-order-address-modal\\\"\\n        position-identifier=\\\"sw-order-address-modal\\\"\\n        default-item=\\\"edit\\\"\\n        @new-item-active=\\\"onNewActiveItem\\\"\\n    >\\n        <template #default=\\\"{ active }\\\">\\n            \\n            {% block sw_order_address_modal_tabs %}\\n            \\n            {% block sw_order_address_modal_tab_edit_address %}\\n            <sw-tabs-item\\n                name=\\\"edit\\\"\\n                :active-tab=\\\"active\\\"\\n            >\\n                {{ $tc('sw-order.addressSelection.headlineTabEditAddress') }}\\n            </sw-tabs-item>\\n            {%  endblock %}\\n            \\n            {% block sw_order_address_modal_tab_select_address %}\\n            <sw-tabs-item\\n                name=\\\"addresses\\\"\\n                :active-tab=\\\"active\\\"\\n            >\\n                {{ $tc('sw-order.addressSelection.headlineTabSelectAddress') }}\\n            </sw-tabs-item>\\n            {% endblock %}\\n            {% endblock %}\\n        </template>\\n\\n        <template #content=\\\"{ active }\\\">\\n            \\n            {% block sw_order_address_modal_tabs_content %}\\n            <div v-if=\\\"active==='edit'\\\">\\n                \\n                {% block sw_order_address_modal_tabs_content_edit_address %}\\n                <sw-customer-address-form\\n                    :address=\\\"address\\\"\\n                    :customer=\\\"orderCustomer\\\"\\n                    :countries=\\\"countries\\\"\\n                />\\n                <sw-custom-field-set-renderer\\n                    :entity=\\\"address\\\"\\n                    variant=\\\"tabs\\\"\\n                    :sets=\\\"addressCustomFieldSets\\\"\\n                />\\n                {% endblock %}\\n            </div>\\n            <div v-if=\\\"active==='addresses'\\\">\\n                \\n                {% block sw_order_address_modal_tabs_content_select_address %}\\n                <sw-button\\n                    v-for=\\\"address in availableAddresses\\\"\\n                    :key=\\\"address.id\\\"\\n                    block\\n                    :class=\\\"addressButtonClasses(address.id)\\\"\\n                    @click=\\\"onExistingAddressSelected(address)\\\"\\n                >\\n                    {{ address.company }} <br>\\n                    {{ salutationFilter(address) }}<br>\\n                    {{ address.street }} <br>\\n                    {{ address.zipcode }} {{ address.city }}<br>\\n                    {{ placeholder(address.country, 'name') }}<br>\\n                </sw-button>\\n                {% endblock %}\\n            </div>\\n            {% endblock %}\\n        </template>\\n    </sw-tabs>\\n    {% endblock %}\\n\\n    \\n    {% block sw_order_address_modal_actions %}\\n    <template #modal-footer>\\n        \\n        {% block sw_order_address_modal_action_close %}\\n        <sw-button\\n            size=\\\"small\\\"\\n            @click=\\\"onClose\\\"\\n        >\\n            {{ $tc('sw-customer.detailAddresses.buttonCancel') }}\\n        </sw-button>\\n        {% endblock %}\\n\\n        \\n        {% block sw_order_address_modal_actions_apply %}\\n        <sw-button\\n            variant=\\\"primary\\\"\\n            size=\\\"small\\\"\\n            @click=\\\"onSave\\\"\\n        >\\n            {{ $tc('sw-customer.detailAddresses.buttonApply') }}\\n        </sw-button>\\n        {% endblock %}\\n    </template>\\n    {% endblock %}\\n</sw-modal>\\n{% endblock %}\\n\\n\";","import template from './sw-order-address-modal.html.twig';\nimport './sw-order-address-modal.scss';\n\n/**\n * @package checkout\n */\n\nconst { Mixin } = Shopware;\nconst { Criteria } = Shopware.Data;\n\n// eslint-disable-next-line sw-deprecation-rules/private-feature-declarations\nexport default {\n    template,\n\n    inject: ['repositoryFactory'],\n\n    mixins: [\n        Mixin.getByName('notification'),\n        Mixin.getByName('placeholder'),\n    ],\n\n    props: {\n        address: {\n            type: Object,\n            required: true,\n            default: () => {},\n        },\n\n        countries: {\n            type: Array,\n            required: true,\n            default() {\n                return [];\n            },\n        },\n\n        order: {\n            type: Object,\n            required: true,\n            default: () => {},\n        },\n\n        versionContext: {\n            type: Object,\n            required: true,\n            default: () => {},\n        },\n    },\n\n    data() {\n        return {\n            availableAddresses: [],\n            selectedAddressId: 0,\n            isLoading: false,\n            addressCustomFieldSets: [],\n        };\n    },\n\n    computed: {\n        customerCriteria() {\n            const criteria = new Criteria(1, 1);\n            criteria.setIds([this.orderCustomer.customerId]);\n            criteria.addAssociation('addresses');\n\n            return criteria;\n        },\n\n        customFieldSetCriteria() {\n            const criteria = new Criteria(1, null);\n            criteria.addFilter(Criteria.equals('relations.entityName', 'customer_address'));\n            criteria.addAssociation('customFields');\n\n            return criteria;\n        },\n\n        customerRepository() {\n            return this.repositoryFactory.create('customer');\n        },\n\n        orderRepository() {\n            return this.repositoryFactory.create('order');\n        },\n\n        orderCustomer() {\n            return this.order.orderCustomer;\n        },\n\n        customFieldSetRepository() {\n            return this.repositoryFactory.create('custom_field_set');\n        },\n\n        salutationFilter() {\n            return Shopware.Filter.getByName('salutation');\n        },\n    },\n\n    created() {\n        this.createdComponent();\n    },\n\n    methods: {\n        createdComponent() {\n            if (this.orderCustomer && this.orderCustomer.customerId) {\n                this.getCustomerInfo();\n            }\n\n            this.getCustomFieldSetData();\n        },\n\n        getCustomerInfo() {\n            this.isLoading = true;\n\n            this.customerRepository.search(this.customerCriteria).then((customer) => {\n                this.availableAddresses = customer[0].addresses;\n\n                return Shopware.State.dispatch('error/resetApiErrors');\n            }).finally(() => {\n                this.isLoading = false;\n            });\n        },\n\n        onNewActiveItem() {\n            this.selectedAddressId = 0;\n        },\n\n        addressButtonClasses(addressId) {\n            return `sw-order-address-modal__entry${addressId === this.selectedAddressId ?\n                ' sw-order-address-modal__entry__selected' : ''}`;\n        },\n\n        onExistingAddressSelected(address) {\n            this.selectedAddressId = address.id;\n        },\n\n        onClose() {\n            this.$emit('reset');\n        },\n\n        onSave() {\n            this.isLoading = true;\n\n            const isShippingAvailable = this.order.addresses[0].country.shippingAvailable;\n            if (!isShippingAvailable && typeof isShippingAvailable === 'boolean') {\n                this.createNotificationError({\n                    message: this.$tc('sw-order.detail.messageShippingNotAvailable'),\n                });\n\n                this.isLoading = false;\n                return;\n            }\n\n            new Promise((resolve) => {\n                // check if user selected an address\n                if (this.selectedAddressId !== 0) {\n                    const address = this.availableAddresses.find((addr) => {\n                        return addr.id === this.selectedAddressId;\n                    });\n\n                    this.$emit('address-select', address);\n                    resolve();\n                } else {\n                    // save address\n                    this.orderRepository.save(this.order, this.versionContext).then(() => {\n                        this.$emit('save');\n                    }).catch(() => {\n                        this.createNotificationError({\n                            message: this.$tc('sw-order.detail.messageSaveError'),\n                        });\n                    }).finally(() => {\n                        resolve();\n                    });\n                }\n            }).finally(() => {\n                this.isLoading = false;\n            });\n        },\n\n        getCustomFieldSetData() {\n            this.customFieldSetRepository.search(this.customFieldSetCriteria).then((response) => {\n                this.addressCustomFieldSets = response;\n            });\n        },\n    },\n};\n","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../../../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--15-1!../../../../../node_modules/css-loader/dist/cjs.js??ref--15-2!../../../../../node_modules/sass-loader/dist/cjs.js??ref--15-3!./sw-order-address-modal.scss\");\nif(content.__esModule) content = content.default;\nif(typeof content === 'string') content = [[module.id, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar add = require(\"!../../../../../node_modules/vue-style-loader/lib/addStylesClient.js\").default\nvar update = add(\"27056879\", content, true, {});"],"sourceRoot":""}