{"version":3,"sources":["webpack:///./src/module/sw-settings-snippet/page/sw-settings-snippet-detail/sw-settings-snippet-detail.html.twig","webpack:///./src/module/sw-settings-snippet/page/sw-settings-snippet-detail/index.js"],"names":["_Shopware","Shopware","Mixin","Criteria","Data","ShopwareError","Classes","utils","Utils","template","inject","mixins","getByName","data","isLoading","isCreate","isAddedSnippet","isSaveable","isInvalidKey","queryIds","this","$route","query","ids","page","limit","moduleData","meta","$module","translationKey","translationKeyOrigin","snippets","sets","isSaveSuccessful","pushParams","metaInfo","title","$createTitle","identifier","computed","snippetRepository","repositoryFactory","create","snippetSetRepository","snippetSetCriteria","criteria","addSorting","sort","backPath","_this$$route$query","_this$$route$query$id","length","name","invalidKeyError","code","parameters","key","currentAuthor","get","_currentAuthor","concat","State","currentUser","username","created","createdComponent","methods","params","prepareContent","_this","onNewKeyRedirect","search","then","initializeSnippet","finally","_this2","createSnippetDummy","getCustomList","response","total","applySnippetsToDummies","forEach","dummySnippet","realSnippet","find","snippet","setId","author","id","value","origin","_isNew","some","startsWith","_this3","set","snippetDummy","push","saveFinish","$router","onSave","_this4","responses","checkIsSaveable","createNotificationError","message","$tc","hasOwnProperty","delete","save","Promise","all","catch","error","errormsg","errors","detail","onChange","trim","doChange","debounce","_this5","Object","keys","isNewOrigin","arguments","undefined","snippetSetService","_this6","count","getNoPermissionsTooltip","role","showOnDisabledElements","showDelay","appearance","disabled","acl","can"],"mappings":"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","file":"static/js/d59352648b811e8fb839.js","sourcesContent":["export default \"\\n{% block sw_settings_snippet_detail %}\\n<sw-page class=\\\"sw-settings-snippet-detail\\\">\\n\\n    \\n    {% block sw_settings_snippet_detail_smart_bar %}\\n    <template #smart-bar-back>\\n        <router-link\\n            class=\\\"smart-bar__back-btn\\\"\\n            :to=\\\"backPath\\\"\\n            :style=\\\"{ 'color': moduleData.color }\\\"\\n        >\\n            <sw-icon\\n                name=\\\"regular-chevron-left\\\"\\n                small\\n            />\\n            <sw-icon\\n                v-if=\\\"moduleData && moduleData.icon\\\"\\n                :name=\\\"moduleData.icon\\\"\\n                small\\n            />\\n        </router-link>\\n    </template>\\n    {% endblock %}\\n\\n    \\n    {% block sw_settings_snippet_detail_header %}\\n    <template #smart-bar-header>\\n        <h2 v-if=\\\"translationKey\\\">\\n            {{ translationKey }}\\n        </h2>\\n        <h2 v-else>\\n            {{ $tc('sw-settings-snippet.detail.textHeadline') }}\\n        </h2>\\n    </template>\\n    {% endblock %}\\n\\n    \\n    {% block sw_settings_snippet_detail_actions %}\\n    <template #smart-bar-actions>\\n        \\n        {% block sw_settings_snippet_detail_actions_abort %}\\n        <sw-button\\n            :disabled=\\\"isLoading\\\"\\n            :router-link=\\\"backPath\\\"\\n        >\\n            {{ $tc('sw-settings-snippet.detail.buttonCancel') }}\\n        </sw-button>\\n        {% endblock %}\\n\\n        \\n        {% block sw_settings_snippet_detail_actions_save %}\\n        <sw-button-process\\n            v-tooltip=\\\"getNoPermissionsTooltip('snippet.editor')\\\"\\n            class=\\\"sw-snippet-detail__save-action\\\"\\n            :is-loading=\\\"isLoading\\\"\\n            :process-success=\\\"isSaveSuccessful\\\"\\n            :disabled=\\\"!acl.can('snippet.editor') || isLoading || !translationKey || !isSaveable\\\"\\n            variant=\\\"primary\\\"\\n            {% if VUE3 %}\\n            @update:process-success=\\\"saveFinish\\\"\\n            {% else %}\\n            @process-finish=\\\"saveFinish\\\"\\n            {% endif %}\\n            @click.prevent=\\\"onSave\\\"\\n        >\\n            {{ $tc('sw-settings-snippet.detail.buttonSave') }}\\n        </sw-button-process>\\n        {% endblock %}\\n    </template>\\n    {% endblock %}\\n\\n    \\n    {% block sw_settings_snippet_detail_content %}\\n    <template #content>\\n        <sw-card-view>\\n            <template v-if=\\\"isLoading\\\">\\n                <sw-skeleton />\\n                <sw-skeleton />\\n            </template>\\n\\n            <template v-else>\\n                \\n                {% block sw_settings_snippet_set_detail_card %}\\n                <div class=\\\"sw-settings-snippet-set-detail-card\\\">\\n                    \\n                    {% block sw_settings_snippet_set_detail_card_information %}\\n                    <sw-card\\n                        position-identifier=\\\"sw-settings-snippet-detail-information\\\"\\n                        :title=\\\"$tc('sw-settings-snippet.detail.cardGeneralTitle')\\\"\\n                        :is-loading=\\\"isLoading\\\"\\n                    >\\n                        <div class=\\\"snippet-general-card\\\">\\n                            \\n                            {% block sw_settings_snippet_set_detail_card_information_key %}\\n                            <sw-text-field\\n                                {% if VUE3 %}\\n                                v-model:value=\\\"translationKey\\\"\\n                                {% else %}\\n                                v-model=\\\"translationKey\\\"\\n                                {% endif %}\\n                                v-tooltip.bottom=\\\"getNoPermissionsTooltip('snippet.editor')\\\"\\n                                name=\\\"sw-field--translationKey\\\"\\n                                :label=\\\"$tc('sw-settings-snippet.detail.labelName')\\\"\\n                                :placeholder=\\\"$tc('sw-settings-snippet.detail.labelNamePlaceholder')\\\"\\n                                :disabled=\\\"!(isCreate || isAddedSnippet)\\\"\\n                                :error=\\\"invalidKeyError\\\"\\n                                {% if VUE3 %}\\n                                @update:value=\\\"onChange\\\"\\n                                {% else %}\\n                                @input=\\\"onChange\\\"\\n                                {% endif %}\\n                            />\\n                            {% endblock %}\\n                        </div>\\n                    </sw-card>\\n                    {% endblock %}\\n\\n                    \\n                    {% block sw_settings_snippet_set_detail_card_snippets %}\\n                    <sw-card\\n                        position-identifier=\\\"sw-settings-snippet-detail-snippets\\\"\\n                        :title=\\\"$tc('sw-settings-snippet.detail.cardSnippetSetsTitle')\\\"\\n                        :is-loading=\\\"isLoading\\\"\\n                    >\\n                        <div class=\\\"snippet-overview-card\\\">\\n                            \\n                            {% block sw_settings_snippet_set_detail_card_snippets_fields %}\\n                            <sw-text-field\\n                                v-for=\\\"(snippet, index) in snippets\\\"\\n                                :key=\\\"snippet.setId\\\"\\n                                {% if VUE3 %}\\n                                v-model:value=\\\"snippet.value\\\"\\n                                {% else %}\\n                                v-model=\\\"snippet.value\\\"\\n                                {% endif %}\\n                                v-tooltip.bottom=\\\"getNoPermissionsTooltip('snippet.editor')\\\"\\n                                name=\\\"sw-field--snippet-value\\\"\\n                                :class=\\\"`sw-settings-snippet-detail__translation-field--${index}`\\\"\\n                                :disabled=\\\"!acl.can('snippet.editor')\\\"\\n                                :label=\\\"$tc('sw-settings-snippet.detail.labelContent', 0, { name: sets.get(snippet.setId).name })\\\"\\n                                :placeholder=\\\"snippet.origin || $tc('sw-settings-snippet.general.placeholderValue')\\\"\\n                                {% if VUE3 %}\\n                                @update:value=\\\"onChange\\\"\\n                                {% else %}\\n                                @input=\\\"onChange\\\"\\n                                {% endif %}\\n                            />\\n                            {% endblock %}\\n                        </div>\\n                    </sw-card>\\n                    {% endblock %}\\n                </div>\\n                {% endblock %}\\n            </template>\\n        </sw-card-view>\\n    </template>\\n    {% endblock %}\\n</sw-page>\\n{% endblock %}\\n\";","/**\n * @package services-settings\n */\nimport template from './sw-settings-snippet-detail.html.twig';\n\nconst { Mixin, Data: { Criteria } } = Shopware;\nconst ShopwareError = Shopware.Classes.ShopwareError;\nconst utils = Shopware.Utils;\n\n// eslint-disable-next-line sw-deprecation-rules/private-feature-declarations\nexport default {\n    template,\n\n    inject: [\n        'snippetSetService',\n        'repositoryFactory',\n        'acl',\n    ],\n\n    mixins: [\n        Mixin.getByName('notification'),\n    ],\n\n    data() {\n        return {\n            isLoading: true,\n            isCreate: false,\n            isAddedSnippet: false,\n            isSaveable: true,\n            isInvalidKey: false,\n            queryIds: this.$route.query.ids,\n            page: this.$route.query.page,\n            limit: this.$route.query.limit,\n            moduleData: this.$route.meta.$module,\n            translationKey: '',\n            translationKeyOrigin: '',\n            snippets: [],\n            sets: {},\n            isSaveSuccessful: false,\n            pushParams: null,\n        };\n    },\n\n    metaInfo() {\n        return {\n            title: this.$createTitle(this.identifier),\n        };\n    },\n\n    computed: {\n        identifier() {\n            return this.translationKey;\n        },\n\n        snippetRepository() {\n            return this.repositoryFactory.create('snippet');\n        },\n\n        snippetSetRepository() {\n            return this.repositoryFactory.create('snippet_set');\n        },\n\n        snippetSetCriteria() {\n            const criteria = new Criteria(1, null);\n\n            criteria.addSorting(Criteria.sort('name', 'ASC'));\n\n            return criteria;\n        },\n\n        backPath() {\n            if (this.$route.query?.ids?.length > 0) {\n                return {\n                    name: 'sw.settings.snippet.list',\n                    query: {\n                        ids: this.$route.query.ids,\n                        limit: this.$route.query.limit,\n                        page: this.$route.query.page,\n                    },\n                };\n            }\n            return { name: 'sw.settings.snippet.index' };\n        },\n\n        invalidKeyError() {\n            if (this.isInvalidKey) {\n                return new ShopwareError({ code: 'DUPLICATED_SNIPPET_KEY', parameters: { key: this.translationKey } });\n            }\n            return null;\n        },\n\n        currentAuthor: {\n            get() {\n                return this._currentAuthor ||\n                    `user/${Shopware.State.get('session').currentUser.username}`;\n            },\n        },\n    },\n\n    created() {\n        this.createdComponent();\n    },\n\n    methods: {\n        createdComponent() {\n            this.translationKeyOrigin = this.$route.params.key;\n            this.prepareContent();\n        },\n\n        prepareContent() {\n            this.isLoading = true;\n\n            if (!this.$route.params.key && !this.isCreate) {\n                this.onNewKeyRedirect();\n            }\n            this.translationKey = this.$route.params.key || '';\n\n            this.snippetSetRepository.search(this.snippetSetCriteria).then((sets) => {\n                this.sets = sets;\n                this.initializeSnippet();\n            }).finally(() => {\n                this.isLoading = false;\n            });\n        },\n\n        initializeSnippet() {\n            this.snippets = this.createSnippetDummy();\n            this.getCustomList().then((response) => {\n                if (!response.total) {\n                    this.isAddedSnippet = true;\n                    return;\n                }\n\n                this.applySnippetsToDummies(response.data[this.translationKey]);\n            });\n        },\n\n        applySnippetsToDummies(snippets) {\n            const dummySnippets = this.snippets;\n\n            dummySnippets.forEach(dummySnippet => {\n                const realSnippet = snippets.find(snippet => dummySnippet.setId === snippet.setId);\n\n                if (realSnippet) {\n                    dummySnippet.author = realSnippet.author;\n                    dummySnippet.id = realSnippet.id;\n                    dummySnippet.value = realSnippet.value;\n                    dummySnippet.origin = realSnippet.origin;\n                    dummySnippet.translationKey = realSnippet.translationKey;\n                    dummySnippet.setId = realSnippet.setId;\n\n                    if (realSnippet.id) {\n                        dummySnippet._isNew = false;\n                    }\n                }\n\n                return dummySnippet;\n            });\n\n            this.isAddedSnippet = snippets.some(snippet => snippet.author.startsWith('user/') || snippet.author === '');\n        },\n\n        createSnippetDummy() {\n            const snippets = [];\n            this.sets.forEach((set) => {\n                const snippetDummy = this.snippetRepository.create();\n\n                snippetDummy.author = this.currentAuthor;\n                snippetDummy.id = null;\n                snippetDummy.value = null;\n                snippetDummy.origin = null;\n                snippetDummy.translationKey = this.translationKey;\n                snippetDummy.setId = set.id;\n\n                snippets.push(snippetDummy);\n            });\n\n            return snippets;\n        },\n\n        saveFinish() {\n            this.isSaveSuccessful = false;\n\n            this.$router.push({\n                name: 'sw.settings.snippet.detail',\n                params: this.pushParams,\n                query: {\n                    ids: this.queryIds,\n                    page: this.page,\n                    limit: this.limit,\n                },\n            });\n        },\n\n        onSave() {\n            const responses = [];\n            this.isSaveSuccessful = false;\n            this.isLoading = true;\n\n            this.isSaveable = this.checkIsSaveable();\n\n            if (!this.isSaveable) {\n                this.isLoading = false;\n                this.createNotificationError({\n                    message: this.$tc(\n                        'sw-settings-snippet.detail.messageSaveError',\n                        0,\n                        { key: this.translationKey },\n                    ),\n                });\n            }\n\n            this.snippets.forEach((snippet) => {\n                if (!snippet.author) {\n                    snippet.author = this.currentAuthor;\n                }\n\n                if (!snippet.hasOwnProperty('value') || snippet.value === null) {\n                    // If you clear the input-box, reset it to its origin value\n                    snippet.value = snippet.origin;\n                }\n\n                if (snippet.translationKey !== this.translationKey) {\n                    // On TranslationKey change, delete old snippets, but insert a copy with the new translationKey\n                    if (snippet.id !== null) {\n                        responses.push(this.snippetRepository.delete(snippet.id));\n                    }\n\n                    if (snippet.value === null || snippet.value === '') {\n                        return;\n                    }\n\n                    snippet.translationKey = this.translationKey;\n                    snippet.id = null;\n\n                    responses.push(this.snippetRepository.save(snippet));\n                } else if (snippet.origin !== snippet.value) {\n                    // Only save if values differs from origin\n                    responses.push(this.snippetRepository.save(snippet));\n                } else if (snippet.hasOwnProperty('id') && snippet.id !== null) {\n                    // There's no need to keep a snippet which is exactly like the file-snippet, so delete\n                    responses.push(this.snippetRepository.delete(snippet.id));\n                }\n            });\n\n            Promise.all(responses).then(() => {\n                this.onNewKeyRedirect(true);\n                this.prepareContent();\n                this.isLoading = false;\n                this.isSaveSuccessful = true;\n            }).catch((error) => {\n                let errormsg = '';\n                this.isLoading = false;\n                if (error.response.data.errors.length > 0) {\n                    errormsg = `<br/>Error Message: \"${error.response.data.errors[0].detail}\"`;\n                }\n                this.createNotificationError({\n                    message: this.$tc(\n                        'sw-settings-snippet.detail.messageSaveError',\n                        0,\n                        { key: this.translationKey },\n                    ) + errormsg,\n                });\n            });\n        },\n\n        onChange() {\n            if (!this.translationKey || this.translationKey.trim().length <= 0) {\n                this.isSaveable = false;\n                this.isInvalidKey = true;\n                return;\n            }\n            this.isInvalidKey = false;\n\n            this.doChange();\n        },\n\n        doChange: utils.debounce(function executeChange() {\n            this.getCustomList().then((response) => {\n                this.isSaveable = false;\n                if (!response.total || Object.keys(response.data)[0] === this.translationKeyOrigin) {\n                    this.isSaveable = this.checkIsSaveable();\n                    return;\n                }\n\n                this.isInvalidKey = true;\n                this.isSaveable = false;\n            });\n\n            if (!this.isSaveable) {\n                return;\n            }\n\n            if ((this.isCreate || this.isAddedSnippet)) {\n                this.translationKey = this.translationKey.trim();\n            }\n        }, 1000),\n\n        onNewKeyRedirect(isNewOrigin = false) {\n            this.isSaveSuccessful = true;\n            const params = {\n                key: this.translationKey,\n            };\n\n            if (isNewOrigin) {\n                params.origin = this.translationKey;\n            }\n\n            this.isCreate = false;\n            this.pushParams = params;\n        },\n\n        getCustomList() {\n            return this.snippetSetService.getCustomList(1, 25, { translationKey: [this.translationKey] });\n        },\n\n        checkIsSaveable() {\n            let count = 0;\n            this.snippets.forEach((snippet) => {\n                if (snippet.value === null) {\n                    return;\n                }\n\n                if (this.translationKey.trim() !== this.translationKeyOrigin) {\n                    count += 1;\n                }\n\n                if (snippet.value.trim().length >= 0) {\n                    count += 1;\n                }\n            });\n\n            return count > 0;\n        },\n\n        getNoPermissionsTooltip(role, showOnDisabledElements = true) {\n            return {\n                showDelay: 300,\n                appearance: 'dark',\n                showOnDisabledElements,\n                disabled: this.acl.can(role),\n                message: this.$tc('sw-privileges.tooltip.warning'),\n            };\n        },\n    },\n};\n"],"sourceRoot":""}