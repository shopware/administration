{"version":3,"sources":["webpack:///./src/module/sw-settings-rule/component/sw-settings-rule-category-tree/sw-settings-rule-category-tree.html.twig","webpack:///./src/module/sw-settings-rule/component/sw-settings-rule-category-tree/index.js","webpack:///./src/module/sw-settings-rule/component/sw-settings-rule-category-tree/sw-settings-rule-category-tree.scss"],"names":["Criteria","Shopware","Data","template","inject","props","rule","type","Object","required","association","String","categoriesCollection","Array","hideHeadline","Boolean","default","hideSearch","data","categories","computed","categoryRepository","this","repositoryFactory","create","treeCriteria","categoryCriteria","getAssociation","addFilter","equals","id","watch","handler","_this","entity","isComponentReady","isFetching","Promise","all","getTreeItems","then","immediate","methods","searchTreeItems","term","onCheckItem","checkedItems","$emit","hasItemAssociation","item","_item$this$associatio","_item$extensions$this","length","extensions","_this2","parentId","arguments","undefined","withTermFilter","filters","filter","field","contains","search","Context","api","searchResult","resolve","forEach","category","add","content","__esModule","module","i","locals","exports"],"mappings":"wIAAe,ICGPA,EAAaC,SAASC,KAAtBF,SAMO,WACXG,SDVW,++DCYXC,OAAQ,CAAC,qBAETC,MAAO,CACHC,KAAM,CACFC,KAAMC,OACNC,UAAU,GAEdC,YAAa,CACTH,KAAMI,OACNF,UAAU,GAEdG,qBAAsB,CAClBL,KAAMM,MACNJ,UAAU,GAEdK,aAAc,CACVP,KAAMQ,QACNN,UAAU,EAGVO,SAAS,GAEbC,WAAY,CACRV,KAAMQ,QACNN,UAAU,EAGVO,SAAS,IAIjBE,KAAI,WACA,MAAO,CACHC,WAAY,KAIpBC,SAAU,CACNC,mBAAkB,WACd,OAAOC,KAAKC,kBAAkBC,OAAO,aAGzCC,aAAY,WACR,IAAMC,EAAmB,IAAI1B,EAAS,EAAG,KAGzC,OAFA0B,EAAiBC,eAAeL,KAAKZ,aAAakB,UAAU5B,EAAS6B,OAAO,KAAMP,KAAKhB,KAAKwB,KAErFJ,IAIfK,MAAO,CACHnB,qBAAsB,CAClBoB,QAAO,WAAI,IAADC,EAAA,MACFX,KAAKV,qBAAqBsB,QAAWZ,KAAKa,kBAAqBb,KAAKc,YACpEC,QAAQC,IAAI,CACRhB,KAAKiB,iBACNC,MAAK,WACJP,EAAKE,kBAAmB,MAIpCM,WAAW,IAInBC,QAAS,CACLC,gBAAe,SAACC,GACZtB,KAAKiB,aAAa,KAAMK,GAAM,IAGlCC,YAAW,SAACC,GACRxB,KAAKyB,MAAM,eAAgBD,IAG/BE,mBAAkB,SAACC,GAAO,IAADC,EAAAC,EACrB,OAA6B,QAAtBD,EAAAD,EAAK3B,KAAKZ,oBAAY,IAAAwC,OAAA,EAAtBA,EAAwBE,QAAS,IAAsC,QAAjCD,EAAAF,EAAKI,WAAW/B,KAAKZ,oBAAY,IAAAyC,OAAA,EAAjCA,EAAmCC,QAAS,GAG7Fb,aAAY,WAAwD,IAADe,EAAA,KAAtDC,EAAQC,UAAAJ,OAAA,QAAAK,IAAAD,UAAA,GAAAA,UAAA,GAAG,KAAMZ,EAAIY,UAAAJ,OAAA,QAAAK,IAAAD,UAAA,GAAAA,UAAA,GAAG,KAAME,EAAcF,UAAAJ,OAAA,QAAAK,IAAAD,UAAA,IAAAA,UAAA,GACrDlC,KAAKc,YAAa,EAElB,IAAMV,EAAmBJ,KAAKG,aAuB9B,OArBAC,EAAiBiC,QAAUjC,EAAiBiC,QAAQC,QAAO,SAACA,GACxD,OAAoB,WAAhBA,EAAOrD,MAAsC,aAAjBqD,EAAOC,SAInB,aAAhBD,EAAOrD,MAAwC,SAAjBqD,EAAOC,UAOzCjB,GAAQc,GACRhC,EAAiBE,UAAU5B,EAAS8D,SAAS,OAAQlB,IAGpDA,GACDlB,EAAiBE,UAAU5B,EAAS6B,OAAO,WAAY0B,IAIpDjC,KAAKD,mBAAmB0C,OAAOrC,EAAkBzB,SAAS+D,QAAQC,KAAKzB,MAAK,SAAC0B,GAEhF,OAAiB,OAAbX,GACAD,EAAKnC,WAAa+C,EAClBZ,EAAKlB,YAAa,EACXC,QAAQ8B,YAInBD,EAAaE,SAAQ,SAACC,GAClBf,EAAKnC,WAAWmD,IAAID,MAGjBhC,QAAQ8B,kB,4CC9H/B,IAAII,EAAU,EAAQ,QACnBA,EAAQC,aAAYD,EAAUA,EAAQvD,SACnB,iBAAZuD,IAAsBA,EAAU,CAAC,CAACE,EAAOC,EAAIH,EAAS,MAC7DA,EAAQI,SAAQF,EAAOG,QAAUL,EAAQI,SAG/BL,EADH,EAAQ,QAAwEtD,SACzE,WAAYuD,GAAS,EAAM","file":"static/js/3eaff16c0408313afa05.js","sourcesContent":["export default \"\\n{% block sw_settings_rule_category_tree %}\\n<sw-card\\n    class=\\\"sw-settings-rule-category-tree\\\"\\n    position-identifier=\\\"sw-settings-rule-category-tree\\\"\\n>\\n    <template #toolbar>\\n        \\n        {% block sw_settings_rule_category_tree_toolbar %}\\n        <sw-card-filter @sw-card-filter-term-change=\\\"searchTreeItems\\\" />\\n        {% endblock %}\\n    </template>\\n\\n    \\n    {% block sw_settings_rule_category_tree_component %}\\n    <sw-settings-rule-tree\\n        ref=\\\"swTree\\\"\\n        :allow-create-categories=\\\"false\\\"\\n        :allow-delete-categories=\\\"false\\\"\\n        :items=\\\"categories\\\"\\n        after-id-property=\\\"afterCategoryId\\\"\\n        :sortable=\\\"false\\\"\\n        @get-tree-items=\\\"getTreeItems\\\"\\n        @search-tree-items=\\\"searchTreeItems\\\"\\n        @check-item=\\\"onCheckItem\\\"\\n    >\\n        \\n        {% block sw_settings_rule_category_tree_items %}\\n        <template\\n            #items=\\\"{\\n                treeItems,\\n                sortable,\\n                draggedItem,\\n                newElementId,\\n                checkItem,\\n                translationContext,\\n                onChangeRoute,\\n                disableContextMenu,\\n            }\\\"\\n        >\\n            \\n            {% block sw_settings_rule_category_tree_item %}\\n            <sw-settings-rule-tree-item\\n                v-for=\\\"item in treeItems\\\"\\n                :key=\\\"item.id\\\"\\n                :association=\\\"association\\\"\\n                :item=\\\"item\\\"\\n                :sortable=\\\"false\\\"\\n                should-focus\\n                :mark-inactive=\\\"true\\\"\\n                @check-item=\\\"checkItem\\\"\\n            />\\n            {% endblock %}\\n        </template>\\n        <template\\n            v-if=\\\"hideHeadline\\\"\\n            #headline\\n        >\\n            <span></span>\\n        </template>\\n        <template\\n            v-if=\\\"hideSearch\\\"\\n            #search\\n        >\\n            <span></span>\\n        </template>\\n        {% endblock %}\\n    </sw-settings-rule-tree>\\n    {% endblock %}\\n</sw-card>\\n{% endblock %}\\n\";","import template from './sw-settings-rule-category-tree.html.twig';\nimport './sw-settings-rule-category-tree.scss';\n\nconst { Criteria } = Shopware.Data;\n\n/**\n * @private\n * @package services-settings\n */\nexport default {\n    template,\n\n    inject: ['repositoryFactory'],\n\n    props: {\n        rule: {\n            type: Object,\n            required: true,\n        },\n        association: {\n            type: String,\n            required: true,\n        },\n        categoriesCollection: {\n            type: Array,\n            required: true,\n        },\n        hideHeadline: {\n            type: Boolean,\n            required: false,\n            // TODO: Boolean props should only be opt in and therefore default to false\n            // eslint-disable-next-line vue/no-boolean-default\n            default: true,\n        },\n        hideSearch: {\n            type: Boolean,\n            required: false,\n            // TODO: Boolean props should only be opt in and therefore default to false\n            // eslint-disable-next-line vue/no-boolean-default\n            default: true,\n        },\n    },\n\n    data() {\n        return {\n            categories: [],\n        };\n    },\n\n    computed: {\n        categoryRepository() {\n            return this.repositoryFactory.create('category');\n        },\n\n        treeCriteria() {\n            const categoryCriteria = new Criteria(1, 500);\n            categoryCriteria.getAssociation(this.association).addFilter(Criteria.equals('id', this.rule.id));\n\n            return categoryCriteria;\n        },\n    },\n\n    watch: {\n        categoriesCollection: {\n            handler() {\n                if (this.categoriesCollection.entity && !this.isComponentReady && !this.isFetching) {\n                    Promise.all([\n                        this.getTreeItems(),\n                    ]).then(() => {\n                        this.isComponentReady = true;\n                    });\n                }\n            },\n            immediate: true,\n        },\n    },\n\n    methods: {\n        searchTreeItems(term) {\n            this.getTreeItems(null, term, true);\n        },\n\n        onCheckItem(checkedItems) {\n            this.$emit('on-selection', checkedItems);\n        },\n\n        hasItemAssociation(item) {\n            return item[this.association]?.length > 0 || item.extensions[this.association]?.length > 0;\n        },\n\n        getTreeItems(parentId = null, term = null, withTermFilter = false) {\n            this.isFetching = true;\n\n            const categoryCriteria = this.treeCriteria;\n\n            categoryCriteria.filters = categoryCriteria.filters.filter((filter) => {\n                if (filter.type === 'equals' && filter.field === 'parentId') {\n                    return false;\n                }\n\n                if (filter.type === 'contains' && filter.field === 'name') {\n                    return false;\n                }\n\n                return true;\n            });\n\n            if (term && withTermFilter) {\n                categoryCriteria.addFilter(Criteria.contains('name', term));\n            }\n\n            if (!term) {\n                categoryCriteria.addFilter(Criteria.equals('parentId', parentId));\n            }\n\n            // search for categories\n            return this.categoryRepository.search(categoryCriteria, Shopware.Context.api).then((searchResult) => {\n                // when requesting root categories, replace the data\n                if (parentId === null) {\n                    this.categories = searchResult;\n                    this.isFetching = false;\n                    return Promise.resolve();\n                }\n\n                // add new categories\n                searchResult.forEach((category) => {\n                    this.categories.add(category);\n                });\n\n                return Promise.resolve();\n            });\n        },\n    },\n};\n","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../../../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--15-1!../../../../../node_modules/css-loader/dist/cjs.js??ref--15-2!../../../../../node_modules/sass-loader/dist/cjs.js??ref--15-3!./sw-settings-rule-category-tree.scss\");\nif(content.__esModule) content = content.default;\nif(typeof content === 'string') content = [[module.id, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar add = require(\"!../../../../../node_modules/vue-style-loader/lib/addStylesClient.js\").default\nvar update = add(\"5d05a392\", content, true, {});"],"sourceRoot":""}