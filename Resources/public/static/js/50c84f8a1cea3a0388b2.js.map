{"version":3,"sources":["webpack:///./src/app/asyncComponent/media/sw-media-media-item/sw-media-media-item.scss","webpack:///./src/app/asyncComponent/media/sw-media-media-item/index.js","webpack:///./src/app/asyncComponent/media/sw-media-media-item/sw-media-media-item.html.twig"],"names":["content","__esModule","default","module","i","locals","exports","add","Mixin","Shopware","dom","Utils","template","inheritAttrs","inject","mixins","getByName","data","showModalReplace","showModalDelete","showModalMove","computed","locale","this","$root","$i18n","defaultContextMenuClass","$slots","mediaNameFilter","Filter","dateFilter","fileSizeFilter","methods","onChangeName","updatedName","item","endInlineEdit","_this","_asyncToGenerator","_regeneratorRuntime","mark","_callee","wrap","_context","prev","next","trim","rejectRenaming","abrupt","isLoading","mediaService","renameMedia","id","fileName","createNotificationSuccess","message","$tc","$emit","t0","createNotificationError","finish","stop","onBlur","event","input","target","value","emitPlayEvent","originalDomEvent","selected","removeFromSelection","copyItemLink","copyToClipboard","url","openModalDelete","closeModalDelete","emitItemDeleted","deletePromise","_this2","_callee2","ids","_context2","sent","mediaIds","openModalReplace","closeModalReplace","openModalMove","closeModalMove","onMediaItemMoved","movePromise","_this3","_callee3","_context3","emitRefreshMediaLibrary","_this4","$nextTick"],"mappings":"uGAGA,IAAIA,EAAU,EAAQ,QACnBA,EAAQC,aAAYD,EAAUA,EAAQE,SACnB,iBAAZF,IAAsBA,EAAU,CAAC,CAACG,EAAOC,EAAIJ,EAAS,MAC7DA,EAAQK,SAAQF,EAAOG,QAAUN,EAAQK,SAG/BE,EADH,EAAQ,QAAwEL,SACzE,WAAYF,GAAS,EAAM,K,8GCNpCQ,G,UAAUC,SAAVD,OACAE,EAAQD,SAASE,MAAjBD,IAwBO,WACXE,SC7BW,swKD8BXC,cAAc,EAEdC,OAAQ,CAAC,gBAETC,OAAQ,CACJP,EAAMQ,UAAU,iBAGpBC,KAAI,WACA,MAAO,CACHC,kBAAkB,EAClBC,iBAAiB,EACjBC,eAAe,IAIvBC,SAAU,CACNC,OAAM,WACF,OAAOC,KAAKC,MAAMC,MAAMH,QAG5BI,wBAAuB,WACnB,MAAO,CACH,yBAA0BH,KAAKI,OAAOzB,UAI9C0B,gBAAe,WACX,OAAOnB,SAASoB,OAAOb,UAAU,cAGrCc,WAAU,WACN,OAAOrB,SAASoB,OAAOb,UAAU,SAGrCe,eAAc,WACV,OAAOtB,SAASoB,OAAOb,UAAU,cAIzCgB,QAAS,CACCC,aAAY,SAACC,EAAaC,EAAMC,GAAgB,IAADC,EAAA,YAAAC,IAAAC,IAAAC,MAAA,SAAAC,IAAA,OAAAF,IAAAG,MAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,UAC5CX,GAAgBA,EAAYY,OAAM,CAAAH,EAAAE,KAAA,QACA,OAAnCR,EAAKU,eAAeX,GAAeO,EAAAK,OAAA,iBAIjB,OAAtBb,EAAKc,WAAY,EAAKN,EAAAC,KAAA,EAAAD,EAAAE,KAAA,EAGZR,EAAKa,aAAaC,YAAYhB,EAAKiB,GAAIlB,GAAa,KAAD,EACzDC,EAAKkB,SAAWnB,EAChBC,EAAKc,WAAY,EACjBZ,EAAKiB,0BAA0B,CAC3BC,QAASlB,EAAKmB,IAAI,qEAEtBnB,EAAKoB,MAAM,4BAA6BtB,GAAMQ,EAAAE,KAAA,iBAAAF,EAAAC,KAAA,GAAAD,EAAAe,GAAAf,EAAA,SAE9CN,EAAKsB,wBAAwB,CACzBJ,QAASlB,EAAKmB,IAAI,mEACnB,QAGa,OAHbb,EAAAC,KAAA,GAEHT,EAAKc,WAAY,EACjBb,IAAgBO,EAAAiB,OAAA,6BAAAjB,EAAAkB,UAAApB,EAAA,wBAtB6BH,IA0BrDS,eAAc,SAACX,GACXb,KAAKoC,wBAAwB,CACzBJ,QAAShC,KAAKiC,IAAI,wEAGtBpB,KAGJ0B,OAAM,SAACC,EAAO5B,EAAMC,GAChB,IAAM4B,EAAQD,EAAME,OAAOC,MAEvBF,IAAU7B,EAAKkB,WAIdW,GAAUA,EAAMlB,OAKrBV,IAJIb,KAAKwB,eAAeZ,EAAM,aAAcC,KAOhD+B,cAAa,SAACC,EAAkBjC,GACvBZ,KAAK8C,SAQV9C,KAAK+C,oBAAoBF,GAPrB7C,KAAKkC,MAAM,kBAAmB,CAC1BW,mBACAjC,UAQZoC,aAAY,SAACpC,GACTzB,EAAI8D,gBAAgBrC,EAAKsC,KACzBlD,KAAK+B,0BAA0B,CAC3BC,QAAShC,KAAKiC,IAAI,sDAI1BkB,gBAAe,WACXnD,KAAKJ,iBAAkB,GAG3BwD,iBAAgB,WACZpD,KAAKJ,iBAAkB,GAGrByD,gBAAe,SAACC,GAAgB,IAADC,EAAA,YAAAxC,IAAAC,IAAAC,MAAA,SAAAuC,IAAA,IAAAC,EAAA,OAAAzC,IAAAG,MAAA,SAAAuC,GAAA,cAAAA,EAAArC,KAAAqC,EAAApC,MAAA,OACT,OAAxBiC,EAAKH,mBAAmBM,EAAApC,KAAA,EACNgC,EAAc,KAAD,EAAzBG,EAAGC,EAAAC,KACTJ,EAAKrB,MAAM,oBAAqBuB,EAAIG,UAAU,wBAAAF,EAAApB,UAAAkB,MAHbzC,IAMrC8C,iBAAgB,WACZ7D,KAAKL,kBAAmB,GAG5BmE,kBAAiB,WACb9D,KAAKL,kBAAmB,GAG5BoE,cAAa,WACT/D,KAAKH,eAAgB,GAGzBmE,eAAc,WACVhE,KAAKH,eAAgB,GAGnBoE,iBAAgB,SAACC,GAAc,IAADC,EAAA,YAAApD,IAAAC,IAAAC,MAAA,SAAAmD,IAAA,IAAAX,EAAA,OAAAzC,IAAAG,MAAA,SAAAkD,GAAA,cAAAA,EAAAhD,KAAAgD,EAAA/C,MAAA,OACV,OAAtB6C,EAAKH,iBAAiBK,EAAA/C,KAAA,EACJ4C,EAAY,KAAD,EAAvBT,EAAGY,EAAAV,KACTQ,EAAKjC,MAAM,oBAAqBuB,GAAK,wBAAAY,EAAA/B,UAAA8B,MAHLrD,IAMpCuD,wBAAuB,WAAI,IAADC,EAAA,KACtBvE,KAAK8D,oBAEL9D,KAAKwE,WAAU,WACXD,EAAKrC,MAAM","file":"static/js/50c84f8a1cea3a0388b2.js","sourcesContent":["// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../../../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--15-1!../../../../../node_modules/css-loader/dist/cjs.js??ref--15-2!../../../../../node_modules/sass-loader/dist/cjs.js??ref--15-3!./sw-media-media-item.scss\");\nif(content.__esModule) content = content.default;\nif(typeof content === 'string') content = [[module.id, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar add = require(\"!../../../../../node_modules/vue-style-loader/lib/addStylesClient.js\").default\nvar update = add(\"3fade035\", content, true, {});","import template from './sw-media-media-item.html.twig';\nimport './sw-media-media-item.scss';\n\nconst { Mixin } = Shopware;\nconst { dom } = Shopware.Utils;\n\n/**\n * @status ready\n * @description The <u>sw-media-media-item</u> component is used to store the media item and manage it through the\n * <u>sw-media-base-item</u> component. Use the default slot to add additional context menu items.\n * @package content\n * @example-type code-only\n * @component-example\n * <sw-media-media-item\n *     :key=\"mediaItem.id\"\n *     :item=\"mediaItem\"\n *     :selected=\"false\"\n *     :showSelectionIndicator=\"false\"\n *     :isList=\"false\">\n *\n *       <sw-context-menu-item\n *            #additional-context-menu-items\n *            \\@click=\"showDetails(mediaItem)\">\n *          Lorem ipsum dolor sit amet\n *       </sw-context-menu-item>\n * </sw-media-media-item>\n */\n// eslint-disable-next-line sw-deprecation-rules/private-feature-declarations\nexport default {\n    template,\n    inheritAttrs: false,\n\n    inject: ['mediaService'],\n\n    mixins: [\n        Mixin.getByName('notification'),\n    ],\n\n    data() {\n        return {\n            showModalReplace: false,\n            showModalDelete: false,\n            showModalMove: false,\n        };\n    },\n\n    computed: {\n        locale() {\n            return this.$root.$i18n.locale;\n        },\n\n        defaultContextMenuClass() {\n            return {\n                'sw-context-menu__group': this.$slots.default,\n            };\n        },\n\n        mediaNameFilter() {\n            return Shopware.Filter.getByName('mediaName');\n        },\n\n        dateFilter() {\n            return Shopware.Filter.getByName('date');\n        },\n\n        fileSizeFilter() {\n            return Shopware.Filter.getByName('fileSize');\n        },\n    },\n\n    methods: {\n        async onChangeName(updatedName, item, endInlineEdit) {\n            if (!updatedName || !updatedName.trim()) {\n                this.rejectRenaming(endInlineEdit);\n                return;\n            }\n\n            item.isLoading = true;\n\n            try {\n                await this.mediaService.renameMedia(item.id, updatedName);\n                item.fileName = updatedName;\n                item.isLoading = false;\n                this.createNotificationSuccess({\n                    message: this.$tc('global.sw-media-media-item.notification.renamingSuccess.message'),\n                });\n                this.$emit('media-item-rename-success', item);\n            } catch {\n                this.createNotificationError({\n                    message: this.$tc('global.sw-media-media-item.notification.renamingError.message'),\n                });\n            } finally {\n                item.isLoading = false;\n                endInlineEdit();\n            }\n        },\n\n        rejectRenaming(endInlineEdit) {\n            this.createNotificationError({\n                message: this.$tc('global.sw-media-media-item.notification.errorBlankItemName.message'),\n            });\n\n            endInlineEdit();\n        },\n\n        onBlur(event, item, endInlineEdit) {\n            const input = event.target.value;\n\n            if (input !== item.fileName) {\n                return;\n            }\n\n            if (!input || !input.trim()) {\n                this.rejectRenaming(item, 'empty-name', endInlineEdit);\n                return;\n            }\n\n            endInlineEdit();\n        },\n\n        emitPlayEvent(originalDomEvent, item) {\n            if (!this.selected) {\n                this.$emit('media-item-play', {\n                    originalDomEvent,\n                    item,\n                });\n                return;\n            }\n\n            this.removeFromSelection(originalDomEvent);\n        },\n\n        copyItemLink(item) {\n            dom.copyToClipboard(item.url);\n            this.createNotificationSuccess({\n                message: this.$tc('sw-media.general.notification.urlCopied.message'),\n            });\n        },\n\n        openModalDelete() {\n            this.showModalDelete = true;\n        },\n\n        closeModalDelete() {\n            this.showModalDelete = false;\n        },\n\n        async emitItemDeleted(deletePromise) {\n            this.closeModalDelete();\n            const ids = await deletePromise;\n            this.$emit('media-item-delete', ids.mediaIds);\n        },\n\n        openModalReplace() {\n            this.showModalReplace = true;\n        },\n\n        closeModalReplace() {\n            this.showModalReplace = false;\n        },\n\n        openModalMove() {\n            this.showModalMove = true;\n        },\n\n        closeModalMove() {\n            this.showModalMove = false;\n        },\n\n        async onMediaItemMoved(movePromise) {\n            this.closeModalMove();\n            const ids = await movePromise;\n            this.$emit('media-folder-move', ids);\n        },\n\n        emitRefreshMediaLibrary() {\n            this.closeModalReplace();\n\n            this.$nextTick(() => {\n                this.$emit('media-item-replaced');\n            });\n        },\n    },\n};\n","export default \"\\n{% block sw_media_media_item %}\\n<sw-media-base-item\\n    class=\\\"sw-media-media-item\\\"\\n    v-bind=\\\"$attrs\\\"\\n    v-on=\\\"$listeners\\\"\\n>\\n\\n    \\n    {% block sw_media_media_item_preview %}\\n    <template #preview=\\\"{ item }\\\">\\n        <sw-media-preview-v2\\n            :source=\\\"item.id\\\"\\n            :media-is-private=\\\"item.private\\\"\\n            @media-preview-play=\\\"emitPlayEvent($event, item)\\\"\\n        />\\n    </template>\\n    {% endblock %}\\n\\n    \\n    {% block sw_media_media_item_name_container %}\\n    <template #name=\\\"{ item, isInlineEdit, startInlineEdit, endInlineEdit }\\\">\\n        <sw-text-field\\n            v-if=\\\"isInlineEdit\\\"\\n            v-autofocus\\n            class=\\\"sw-media-base-item__name-field\\\"\\n            :value=\\\"item.fileName\\\"\\n            name=\\\"media-item-name\\\"\\n            @change=\\\"onChangeName($event, item, endInlineEdit)\\\"\\n            @blur=\\\"onBlur($event, item, endInlineEdit)\\\"\\n            @keyup.esc=\\\"endInlineEdit\\\"\\n            @click.stop\\n        />\\n        <div\\n            v-else\\n            ref=\\\"itemName\\\"\\n            class=\\\"sw-media-base-item__name\\\"\\n            :title=\\\"`${item.fileName}.${item.fileExtension}`\\\"\\n            role=\\\"menuitem\\\"\\n            tabindex=\\\"0\\\"\\n            @dblclick=\\\"startInlineEdit\\\"\\n        >\\n\\n            <template v-if=\\\"item.hasFile\\\">\\n                {{ mediaNameFilter(item) }}\\n            </template>\\n        </div>\\n    </template>\\n    {% endblock %}\\n\\n    \\n    {% block sw_media_media_item_metadata %}\\n    <template #metadata=\\\"{ item }\\\">\\n        <div class=\\\"sw-media-media-item__metadata\\\">\\n            {{ dateFilter(item.uploadedAt) }}, {{ fileSizeFilter(item.fileSize, locale) }}\\n        </div>\\n    </template>\\n    {% endblock %}\\n\\n    \\n    {% block sw_media_media_item_context_menu %}\\n    <template #context-menu=\\\"{ item, startInlineEdit, allowEdit, allowDelete }\\\">\\n        <slot>\\n            \\n            {% block sw_media_media_item_additional_context_menu_slot %}{% endblock %}\\n        </slot>\\n\\n        \\n        {% block sw_media_media_item_context_group_quick_actions %}\\n        <div :class=\\\"defaultContextMenuClass\\\">\\n            \\n            {% block sw_media_media_item_context_item_rename_item %}\\n            <sw-context-menu-item\\n                :disabled=\\\"!item.hasFile || item.private || !allowEdit\\\"\\n                @click=\\\"startInlineEdit\\\"\\n            >\\n                {{ $tc('global.sw-media-media-item.labelContextMenuRename') }}\\n            </sw-context-menu-item>\\n            {% endblock %}\\n\\n            \\n            {% block sw_media_media_item_context_item_copy_item_link %}\\n            <sw-context-menu-item\\n                v-if=\\\"item.hasFile\\\"\\n                @click=\\\"copyItemLink(item)\\\"\\n            >\\n                {{ $tc('global.sw-media-media-item.labelContextMenuCopyLink') }}\\n            </sw-context-menu-item>\\n            {% endblock %}\\n\\n            \\n            {% block sw_media_media_item_context_item_replace %}\\n            <sw-context-menu-item\\n                :disabled=\\\"item.private || !allowEdit\\\"\\n                class=\\\"sw-media-context-item__replace-media-action\\\"\\n                @click=\\\"openModalReplace\\\"\\n            >\\n                {{ $tc('global.sw-media-media-item.labelContextMenuReplace') }}\\n            </sw-context-menu-item>\\n            {% endblock %}\\n\\n            \\n            {% block sw_media_media_item_context_item_move %}\\n            <sw-context-menu-item\\n                :disabled=\\\"!allowEdit\\\"\\n                class=\\\"sw-media-context-item__move-media-action\\\"\\n                @click=\\\"openModalMove\\\"\\n            >\\n                {{ $tc('global.sw-media-media-item.labelContextMenuMove') }}\\n            </sw-context-menu-item>\\n            {% endblock %}\\n\\n            \\n            {% block sw_media_media_item_context_item_delete %}\\n            <sw-context-menu-item\\n                :disabled=\\\"item.private || !allowDelete\\\"\\n                variant=\\\"danger\\\"\\n                @click=\\\"openModalDelete\\\"\\n            >\\n                {{ $tc('global.default.delete') }}\\n            </sw-context-menu-item>\\n            {% endblock %}\\n\\n        </div>\\n        {% endblock %}\\n    </template>\\n    {% endblock %}\\n\\n    <template #modal-windows=\\\"{ item, allowEdit, allowDelete }\\\">\\n        \\n        {% block sw_media_media_item_modal_replace %}\\n        <sw-media-modal-replace\\n            v-if=\\\"showModalReplace && allowEdit\\\"\\n            :item-to-replace=\\\"item\\\"\\n            @media-replace-modal-item-replaced=\\\"emitRefreshMediaLibrary\\\"\\n            @media-replace-modal-close=\\\"closeModalReplace\\\"\\n        />\\n        {% endblock %}\\n\\n        \\n        {% block sw_media_media_item_delete_modal %}\\n        <sw-media-modal-delete\\n            v-if=\\\"showModalDelete && allowDelete\\\"\\n            :items-to-delete=\\\"[item]\\\"\\n            @media-delete-modal-items-delete=\\\"emitItemDeleted\\\"\\n            @media-delete-modal-close=\\\"closeModalDelete\\\"\\n        />\\n        {% endblock %}\\n\\n        \\n        {% block sw_media_media_item_move_modal %}\\n        <sw-media-modal-move\\n            v-if=\\\"showModalMove && allowEdit\\\"\\n            :items-to-move=\\\"[item]\\\"\\n            @media-move-modal-close=\\\"closeModalMove\\\"\\n            @media-move-modal-items-move=\\\"onMediaItemMoved\\\"\\n        />\\n        {% endblock %}\\n    </template>\\n</sw-media-base-item>\\n{% endblock %}\\n\";"],"sourceRoot":""}