{"version":3,"sources":["webpack:///./src/module/sw-bulk-edit/page/sw-bulk-edit-order/sw-bulk-edit-order.scss","webpack:///./src/module/sw-bulk-edit/page/sw-bulk-edit-order/index.js","webpack:///./src/module/sw-bulk-edit/page/sw-bulk-edit-order/sw-bulk-edit-order.html.twig","webpack:///./src/module/sw-bulk-edit/state/sw-bulk-edit.state.js"],"names":["content","__esModule","default","module","i","locals","exports","add","Mixin","Shopware","Criteria","Data","types","Utils","_Shopware$Utils$array","array","intersectionBy","chunk","uniqBy","template","inject","mixins","getByName","data","isLoading","isLoadedData","bulkEditData","isStatusSelected","isStatusMailsSelected","orderStatus","transactionStatus","deliveryStatus","customFieldSets","itemsPerRequest","processStatus","order","metaInfo","title","this","$createTitle","computed","selectedIds","State","get","stateMachineStateRepository","repositoryFactory","create","orderRepository","customFieldSetRepository","customFieldSetCriteria","criteria","addFilter","equals","hasChanges","_this$bulkEditData$cu","customFieldsValue","customFields","value","hasFieldsChanged","Object","values","some","field","isChanged","hasCustomFieldsChanged","isEmpty","keys","length","restrictedFields","$route","params","excludeDelivery","concat","statusFormFields","_this$bulkEditData","_this","name","config","componentName","changeLabel","$tc","entity","placeholder","options","labelHelpText","hidden","documents","filter","includes","documentsFormFields","changeSubLabel","tagsFormFields","entityCollection","tags","allowOverwrite","allowClear","allowAdd","allowRemove","watch","handler","orders","orderTransactions","orderDeliveries","statusMails","deep","disabled","beforeCreate","registerModule","swBulkEditState","created","createdComponent","beforeDestroy","unregisterModule","methods","_this2","_asyncToGenerator","_regeneratorRuntime","mark","_callee","wrap","_context","prev","next","setRouteMetaModule","Context","api","Promise","all","fetchStatusOptions","loadCustomFieldSets","loadBulkEditData","stop","$set","meta","$module","_this3","forEach","bulkEditForms","bulkEditForm","type","_objectSpread","documentType","skipSentDocuments","_this4","fetchStateMachineStates","then","states","fetchToStateMachineTransitions","toStates","catch","error","createNotificationError","message","_this5","payloadChunks","versionField","requests","map","ids","multi","equalsAny","liveVersionId","searchIds","responses","_toConsumableArray","_this6","search","toStateMachineStatesCriteria","response","fromStates","state","fromStateMachineTransitions","entries","apply","toStateMachineState","entry","technicalName","label","translated","actionName","resolve","addAssociation","onProcessData","_this7","statusData","syncData","dataPush","_ref","_ref2","_slicedToArray","key","item","payload","_this7$order","_this7$order$document","_this7$bulkEditData","_this7$bulkEditData$d","_this7$bulkEditData2","_this7$bulkEditData2$","_this7$order2","documentTypes","selectedDocumentTypes","documentTypeName","sendMail","push","openModal","$router","closeModal","onSave","_this8","_this$onProcessData","bulkEditOrderHandler","bulkEditApiFactory","getHandler","bulkEditStatus","bulkEdit","finally","getLatestOrderStatus","_this$bulkEditData$or","promises","_this9","res","onCustomFieldsChange","onChangeDocument","commit","namespaced","today","Date","toISOString","isFlowTriggered","orderDocuments","invoice","documentDate","documentComment","storno","delivery_note","custom","deliveryDate","deliveryNoteDate","credit_note","download","mutations","setIsFlowTriggered","setOrderDocumentsIsChanged","setOrderDocumentsValue","getters","documentTypeConfigs","_ref3","_ref4","fileType"],"mappings":"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","file":"static/js/9375b869e426c3496d8b.js","sourcesContent":["// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../../../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--15-1!../../../../../node_modules/css-loader/dist/cjs.js??ref--15-2!../../../../../node_modules/sass-loader/dist/cjs.js??ref--15-3!./sw-bulk-edit-order.scss\");\nif(content.__esModule) content = content.default;\nif(typeof content === 'string') content = [[module.id, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar add = require(\"!../../../../../node_modules/vue-style-loader/lib/addStylesClient.js\").default\nvar update = add(\"0d852806\", content, true, {});","import template from './sw-bulk-edit-order.html.twig';\nimport './sw-bulk-edit-order.scss';\nimport swBulkEditState from '../../state/sw-bulk-edit.state';\n\nconst { Mixin } = Shopware;\nconst { Criteria } = Shopware.Data;\nconst { types } = Shopware.Utils;\nconst { intersectionBy, chunk, uniqBy } = Shopware.Utils.array;\n\n/**\n * @package system-settings\n */\n// eslint-disable-next-line sw-deprecation-rules/private-feature-declarations\nexport default {\n    template,\n\n    inject: [\n        'bulkEditApiFactory',\n        'repositoryFactory',\n        'feature',\n        'orderDocumentApiService',\n    ],\n\n    mixins: [\n        Mixin.getByName('notification'),\n    ],\n\n    data() {\n        return {\n            isLoading: false,\n            isLoadedData: false,\n            bulkEditData: {},\n            isStatusSelected: false,\n            isStatusMailsSelected: false,\n            orderStatus: [],\n            transactionStatus: [],\n            deliveryStatus: [],\n            customFieldSets: [],\n            itemsPerRequest: 100,\n            processStatus: '',\n            order: {},\n        };\n    },\n\n    metaInfo() {\n        return {\n            title: this.$createTitle(),\n        };\n    },\n\n    computed: {\n        selectedIds() {\n            return Shopware.State.get('shopwareApps').selectedIds;\n        },\n\n        stateMachineStateRepository() {\n            return this.repositoryFactory.create('state_machine_state');\n        },\n\n        orderRepository() {\n            return this.repositoryFactory.create('order');\n        },\n\n        customFieldSetRepository() {\n            return this.repositoryFactory.create('custom_field_set');\n        },\n\n        customFieldSetCriteria() {\n            const criteria = new Criteria(1, null);\n\n            criteria.addFilter(Criteria.equals('relations.entityName', 'order'));\n\n            return criteria;\n        },\n\n        hasChanges() {\n            const customFieldsValue = this.bulkEditData.customFields?.value;\n            const hasFieldsChanged = Object.values(this.bulkEditData).some((field) => field.isChanged);\n            const hasCustomFieldsChanged = !types.isEmpty(customFieldsValue) && Object.keys(customFieldsValue).length > 0;\n\n            return hasFieldsChanged || hasCustomFieldsChanged;\n        },\n\n        restrictedFields() {\n            let restrictedFields = [];\n\n            if (this.$route.params.excludeDelivery === '1') {\n                restrictedFields = restrictedFields.concat([\n                    'orderDeliveries',\n                ]);\n            }\n\n            return restrictedFields;\n        },\n\n        statusFormFields() {\n            const fields = [\n                {\n                    name: 'orderTransactions',\n                    config: {\n                        componentName: 'sw-single-select',\n                        changeLabel: this.$tc('sw-bulk-edit.order.status.payment.label'),\n                        entity: 'state_machine_state',\n                        placeholder: this.$tc('sw-bulk-edit.order.status.payment.placeholder'),\n                        options: this.transactionStatus,\n                    },\n                },\n                {\n                    name: 'orderDeliveries',\n                    config: {\n                        componentName: 'sw-single-select',\n                        changeLabel: this.$tc('sw-bulk-edit.order.status.shipping.label'),\n                        entity: 'state_machine_state',\n                        placeholder: this.$tc('sw-bulk-edit.order.status.shipping.placeholder'),\n                        options: this.deliveryStatus,\n                    },\n                },\n                {\n                    name: 'orders',\n                    config: {\n                        componentName: 'sw-single-select',\n                        changeLabel: this.$tc('sw-bulk-edit.order.status.order.label'),\n                        entity: 'state_machine_state',\n                        placeholder: this.$tc('sw-bulk-edit.order.status.order.placeholder'),\n                        options: this.orderStatus,\n                    },\n                },\n                {\n                    name: 'statusMails',\n                    labelHelpText: this.$tc('sw-bulk-edit.order.status.statusMails.helpText'),\n                    config: {\n                        hidden: true,\n                        changeLabel: this.$tc('sw-bulk-edit.order.status.statusMails.label'),\n                    },\n                },\n                {\n                    name: 'documents',\n                    labelHelpText: this.$tc('sw-bulk-edit.order.status.documents.helpText'),\n                    config: {\n                        componentName: 'sw-bulk-edit-order-documents',\n                        changeLabel: this.$tc('sw-bulk-edit.order.status.documents.label'),\n                        documents: this.bulkEditData?.documents,\n                    },\n                },\n            ];\n\n            return fields.filter((field) => {\n                return !this.restrictedFields.includes(field.name);\n            });\n        },\n\n        documentsFormFields() {\n            return [\n                {\n                    name: 'invoice',\n                    labelHelpText: this.$tc('sw-bulk-edit.order.documents.generateInvoice.helpText'),\n                    config: {\n                        componentName: 'sw-bulk-edit-order-documents-generate-invoice',\n                        changeLabel: this.$tc('sw-bulk-edit.order.documents.generateInvoice.label'),\n                    },\n                },\n                {\n                    name: 'storno',\n                    labelHelpText: this.$tc('sw-bulk-edit.order.documents.generateCancellationInvoice.helpText'),\n                    config: {\n                        componentName: 'sw-bulk-edit-order-documents-generate-cancellation-invoice',\n                        changeLabel: this.$tc('sw-bulk-edit.order.documents.generateCancellationInvoice.label'),\n                        changeSubLabel: this.$tc('sw-bulk-edit.order.documents.generateCancellationInvoice.changeSubLabel'),\n                    },\n                },\n                {\n                    name: 'delivery_note',\n                    labelHelpText: this.$tc('sw-bulk-edit.order.documents.generateDeliveryNote.helpText'),\n                    config: {\n                        componentName: 'sw-bulk-edit-order-documents-generate-delivery-note',\n                        changeLabel: this.$tc('sw-bulk-edit.order.documents.generateDeliveryNote.label'),\n                    },\n                },\n                {\n                    name: 'credit_note',\n                    labelHelpText: this.$tc('sw-bulk-edit.order.documents.generateCreditNote.helpText'),\n                    config: {\n                        componentName: 'sw-bulk-edit-order-documents-generate-credit-note',\n                        changeLabel: this.$tc('sw-bulk-edit.order.documents.generateCreditNote.label'),\n                        changeSubLabel: this.$tc('sw-bulk-edit.order.documents.generateCreditNote.changeSubLabel'),\n                    },\n                },\n                {\n                    name: 'download',\n                    labelHelpText: this.$tc('sw-bulk-edit.order.documents.downloadDocuments.helpText'),\n                    config: {\n                        componentName: 'sw-bulk-edit-order-documents-download-documents',\n                        changeLabel: this.$tc('sw-bulk-edit.order.documents.downloadDocuments.label'),\n                    },\n                },\n            ];\n        },\n\n        tagsFormFields() {\n            return [\n                {\n                    name: 'tags',\n                    config: {\n                        componentName: 'sw-entity-tag-select',\n                        entityCollection: this.order.tags,\n                        allowOverwrite: true,\n                        allowClear: true,\n                        allowAdd: true,\n                        allowRemove: true,\n                        changeLabel: this.$tc('sw-bulk-edit.order.tags.changeLabel'),\n                        placeholder: this.$tc('sw-bulk-edit.order.tags.placeholder'),\n                    },\n                },\n            ];\n        },\n    },\n\n    watch: {\n        bulkEditData: {\n            handler(value) {\n                const { orders, orderTransactions, orderDeliveries, statusMails } = value;\n                this.isStatusSelected = (orders.isChanged && orders.value)\n                    || (orderTransactions.isChanged && orderTransactions.value)\n                    || (orderDeliveries?.isChanged && orderDeliveries.value);\n\n                this.isStatusMailsSelected = statusMails.isChanged;\n            },\n            deep: true,\n        },\n\n        isStatusSelected() {\n            if (!this.isStatusSelected) {\n                this.bulkEditData.statusMails.isChanged = false;\n            }\n\n            this.bulkEditData.statusMails.disabled = !this.isStatusSelected;\n        },\n\n        isStatusMailsSelected() {\n            if (!this.isStatusMailsSelected) {\n                this.bulkEditData.documents.isChanged = false;\n            }\n\n            this.bulkEditData.documents.disabled = !this.isStatusMailsSelected;\n        },\n    },\n\n    beforeCreate() {\n        Shopware.State.registerModule('swBulkEdit', swBulkEditState);\n    },\n\n    created() {\n        this.createdComponent();\n    },\n\n    beforeDestroy() {\n        Shopware.State.unregisterModule('swBulkEdit');\n    },\n\n    methods: {\n        async createdComponent() {\n            this.setRouteMetaModule();\n\n            this.isLoading = true;\n\n            this.order = this.orderRepository.create(Shopware.Context.api);\n\n            await Promise.all([\n                this.fetchStatusOptions('orders.id'),\n                this.fetchStatusOptions('orderTransactions.orderId'),\n                this.fetchStatusOptions('orderDeliveries.orderId'),\n                this.loadCustomFieldSets(),\n            ]);\n\n            this.isLoading = false;\n            this.isLoadedData = true;\n\n            this.loadBulkEditData();\n        },\n\n        setRouteMetaModule() {\n            this.$set(this.$route.meta.$module, 'color', '#A092F0');\n            this.$set(this.$route.meta.$module, 'icon', 'regular-shopping-bag');\n        },\n\n        loadBulkEditData() {\n            const bulkEditFormGroups = [\n                this.statusFormFields,\n                this.documentsFormFields,\n                this.tagsFormFields,\n            ];\n\n            bulkEditFormGroups.forEach((bulkEditForms) => {\n                bulkEditForms.forEach((bulkEditForm) => {\n                    this.$set(this.bulkEditData, bulkEditForm.name, {\n                        isChanged: false,\n                        type: 'overwrite',\n                        value: null,\n                    });\n                });\n            });\n\n            this.$set(this.bulkEditData, 'customFields', {\n                type: 'overwrite',\n                value: null,\n            });\n\n            this.$set(this.bulkEditData, 'statusMails', {\n                ...this.bulkEditData.statusMails,\n                disabled: true,\n            });\n\n            this.$set(this.bulkEditData, 'documents', {\n                ...this.bulkEditData.documents,\n                disabled: true,\n            });\n\n            this.order.documents = {\n                documentType: {},\n                skipSentDocuments: true,\n            };\n        },\n\n        fetchStatusOptions(field) {\n            return this.fetchStateMachineStates(field).then(states => {\n                return this.fetchToStateMachineTransitions(states);\n            }).then(toStates => {\n                switch (field) {\n                    case 'orderTransactions.orderId':\n                        this.transactionStatus = toStates;\n                        break;\n                    case 'orderDeliveries.orderId':\n                        this.deliveryStatus = toStates;\n                        break;\n                    default:\n                        this.orderStatus = toStates;\n                }\n            }).catch(error => this.createNotificationError({\n                message: error,\n            }));\n        },\n\n        fetchStateMachineStates(field) {\n            const payloadChunks = chunk(this.selectedIds, this.itemsPerRequest);\n\n            let versionField = null;\n\n            switch (field) {\n                case 'orderTransactions.orderId':\n                    versionField = 'orderTransactions.orderVersionId';\n                    break;\n                case 'orderDeliveries.orderId':\n                    versionField = 'orderDeliveries.orderVersionId';\n                    break;\n                default:\n                    versionField = 'orders.versionId';\n            }\n\n            const requests = payloadChunks.map(ids => {\n                const criteria = new Criteria(1, null);\n\n                criteria.addFilter(Criteria.multi('AND', [\n                    Criteria.equalsAny(field, ids),\n                    Criteria.equals(versionField, Shopware.Context.api.liveVersionId),\n                ]));\n\n                return this.stateMachineStateRepository.searchIds(criteria);\n            });\n\n            return Promise.all(requests).then(responses => {\n                let states = [];\n\n                responses.forEach(order => {\n                    if (order?.data) {\n                        states = [...order.data];\n                    }\n                });\n\n                return states;\n            }).catch(error => this.createNotificationError({\n                message: error,\n            }));\n        },\n\n        fetchToStateMachineTransitions(states) {\n            if (!states.length) {\n                return Promise.resolve([]);\n            }\n\n            return this.stateMachineStateRepository\n                .search(this.toStateMachineStatesCriteria(states), Shopware.Context.api)\n                .then(response => {\n                    if (!response.length) {\n                        return [];\n                    }\n\n                    const fromStates = response.map(state => {\n                        if (state?.fromStateMachineTransitions) {\n                            return state.fromStateMachineTransitions;\n                        }\n\n                        return null;\n                    }).filter(state => state !== null);\n\n                    let entries = intersectionBy(...fromStates, 'actionName')\n                        .filter(state => state?.toStateMachineState);\n\n                    entries = uniqBy(entries, entry => {\n                        return entry.toStateMachineState.technicalName;\n                    });\n\n                    return entries.map(entry => ({\n                        label: entry.toStateMachineState.translated.name,\n                        value: entry.actionName,\n                    }));\n                }).catch(error => this.createNotificationError({\n                    message: error,\n                }));\n        },\n\n        toStateMachineStatesCriteria(states) {\n            const criteria = new Criteria(1, 25);\n\n            criteria.addFilter(Criteria.equalsAny('id', states));\n            criteria.addAssociation('fromStateMachineTransitions.toStateMachineState');\n\n            return criteria;\n        },\n\n        onProcessData() {\n            const data = {\n                statusData: [],\n                syncData: [],\n            };\n\n            const dataPush = ['orderTransactions', 'orderDeliveries', 'orders'];\n\n            Object.entries(this.bulkEditData).forEach(([key, item]) => {\n                if (item.isChanged || (key === 'customFields' && item.value)) {\n                    const payload = {\n                        field: key,\n                        type: item.type,\n                        value: item.value,\n                    };\n\n                    if (dataPush.includes(key)) {\n                        const documentTypes = this.order?.documents?.documentType;\n\n                        if (this.bulkEditData?.documents?.isChanged) {\n                            const selectedDocumentTypes = Object.keys(documentTypes).filter(\n                                documentTypeName => documentTypes[documentTypeName] === true,\n                            );\n\n                            if (selectedDocumentTypes.length > 0) {\n                                payload.documentTypes = selectedDocumentTypes;\n                                payload.skipSentDocuments = this.order.documents.skipSentDocuments;\n                            }\n                        }\n\n                        payload.sendMail = this.bulkEditData?.statusMails?.isChanged;\n                        payload.value = this.order?.[key];\n                        data.statusData.push(payload);\n                    } else if (key !== 'documents' && key !== 'statusMails') {\n                        data.syncData.push(payload);\n                    }\n                }\n            });\n\n            return data;\n        },\n\n        openModal() {\n            this.$router.push({ name: 'sw.bulk.edit.order.save' });\n        },\n\n        closeModal() {\n            this.$router.push({ name: 'sw.bulk.edit.order' });\n        },\n\n        onSave() {\n            this.isLoading = true;\n\n            const { statusData, syncData } = this.onProcessData();\n            const bulkEditOrderHandler = this.bulkEditApiFactory.getHandler('order');\n\n            const payloadChunks = chunk(this.selectedIds, this.itemsPerRequest);\n            const requests = [];\n\n            payloadChunks.forEach(payload => {\n                if (statusData.length) {\n                    requests.push(bulkEditOrderHandler.bulkEditStatus(payload, statusData));\n                }\n\n                if (syncData.length) {\n                    requests.push(bulkEditOrderHandler.bulkEdit(payload, syncData));\n                }\n            });\n\n            return Promise.all(requests)\n                .then(() => {\n                    this.processStatus = 'success';\n                })\n                .catch(() => {\n                    this.processStatus = 'fail';\n                })\n                .finally(() => {\n                    this.isLoading = false;\n                    this.getLatestOrderStatus().finally(() => {\n                        this.isLoading = false;\n                    });\n                });\n        },\n\n        getLatestOrderStatus() {\n            const promises = [];\n\n            if (this.bulkEditData.orderTransactions.isChanged) {\n                promises.push(this.fetchStatusOptions('orderTransactions.order.id'));\n            }\n            if (this.bulkEditData.orderDeliveries?.isChanged) {\n                promises.push(this.fetchStatusOptions('orderDeliveries.order.id'));\n            }\n            if (this.bulkEditData.orders.isChanged) {\n                promises.push(this.fetchStatusOptions('orders.id'));\n            }\n\n            if (promises.length === 0) {\n                return Promise.resolve();\n            }\n\n            this.isLoading = true;\n\n            return Promise.all(promises);\n        },\n\n        loadCustomFieldSets() {\n            return this.customFieldSetRepository.search(this.customFieldSetCriteria).then((res) => {\n                this.customFieldSets = res;\n            });\n        },\n\n        onCustomFieldsChange(value) {\n            this.bulkEditData.customFields.value = value;\n        },\n\n        onChangeDocument(type, isChanged) {\n            Shopware.State.commit('swBulkEdit/setOrderDocumentsIsChanged', {\n                type,\n                isChanged,\n            });\n        },\n    },\n};\n","export default \"\\n{% block sw_bulk_edit_order %}\\n<sw-page class=\\\"sw-bulk-edit-order\\\">\\n    \\n    {% block sw_bulk_edit_order_search_bar %}\\n    <template #search-bar>\\n\\n        <sw-search-bar />\\n\\n    </template>\\n    {% endblock %}\\n\\n    \\n    {% block sw_bulk_edit_order_smart_bar_header %}\\n    <template #smart-bar-header>\\n\\n        <h2>{{ $tc('sw-bulk-edit.order.textTitle', selectedIds.length, { orderTotal: selectedIds.length }) }}</h2>\\n\\n    </template>\\n    {% endblock %}\\n\\n    \\n    {% block sw_bulk_edit_order_content_smart_bar_actions %}\\n    <template #smart-bar-actions>\\n\\n        \\n        {% block sw_bulk_edit_order_actions_save %}\\n        <sw-button-process\\n            class=\\\"sw-bulk-edit-order__save-action\\\"\\n            variant=\\\"primary\\\"\\n            :is-loading=\\\"isLoading\\\"\\n            :process-success=\\\"false\\\"\\n            :disabled=\\\"isLoading || !hasChanges\\\"\\n            @click=\\\"openModal\\\"\\n        >\\n            {{ $tc('sw-bulk-edit.applyChanges') }}\\n        </sw-button-process>\\n        {% endblock %}\\n\\n    </template>\\n    {% endblock %}\\n\\n    \\n    {% block sw_bulk_edit_order_content %}\\n    <template #content>\\n\\n        <sw-card-view\\n            v-if=\\\"selectedIds.length > 0 && isLoadedData\\\"\\n        >\\n            <sw-card\\n                v-if=\\\"restrictedFields.length\\\"\\n                class=\\\"sw-bulk-edit-order__restricted-fields\\\"\\n                position-identifier=\\\"sw-bulk-edit-order-restricted-fields\\\"\\n            >\\n                <sw-alert\\n                    :title=\\\"$tc('sw-bulk-edit.order.alertRestrictedFields.title')\\\"\\n                    variant=\\\"warning\\\"\\n                >\\n                    <span v-html=\\\"$tc('sw-bulk-edit.order.alertRestrictedFields.message')\\\"></span>\\n                    <ul>\\n                        <li\\n                            v-for=\\\"(restrictedField, index) in restrictedFields\\\"\\n                            :key=\\\"index\\\"\\n                        >\\n                            {{ $tc(`sw-bulk-edit.order.alertRestrictedFields.${restrictedField}`) }}\\n                        </li>\\n                    </ul>\\n                </sw-alert>\\n            </sw-card>\\n\\n            \\n            {% block sw_bulk_edit_order_content_order_status_card %}\\n            <sw-card\\n                class=\\\"sw-bulk-edit-order-base__status\\\"\\n                position-identifier=\\\"sw-bulk-edit-order-status\\\"\\n                :title=\\\"$tc('sw-bulk-edit.order.status.cardTitle')\\\"\\n                :is-loading=\\\"isLoading\\\"\\n            >\\n                \\n                {% block sw_bulk_edit_order_content_order_status_section %}\\n                <sw-bulk-edit-change-type-field-renderer\\n                    :form-fields=\\\"statusFormFields\\\"\\n                    :bulk-edit-data=\\\"bulkEditData\\\"\\n                    :entity=\\\"order\\\"\\n                />\\n                {% endblock %}\\n            </sw-card>\\n            {% endblock %}\\n\\n            \\n            {% block sw_bulk_edit_order_content_documents %}\\n            <sw-card\\n                class=\\\"sw-bulk-edit-order-base__documents\\\"\\n                position-identifier=\\\"sw-bulk-edit-order-documents\\\"\\n                :title=\\\"$tc('sw-bulk-edit.order.documents.cardTitle')\\\"\\n                :is-loading=\\\"isLoading\\\"\\n            >\\n                \\n                {% block sw_bulk_edit_order_content_documents_content %}\\n                <sw-bulk-edit-change-type-field-renderer\\n                    :form-fields=\\\"documentsFormFields\\\"\\n                    :bulk-edit-data=\\\"bulkEditData\\\"\\n                    :entity=\\\"order\\\"\\n                    @change-value=\\\"onChangeDocument\\\"\\n                />\\n                {% endblock %}\\n            </sw-card>\\n            {% endblock %}\\n\\n            \\n            {% block sw_bulk_edit_order_tags_card %}\\n            <sw-card\\n                class=\\\"sw-bulk-edit-order-base__tags\\\"\\n                position-identifier=\\\"sw-bulk-edit-order-tags\\\"\\n                :title=\\\"$tc('sw-bulk-edit.order.tags.cardTitle')\\\"\\n                :is-loading=\\\"isLoading\\\"\\n            >\\n                \\n                {% block sw_bulk_edit_order_tags %}\\n                <sw-bulk-edit-change-type-field-renderer\\n                    :form-fields=\\\"tagsFormFields\\\"\\n                    :bulk-edit-data=\\\"bulkEditData\\\"\\n                    :entity=\\\"order\\\"\\n                />\\n                {% endblock %}\\n            </sw-card>\\n            {% endblock %}\\n\\n            \\n            {% block sw_bulk_edit_order_custom_field_card %}\\n            <sw-card\\n                class=\\\"sw-bulk-edit-order-base__custom_fields\\\"\\n                position-identifier=\\\"sw-bulk-edit-order-custom-fields\\\"\\n                :title=\\\"$tc('sw-bulk-edit.order.customFields.cardTitle')\\\"\\n                :is-loading=\\\"isLoading\\\"\\n            >\\n                <sw-bulk-edit-custom-fields\\n                    class=\\\"sw-bulk-edit__custom-fields\\\"\\n                    :sets=\\\"customFieldSets\\\"\\n                    @change=\\\"onCustomFieldsChange\\\"\\n                />\\n            </sw-card>\\n            {% endblock %}\\n        </sw-card-view>\\n\\n        \\n        {% block sw_bulk_edit_order_empty_state %}\\n        <sw-empty-state\\n            v-if=\\\"selectedIds.length <= 0 && !isLoading\\\"\\n            :title=\\\"$tc('sw-bulk-edit.order.messageEmptyTitle')\\\"\\n            :subline=\\\"$tc('sw-bulk-edit.order.messageEmptySubline')\\\"\\n        />\\n        {% endblock %}\\n\\n        \\n        {% block sw_bulk_edit_order_save_modal %}\\n        {% if VUE3 %}\\n        <router-view\\n            v-slot=\\\"{ Component }\\\"\\n        >\\n            <component\\n                :is=\\\"Component\\\"\\n                :item-total=\\\"selectedIds.length\\\"\\n                :is-loading=\\\"isLoading\\\"\\n                :process-status=\\\"processStatus\\\"\\n                :bulk-edit-data=\\\"bulkEditData\\\"\\n                @modal-close=\\\"closeModal\\\"\\n                @bulk-save=\\\"onSave\\\"\\n            />\\n        </router-view>\\n        {% else %}\\n        <router-view\\n            :item-total=\\\"selectedIds.length\\\"\\n            :is-loading=\\\"isLoading\\\"\\n            :process-status=\\\"processStatus\\\"\\n            :bulk-edit-data=\\\"bulkEditData\\\"\\n            @modal-close=\\\"closeModal\\\"\\n            @bulk-save=\\\"onSave\\\"\\n        />\\n        {% endif %}\\n        {% endblock %}\\n    </template>\\n    {% endblock %}\\n</sw-page>\\n{% endblock %}\\n\";","/**\n * @package system-settings\n */\n// eslint-disable-next-line sw-deprecation-rules/private-feature-declarations\nexport default {\n    namespaced: true,\n\n    state() {\n        const today = (new Date()).toISOString();\n\n        return {\n            isFlowTriggered: true,\n            orderDocuments: {\n                invoice: {\n                    isChanged: false,\n                    value: {\n                        documentDate: today,\n                        documentComment: null,\n                    },\n                },\n                storno: {\n                    isChanged: false,\n                    value: {\n                        documentDate: today,\n                        documentComment: null,\n                    },\n                },\n                delivery_note: {\n                    isChanged: false,\n                    value: {\n                        custom: {\n                            deliveryDate: today,\n                            deliveryNoteDate: today,\n                        },\n                        documentDate: today,\n                        documentComment: null,\n                    },\n                },\n                credit_note: {\n                    isChanged: false,\n                    value: {\n                        documentDate: today,\n                        documentComment: null,\n                    },\n                },\n                download: {\n                    isChanged: false,\n                    value: [],\n                },\n            },\n        };\n    },\n\n    mutations: {\n        setIsFlowTriggered(state, isFlowTriggered) {\n            state.isFlowTriggered = isFlowTriggered;\n        },\n        setOrderDocumentsIsChanged(state, { type, isChanged }) {\n            state.orderDocuments[type].isChanged = isChanged;\n        },\n        setOrderDocumentsValue(state, { type, value }) {\n            state.orderDocuments[type].value = value;\n        },\n    },\n\n    getters: {\n        documentTypeConfigs(state) {\n            const documentTypeConfigs = [];\n\n            Object.entries(state.orderDocuments).forEach(([key, value]) => {\n                if (key === 'download') {\n                    return;\n                }\n                if (value.isChanged === true) {\n                    documentTypeConfigs.push({\n                        fileType: 'pdf',\n                        type: key,\n                        config: value.value,\n                    });\n                }\n            });\n\n            return documentTypeConfigs;\n        },\n    },\n};\n"],"sourceRoot":""}