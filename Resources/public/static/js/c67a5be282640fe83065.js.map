{"version":3,"sources":["webpack:///./src/module/sw-profile/state/sw-profile.state.js","webpack:///./src/module/sw-profile/page/sw-profile-index/index.js","webpack:///./src/module/sw-profile/page/sw-profile-index/sw-profile-index.html.twig"],"names":["namespaced","state","searchPreferences","userSearchPreferences","mutations","setSearchPreferences","setUserSearchPreferences","_Shopware","Shopware","Component","Mixin","State","Criteria","Data","_Component$getCompone","getComponentHelper","mapState","mapPropertyErrors","template","inject","mixins","getByName","data","user","username","email","languages","imageSize","newPassword","newPasswordConfirm","confirmPassword","avatarMediaItem","uploadTag","isLoading","isUserLoading","isSaveSuccessful","confirmPasswordModal","mediaDefaultFolderId","showMediaModal","timezoneOptions","metaInfo","title","this","$createTitle","computed","_objectSpread","get","set","commit","isDisabled","userRepository","repositoryFactory","create","languageRepository","localeRepository","mediaRepository","userMediaCriteria","id","languageId","watch","newValue","name","resetGeneralData","_this$user$avatarMedi","avatarMedia","acl","can","setMediaItem","targetId","createdComponent","beforeCreate","registerModule","swProfileState","created","beforeMount","beforeMountComponent","beforeDestroy","unregisterModule","methods","_this","languagePromise","Promise","resolve","userPromise","getUserData","Service","getTimezoneOptions","promises","getMediaDefaultFolderId","then","catch","all","loadLanguages","_this2","_this3","localeFactory","Application","getContainer","locale","registeredLocales","Array","from","getLocaleRegistry","keys","languageCriteria","addAssociation","addSorting","sort","addFilter","equalsAny","search","result","localeIds","fallbackId","forEach","lang","customLabel","concat","translated","territory","push","localeId","code","Context","app","fallbackLocale","includes","loadTimezones","_this4","_asyncToGenerator","_regeneratorRuntime","mark","_callee","routeUser","wrap","_context","prev","next","$route","params","abrupt","userService","getUser","sent","stop","saveFinish","_this5","_callee2","_context2","onSave","checkEmail","passwordCheck","checkPassword","saveUserSearchPreferences","createErrorMessage","$tc","length","password","errorMessage","createNotificationError","message","saveUser","context","_this6","changes","getSyncChangeset","changeset","updateUser","_callee3","_context3","updateCurrentUser","setLocaleWithId","error","_this6$user","dispatch","expression","Classes","ShopwareError","response","errors","api","authToken","access","save","_callee4","_context4","loginService","loginByUsername","handleUserSaveError","finally","_ref3","_this7","avatarId","onDropMedia","mediaItem","onSubmitConfirmPassword","onCloseConfirmPasswordModal","onUnlinkAvatar","openMediaModal","onChangeNewPassword","onChangeNewPasswordConfirm","onMediaSelectionChange","_ref4","mediaEntity","_slicedToArray","mediaDefaultFolderService","getDefaultFolderId","_this$userSearchPrefe","_this8","searchPreferencesService","createUserSearchPreferences","value","map","_ref6","entityName","_searchable","fields","_defineProperty","processSearchPreferencesFields","searchRankingService","clearCacheUserSearchConfiguration","userConfigService","upsert","KEY_USER_SEARCH_PREFERENCE","onVerifyPasswordFinished"],"mappings":"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","file":"static/js/c67a5be282640fe83065.js","sourcesContent":["/**\n * @package system-settings\n */\n// eslint-disable-next-line sw-deprecation-rules/private-feature-declarations\nexport default {\n    namespaced: true,\n\n    state() {\n        return {\n            searchPreferences: [],\n            userSearchPreferences: null,\n        };\n    },\n\n    mutations: {\n        setSearchPreferences(state, searchPreferences) {\n            state.searchPreferences = searchPreferences;\n        },\n        setUserSearchPreferences(state, userSearchPreferences) {\n            state.userSearchPreferences = userSearchPreferences;\n        },\n    },\n};\n","/**\n * @package system-settings\n */\nimport { email } from 'src/core/service/validation.service';\nimport { KEY_USER_SEARCH_PREFERENCE } from 'src/app/service/search-ranking.service';\nimport template from './sw-profile-index.html.twig';\nimport swProfileState from '../../state/sw-profile.state';\n\nconst { Component, Mixin, State } = Shopware;\nconst { Criteria } = Shopware.Data;\nconst { mapState, mapPropertyErrors } = Component.getComponentHelper();\n\n// eslint-disable-next-line sw-deprecation-rules/private-feature-declarations\nexport default {\n    template,\n\n    inject: [\n        'userService',\n        'loginService',\n        'mediaDefaultFolderService',\n        'repositoryFactory',\n        'acl',\n        'searchPreferencesService',\n        'searchRankingService',\n        'userConfigService',\n    ],\n\n    mixins: [\n        Mixin.getByName('notification'),\n    ],\n\n    data() {\n        return {\n            user: { username: '', email: '' },\n            languages: [],\n            imageSize: 140,\n            newPassword: null,\n            newPasswordConfirm: null,\n            confirmPassword: null,\n            avatarMediaItem: null,\n            uploadTag: 'sw-profile-upload-tag',\n            isLoading: false,\n            isUserLoading: true,\n            isSaveSuccessful: false,\n            confirmPasswordModal: false,\n            mediaDefaultFolderId: null,\n            showMediaModal: false,\n            timezoneOptions: [],\n        };\n    },\n\n    metaInfo() {\n        return {\n            title: this.$createTitle(),\n        };\n    },\n\n    computed: {\n        ...mapState('swProfile', [\n            'searchPreferences',\n        ]),\n\n        ...mapPropertyErrors('user', [\n            'email',\n            'timeZone',\n        ]),\n\n        userSearchPreferences: {\n            get() {\n                return State.get('swProfile').userSearchPreferences;\n            },\n            set(userSearchPreferences) {\n                State.commit('swProfile/setUserSearchPreferences', userSearchPreferences);\n            },\n        },\n\n        isDisabled() {\n            return true; // TODO use ACL here with NEXT-1653\n        },\n\n        userRepository() {\n            return this.repositoryFactory.create('user');\n        },\n\n        languageRepository() {\n            return this.repositoryFactory.create('language');\n        },\n\n        localeRepository() {\n            return this.repositoryFactory.create('locale');\n        },\n\n        mediaRepository() {\n            return this.repositoryFactory.create('media');\n        },\n\n        userMediaCriteria() {\n            if (this.user.id) {\n                // ???\n                // ToDo: If SwSidebarMedia has the new data handling, change this too\n                // return CriteriaFactory.equals('userId', this.user.id);\n                return null;\n            }\n\n            return null;\n        },\n\n        languageId() {\n            return Shopware.State.get('session').languageId;\n        },\n    },\n\n    watch: {\n        '$route'(newValue) {\n            if (!newValue || newValue.name === 'sw.profile.index.searchPreferences') {\n                return;\n            }\n\n            this.resetGeneralData();\n        },\n\n        'user.avatarMedia.id'() {\n            if (!this.user.avatarMedia?.id) {\n                return;\n            }\n\n            if (!this.acl.can('media.creator')) {\n                return;\n            }\n\n            this.setMediaItem({ targetId: this.user.avatarMedia.id });\n        },\n\n        languageId() {\n            this.createdComponent();\n        },\n    },\n\n    beforeCreate() {\n        State.registerModule('swProfile', swProfileState);\n    },\n\n    created() {\n        this.createdComponent();\n    },\n\n    beforeMount() {\n        this.beforeMountComponent();\n    },\n\n    beforeDestroy() {\n        State.unregisterModule('swProfile');\n    },\n\n    methods: {\n        createdComponent() {\n            this.isUserLoading = true;\n\n            const languagePromise = new Promise((resolve) => {\n                resolve(this.languageId);\n            });\n\n            this.userPromise = this.getUserData();\n            this.timezoneOptions = Shopware.Service('timezoneService').getTimezoneOptions();\n\n            const promises = [\n                languagePromise,\n                this.userPromise,\n            ];\n\n            if (this.acl.can('media.creator')) {\n                this.getMediaDefaultFolderId()\n                    .then((id) => {\n                        this.mediaDefaultFolderId = id;\n                    })\n                    .catch(() => {\n                        this.mediaDefaultFolderId = null;\n                    });\n            }\n\n            Promise.all(promises).then(() => {\n                this.loadLanguages();\n            }).then(() => {\n                this.isUserLoading = false;\n            });\n        },\n\n        beforeMountComponent() {\n            this.userPromise.then((user) => {\n                this.user = user;\n            });\n        },\n\n        loadLanguages() {\n            const factoryContainer = Shopware.Application.getContainer('factory');\n            const localeFactory = factoryContainer.locale;\n            const registeredLocales = Array.from(localeFactory.getLocaleRegistry().keys());\n\n            const languageCriteria = new Criteria(1, 500);\n            languageCriteria.addAssociation('locale');\n            languageCriteria.addSorting(Criteria.sort('locale.name', 'ASC'));\n            languageCriteria.addSorting(Criteria.sort('locale.territory', 'ASC'));\n            languageCriteria.addFilter(Criteria.equalsAny('locale.code', registeredLocales));\n\n            return this.languageRepository.search(languageCriteria).then((result) => {\n                this.languages = [];\n                const localeIds = [];\n                let fallbackId = '';\n\n                result.forEach((lang) => {\n                    lang.customLabel = `${lang.locale.translated.name} (${lang.locale.translated.territory})`;\n                    this.languages.push(lang);\n\n                    localeIds.push(lang.localeId);\n                    if (lang.locale.code === Shopware.Context.app.fallbackLocale) {\n                        fallbackId = lang.localeId;\n                    }\n                });\n\n                if (!localeIds.includes(this.user.localeId)) {\n                    this.user.localeId = fallbackId;\n                }\n                this.isUserLoading = false;\n\n                return this.languages;\n            });\n        },\n\n        // @deprecated tag:v6.6.0 - Unused\n        loadTimezones() {\n        },\n\n        async getUserData() {\n            const routeUser = this.$route.params.user;\n            if (routeUser) {\n                return this.userRepository.get(routeUser.id);\n            }\n\n            const user = await this.userService.getUser();\n            return this.userRepository.get(user.data.id);\n        },\n\n        resetGeneralData() {\n            this.newPassword = null;\n            this.newPasswordConfirm = null;\n\n            this.createdComponent();\n            this.beforeMountComponent();\n        },\n\n        async saveFinish() {\n            this.isSaveSuccessful = false;\n            this.user = await this.getUserData();\n        },\n\n        onSave() {\n            if (this.$route.name === 'sw.profile.index.searchPreferences') {\n                this.saveUserSearchPreferences();\n\n                return;\n            }\n\n            if (this.checkEmail() === false) {\n                return;\n            }\n\n            const passwordCheck = this.checkPassword();\n\n            if (passwordCheck === null || passwordCheck === true) {\n                this.confirmPasswordModal = true;\n            }\n        },\n\n        checkEmail() {\n            if (!this.user.email || !email(this.user.email)) {\n                this.createErrorMessage(this.$tc('sw-profile.index.notificationInvalidEmailErrorMessage'));\n\n                return false;\n            }\n            return true;\n        },\n\n        checkPassword() {\n            if (this.newPassword && this.newPassword.length > 0) {\n                if (this.newPassword !== this.newPasswordConfirm) {\n                    this.createErrorMessage(this.$tc('sw-profile.index.notificationPasswordErrorMessage'));\n                    return false;\n                }\n\n                this.user.password = this.newPassword;\n\n                return true;\n            }\n\n            return null;\n        },\n\n        createErrorMessage(errorMessage) {\n            this.createNotificationError({\n                message: errorMessage,\n            });\n        },\n\n        saveUser(context) {\n            if (!this.acl.can('user:editor')) {\n                const changes = this.userRepository.getSyncChangeset([this.user]);\n                delete changes.changeset[0].changes.id;\n\n                this.userService.updateUser(changes.changeset[0].changes).then(async () => {\n                    await this.updateCurrentUser();\n\n                    this.isLoading = false;\n                    this.isSaveSuccessful = true;\n\n                    Shopware.Service('localeHelper').setLocaleWithId(this.user.localeId);\n                }).catch((error) => {\n                    State.dispatch('error/addApiError', {\n                        expression: `user.${this.user?.id}.password`,\n                        error: new Shopware.Classes.ShopwareError(error.response.data.errors[0]),\n                    });\n                    this.createNotificationError({\n                        message: this.$tc('sw-profile.index.notificationSaveErrorMessage'),\n                    });\n                    this.isLoading = false;\n                    this.isSaveSuccessful = false;\n                });\n\n                return;\n            }\n\n            /**\n             * @deprecated tag:v6.6.0 - the \"if\" block will be removed\n             */\n            if (typeof context === 'string') {\n                context = { ...Shopware.Context.api };\n                context.authToken.access = context;\n            }\n\n            this.userRepository.save(this.user, context).then(async () => {\n                await this.updateCurrentUser();\n                Shopware.Service('localeHelper').setLocaleWithId(this.user.localeId);\n\n                if (this.newPassword) {\n                    // re-issue a valid jwt token, as all user tokens were invalidated on password change\n                    this.loginService.loginByUsername(this.user.username, this.newPassword).then(() => {\n                        this.isSaveSuccessful = true;\n                    }).catch(() => {\n                        this.handleUserSaveError();\n                    }).finally(() => {\n                        this.isLoading = false;\n                    });\n                } else {\n                    this.isLoading = false;\n                    this.isSaveSuccessful = true;\n                }\n\n                this.confirmPassword = '';\n                this.newPassword = '';\n                this.newPasswordConfirm = '';\n            }).catch(() => {\n                this.handleUserSaveError();\n                this.isLoading = false;\n                this.isSaveSuccessful = false;\n            });\n        },\n\n        updateCurrentUser() {\n            return this.userService.getUser().then((response) => {\n                const data = response.data;\n                delete data.password;\n\n                return Shopware.State.commit('setCurrentUser', data);\n            });\n        },\n\n        setMediaItem({ targetId }) {\n            this.mediaRepository.get(targetId).then((response) => {\n                this.avatarMediaItem = response;\n            });\n            this.user.avatarId = targetId;\n        },\n\n        onDropMedia(mediaItem) {\n            this.setMediaItem({ targetId: mediaItem.id });\n        },\n\n        // @deprecated tag:v6.6.0 - Unused\n        onSubmitConfirmPassword() {\n        },\n\n        onCloseConfirmPasswordModal() {\n            this.confirmPassword = '';\n            this.confirmPasswordModal = false;\n        },\n\n        onUnlinkAvatar() {\n            this.avatarMediaItem = null;\n            this.user.avatarId = null;\n        },\n\n        openMediaModal() {\n            this.showMediaModal = true;\n        },\n\n        handleUserSaveError() {\n            if (this.$route.name.includes('sw.profile.index')) {\n                this.createNotificationError({\n                    message: this.$tc('sw-profile.index.notificationSaveErrorMessage'),\n                });\n            }\n            this.isLoading = false;\n        },\n\n        onChangeNewPassword(newPassword) {\n            this.newPassword = newPassword;\n        },\n\n        onChangeNewPasswordConfirm(newPasswordConfirm) {\n            this.newPasswordConfirm = newPasswordConfirm;\n        },\n\n        onMediaSelectionChange([mediaEntity]) {\n            this.avatarMediaItem = mediaEntity;\n            this.user.avatarId = mediaEntity.id;\n        },\n\n        getMediaDefaultFolderId() {\n            return this.mediaDefaultFolderService.getDefaultFolderId('user');\n        },\n\n        saveUserSearchPreferences() {\n            // eslint-disable-next-line max-len\n            this.userSearchPreferences = this.userSearchPreferences ?? this.searchPreferencesService.createUserSearchPreferences();\n            this.userSearchPreferences.value = this.searchPreferences.map(({ entityName, _searchable, fields }) => {\n                return {\n                    [entityName]: {\n                        _searchable,\n                        ...this.searchPreferencesService.processSearchPreferencesFields(fields),\n                    },\n                };\n            });\n\n            this.searchRankingService.clearCacheUserSearchConfiguration();\n\n            this.isLoading = true;\n            this.isSaveSuccessful = false;\n            return this.userConfigService.upsert({ [KEY_USER_SEARCH_PREFERENCE]: this.userSearchPreferences.value })\n                .then(() => {\n                    this.isLoading = false;\n                    this.isSaveSuccessful = true;\n                })\n                .catch((error) => {\n                    this.isLoading = false;\n                    this.isSaveSuccessful = false;\n                    this.createNotificationError({ message: error.message });\n                });\n        },\n\n        onVerifyPasswordFinished(context) {\n            this.confirmPasswordModal = false;\n            this.isSaveSuccessful = false;\n            this.isLoading = true;\n\n            this.saveUser(context);\n        },\n    },\n};\n","export default \"\\n{% block sw_profile_index %}\\n<sw-page class=\\\"sw-profile-index\\\">\\n    <template #smart-bar-back>\\n        \\n        {% block sw_profile_index_smart_bar_back %}\\n        <span></span>\\n        {% endblock %}\\n    </template>\\n\\n    <template #smart-bar-header>\\n        \\n        {% block sw_profile_index_headline %}\\n        <h2>{{ $tc('sw-profile.general.headlineProfile') }}</h2>\\n        {% endblock %}\\n    </template>\\n\\n    <template #smart-bar-actions>\\n        \\n        {% block sw_profile_index_actions %}\\n        <sw-button-process\\n            class=\\\"sw-profile__save-action\\\"\\n            variant=\\\"primary\\\"\\n            :is-loading=\\\"isLoading || isUserLoading\\\"\\n            :process-success=\\\"isSaveSuccessful\\\"\\n            :disabled=\\\"isLoading || isUserLoading || !acl.can('user.update_profile')\\\"\\n            {% if VUE3 %}\\n            @update:process-success=\\\"saveFinish\\\"\\n            {% else %}\\n            @process-finish=\\\"saveFinish\\\"\\n            {% endif %}\\n            @click.prevent=\\\"onSave\\\"\\n        >\\n            {{ $tc('sw-profile.index.buttonSaveLabel') }}\\n        </sw-button-process>\\n        {% endblock %}\\n    </template>\\n\\n    <template #content>\\n        <sw-card-view>\\n            \\n            {% block sw_profile_index_tabs %}\\n            <sw-tabs\\n                position-identifier=\\\"sw-profile-index\\\"\\n            >\\n                \\n                {% block sw_profile_index_tabs_item_general %}\\n                <sw-tabs-item\\n                    :route=\\\"{ name: 'sw.profile.index.general' }\\\"\\n                    :title=\\\"$tc('sw-profile.tabGeneral.title')\\\"\\n                >\\n                    {{ $tc('sw-profile.tabGeneral.title') }}\\n                </sw-tabs-item>\\n                {% endblock %}\\n\\n                \\n                {% block sw_profile_index_tabs_item_search_preferences %}\\n                <sw-tabs-item\\n                    :route=\\\"{ name: 'sw.profile.index.searchPreferences' }\\\"\\n                    :title=\\\"$tc('sw-profile.tabSearchPreferences.title')\\\"\\n                >\\n                    {{ $tc('sw-profile.tabSearchPreferences.title') }}\\n                </sw-tabs-item>\\n                {% endblock %}\\n            </sw-tabs>\\n            {% endblock %}\\n\\n            \\n            {% block sw_profile_index_router_view %}\\n            <template v-if=\\\"isUserLoading\\\">\\n                <sw-skeleton />\\n                <sw-skeleton />\\n            </template>\\n\\n            <template v-else>\\n                {% if VUE3 %}\\n                <router-view\\n                    v-slot=\\\"{ Component }\\\"\\n                >\\n                    <component\\n                        :is=\\\"Component\\\"\\n                        v-bind=\\\"{\\n                            user,\\n                            timezoneOptions,\\n                            languages,\\n                            newPassword,\\n                            newPasswordConfirm,\\n                            avatarMediaItem,\\n                            isUserLoading,\\n                            languageId,\\n                            isDisabled,\\n                            userRepository,\\n                        }\\\"\\n                        @new-password-change=\\\"onChangeNewPassword\\\"\\n                        @new-password-confirm-change=\\\"onChangeNewPasswordConfirm\\\"\\n                        @media-upload=\\\"setMediaItem\\\"\\n                        @media-remove=\\\"onUnlinkAvatar\\\"\\n                        @media-open=\\\"openMediaModal\\\"\\n                    />\\n                </router-view>\\n                {% else %}\\n                <router-view\\n                    v-bind=\\\"{\\n                        user,\\n                        timezoneOptions,\\n                        languages,\\n                        newPassword,\\n                        newPasswordConfirm,\\n                        avatarMediaItem,\\n                        isUserLoading,\\n                        languageId,\\n                        isDisabled,\\n                        userRepository,\\n                    }\\\"\\n                    @new-password-change=\\\"onChangeNewPassword\\\"\\n                    @new-password-confirm-change=\\\"onChangeNewPasswordConfirm\\\"\\n                    @media-upload=\\\"setMediaItem\\\"\\n                    @media-remove=\\\"onUnlinkAvatar\\\"\\n                    @media-open=\\\"openMediaModal\\\"\\n                />\\n                {% endif %}\\n            </template>\\n            {% endblock %}\\n        </sw-card-view>\\n\\n        \\n        {% block sw_profile_index_content_confirm_password_modal %}\\n        <sw-verify-user-modal\\n            v-if=\\\"confirmPasswordModal\\\"\\n            @verified=\\\"onVerifyPasswordFinished\\\"\\n            @close=\\\"onCloseConfirmPasswordModal\\\"\\n        />\\n\\n        {# @deprecated tag:v6.6.0 - will be removed #}\\n        \\n        {% block sw_profile_index_content_confirm_password_modal_input__confirm_password %}\\n        {% endblock %}\\n\\n        {# @deprecated tag:v6.6.0 - will be removed #}\\n        \\n        {% block sw_profile_index_content_confirm_password_modal_footer %}\\n        {% endblock %}\\n\\n        {# @deprecated tag:v6.6.0 - will be removed #}\\n        \\n        {% block sw_profile_index_content_confirm_password_modal_actions_cancel %}\\n        {% endblock %}\\n\\n        {# @deprecated tag:v6.6.0 - will be removed #}\\n        \\n        {% block sw_profile_index_content_confirm_password_modal_actions_change %}\\n        {% endblock %}\\n\\n        {% endblock %}\\n\\n        \\n        {% block sw_profile_index_media_upload_actions_media_modal %}\\n        <sw-media-modal-v2\\n            v-if=\\\"showMediaModal\\\"\\n            :allow-multi-select=\\\"false\\\"\\n            :initial-folder-id=\\\"mediaDefaultFolderId\\\"\\n            :entity-context=\\\"user.getEntityName()\\\"\\n            @modal-close=\\\"showMediaModal = false\\\"\\n            @media-modal-selection-change=\\\"onMediaSelectionChange\\\"\\n        />\\n        {% endblock %}\\n    </template>\\n</sw-page>\\n{% endblock %}\\n\";"],"sourceRoot":""}