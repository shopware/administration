{"version":3,"sources":["webpack:///./src/module/sw-order/view/sw-order-create-general/sw-order-create-general.html.twig","webpack:///./src/module/sw-order/view/sw-order-create-general/index.ts"],"names":["_Shopware","Shopware","Component","State","Mixin","Utils","get","format","array","wrapComponentConfig","template","mixins","getByName","data","isLoading","computed","customer","cart","currency","context","isCustomerActive","getters","cartDelivery","this","cartDeliveryDiscounts","slice","deliveries","taxStatus","shippingCostsDetail","_this","decorateCalcTaxes","sortByTaxRate","shippingCosts","calculatedTaxes","map","item","_this$currency$totalR","$tc","taxRate","tax","shortName","totalRounding","decimals","concat","join","filteredCalculatedTaxes","_this$cart$price$calc","price","filter","displayRounded","rawTotal","totalPrice","orderTotal","currencyFilter","Filter","created","createdComponent","methods","_this2","loadCart","finally","$nextTick","$router","push","name","onSaveItem","_this$customer","_this3","dispatch","salesChannelId","contextToken","token","onShippingChargeEdited","amount","_this$customer2","_this4","positiveAmount","Math","abs","unitPrice","catch","error","$emit","onRemoveItems","lineItemKeys","_this$customer3","_this5","then","forEach","key","removedTag","promotionCodes","find","tag","discountId","commit","_this$customer4","sort","prev","current"],"mappings":"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","file":"static/js/afbda216bb0d8da41bf4.js","sourcesContent":["export default \"<div class=\\\"sw-order-create-general\\\">\\n    <sw-card\\n        class=\\\"sw-order-create-general__general-info\\\"\\n        position-identifier=\\\"sw-order-create-general-info\\\"\\n        :title=\\\"$tc('sw-order.createBase.generalTab.labelGeneralInfoCard')\\\"\\n    >\\n        <sw-order-create-general-info\\n            :cart=\\\"cart\\\"\\n            :context=\\\"context\\\"\\n            :is-loading=\\\"isLoading\\\"\\n        />\\n    </sw-card>\\n\\n    <sw-extension-component-section\\n        position-identifier=\\\"sw-order-create-base-line-items__before\\\"\\n    />\\n\\n    <sw-card\\n        class=\\\"sw-order-create-general__line-items\\\"\\n        position-identifier=\\\"sw-order-create-line-items\\\"\\n        :is-loading=\\\"isLoading\\\"\\n        :title=\\\"$tc('sw-order.createBase.generalTab.labelLineItemsCard')\\\"\\n    >\\n        <template #grid>\\n            <sw-order-line-items-grid-sales-channel\\n                editable\\n                :cart=\\\"cart\\\"\\n                :currency=\\\"currency\\\"\\n                :sales-channel-id=\\\"context.salesChannel.id\\\"\\n                :is-loading=\\\"isLoading\\\"\\n                :is-customer-active=\\\"isCustomerActive\\\"\\n                @on-save-item=\\\"onSaveItem\\\"\\n                @on-remove-items=\\\"onRemoveItems\\\"\\n            />\\n\\n            <sw-card-section\\n                v-show=\\\"cart.lineItems.length\\\"\\n                divider=\\\"top\\\"\\n                slim\\n            >\\n\\n                <sw-container\\n                    class=\\\"sw-order-create-summary\\\"\\n                    columns=\\\"1fr 1fr\\\"\\n                >\\n                    <sw-description-list\\n                        class=\\\"sw-order-create-summary__data\\\"\\n                        grid=\\\"1fr 1fr\\\"\\n                    >\\n                        <dt>{{ $tc('sw-order.createBase.summaryLabelAmount') }}</dt>\\n                        <dd>{{ currencyFilter(cart.price ? cart.price.positionPrice : 0, currency.shortName, currency.totalRounding.decimals) }}</dd>\\n\\n                        <template v-if=\\\"cartDelivery\\\">\\n                            <dt>{{ $tc('sw-order.createBase.summaryLabelShippingCosts') }}</dt>\\n                            <dd>\\n                                <sw-order-saveable-field\\n                                    v-tooltip=\\\"{\\n                                        showDelay: 300,\\n                                        message: shippingCostsDetail,\\n                                        disabled: taxStatus === 'tax-free'\\n                                    }\\\"\\n                                    type=\\\"number\\\"\\n                                    editable\\n                                    :value=\\\"cartDelivery.shippingCosts.totalPrice\\\"\\n                                    @value-change=\\\"onShippingChargeEdited\\\"\\n                                >\\n                                    {{ currencyFilter(cartDelivery.shippingCosts.totalPrice, currency.shortName, currency.totalRounding.decimals) }}\\n                                </sw-order-saveable-field>\\n                            </dd>\\n                        </template>\\n\\n                        <template\\n                            v-for=\\\"(delivery, index) in cartDeliveryDiscounts\\\"\\n                            {% if VUE3 %}\\n                            :key=\\\"index\\\"\\n                            {% endif %}\\n                        >\\n                            <dt\\n                                {% if VUE2 %}\\n                                :key=\\\"`dt-delivery-${index}`\\\"\\n                                {% endif %}\\n                            >\\n                                {{ $tc('sw-order.createBase.discountLabelShippingCosts') }}\\n                            </dt>\\n                            <dd\\n                                {% if VUE2 %}\\n                                :key=\\\"`dd-delivery-${index}`\\\"\\n                                {% endif %}\\n                            >\\n                                {{ currencyFilter(delivery.shippingCosts.totalPrice, currency.shortName, currency.totalRounding.decimals) }}\\n                            </dd>\\n                        </template>\\n\\n                        <template v-if=\\\"taxStatus !== 'tax-free'\\\">\\n                            <dt><strong>{{ $tc('sw-order.createBase.summaryLabelAmountWithoutTaxes') }}</strong></dt>\\n                            <dd>\\n                                <strong>{{ currencyFilter(cart.price ? cart.price.netPrice : 0, currency.shortName, currency.totalRounding.decimals) }}</strong>\\n                            </dd>\\n                        </template>\\n\\n                        <template v-if=\\\"taxStatus !== 'tax-free'\\\">\\n                            <template\\n                                v-for=\\\"(calculatedTax, index) in filteredCalculatedTaxes\\\"\\n                                {% if VUE3 %}\\n                                :key=\\\"index\\\"\\n                                {% endif %}\\n                            >\\n                                <dt\\n                                    {% if VUE2 %}\\n                                    :key=\\\"`dt-${index}`\\\"\\n                                    {% endif %}\\n                                >\\n                                    {{ $tc('sw-order.createBase.summaryLabelTaxes', 1, { taxRate: calculatedTax.taxRate }) }}\\n                                </dt>\\n                                <dd\\n                                    {% if VUE2 %}\\n                                    :key=\\\"`dd-${index}`\\\"\\n                                    {% endif %}\\n                                >\\n                                    {{ currencyFilter(calculatedTax.tax, currency.shortName, currency.totalRounding.decimals) }}\\n                                </dd>\\n                            </template>\\n                        </template>\\n\\n                        <template v-if=\\\"taxStatus !== 'tax-free'\\\">\\n                            <dt><strong>{{ $tc('sw-order.createBase.summaryLabelAmountTotal') }}</strong></dt>\\n                            <dd>\\n                                <strong>{{ currencyFilter(orderTotal, currency.shortName, currency.totalRounding.decimals) }}</strong>\\n                            </dd>\\n                            <template v-if=\\\"displayRounded\\\">\\n                                <dt><strong>{{ $tc('sw-order.createBase.summaryLabelAmountTotalRounded') }}</strong>\\n                                </dt>\\n                                <dd>\\n                                    <strong>{{ currencyFilter(cart.price ? cart.price.totalPrice : 0, currency.shortName, currency.totalRounding.decimals) }}</strong>\\n                                </dd>\\n                            </template>\\n                        </template>\\n\\n                        <template v-if=\\\"taxStatus === 'tax-free'\\\">\\n                            <dt><strong>{{ $tc('sw-order.detailBase.summaryLabelAmount') }}</strong></dt>\\n                            <dd>\\n                                <strong>{{ currencyFilter(cart.price ? cart.price.totalPrice : 0, currency.shortName, currency.totalRounding.decimals) }}</strong>\\n                            </dd>\\n                        </template>\\n                    </sw-description-list>\\n                </sw-container>\\n            </sw-card-section>\\n        </template>\\n    </sw-card>\\n\\n    <sw-extension-component-section\\n        position-identifier=\\\"sw-order-create-base-line-items__after\\\"\\n    />\\n</div>\\n\";","import type { Entity } from '@shopware-ag/admin-extension-sdk/es/data/_internals/Entity';\nimport template from './sw-order-create-general.html.twig';\nimport type {\n    CalculatedTax,\n    CartDelivery,\n    LineItem,\n    Cart,\n    PromotionCodeTag,\n    SalesChannelContext,\n} from '../../order.types';\n\n/**\n * @package checkout\n */\n\nconst { Component, State, Mixin, Utils } = Shopware;\nconst { get, format, array } = Utils;\n\n// eslint-disable-next-line sw-deprecation-rules/private-feature-declarations\nexport default Component.wrapComponentConfig({\n    template,\n\n    mixins: [\n        Mixin.getByName('notification'),\n        Mixin.getByName('cart-notification'),\n    ],\n\n    data(): {\n        isLoading: boolean,\n        } {\n        return {\n            isLoading: false,\n        };\n    },\n\n    computed: {\n        customer(): Entity<'customer'> | null {\n            return State.get('swOrder').customer;\n        },\n\n        cart(): Cart {\n            return State.get('swOrder').cart;\n        },\n\n        currency(): Entity<'currency'> {\n            return State.get('swOrder').context.currency;\n        },\n\n        context(): SalesChannelContext {\n            return State.get('swOrder').context;\n        },\n\n        isCustomerActive(): boolean {\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n            return State.getters['swOrder/isCustomerActive'] as boolean;\n        },\n\n        cartDelivery(): CartDelivery {\n            return get(this.cart, 'deliveries[0]', null) as CartDelivery;\n        },\n\n        cartDeliveryDiscounts(): CartDelivery[] {\n            return array.slice(this.cart.deliveries, 1) || [];\n        },\n\n        taxStatus(): string {\n            return get(this.cart, 'price.taxStatus', '');\n        },\n\n        shippingCostsDetail(): string | null {\n            if (!this.cartDelivery) {\n                return null;\n            }\n\n            const calcTaxes = this.sortByTaxRate(this.cartDelivery.shippingCosts.calculatedTaxes);\n            const decorateCalcTaxes = calcTaxes.map((item: CalculatedTax) => {\n                return this.$tc('sw-order.createBase.shippingCostsTax', 0, {\n                    taxRate: item.taxRate,\n                    tax: format.currency(\n                        item.tax,\n                        this.currency.shortName,\n                        // eslint-disable-next-line max-len\n                        // eslint-disable-next-line @typescript-eslint/no-unsafe-argument,@typescript-eslint/no-unsafe-member-access,@typescript-eslint/no-explicit-any\n                        (this.currency.totalRounding as any)?.decimals,\n                    ),\n                });\n            });\n\n            return `${this.$tc('sw-order.createBase.tax')}<br>${decorateCalcTaxes.join('<br>')}`;\n        },\n\n        filteredCalculatedTaxes(): CalculatedTax[] {\n            if (!this.cart.price || !this.cart.price.calculatedTaxes) {\n                return [];\n            }\n\n            return this.sortByTaxRate(this.cart.price.calculatedTaxes ?? [])\n                .filter((price: CalculatedTax) => price.tax !== 0);\n        },\n\n        displayRounded(): boolean {\n            if (!this.cart.price) {\n                return false;\n            }\n\n            return this.cart.price.rawTotal !== this.cart.price.totalPrice;\n        },\n\n        orderTotal(): number {\n            if (!this.cart.price) {\n                return 0;\n            }\n\n            if (this.displayRounded) {\n                return this.cart.price.rawTotal;\n            }\n\n            return this.cart.price.totalPrice;\n        },\n\n        currencyFilter() {\n            return Shopware.Filter.getByName('currency');\n        },\n    },\n\n    created(): void {\n        this.createdComponent();\n    },\n\n    methods: {\n        createdComponent(): void {\n            if (!this.customer) {\n                this.$nextTick(() => {\n                    void this.$router.push({ name: 'sw.order.create.initial' });\n                });\n\n                return;\n            }\n\n            this.isLoading = true;\n\n            this.loadCart().finally(() => {\n                this.isLoading = false;\n            });\n        },\n\n        onSaveItem(item: LineItem): Promise<void> {\n            this.isLoading = true;\n\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n            return State.dispatch('swOrder/saveLineItem', {\n                salesChannelId: this.customer?.salesChannelId,\n                contextToken: this.cart.token,\n                item,\n            }).finally(() => {\n                this.isLoading = false;\n            });\n        },\n\n        onShippingChargeEdited(amount: number): void {\n            const positiveAmount = Math.abs(amount);\n            this.cartDelivery.shippingCosts.unitPrice = positiveAmount;\n            this.cartDelivery.shippingCosts.totalPrice = positiveAmount;\n            this.isLoading = true;\n\n            State.dispatch('swOrder/modifyShippingCosts', {\n                salesChannelId: this.customer?.salesChannelId,\n                contextToken: this.cart.token,\n                shippingCosts: this.cartDelivery.shippingCosts,\n            }).catch((error) => {\n                this.$emit('error', error);\n            }).finally(() => {\n                this.isLoading = false;\n            });\n        },\n\n        onRemoveItems(lineItemKeys: string[]): Promise<void> {\n            this.isLoading = true;\n\n            return State.dispatch('swOrder/removeLineItems', {\n                salesChannelId: this.customer?.salesChannelId,\n                contextToken: this.cart.token,\n                lineItemKeys: lineItemKeys,\n            })\n                .then(() => {\n                    // Remove promotion code tag if corresponding line item removed\n                    lineItemKeys.forEach(key => {\n                        const removedTag = State.get('swOrder').promotionCodes\n                            .find((tag: PromotionCodeTag) => tag.discountId === key);\n\n                        if (removedTag) {\n                            State.commit('swOrder/setPromotionCodes', State.get('swOrder').promotionCodes\n                                .filter((item: PromotionCodeTag) => {\n                                    return item.discountId !== removedTag.discountId;\n                                }));\n                        }\n                    });\n                }).finally(() => {\n                    this.isLoading = false;\n                });\n        },\n\n        loadCart(): Promise<void> {\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n            return State.dispatch('swOrder/getCart', {\n                salesChannelId: this.customer?.salesChannelId,\n                contextToken: this.cart.token,\n            });\n        },\n\n        sortByTaxRate(price: Array<CalculatedTax>): Array<CalculatedTax> {\n            return price.sort((prev: CalculatedTax, current: CalculatedTax) => {\n                return prev.taxRate - current.taxRate;\n            });\n        },\n    },\n});\n"],"sourceRoot":""}