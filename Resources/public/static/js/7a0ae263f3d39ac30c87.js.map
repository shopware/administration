{"version":3,"sources":["webpack:///./src/module/sw-settings/component/sw-system-config/index.js","webpack:///./src/module/sw-settings/component/sw-system-config/sw-system-config.html.twig","webpack:///./src/module/sw-settings/component/sw-system-config/sw-system-config.scss"],"names":["Mixin","Shopware","_Shopware$Utils","Utils","object","kebabCase","string","mapSystemConfigErrors","Component","getComponentHelper","template","inject","mixins","getByName","props","domain","required","type","String","salesChannelId","default","salesChannelSwitchable","Boolean","inherit","data","currentSalesChannelId","this","isLoading","config","actualConfigData","salesChannelModel","hasCssFields","computed","isNotDefaultSalesChannel","typesWithMapInheritanceSupport","watch","handler","emitConfig","deep","value","$emit","created","createdComponent","methods","getFieldError","fieldName","ErrorResolverSystemConfig","ENTITY_NAME","_this","_asyncToGenerator","_regeneratorRuntime","mark","_callee","_error$response","_error$response$data","wrap","_context","prev","next","readConfig","readAll","t0","response","errors","createErrorNotification","finish","stop","_this2","_callee2","_context2","systemConfigApiService","getConfig","sent","every","card","elements","field","_field$config","css","hasOwnProperty","Promise","resolve","loadCurrentSalesChannelConfig","_this3","_callee3","values","_context3","getValues","$set","saveAll","_this4","batchSave","finally","message","concat","$tc","length","forEach","error","detail","createNotificationError","autoClose","onSalesChannelChanged","hasMapInheritanceSupport","element","componentName","undefined","includes","getElementBind","mapInheritance","bind","deepCopyObject","label","helpText","labelProperty","valueProperty","getInheritWrapperBind","getInlineSnippet","getInheritedValue","_element$config","null","name","content","__esModule","module","i","locals","exports","add"],"mappings":"iNAOQA,G,UAAUC,SAAVD,OACRE,EAA0CD,SAASE,MAA3CC,EAAMF,EAANE,OAAkBC,EAASH,EAAnBI,OAAUD,UAClBE,EAA0BN,SAASO,UAAUC,qBAA7CF,sBAGO,WACXG,SCbW,2nHDeXC,OAAQ,CAAC,0BAETC,OAAQ,CACJZ,EAAMa,UAAU,gBAChBb,EAAMa,UAAU,sBAGpBC,MAAO,CACHC,OAAQ,CACJC,UAAU,EACVC,KAAMC,QAEVC,eAAgB,CACZH,UAAU,EACVC,KAAMC,OACNE,QAAS,MAEbC,uBAAwB,CACpBJ,KAAMK,QACNN,UAAU,EACVI,SAAS,GAGbG,QAAS,CACLN,KAAMK,QACNN,UAAU,EAGVI,SAAS,IAIjBI,KAAI,WACA,MAAO,CACHC,sBAAuBC,KAAKP,eAC5BQ,WAAW,EACXC,OAAQ,GACRC,iBAAkB,GAClBC,kBAAmB,KACnBC,cAAc,IAItBC,SAAU,CACNC,yBAAwB,WACpB,OAAsC,OAA/BP,KAAKD,uBAGhBS,+BAA8B,WAC1B,MAAO,CACH,OACA,WACA,MACA,WACA,MACA,QACA,OACA,WACA,iBAKZC,MAAO,CACHN,iBAAkB,CACdO,QAAO,WACHV,KAAKW,cAETC,MAAM,GAGVX,UAAS,SAACY,GACNb,KAAKc,MAAM,kBAAmBD,KAItCE,QAAO,WACHf,KAAKgB,oBAGTC,QAAS,CACLC,cAAa,SAACC,GACV,OAAOtC,EAAsBuC,IAA0BC,YAAarB,KAAKP,eAAgB0B,IAGvFH,iBAAgB,WAAI,IAADM,EAAA,YAAAC,IAAAC,IAAAC,MAAA,SAAAC,IAAA,IAAAC,EAAAC,EAAA,OAAAJ,IAAAK,MAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OACC,OAAtBV,EAAKrB,WAAY,EAAK6B,EAAAC,KAAA,EAAAD,EAAAE,KAAA,EAEZV,EAAKW,aAAa,KAAD,SAAAH,EAAAE,KAAA,EACjBV,EAAKY,UAAU,KAAD,EAAAJ,EAAAE,KAAA,gBAAAF,EAAAC,KAAA,EAAAD,EAAAK,GAAAL,EAAA,SAEpB,OAAAA,EAAAK,SAAA,IAAAL,EAAAK,IAAmB,QAAnBR,EAAIG,EAAAK,GAAOC,gBAAQ,IAAAT,GAAM,QAANC,EAAfD,EAAiB7B,YAAI,IAAA8B,GAArBA,EAAuBS,QACvBf,EAAKgB,wBAAwBR,EAAAK,GAAMC,SAAStC,KAAKuC,QACpD,QAEsB,OAFtBP,EAAAC,KAAA,GAEDT,EAAKrB,WAAY,EAAM6B,EAAAS,OAAA,6BAAAT,EAAAU,UAAAd,EAAA,uBAVNH,IAanBU,WAAU,WAAI,IAADQ,EAAA,YAAAlB,IAAAC,IAAAC,MAAA,SAAAiB,IAAA,OAAAlB,IAAAK,MAAA,SAAAc,GAAA,cAAAA,EAAAZ,KAAAY,EAAAX,MAAA,cAAAW,EAAAX,KAAA,EACKS,EAAKG,uBAAuBC,UAAUJ,EAAKpD,QAAQ,KAAD,EAAtEoD,EAAKvC,OAAMyC,EAAAG,KACXL,EAAKvC,OAAO6C,OAAM,SAACC,GACf,OAAOA,aAAI,EAAJA,EAAMC,SAASF,OAAM,SAACG,GAAW,IAADC,EACnC,OAAID,SAAa,QAARC,EAALD,EAAOhD,cAAM,IAAAiD,IAAbA,EAAeC,MACfX,EAAKpC,cAAe,GACb,SAIhB,wBAAAsC,EAAAH,UAAAE,MAVYnB,IAYnBW,QAAO,WAGH,OAFAlC,KAAKC,WAAY,EAEbD,KAAKG,iBAAiBkD,eAAerD,KAAKD,wBAC1CC,KAAKC,WAAY,EACVqD,QAAQC,WAGZvD,KAAKwD,iCAEVA,8BAA6B,WAAI,IAADC,EAAA,YAAAlC,IAAAC,IAAAC,MAAA,SAAAiC,IAAA,IAAAC,EAAA,OAAAnC,IAAAK,MAAA,SAAA+B,GAAA,cAAAA,EAAA7B,KAAA6B,EAAA5B,MAAA,OACZ,OAAtByB,EAAKxD,WAAY,EAAK2D,EAAA7B,KAAA,EAAA6B,EAAA5B,KAAA,EAGGyB,EAAKb,uBAAuBiB,UAAUJ,EAAKpE,OAAQoE,EAAK1D,uBAAuB,KAAD,EAA7F4D,EAAMC,EAAAd,KAEZW,EAAKK,KAAKL,EAAKtD,iBAAkBsD,EAAK1D,sBAAuB4D,GAAQ,OAE9C,OAF8CC,EAAA7B,KAAA,EAErE0B,EAAKxD,WAAY,EAAM2D,EAAArB,OAAA,2BAAAqB,EAAApB,UAAAkB,EAAA,oBAROnC,IAWtCwC,QAAO,WAAI,IAADC,EAAA,KAEN,OADAhE,KAAKC,WAAY,EACVD,KAAK4C,uBACPqB,UAAUjE,KAAKG,kBACf+D,SAAQ,WACLF,EAAK/D,WAAY,MAG7BqC,wBAAuB,SAACD,GACpB,IAAI8B,EAAO,QAAAC,OAAWpE,KAAKqE,IACvB,iDACAhC,EAAOiC,QACV,cAEDjC,EAAOkC,SAAQ,SAACC,GACZL,EAAO,GAAAC,OAAMD,EAAO,QAAAC,OAAOI,EAAMC,OAAM,YAE3CN,GAAW,QAEXnE,KAAK0E,wBAAwB,CACzBP,QAASA,EACTQ,WAAW,KAGnBC,sBAAqB,SAACnF,GAClBO,KAAKD,sBAAwBN,EAC7BO,KAAKkC,WAGT2C,yBAAwB,SAACC,GACrB,IAAMC,EAAgBD,EAAQ5E,OAAS4E,EAAQ5E,OAAO6E,mBAAgBC,EAEtE,MAAsB,oBAAlBD,GAAyD,qBAAlBA,GAIpC/E,KAAKQ,+BAA+ByE,SAASH,EAAQvF,OAGhE2F,eAAc,SAACJ,EAASK,GACpB,IAAMC,EAAO1G,EAAO2G,eAAeP,GAuBnC,OArBK9E,KAAK6E,yBAAyBC,GAI/BM,EAAKD,eAAiBA,UAHfC,EAAKlF,OAAOoF,aACZF,EAAKlF,OAAOqF,UAMnB,CAAC,gBAAiB,gBAAgBN,SAASG,EAAK7F,QAChD6F,EAAKlF,OAAOsF,cAAgB,OAC5BJ,EAAKlF,OAAOuF,cAAgB,MAGX,gBAAjBX,EAAQvF,OACR6F,EAAKlF,OAAO6E,cAAgB,kBAG5BK,EAAKlF,OAAOkD,UAAgC4B,IAAzBI,EAAKlF,OAAOqF,WAC/BH,EAAKlF,OAAOqF,SAAWvF,KAAKqE,IAAI,0CAA4CS,EAAQ5E,OAAOkD,KAGxFgC,GAGXM,sBAAqB,SAACZ,GAClB,OAAI9E,KAAK6E,yBAAyBC,GACvB,GAGJ,CACHQ,MAAOtF,KAAK2F,iBAAiBb,EAAQ5E,OAAOoF,OAC5CC,SAAUvF,KAAK2F,iBAAiBb,EAAQ5E,OAAOqF,YAIvDK,kBAAiB,SAACd,GAAU,IAADe,EACjBhF,EAAQb,KAAKG,iBAAiB2F,KAAKhB,EAAQiB,MAEjD,GAAIlF,EACA,OAAOA,EAGX,GAAkB,QAAlBgF,EAAIf,EAAQ5E,cAAM,IAAA2F,GAAdA,EAAgBd,eAGM,oBAFAD,EAAQ5E,OAAO6E,cAGjC,OAAO,EAIf,OAAQD,EAAQvF,MACZ,IAAK,OACL,IAAK,WACL,IAAK,gBACL,IAAK,cACL,IAAK,WACL,IAAK,MACL,IAAK,OACL,IAAK,WACL,IAAK,cACD,MAAO,GAGX,IAAK,eACD,MAAO,GAGX,IAAK,WACL,IAAK,OACD,OAAO,EAGX,IAAK,QACL,IAAK,MACD,OAAO,EAGX,QACI,OAAO,OAKnBoB,WAAU,WACNX,KAAKc,MAAM,iBAAkBd,KAAKG,iBAAiBH,KAAKD,yBAG5DpB,UAAS,SAACkC,GACN,OAAOlC,EAAUkC,O,qBEjR7B,IAAImF,EAAU,EAAQ,QACnBA,EAAQC,aAAYD,EAAUA,EAAQtG,SACnB,iBAAZsG,IAAsBA,EAAU,CAAC,CAACE,EAAOC,EAAIH,EAAS,MAC7DA,EAAQI,SAAQF,EAAOG,QAAUL,EAAQI,SAG/BE,EADH,EAAQ,QAAwE5G,SACzE,WAAYsG,GAAS,EAAM","file":"static/js/7a0ae263f3d39ac30c87.js","sourcesContent":["/**\n * @package services-settings\n */\nimport ErrorResolverSystemConfig from 'src/core/data/error-resolver.system-config.data';\nimport template from './sw-system-config.html.twig';\nimport './sw-system-config.scss';\n\nconst { Mixin } = Shopware;\nconst { object, string: { kebabCase } } = Shopware.Utils;\nconst { mapSystemConfigErrors } = Shopware.Component.getComponentHelper();\n\n// eslint-disable-next-line sw-deprecation-rules/private-feature-declarations\nexport default {\n    template,\n\n    inject: ['systemConfigApiService'],\n\n    mixins: [\n        Mixin.getByName('notification'),\n        Mixin.getByName('sw-inline-snippet'),\n    ],\n\n    props: {\n        domain: {\n            required: true,\n            type: String,\n        },\n        salesChannelId: {\n            required: false,\n            type: String,\n            default: null,\n        },\n        salesChannelSwitchable: {\n            type: Boolean,\n            required: false,\n            default: false,\n        },\n        // Shows the value of salesChannel=null as placeholder when the salesChannelSwitchable prop is true\n        inherit: {\n            type: Boolean,\n            required: false,\n            // TODO: Boolean props should only be opt in and therefore default to false\n            // eslint-disable-next-line vue/no-boolean-default\n            default: true,\n        },\n    },\n\n    data() {\n        return {\n            currentSalesChannelId: this.salesChannelId,\n            isLoading: false,\n            config: {},\n            actualConfigData: {},\n            salesChannelModel: null,\n            hasCssFields: false,\n        };\n    },\n\n    computed: {\n        isNotDefaultSalesChannel() {\n            return this.currentSalesChannelId !== null;\n        },\n\n        typesWithMapInheritanceSupport() {\n            return [\n                'text',\n                'textarea',\n                'url',\n                'password',\n                'int',\n                'float',\n                'bool',\n                'checkbox',\n                'colorpicker',\n            ];\n        },\n    },\n\n    watch: {\n        actualConfigData: {\n            handler() {\n                this.emitConfig();\n            },\n            deep: true,\n        },\n\n        isLoading(value) {\n            this.$emit('loading-changed', value);\n        },\n    },\n\n    created() {\n        this.createdComponent();\n    },\n\n    methods: {\n        getFieldError(fieldName) {\n            return mapSystemConfigErrors(ErrorResolverSystemConfig.ENTITY_NAME, this.salesChannelId, fieldName);\n        },\n\n        async createdComponent() {\n            this.isLoading = true;\n            try {\n                await this.readConfig();\n                await this.readAll();\n            } catch (error) {\n                if (error?.response?.data?.errors) {\n                    this.createErrorNotification(error.response.data.errors);\n                }\n            } finally {\n                this.isLoading = false;\n            }\n        },\n        async readConfig() {\n            this.config = await this.systemConfigApiService.getConfig(this.domain);\n            this.config.every((card) => {\n                return card?.elements.every((field) => {\n                    if (field?.config?.css) {\n                        this.hasCssFields = true;\n                        return false;\n                    }\n                    return true;\n                });\n            });\n        },\n        readAll() {\n            this.isLoading = true;\n            // Return when data for this salesChannel was already loaded\n            if (this.actualConfigData.hasOwnProperty(this.currentSalesChannelId)) {\n                this.isLoading = false;\n                return Promise.resolve();\n            }\n\n            return this.loadCurrentSalesChannelConfig();\n        },\n        async loadCurrentSalesChannelConfig() {\n            this.isLoading = true;\n\n            try {\n                const values = await this.systemConfigApiService.getValues(this.domain, this.currentSalesChannelId);\n\n                this.$set(this.actualConfigData, this.currentSalesChannelId, values);\n            } finally {\n                this.isLoading = false;\n            }\n        },\n        saveAll() {\n            this.isLoading = true;\n            return this.systemConfigApiService\n                .batchSave(this.actualConfigData)\n                .finally(() => {\n                    this.isLoading = false;\n                });\n        },\n        createErrorNotification(errors) {\n            let message = `<div>${this.$tc(\n                'sw-config-form-renderer.configLoadErrorMessage',\n                errors.length,\n            )}</div><ul>`;\n\n            errors.forEach((error) => {\n                message = `${message}<li>${error.detail}</li>`;\n            });\n            message += '</ul>';\n\n            this.createNotificationError({\n                message: message,\n                autoClose: false,\n            });\n        },\n        onSalesChannelChanged(salesChannelId) {\n            this.currentSalesChannelId = salesChannelId;\n            this.readAll();\n        },\n\n        hasMapInheritanceSupport(element) {\n            const componentName = element.config ? element.config.componentName : undefined;\n\n            if (componentName === 'sw-switch-field' || componentName === 'sw-snippet-field') {\n                return true;\n            }\n\n            return this.typesWithMapInheritanceSupport.includes(element.type);\n        },\n\n        getElementBind(element, mapInheritance) {\n            const bind = object.deepCopyObject(element);\n\n            if (!this.hasMapInheritanceSupport(element)) {\n                delete bind.config.label;\n                delete bind.config.helpText;\n            } else {\n                bind.mapInheritance = mapInheritance;\n            }\n\n            // Add select properties\n            if (['single-select', 'multi-select'].includes(bind.type)) {\n                bind.config.labelProperty = 'name';\n                bind.config.valueProperty = 'id';\n            }\n\n            if (element.type === 'text-editor') {\n                bind.config.componentName = 'sw-text-editor';\n            }\n\n            if (bind.config.css && bind.config.helpText === undefined) {\n                bind.config.helpText = this.$tc('sw-settings.system-config.scssHelpText') + element.config.css;\n            }\n\n            return bind;\n        },\n\n        getInheritWrapperBind(element) {\n            if (this.hasMapInheritanceSupport(element)) {\n                return {};\n            }\n\n            return {\n                label: this.getInlineSnippet(element.config.label),\n                helpText: this.getInlineSnippet(element.config.helpText),\n            };\n        },\n\n        getInheritedValue(element) {\n            const value = this.actualConfigData.null[element.name];\n\n            if (value) {\n                return value;\n            }\n\n            if (element.config?.componentName) {\n                const componentName = element.config.componentName;\n\n                if (componentName === 'sw-switch-field') {\n                    return false;\n                }\n            }\n\n            switch (element.type) {\n                case 'date':\n                case 'datetime':\n                case 'single-select':\n                case 'colorpicker':\n                case 'password':\n                case 'url':\n                case 'text':\n                case 'textarea':\n                case 'text-editor': {\n                    return '';\n                }\n\n                case 'multi-select': {\n                    return [];\n                }\n\n                case 'checkbox':\n                case 'bool': {\n                    return false;\n                }\n\n                case 'float':\n                case 'int': {\n                    return 0;\n                }\n\n                default: {\n                    return null;\n                }\n            }\n        },\n\n        emitConfig() {\n            this.$emit('config-changed', this.actualConfigData[this.currentSalesChannelId]);\n        },\n\n        kebabCase(value) {\n            return kebabCase(value);\n        },\n    },\n};\n","export default \"\\n{% block sw_system_config %}\\n<div class=\\\"sw-system-config\\\">\\n    <div\\n        v-if=\\\"salesChannelSwitchable && config.length > 1\\\"\\n        class=\\\"sw-system-config__global-sales-channel-switch\\\"\\n    >\\n        <sw-sales-channel-switch\\n            :label=\\\"$tc('sw-settings.system-config.labelSalesChannelSelect')\\\"\\n            @change-sales-channel-id=\\\"onSalesChannelChanged\\\"\\n        />\\n    </div>\\n    \\n    {% block sw_system_config_content_card %}\\n    <sw-card\\n        v-for=\\\"card, index in config\\\"\\n        :key=\\\"index\\\"\\n        position-identifier=\\\"sw-system-config-content\\\"\\n        :class=\\\"`sw-system-config__card--${index}`\\\"\\n        :is-loading=\\\"isLoading\\\"\\n        :title=\\\"getInlineSnippet(card.title)\\\"\\n        :ai-badge=\\\"card.aiBadge\\\"\\n    >\\n        <slot\\n            name=\\\"beforeElements\\\"\\n            v-bind=\\\"{ card, config: actualConfigData[currentSalesChannelId] }\\\"\\n        ></slot>\\n        <template\\n            v-if=\\\"salesChannelSwitchable && config.length === 1\\\"\\n            #toolbar\\n        >\\n            <sw-sales-channel-switch\\n                :label=\\\"$tc('sw-settings.system-config.labelSalesChannelSelect')\\\"\\n                @change-sales-channel-id=\\\"onSalesChannelChanged\\\"\\n            />\\n        </template>\\n        <template v-if=\\\"hasCssFields\\\">\\n            \\n            {% block sw_system_config_content_compile_notice %}\\n            <sw-alert variant=\\\"warning\\\">\\n                {{ $tc('sw-settings.system-config.compileNotice') }}\\n            </sw-alert>\\n\\n            {% endblock %}\\n        </template>\\n        <template v-if=\\\"!isLoading\\\">\\n            <template v-for=\\\"element in card.elements\\\">\\n                <slot\\n                    name=\\\"card-element\\\"\\n                    v-bind=\\\"{ element: getElementBind(element), config: actualConfigData[currentSalesChannelId], card }\\\"\\n                >\\n                    \\n                    {% block sw_system_config_content_card_field %}\\n                    <sw-inherit-wrapper\\n                        {% if VUE3 %}\\n                        v-model:value=\\\"actualConfigData[currentSalesChannelId][element.name]\\\"\\n                        {% else %}\\n                        v-model=\\\"actualConfigData[currentSalesChannelId][element.name]\\\"\\n                        {% endif %}\\n                        v-bind=\\\"getInheritWrapperBind(element)\\\"\\n                        :has-parent=\\\"isNotDefaultSalesChannel\\\"\\n                        :inherited-value=\\\"getInheritedValue(element)\\\"\\n                        :class=\\\"'sw-system-config--field-' + kebabCase(getElementBind(element).name)\\\"\\n                    >\\n                        <template #content=\\\"props\\\">\\n                            <sw-form-field-renderer\\n                                v-bind=\\\"getElementBind(element, props)\\\"\\n                                :key=\\\"props.isInheritField + props.isInherited\\\"\\n                                :disabled=\\\"props.isInherited\\\"\\n                                :value=\\\"props.currentValue\\\"\\n                                :error=\\\"getFieldError(element.name)\\\"\\n                                @input=\\\"props.updateCurrentValue\\\"\\n                                @change=\\\"props.updateCurrentValue\\\"\\n                            />\\n                        </template>\\n                    </sw-inherit-wrapper>\\n                    {% endblock %}\\n                </slot>\\n            </template>\\n            <slot name=\\\"card-element-last\\\"></slot>\\n        </template>\\n        <slot\\n            name=\\\"afterElements\\\"\\n            v-bind=\\\"{ card, config: actualConfigData[currentSalesChannelId], index }\\\"\\n        >\\n        </slot>\\n    </sw-card>\\n    {% endblock %}\\n</div>\\n{% endblock %}\\n\";","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../../../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--15-1!../../../../../node_modules/css-loader/dist/cjs.js??ref--15-2!../../../../../node_modules/sass-loader/dist/cjs.js??ref--15-3!./sw-system-config.scss\");\nif(content.__esModule) content = content.default;\nif(typeof content === 'string') content = [[module.id, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar add = require(\"!../../../../../node_modules/vue-style-loader/lib/addStylesClient.js\").default\nvar update = add(\"c614442a\", content, true, {});"],"sourceRoot":""}