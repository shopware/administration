{"version":3,"sources":["webpack:///./src/module/sw-product-stream/component/sw-product-stream-value/index.js","webpack:///./src/module/sw-product-stream/component/sw-product-stream-value/sw-product-stream-value.html.twig","webpack:///./src/module/sw-product-stream/component/sw-product-stream-value/sw-product-stream-value.scss"],"names":["Criteria","Shopware","Data","template","inject","props","condition","type","Object","required","fieldName","String","default","definition","disabled","Boolean","data","value","childComponents","searchTerm","computed","repository","this","repositoryFactory","create","entity","componentClasses","growthClass","disabledClass","concat","length","actualCondition","queries","isMultiSelectValue","filterType","get","conditionType","getConditionType","getRangeType","set","conditionDataProviderService","isRangeType","onChangeType","getParameters","isRelativeTimeType","fieldDefinition","getField","allowedJsonAccessors","hasOwnProperty","productCustomFields","replace","operators","_this","fieldType","getOperatorSet","map","operator","label","$tc","identifier","relativeTimeOperators","_this2","getOperator","secondLevelOperator","productStateOptions","_this3","isJsonField","keys","filterProperties","field","localField","relation","booleanOptions","reversedEmptyOptions","multiValue","split","values","join","inputComponent","currentParameter","parameters","getParameterName","param","_defineProperty","gte","lte","getParameterType","emptyValue","$emit","stringValue","includes","Number","parseFloat","match","toString","context","_objectSpread","Context","api","inheritance","productCriteria","criteria","addAssociation","propertyCriteria","addQuery","contains","visibilitiesCriteria","resultCriteria","visibilitiesLabelCallback","item","salesChannel","product","translated","name","id","mounted","$children","methods","innerType","negateOperator","hasLte","hasGte","setBooleanValue","setSearchTerm","onSelectCollapsed","getCategoryBreadcrumb","category","breadcrumb","content","__esModule","module","i","locals","exports","add"],"mappings":"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","file":"static/js/68c33d640860df6787c2.js","sourcesContent":["/*\n * @package business-ops\n */\n\nimport template from './sw-product-stream-value.html.twig';\nimport './sw-product-stream-value.scss';\n\nconst { Criteria } = Shopware.Data;\n/*\n * @private\n */\nexport default {\n    template,\n\n    inject: [\n        'repositoryFactory',\n        'conditionDataProviderService',\n        'productCustomFields',\n        'acl',\n        'feature',\n    ],\n\n    props: {\n        condition: {\n            type: Object,\n            required: true,\n        },\n\n        fieldName: {\n            type: String,\n            required: false,\n            default: null,\n        },\n\n        definition: {\n            type: Object,\n            required: true,\n        },\n\n        disabled: {\n            type: Boolean,\n            required: false,\n            default: false,\n        },\n    },\n\n    data() {\n        return {\n            value: null,\n            childComponents: null,\n            searchTerm: '',\n        };\n    },\n\n    computed: {\n        repository() {\n            return this.repositoryFactory.create(this.definition.entity);\n        },\n\n        componentClasses() {\n            return [\n                this.growthClass,\n                this.disabledClass,\n            ];\n        },\n\n        growthClass() {\n            if (this.childComponents === null) {\n                return 'sw-product-stream-value--grow-0';\n            }\n\n            return `sw-product-stream-value--grow-${this.childComponents.length}`;\n        },\n\n        disabledClass() {\n            return this.disabled ? 'is--disabled' : null;\n        },\n\n        actualCondition() {\n            if (this.condition.type === 'not') {\n                return this.condition.queries[0];\n            }\n            return this.condition;\n        },\n\n        isMultiSelectValue() {\n            return this.actualCondition.type === 'equalsAny' ||\n                this.actualCondition.type === 'equalsAll' ||\n                this.actualCondition.type === 'notEqualsAll';\n        },\n\n        filterType: {\n            get() {\n                const conditionType = this.getConditionType(this.condition);\n                if (conditionType === 'range') {\n                    return this.getRangeType(this.actualCondition);\n                }\n\n                return conditionType;\n            },\n\n            set(type) {\n                if (this.conditionDataProviderService.isRangeType(type)) {\n                    this.onChangeType('range', this.getParameters(type));\n                    return;\n                }\n                if (this.conditionDataProviderService.isRelativeTimeType(type)) {\n                    this.onChangeType(type, this.getParameters(type));\n                    return;\n                }\n\n                this.onChangeType(type, null);\n            },\n        },\n\n        fieldDefinition() {\n            const fieldDefinition = this.definition.getField(this.fieldName);\n\n            if (!fieldDefinition && this.definition.entity === 'product' && this.fieldName) {\n                if (this.conditionDataProviderService.allowedJsonAccessors.hasOwnProperty(this.fieldName)) {\n                    return this.conditionDataProviderService.allowedJsonAccessors[this.fieldName];\n                }\n\n                return this.productCustomFields[this.fieldName.replace('customFields.', '')] || null;\n            }\n\n            return fieldDefinition;\n        },\n\n        operators() {\n            if (this.fieldType === null) {\n                return [];\n            }\n            return this.conditionDataProviderService\n                .getOperatorSet(this.fieldType)\n                .map((operator) => {\n                    return {\n                        label: this.$tc(operator.label),\n                        value: operator.identifier,\n                    };\n                });\n        },\n\n        relativeTimeOperators() {\n            const secondLevelOperators = this.conditionDataProviderService.getOperator(this.filterType).operators;\n\n            return secondLevelOperators.map((operator) => {\n                const secondLevelOperator = this.conditionDataProviderService.getOperator(operator);\n\n                return {\n                    label: this.$tc(secondLevelOperator.label),\n                    value: secondLevelOperator.identifier,\n                };\n            });\n        },\n\n        productStateOptions() {\n            return [\n                { label: this.$tc('sw-product-stream.filter.values.productStates.physical'), value: 'is-physical' },\n                { label: this.$tc('sw-product-stream.filter.values.productStates.digital'), value: 'is-download' },\n            ];\n        },\n\n        fieldType() {\n            if (!this.fieldDefinition) {\n                return null;\n            }\n\n            if (this.fieldDefinition.type === 'json_list' && this.fieldName === 'states') {\n                return 'product_state_list';\n            }\n\n            if (this.definition.isJsonField(this.fieldDefinition)) {\n                return 'object';\n            }\n\n            if (this.fieldDefinition.type === 'uuid') {\n                const isManyToOneFkField = Object.keys(this.definition.filterProperties((field) => {\n                    return field.localField === this.fieldName && field.relation === 'many_to_one';\n                })).length > 0;\n\n                if (isManyToOneFkField) {\n                    return 'empty';\n                }\n            }\n\n            return this.fieldDefinition.type;\n        },\n\n        booleanOptions() {\n            return [\n                { label: this.$tc('global.default.yes'), value: '1' },\n                { label: this.$tc('global.default.no'), value: '0' },\n            ];\n        },\n\n        reversedEmptyOptions() {\n            return [\n                { label: this.$tc('global.default.yes'), value: false },\n                { label: this.$tc('global.default.no'), value: true },\n            ];\n        },\n\n        multiValue: {\n            get() {\n                if (typeof this.actualCondition.value !== 'string' || this.actualCondition.value === '') {\n                    return [];\n                }\n                return this.actualCondition.value.split('|');\n            },\n            set(values) {\n                this.actualCondition.value = values.join('|');\n            },\n        },\n\n        inputComponent() {\n            switch (this.fieldType) {\n                case 'uuid':\n                    return 'sw-entity-multi-id-select';\n                case 'float':\n                case 'int':\n                    return 'sw-number-field';\n                case 'date':\n                    return 'sw-datepicker';\n                case 'string':\n                case 'object':\n                default:\n                    return 'sw-text-field';\n            }\n        },\n\n        currentParameter: {\n            get() {\n                if (!this.actualCondition.parameters) {\n                    return null;\n                }\n                return this.actualCondition.parameters[this.getParameterName(this.filterType)];\n            },\n            set(value) {\n                const param = this.getParameterName(this.filterType);\n                this.actualCondition.parameters = { [param]: value };\n            },\n        },\n\n        gte: {\n            get() { return this.actualCondition.parameters ? this.actualCondition.parameters.gte : null; },\n            set(value) { this.actualCondition.parameters.gte = value; },\n        },\n\n        lte: {\n            get() { return this.actualCondition.parameters ? this.actualCondition.parameters.lte : null; },\n            set(value) { this.actualCondition.parameters.lte = value; },\n        },\n\n        operator: {\n            get() {\n                return this.actualCondition.parameters ?\n                    this.getParameterType(this.actualCondition.parameters.operator) :\n                    null;\n            },\n            set(value) { this.actualCondition.parameters.operator = this.getParameterName(value); },\n        },\n\n        emptyValue: {\n            get() {\n                return this.condition.type !== null ? this.filterType === 'equals' : null;\n            },\n            set(value) {\n                if (value === undefined || value === null) {\n                    this.$emit('empty-change', { type: null });\n\n                    return;\n                }\n\n                this.$emit('empty-change', { type: value ? 'equals' : 'notEquals' });\n            },\n        },\n\n        stringValue: {\n            get() {\n                if (['int', 'float'].includes(this.fieldType)) {\n                    return Number.parseFloat(this.actualCondition.value);\n                }\n                if (typeof this.actualCondition.value !== 'string') {\n                    return null;\n                }\n                if (this.conditionDataProviderService.isRelativeTimeType(this.filterType) && this.actualCondition.value) {\n                    return this.actualCondition.value.match(/\\d+/)[0];\n                }\n                return this.actualCondition.value;\n            },\n            set(value) {\n                if (this.conditionDataProviderService.isRelativeTimeType(this.filterType)) {\n                    this.actualCondition.value = `P${value}D`;\n                    return;\n                }\n                this.actualCondition.value = value.toString();\n            },\n        },\n\n        context() {\n            return { ...Shopware.Context.api, inheritance: true };\n        },\n\n        productCriteria() {\n            const criteria = new Criteria(1, 25);\n            criteria.addAssociation('options.group');\n\n            return criteria;\n        },\n\n        propertyCriteria() {\n            const criteria = new Criteria(1, 25);\n\n            if (this.definition.entity === 'property_group_option') {\n                criteria.addAssociation('group');\n\n                if (typeof this.searchTerm === 'string' && this.searchTerm.length > 0) {\n                    criteria.addQuery(Criteria.contains('group.name', this.searchTerm), 500);\n                }\n            }\n\n            return criteria;\n        },\n\n        visibilitiesCriteria() {\n            const criteria = new Criteria(1, 25);\n            criteria.addAssociation('salesChannel');\n            criteria.addAssociation('product');\n\n            if (typeof this.searchTerm === 'string' && this.searchTerm.length > 0) {\n                criteria.addQuery(Criteria.contains('salesChannel.name', this.searchTerm), 400);\n                criteria.addQuery(Criteria.contains('product.name', this.searchTerm), 500);\n            }\n\n            return criteria;\n        },\n\n        resultCriteria() {\n            const criteria = new Criteria(1, 25);\n            criteria.addAssociation('options.group');\n\n            return criteria;\n        },\n\n        visibilitiesLabelCallback() {\n            return (item) => {\n                if (!item) {\n                    return '';\n                }\n\n                if (!item.salesChannel || !item.product) {\n                    return item.id;\n                }\n\n                return `${item.salesChannel.translated.name}: ${item.product.translated.name}`;\n            };\n        },\n    },\n\n    mounted() {\n        this.childComponents = this.$children;\n    },\n\n    methods: {\n        onChangeType(type, parameters) {\n            this.$emit('type-change', { type, parameters });\n        },\n\n        getConditionType(condition) {\n            if (this.condition.type === 'not') {\n                const innerType = condition.queries[0].type;\n                const type = this.conditionDataProviderService.negateOperator(innerType);\n                return type.identifier;\n            }\n\n            return this.condition.type;\n        },\n\n        getRangeType(condition) {\n            if (condition.parameters === null) {\n                return null;\n            }\n\n            const hasLte = condition.parameters.hasOwnProperty('lte');\n            const hasGte = condition.parameters.hasOwnProperty('gte');\n\n            if (hasGte && hasLte) {\n                return this.conditionDataProviderService.getOperator('range').identifier;\n            }\n\n            if (hasGte) {\n                return this.conditionDataProviderService.getOperator('greaterThanEquals').identifier;\n            }\n\n            if (hasLte) {\n                return this.conditionDataProviderService.getOperator('lessThanEquals').identifier;\n            }\n\n            if (this.condition.parameters.hasOwnProperty('lt')) {\n                return this.conditionDataProviderService.getOperator('lessThan').identifier;\n            }\n\n            if (this.condition.parameters.hasOwnProperty('gt')) {\n                return this.conditionDataProviderService.getOperator('greaterThan').identifier;\n            }\n\n            return null;\n        },\n\n        getParameters(type) {\n            if (type === 'range') {\n                return { lte: null, gte: null };\n            }\n\n            if (type === 'since' || type === 'until') {\n                return { operator: null };\n            }\n\n            const param = this.getParameterName(type);\n            return param ? { [param]: null } : null;\n        },\n\n        getParameterName(type) {\n            switch (type) {\n                case 'greaterThanEquals':\n                    return 'gte';\n                case 'lessThanEquals':\n                    return 'lte';\n                case 'lessThan':\n                    return 'lt';\n                case 'greaterThan':\n                    return 'gt';\n                case 'equals':\n                    return 'eq';\n                case 'notEquals':\n                    return 'neq';\n                default:\n                    return null;\n            }\n        },\n\n        getParameterType(name) {\n            switch (name) {\n                case 'gte':\n                    return 'greaterThanEquals';\n                case 'lte':\n                    return 'lessThanEquals';\n                case 'lt':\n                    return 'lessThan';\n                case 'gt':\n                    return 'greaterThan';\n                case 'eq':\n                    return 'equals';\n                case 'neq':\n                    return 'notEquals';\n                default:\n                    return null;\n            }\n        },\n\n        setBooleanValue(value) {\n            this.$emit('boolean-change', { type: +value ? 'equals' : 'notEquals', value });\n        },\n\n        setSearchTerm(value) {\n            this.searchTerm = value;\n        },\n\n        onSelectCollapsed() {\n            this.searchTerm = '';\n        },\n\n        getCategoryBreadcrumb(category) {\n            if (!category.breadcrumb || Object.keys(category.breadcrumb).length === 0) {\n                return category.name;\n            }\n\n            return Object.values(category.breadcrumb).join(' / ');\n        },\n    },\n};\n","export default \"\\n{% block sw_product_stream_value %}\\n<div\\n    class=\\\"sw-product-stream-value\\\"\\n    :class=\\\"componentClasses\\\"\\n>\\n\\n    <template v-if=\\\"!fieldDefinition\\\">\\n        \\n        {% block sw_product_stream_value_no_definition_placeholder %}\\n        <sw-container class=\\\"sw-product-stream-value__placeholder\\\" />\\n        {% endblock %}\\n    </template>\\n\\n    <template v-else-if=\\\"fieldType === 'boolean'\\\">\\n        \\n        {% block sw_product_stream_value_boolean_value %}\\n        <sw-single-select\\n            class=\\\"sw-product-stream-value__select\\\"\\n            size=\\\"medium\\\"\\n            :options=\\\"booleanOptions\\\"\\n            :value=\\\"condition.value\\\"\\n            :disabled=\\\"disabled\\\"\\n            show-clearable-button\\n            {% if VUE3 %}\\n            @update:value=\\\"setBooleanValue\\\"\\n            {% else %}\\n            @change=\\\"setBooleanValue\\\"\\n            {% endif %}\\n        />\\n        {% endblock %}\\n    </template>\\n\\n    <template v-else-if=\\\"fieldType === 'empty'\\\">\\n        \\n        {% block sw_product_stream_value_empty_value %}\\n        <sw-single-select\\n            {% if VUE3 %}\\n            v-model:value=\\\"emptyValue\\\"\\n            {% else %}\\n            v-model=\\\"emptyValue\\\"\\n            {% endif %}\\n            class=\\\"sw-product-stream-value__select\\\"\\n            size=\\\"medium\\\"\\n            :options=\\\"reversedEmptyOptions\\\"\\n            :disabled=\\\"disabled\\\"\\n            show-clearable-button\\n        />\\n        {% endblock %}\\n    </template>\\n\\n    <template v-else>\\n        \\n        {% block sw_product_stream_value_operator_select %}\\n        <sw-arrow-field\\n            class=\\\"sw-product-stream-value__operator-select\\\"\\n            :disabled=\\\"!acl.can('product_stream.editor')\\\"\\n        >\\n            <sw-single-select\\n                {% if VUE3 %}\\n                v-model:value=\\\"filterType\\\"\\n                {% else %}\\n                v-model=\\\"filterType\\\"\\n                {% endif %}\\n                size=\\\"medium\\\"\\n                :options=\\\"operators\\\"\\n                :placeholder=\\\"$tc('sw-product-stream.filter.placeholderOperatorSelect')\\\"\\n                :disabled=\\\"disabled\\\"\\n                show-clearable-button\\n            />\\n        </sw-arrow-field>\\n        {% endblock %}\\n\\n        <template v-if=\\\"fieldType === 'product_state_list'\\\">\\n            <sw-single-select\\n                {% if VUE3 %}\\n                v-model:value=\\\"actualCondition.value\\\"\\n                {% else %}\\n                v-model=\\\"actualCondition.value\\\"\\n                {% endif %}\\n                :options=\\\"productStateOptions\\\"\\n                :disabled=\\\"disabled\\\"\\n            />\\n        </template>\\n\\n        <template v-else-if=\\\"fieldType === 'uuid'\\\">\\n            \\n            {% block sw_product_stream_value_entity_single_value %}\\n            <sw-entity-single-select\\n                v-if=\\\"definition.entity === 'product' && actualCondition.type === 'equals'\\\"\\n                {% if VUE3 %}\\n                v-model:value=\\\"actualCondition.value\\\"\\n                {% else %}\\n                v-model=\\\"actualCondition.value\\\"\\n                {% endif %}\\n                size=\\\"medium\\\"\\n                show-clearable-button\\n                :entity=\\\"definition.entity\\\"\\n                :criteria=\\\"productCriteria\\\"\\n                :context=\\\"context\\\"\\n                :disabled=\\\"disabled\\\"\\n                advanced-selection-component=\\\"sw-advanced-selection-product\\\"\\n            >\\n                <template #selection-label-property=\\\"{ item }\\\">\\n                    <slot\\n                        name=\\\"selection-label-property\\\"\\n                        v-bind=\\\"{ item }\\\"\\n                    >\\n                        \\n                        {% block sw_product_stream_value_results_variant_info %}\\n                        <sw-product-variant-info\\n                            :variations=\\\"item.variation\\\"\\n                        >\\n                            {{ item.translated.name || item.name }}\\n                        </sw-product-variant-info>\\n                        {% endblock %}\\n                    </slot>\\n                </template>\\n\\n                <template #result-item=\\\"{ item, index }\\\">\\n                    <slot\\n                        name=\\\"result-item\\\"\\n                        v-bind=\\\"{ item, index }\\\"\\n                    >\\n                        <sw-select-result\\n                            v-bind=\\\"{ item, index }\\\"\\n                        >\\n                            \\n                            {% block sw_product_stream_value_results_list_result_label %}\\n                            <span class=\\\"sw-select-result__result-item-text\\\">\\n                                <sw-product-variant-info\\n                                    :variations=\\\"item.variation\\\"\\n                                >\\n                                    {{ item.translated.name || item.name }}\\n                                </sw-product-variant-info>\\n                            </span>\\n                            {% endblock %}\\n                        </sw-select-result>\\n                    </slot>\\n                </template>\\n            </sw-entity-single-select>\\n\\n            <sw-entity-single-select\\n                v-else-if=\\\"definition.entity === 'property_group_option' && actualCondition.type === 'equals'\\\"\\n                {% if VUE3 %}\\n                v-model:value=\\\"actualCondition.value\\\"\\n                {% else %}\\n                v-model=\\\"actualCondition.value\\\"\\n                {% endif %}\\n                size=\\\"medium\\\"\\n                :entity=\\\"definition.entity\\\"\\n                :criteria=\\\"propertyCriteria\\\"\\n                :context=\\\"context\\\"\\n                :disabled=\\\"disabled\\\"\\n                show-clearable-button\\n                @select-collapsed=\\\"onSelectCollapsed\\\"\\n                @search-term-change=\\\"setSearchTerm\\\"\\n            >\\n\\n                <template #selection-label-property=\\\"{ item }\\\">\\n                    <slot\\n                        name=\\\"selection-label-property\\\"\\n                        v-bind=\\\"{ item }\\\"\\n                    >\\n                        {{ item.group.translated.name || item.group.name }}: {{ item.translated.name || item.name }}\\n                    </slot>\\n                </template>\\n\\n                <template #result-description-property=\\\"{ item }\\\">\\n                    <slot\\n                        name=\\\"result-description-property\\\"\\n                        v-bind=\\\"{ item }\\\"\\n                    >\\n                        {{ item.group.translated.name || item.group.name }}\\n                    </slot>\\n                </template>\\n            </sw-entity-single-select>\\n\\n            \\n            {% block sw_product_stream_value_entity_single_value_visibilities %}\\n            <sw-entity-single-select\\n                v-else-if=\\\"definition.entity === 'product_visibility' && actualCondition.type === 'equals'\\\"\\n                {% if VUE3 %}\\n                v-model:value=\\\"actualCondition.value\\\"\\n                {% else %}\\n                v-model=\\\"actualCondition.value\\\"\\n                {% endif %}\\n                size=\\\"medium\\\"\\n                :entity=\\\"definition.entity\\\"\\n                :criteria=\\\"visibilitiesCriteria\\\"\\n                :label-callback=\\\"visibilitiesLabelCallback\\\"\\n                :context=\\\"context\\\"\\n                :disabled=\\\"disabled\\\"\\n                show-clearable-button\\n                @search-term-change=\\\"setSearchTerm\\\"\\n            />\\n            {% endblock %}\\n\\n            <sw-entity-single-select\\n                v-else-if=\\\"actualCondition.type === 'equals'\\\"\\n                {% if VUE3 %}\\n                v-model:value=\\\"actualCondition.value\\\"\\n                {% else %}\\n                v-model=\\\"actualCondition.value\\\"\\n                {% endif %}\\n                size=\\\"medium\\\"\\n                :entity=\\\"definition.entity\\\"\\n                :context=\\\"context\\\"\\n                :disabled=\\\"disabled\\\"\\n                description-position=\\\"bottom\\\"\\n                show-clearable-button\\n            >\\n                <template #result-description-property=\\\"{ item }\\\">\\n                    \\n                    {% block sw_product_stream_value_equals_result_label %}\\n                    <slot\\n                        v-if=\\\"definition.entity === 'category'\\\"\\n                        name=\\\"result-description-property\\\"\\n                        v-bind=\\\"{ item }\\\"\\n                    >\\n                        \\n                        {% block sw_product_stream_value_equals_result_label_default %}\\n                        {{ getCategoryBreadcrumb(item) }}\\n                        {% endblock %}\\n                    </slot>\\n                    {% endblock %}\\n                </template>\\n            </sw-entity-single-select>\\n            {% endblock %}\\n\\n            \\n            {% block sw_product_stream_value_entity_multi_value %}\\n            <sw-entity-multi-id-select\\n                v-else-if=\\\"definition.entity === 'property_group_option' && actualCondition.type === 'equalsAny'\\\"\\n                {% if VUE3 %}\\n                v-model:ids=\\\"multiValue\\\"\\n                {% else %}\\n                v-model=\\\"multiValue\\\"\\n                {% endif %}\\n                size=\\\"medium\\\"\\n                :repository=\\\"repository\\\"\\n                :criteria=\\\"propertyCriteria\\\"\\n                :context=\\\"context\\\"\\n                :disabled=\\\"disabled\\\"\\n                @select-collapsed=\\\"onSelectCollapsed\\\"\\n                @search-term-change=\\\"setSearchTerm\\\"\\n            >\\n\\n                <template #selection-label-property=\\\"{ item }\\\">\\n                    <slot\\n                        name=\\\"selection-label-property\\\"\\n                        v-bind=\\\"{ item }\\\"\\n                    >\\n                        {{ item.group.translated.name || item.group.name }}: {{ item.translated.name || item.name }}\\n                    </slot>\\n                </template>\\n\\n                <template #result-label-property=\\\"{ item, searchTerm, highlightSearchTerm }\\\">\\n                    <slot\\n                        name=\\\"result-label-property\\\"\\n                        v-bind=\\\"{ item, searchTerm, highlightSearchTerm }\\\"\\n                    >\\n                        {{ item.translated.name || item.name }}\\n                    </slot>\\n                </template>\\n\\n                <template #result-description-property=\\\"{ item, searchTerm, highlightSearchTerm }\\\">\\n                    <slot\\n                        name=\\\"result-description-property\\\"\\n                        v-bind=\\\"{ item, searchTerm, highlightSearchTerm }\\\"\\n                    >\\n                        {{ item.group.translated.name || item.group.name }}\\n                    </slot>\\n                </template>\\n            </sw-entity-multi-id-select>\\n\\n            <sw-entity-multi-id-select\\n                v-else-if=\\\"definition.entity === 'product' && actualCondition.type === 'equalsAny'\\\"\\n                {% if VUE3 %}\\n                v-model:ids=\\\"multiValue\\\"\\n                {% else %}\\n                v-model=\\\"multiValue\\\"\\n                {% endif %}\\n                size=\\\"medium\\\"\\n                :repository=\\\"repository\\\"\\n                :criteria=\\\"productCriteria\\\"\\n                :context=\\\"context\\\"\\n                :disabled=\\\"disabled\\\"\\n                advanced-selection-component=\\\"sw-advanced-selection-product\\\"\\n            >\\n                <template #selection-label-property=\\\"{ item }\\\">\\n                    <slot\\n                        name=\\\"selection-label-property\\\"\\n                        v-bind=\\\"{ item }\\\"\\n                    >\\n                        <sw-product-variant-info\\n                            class=\\\"product-view\\\"\\n                            :variations=\\\"item.variation\\\"\\n                        >\\n                            {{ item.translated.name || item.name }}\\n                        </sw-product-variant-info>\\n                    </slot>\\n                </template>\\n\\n                <template #result-label-property=\\\"{ item, index }\\\">\\n                    <slot\\n                        name=\\\"result-label-property\\\"\\n                        v-bind=\\\"{ item, index }\\\"\\n                    >\\n                        \\n                        {% block sw_product_stream_value_results_list_result_label %}\\n                        <span class=\\\"sw-select-result__result-item-text\\\">\\n                            <sw-product-variant-info :variations=\\\"item.variation\\\">\\n                                {{ item.translated.name || item.name }}\\n                            </sw-product-variant-info>\\n                        </span>\\n                        {% endblock %}\\n                    </slot>\\n                </template>\\n            </sw-entity-multi-id-select>\\n\\n            \\n            {% block sw_product_stream_value_entity_multi_value_visibilities %}\\n            <sw-entity-multi-id-select\\n                v-else-if=\\\"definition.entity === 'product_visibility' && (actualCondition.type === 'equalsAny' || actualCondition.type === 'equalsAll')\\\"\\n                {% if VUE3 %}\\n                v-model:ids=\\\"multiValue\\\"\\n                {% else %}\\n                v-model=\\\"multiValue\\\"\\n                {% endif %}\\n                size=\\\"medium\\\"\\n                :repository=\\\"repository\\\"\\n                :criteria=\\\"visibilitiesCriteria\\\"\\n                :context=\\\"context\\\"\\n                :disabled=\\\"disabled\\\"\\n                @search-term-change=\\\"setSearchTerm\\\"\\n            >\\n                <template #selection-label-property=\\\"{ item }\\\">\\n                    <slot\\n                        name=\\\"selection-label-property\\\"\\n                        v-bind=\\\"{ item }\\\"\\n                    >\\n                        {{ item.salesChannel.translated.name }}: {{ item.product.translated.name }}\\n                    </slot>\\n                </template>\\n\\n                <template #result-label-property=\\\"{ item, searchTerm, highlightSearchTerm }\\\">\\n                    <slot\\n                        name=\\\"result-label-property\\\"\\n                        v-bind=\\\"{ item, searchTerm, highlightSearchTerm }\\\"\\n                    >\\n                        {{ item.salesChannel.translated.name }}: {{ item.product.translated.name }}\\n                    </slot>\\n                </template>\\n            </sw-entity-multi-id-select>\\n            {% endblock %}\\n\\n            <sw-entity-multi-id-select\\n                v-else-if=\\\"isMultiSelectValue\\\"\\n                {% if VUE3 %}\\n                v-model:ids=\\\"multiValue\\\"\\n                {% else %}\\n                v-model=\\\"multiValue\\\"\\n                {% endif %}\\n                size=\\\"medium\\\"\\n                description-position=\\\"bottom\\\"\\n                :repository=\\\"repository\\\"\\n                :context=\\\"context\\\"\\n                :disabled=\\\"disabled\\\"\\n                :advanced-selection-component=\\\"definition.entity === 'product' ? 'sw-advanced-selection-product' : ''\\\"\\n            >\\n                <template #result-description-property=\\\"{ item }\\\">\\n                    \\n                    {% block sw_product_stream_value_multi_select_result_label %}\\n                    <slot\\n                        v-if=\\\"definition.entity === 'category'\\\"\\n                        name=\\\"result-description-property\\\"\\n                        v-bind=\\\"{ item }\\\"\\n                    >\\n                        \\n                        {% block sw_product_stream_value_multi_select_result_label_default %}\\n                        {{ getCategoryBreadcrumb(item) }}\\n                        {% endblock %}\\n                    </slot>\\n                    {% endblock %}\\n                </template>\\n            </sw-entity-multi-id-select>\\n            {% endblock %}\\n\\n            \\n            {% block sw_product_stream_value_entity_no_operator_selected_placeholder %}\\n            <sw-container\\n                v-else\\n                class=\\\"sw-product-stream-value__placeholder\\\"\\n            />\\n            {% endblock %}\\n        </template>\\n\\n        <template v-else-if=\\\"getConditionType(condition) === 'range'\\\">\\n            \\n            {% block sw_product_stream_value_range_value %}\\n            <template v-if=\\\"filterType === 'range'\\\">\\n                \\n                {% block sw_product_stream_value_range_from_value %}\\n                <sw-arrow-field :disabled=\\\"disabled\\\">\\n                    <component\\n                        :is=\\\"inputComponent\\\"\\n                        {% if VUE3 %}\\n                        v-model:value=\\\"gte\\\"\\n                        {% else %}\\n                        v-model=\\\"gte\\\"\\n                        {% endif %}\\n                        size=\\\"medium\\\"\\n                        :disabled=\\\"disabled\\\"\\n                    />\\n                </sw-arrow-field>\\n                {% endblock %}\\n\\n                \\n                {% block sw_product_stream_value_range_to_value %}\\n                <component\\n                    :is=\\\"inputComponent\\\"\\n                    {% if VUE3 %}\\n                    v-model:value=\\\"lte\\\"\\n                    {% else %}\\n                    v-model=\\\"lte\\\"\\n                    {% endif %}\\n                    size=\\\"medium\\\"\\n                    :disabled=\\\"disabled\\\"\\n                />\\n                {% endblock %}\\n            </template>\\n\\n            <template v-else>\\n                \\n                {% block sw_product_stream_value_range_one_limit %}\\n                <component\\n                    :is=\\\"inputComponent\\\"\\n                    {% if VUE3 %}\\n                    v-model:value=\\\"currentParameter\\\"\\n                    {% else %}\\n                    v-model=\\\"currentParameter\\\"\\n                    {% endif %}\\n                    size=\\\"medium\\\"\\n                    :disabled=\\\"disabled\\\"\\n                />\\n                {% endblock %}\\n            </template>\\n            {% endblock %}\\n        </template>\\n\\n        \\n        <template v-else-if=\\\"actualCondition.type === 'equalsAny'\\\">\\n            \\n            {% block sw_product_stream_value_multi_value %}\\n            <sw-tagged-field\\n                {% if VUE3 %}\\n                v-model:value=\\\"multiValue\\\"\\n                {% else %}\\n                v-model=\\\"multiValue\\\"\\n                {% endif %}\\n                size=\\\"medium\\\"\\n            />\\n            {% endblock %}\\n        </template>\\n\\n        <template v-else-if=\\\"filterType === 'since' || filterType === 'until'\\\">\\n            \\n            {% block sw_product_stream_value_relative_time_operator %}\\n            <sw-arrow-field :disabled=\\\"disabled\\\">\\n                <sw-single-select\\n                    {% if VUE3 %}\\n                    v-model:value=\\\"operator\\\"\\n                    {% else %}\\n                    v-model=\\\"operator\\\"\\n                    {% endif %}\\n                    size=\\\"medium\\\"\\n                    :options=\\\"relativeTimeOperators\\\"\\n                    :placeholder=\\\"$tc('sw-product-stream.filter.placeholderOperatorSelect')\\\"\\n                    :disabled=\\\"disabled\\\"\\n                />\\n            </sw-arrow-field>\\n            {% endblock %}\\n\\n            \\n            {% block sw_product_stream_value_relative_time_value %}\\n            <sw-number-field\\n                {% if VUE3 %}\\n                v-model:value=\\\"stringValue\\\"\\n                {% else %}\\n                v-model=\\\"stringValue\\\"\\n                {% endif %}\\n                class=\\\"sw-product-stream-value__time-input\\\"\\n                size=\\\"medium\\\"\\n                number-type=\\\"int\\\"\\n                :min=\\\"0\\\"\\n                :step=\\\"1\\\"\\n                :disabled=\\\"disabled\\\"\\n            >\\n                <template #suffix>\\n                    <span>{{ $tc('sw-product-stream.filter.timeUnits.days') }}</span>\\n                </template>\\n            </sw-number-field>\\n            {% endblock %}\\n        </template>\\n\\n        <template v-else>\\n            \\n            {% block sw_product_stream_value_single_value %}\\n            <component\\n                :is=\\\"inputComponent\\\"\\n                {% if VUE3 %}\\n                v-model:value=\\\"stringValue\\\"\\n                {% else %}\\n                v-model=\\\"stringValue\\\"\\n                {% endif %}\\n                size=\\\"medium\\\"\\n                :disabled=\\\"disabled\\\"\\n            />\\n            {% endblock %}\\n        </template>\\n    </template>\\n</div>\\n{% endblock %}\\n\";","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../../../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--15-1!../../../../../node_modules/css-loader/dist/cjs.js??ref--15-2!../../../../../node_modules/sass-loader/dist/cjs.js??ref--15-3!./sw-product-stream-value.scss\");\nif(content.__esModule) content = content.default;\nif(typeof content === 'string') content = [[module.id, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar add = require(\"!../../../../../node_modules/vue-style-loader/lib/addStylesClient.js\").default\nvar update = add(\"133c00f0\", content, true, {});"],"sourceRoot":""}