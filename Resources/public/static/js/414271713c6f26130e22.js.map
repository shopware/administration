{"version":3,"sources":["webpack:///./src/module/sw-first-run-wizard/view/sw-first-run-wizard-welcome/index.js","webpack:///./src/module/sw-first-run-wizard/view/sw-first-run-wizard-welcome/sw-first-run-wizard-welcome.html.twig","webpack:///./src/module/sw-first-run-wizard/view/sw-first-run-wizard-welcome/sw-first-run-wizard-welcome.scss"],"names":["Criteria","Shopware","Data","template","inject","mixins","data","languages","languagePlugins","latestTouchedPlugin","showConfirmLanguageSwitchModal","newLocaleId","user","localeId","pw","userProfile","userPromise","isLoading","computed","languageRepository","this","repositoryFactory","create","userRepository","languageId","State","get","languageCriteria","getLanguageCriteria","assetFilter","Filter","getByName","watch","createdComponent","beforeMount","beforeMountComponent","created","methods","_this","then","_this2","updateButtons","setTitle","getLanguagePlugins","languagePromise","Promise","resolve","userService","getUser","response","setUserData","promises","all","loadLanguages","$emit","$tc","buttonConfig","key","label","position","variant","action","disabled","_this3","id","_this4","languagePluginService","getPlugins","items","onPluginInstalled","plugin","_this5","getPluginByName","onPluginRemoved","onConfirmLanguageSwitch","_this6","loginService","verifyUserToken","verifiedToken","context","_objectSpread","Context","api","authToken","access","save","_asyncToGenerator","_regeneratorRuntime","mark","_callee","wrap","_context","prev","next","Service","setLocaleWithId","stop","finally","catch","createNotificationError","title","message","confirmPassword","onCancelSwitch","name","length","find","p","addAssociation","addSorting","sort","showPluginErrorNotification","errorMessage","tryLater","concat","_this7","search","result","forEach","lang","customLabel","locale","translated","territory","push","content","__esModule","default","module","i","locals","exports","add"],"mappings":"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","file":"static/js/414271713c6f26130e22.js","sourcesContent":["import template from './sw-first-run-wizard-welcome.html.twig';\nimport './sw-first-run-wizard-welcome.scss';\n\nconst { Criteria } = Shopware.Data;\n\n/**\n * @package services-settings\n * @deprecated tag:v6.6.0 - Will be private\n */\n// eslint-disable-next-line sw-deprecation-rules/private-feature-declarations\nexport default {\n    template,\n\n    inject: [\n        'languagePluginService',\n        'userService',\n        'loginService',\n        'repositoryFactory',\n    ],\n\n    mixins: [\n        'notification',\n    ],\n\n    data() {\n        return {\n            languages: [],\n            languagePlugins: [],\n            latestTouchedPlugin: null,\n            showConfirmLanguageSwitchModal: false,\n            newLocaleId: null,\n            user: { localeId: '', pw: '' },\n            userProfile: {},\n            userPromise: null,\n            isLoading: false,\n        };\n    },\n\n    computed: {\n        languageRepository() {\n            return this.repositoryFactory.create('language');\n        },\n\n        userRepository() {\n            return this.repositoryFactory.create('user');\n        },\n\n        languageId() {\n            return Shopware.State.get('session').languageId;\n        },\n\n        languageCriteria() {\n            return this.getLanguageCriteria();\n        },\n\n        assetFilter() {\n            return Shopware.Filter.getByName('asset');\n        },\n    },\n\n    watch: {\n        languageId() {\n            this.createdComponent();\n        },\n    },\n\n    beforeMount() {\n        this.beforeMountComponent();\n    },\n\n    created() {\n        this.createdComponent();\n    },\n\n    methods: {\n        beforeMountComponent() {\n            this.userPromise.then((user) => {\n                this.user = user;\n            });\n        },\n\n        createdComponent() {\n            this.updateButtons();\n            this.setTitle();\n            this.getLanguagePlugins();\n\n            const languagePromise = new Promise((resolve) => {\n                resolve(this.languageId);\n            });\n\n            this.userPromise = this.userService.getUser().then((response) => {\n                return this.setUserData(response.data);\n            });\n\n            const promises = [\n                languagePromise,\n                this.userPromise,\n            ];\n\n            Promise.all(promises).then(() => {\n                this.loadLanguages();\n            });\n        },\n\n        setTitle() {\n            this.$emit('frw-set-title', this.$tc('sw-first-run-wizard.welcome.modalTitle'));\n        },\n\n        updateButtons() {\n            const buttonConfig = [\n                {\n                    key: 'next',\n                    label: this.$tc('sw-first-run-wizard.general.buttonNext'),\n                    position: 'right',\n                    variant: 'primary',\n                    action: 'sw.first.run.wizard.index.data-import',\n                    disabled: false,\n                },\n            ];\n\n            this.$emit('buttons-update', buttonConfig);\n        },\n\n        setUserData(userProfile) {\n            this.userProfile = userProfile;\n            return new Promise((resolve) => {\n                resolve(this.userRepository.get(this.userProfile.id));\n            });\n        },\n\n        getLanguagePlugins() {\n            this.languagePluginService.getPlugins().then((response) => {\n                this.languagePlugins = response.items;\n            });\n        },\n\n        onPluginInstalled(plugin) {\n            this.latestTouchedPlugin = this.getPluginByName(plugin);\n\n            this.getLanguagePlugins();\n            this.isLoading = true;\n            this.loadLanguages().then(() => {\n                this.showConfirmLanguageSwitchModal = true;\n                this.isLoading = false;\n            });\n        },\n\n        onPluginRemoved(plugin) {\n            this.latestTouchedPlugin = this.getPluginByName(plugin);\n\n            this.getLanguagePlugins();\n        },\n\n        onConfirmLanguageSwitch() {\n            this.loginService.verifyUserToken(this.user.pw).then((verifiedToken) => {\n                const context = { ...Shopware.Context.api };\n                context.authToken.access = verifiedToken;\n\n                this.userRepository.save(this.user, context)\n                    .then(async () => {\n                        await Shopware.Service('localeHelper').setLocaleWithId(this.user.localeId);\n                    })\n                    .finally(() => {\n                        this.showConfirmLanguageSwitchModal = false;\n                    });\n            }).catch(() => {\n                /* eslint-disable max-len */\n                this.createNotificationError({\n                    title: this.$tc('sw-users-permissions.users.user-detail.passwordConfirmation.notificationPasswordErrorTitle'),\n                    message: this.$tc('sw-users-permissions.users.user-detail.passwordConfirmation.notificationPasswordErrorMessage'),\n                });\n            }).finally(() => {\n                this.confirmPassword = '';\n            });\n        },\n\n        onCancelSwitch() {\n            this.showConfirmLanguageSwitchModal = false;\n        },\n\n        getPluginByName(name) {\n            if (this.languagePlugins.length < 1) {\n                return null;\n            }\n\n            return this.languagePlugins\n                .find((p) => p.name === name);\n        },\n\n        getLanguageCriteria() {\n            const languageCriteria = new Criteria(1, null);\n            languageCriteria.addAssociation('locale');\n            languageCriteria.addSorting(Criteria.sort('locale.name', 'ASC'));\n            languageCriteria.addSorting(Criteria.sort('locale.territory', 'ASC'));\n\n            return languageCriteria;\n        },\n\n        showPluginErrorNotification(message, errorMessage) {\n            const tryLater = this.$tc('sw-first-run-wizard.welcome.tryAgainLater');\n\n            this.createNotificationError({\n                message: `${message}\\n${errorMessage}\\n${tryLater}`,\n            });\n        },\n\n        loadLanguages() {\n            return this.languageRepository.search(this.languageCriteria).then((result) => {\n                this.languages = [];\n\n                result.forEach((lang) => {\n                    lang.customLabel = `${lang.locale.translated.name} (${lang.locale.translated.territory})`;\n                    this.languages.push(lang);\n                });\n\n                return this.languages;\n            });\n        },\n    },\n};\n","export default \"\\n{% block sw_first_run_wizard_welcome %}\\n<div class=\\\"sw-first-run-wizard-welcome\\\">\\n    <div class=\\\"center\\\">\\n        <img\\n            class=\\\"sw-first-run-wizard__welcome-image\\\"\\n            :src=\\\"assetFilter('/administration/static/img/first-run-wizard/welcome.svg')\\\"\\n            alt=\\\"\\\"\\n        >\\n        <h4 class=\\\"headline-welcome\\\">\\n            {{ $tc('sw-first-run-wizard.welcome.headlineWelcome') }}\\n        </h4>\\n        <p\\n            class=\\\"text-welcome\\\"\\n            v-html=\\\"$tc('sw-first-run-wizard.welcome.messageWelcome')\\\"\\n        ></p>\\n    </div>\\n\\n    <h5 class=\\\"text-change-language\\\">\\n        {{ $tc('sw-first-run-wizard.welcome.headlineChangeLanguage') }}\\n    </h5>\\n\\n    <sw-loader v-if=\\\"isLoading\\\" />\\n\\n    <sw-container\\n        columns=\\\"1fr 1fr\\\"\\n        gap=\\\"24px 0\\\"\\n    >\\n        <sw-plugin-card\\n            v-for=\\\"languagePlugin in languagePlugins\\\"\\n            :key=\\\"languagePlugin.name\\\"\\n            :plugin=\\\"languagePlugin\\\"\\n            @on-plugin-installed=\\\"onPluginInstalled\\\"\\n            @extension-activated=\\\"$emit('extension-activated', $event)\\\"\\n        />\\n    </sw-container>\\n\\n    \\n    {% block sw_first_run_wizard_welcome_confirm_language_switch_modal %}\\n    <sw-modal\\n        v-if=\\\"showConfirmLanguageSwitchModal\\\"\\n        variant=\\\"small\\\"\\n        :title=\\\"$tc('sw-first-run-wizard.welcome.switchLanguageModalTitle')\\\"\\n        class=\\\"sw-first-run-wizard-confirmLanguageSwitch-modal\\\"\\n        @modal-close=\\\"onCancelSwitch\\\"\\n    >\\n\\n        \\n        {% block sw_first_run_wizard_welcome_confirm_language_switch_modal_text %}\\n        <p class=\\\"sw-first-run-wizard-welcome__modal-text\\\">\\n            {{ $tc('sw-first-run-wizard.welcome.switchLanguageMessage', {}, { pluginName: latestTouchedPlugin.name }) }}\\n        </p>\\n        <sw-select-field\\n            {% if VUE3 %}\\n            v-model:value=\\\"user.localeId\\\"\\n            {% else %}\\n            v-model=\\\"user.localeId\\\"\\n            {% endif %}\\n            class=\\\"sw-profile__language\\\"\\n            :label=\\\"$tc('sw-users-permissions.users.user-detail.labelLanguage')\\\"\\n        >\\n            <option\\n                v-for=\\\"language in languages\\\"\\n                :key=\\\"language.locale.id\\\"\\n                :value=\\\"language.locale.id\\\"\\n                :selected=\\\"user.localeId === language.locale.id\\\"\\n            >\\n                {{ language.customLabel }}\\n            </option>\\n        </sw-select-field>\\n        <sw-password-field\\n            {% if VUE3 %}\\n            v-model:value=\\\"user.pw\\\"\\n            {% else %}\\n            v-model=\\\"user.pw\\\"\\n            {% endif %}\\n            type=\\\"password\\\"\\n            :label=\\\"$tc('sw-first-run-wizard.shopwareAccount.passwordPlaceholder')\\\"\\n            :copy-able=\\\"false\\\"\\n            @keypress.enter=\\\"onConfirmLanguageSwitch\\\"\\n        />\\n        {% endblock %}\\n\\n        \\n        {% block sw_first_run_wizard_welcome_confirm_language_switch_modal_footer %}\\n        <template #modal-footer>\\n            \\n            {% block sw_first_run_wizard_welcome_confirm_language_switch_modal_action_cancel %}\\n            <sw-button\\n                size=\\\"small\\\"\\n                @click=\\\"onCancelSwitch\\\"\\n            >\\n                {{ $tc('sw-first-run-wizard.welcome.cancelLanguageSwitch') }}\\n            </sw-button>\\n            {% endblock %}\\n\\n            \\n            {% block sw_first_run_wizard_welcome_confirm_language_switch_modal_action_switch %}\\n            <sw-button\\n                size=\\\"small\\\"\\n                variant=\\\"primary\\\"\\n                @click=\\\"onConfirmLanguageSwitch\\\"\\n            >\\n                {{ $tc('sw-first-run-wizard.welcome.confirmLanguageSwitch') }}\\n            </sw-button>\\n            {% endblock %}\\n        </template>\\n        {% endblock %}\\n    </sw-modal>\\n    {% endblock %}\\n</div>\\n{% endblock %}\\n\";","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../../../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--15-1!../../../../../node_modules/css-loader/dist/cjs.js??ref--15-2!../../../../../node_modules/sass-loader/dist/cjs.js??ref--15-3!./sw-first-run-wizard-welcome.scss\");\nif(content.__esModule) content = content.default;\nif(typeof content === 'string') content = [[module.id, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar add = require(\"!../../../../../node_modules/vue-style-loader/lib/addStylesClient.js\").default\nvar update = add(\"023a80a9\", content, true, {});"],"sourceRoot":""}