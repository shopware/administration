{"version":3,"sources":["webpack:///./src/module/sw-settings-customer-group/page/sw-settings-customer-group-list/index.js","webpack:///./src/module/sw-settings-customer-group/page/sw-settings-customer-group-list/sw-settings-customer-group-list.html.twig"],"names":["Mixin","Shopware","Criteria","Data","template","inject","mixins","getByName","data","isLoading","sortBy","limit","customerGroups","sortDirection","searchConfigEntity","metaInfo","title","this","$createTitle","computed","columns","getColumns","customerGroupRepository","repositoryFactory","create","allCustomerGroupsCriteria","criteria","page","setTerm","term","addSorting","sort","created","createdComponent","methods","getList","_this","_asyncToGenerator","_regeneratorRuntime","mark","_callee","wrap","_context","prev","next","addQueryScores","sent","entitySearchable","total","abrupt","freshSearchTerm","resetSorting","search","then","searchResult","stop","property","label","inlineEdit","routerLink","primary","customerGroupCriteriaWithFilter","idsOfSelectedCustomerGroups","addFilter","equalsAny","createErrorNotification","createNotificationError","message","$tc","customerGroupCanBeDeleted","customerGroup","hasNoCustomers","customers","length","hasNoSalesChannel","salesChannels","deleteCustomerGroup","_this2","$refs","listing","deleteId","delete","id","resetSelection","doSearch","deleteCustomerGroups","_this3","selectedCustomerGroups","Object","values","selection","map","currentProxy","response","reduce","accumulator","deleteItems","onContextMenuDelete"],"mappings":"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","file":"static/js/ffea11e7148321064c7b.js","sourcesContent":["import template from './sw-settings-customer-group-list.html.twig';\n\n/**\n * @package checkout\n */\n\nconst { Mixin } = Shopware;\nconst { Criteria } = Shopware.Data;\n\n// eslint-disable-next-line sw-deprecation-rules/private-feature-declarations\nexport default {\n    template,\n\n    inject: ['repositoryFactory', 'acl'],\n\n    mixins: [\n        Mixin.getByName('listing'),\n        Mixin.getByName('placeholder'),\n        Mixin.getByName('notification'),\n    ],\n\n    data() {\n        return {\n            isLoading: false,\n            sortBy: 'name',\n            limit: 10,\n            customerGroups: null,\n            sortDirection: 'ASC',\n            searchConfigEntity: 'customer_group',\n        };\n    },\n\n    metaInfo() {\n        return {\n            title: this.$createTitle(),\n        };\n    },\n\n    computed: {\n        columns() {\n            return this.getColumns();\n        },\n\n        customerGroupRepository() {\n            return this.repositoryFactory.create('customer_group');\n        },\n\n        allCustomerGroupsCriteria() {\n            const criteria = new Criteria(this.page, this.limit);\n\n            criteria.setTerm(this.term);\n            criteria.addSorting(Criteria.sort(this.sortBy, this.sortDirection));\n\n            return criteria;\n        },\n    },\n\n    created() {\n        this.createdComponent();\n    },\n\n    methods: {\n        createdComponent() {\n            this.getList();\n        },\n\n        async getList() {\n            this.isLoading = true;\n\n            const criteria = await this.addQueryScores(this.term, this.allCustomerGroupsCriteria);\n            if (!this.entitySearchable) {\n                this.isLoading = false;\n                this.total = 0;\n\n                return;\n            }\n\n            if (this.freshSearchTerm) {\n                criteria.resetSorting();\n            }\n\n            this.customerGroupRepository.search(criteria)\n                .then((searchResult) => {\n                    this.total = searchResult.total;\n                    this.customerGroups = searchResult;\n                    this.isLoading = false;\n                });\n        },\n\n        getColumns() {\n            return [{\n                property: 'name',\n                label: 'sw-settings-customer-group.list.columnName',\n                inlineEdit: 'string',\n                routerLink: 'sw.settings.customer.group.detail',\n                primary: true,\n            }, {\n                property: 'displayGross',\n                label: 'sw-settings-customer-group.list.columnDisplayGross',\n                inlineEdit: 'boolean',\n            }];\n        },\n\n        customerGroupCriteriaWithFilter(idsOfSelectedCustomerGroups) {\n            const criteria = new Criteria(1, this.limit);\n\n            criteria.addFilter(\n                Criteria.equalsAny('id', idsOfSelectedCustomerGroups),\n            );\n\n            return criteria;\n        },\n\n        createErrorNotification() {\n            return this.createNotificationError({\n                message: this.$tc('sw-settings-customer-group.notification.errorMessageCannotDeleteCustomerGroup'),\n            });\n        },\n\n        customerGroupCanBeDeleted(customerGroup) {\n            const hasNoCustomers = customerGroup.customers.length === 0;\n            const hasNoSalesChannel = customerGroup.salesChannels.length === 0;\n\n            return hasNoCustomers && hasNoSalesChannel;\n        },\n\n        deleteCustomerGroup(customerGroup) {\n            this.$refs.listing.deleteId = null;\n\n            if (!this.customerGroupCanBeDeleted(customerGroup)) {\n                this.createErrorNotification();\n            }\n\n            this.customerGroupRepository.delete(customerGroup.id)\n                .then(() => {\n                    this.$refs.listing.resetSelection();\n                    this.$refs.listing.doSearch();\n                });\n        },\n\n        deleteCustomerGroups() {\n            const selectedCustomerGroups = Object.values(this.$refs.listing.selection).map(currentProxy => {\n                return currentProxy.id;\n            });\n\n            this.customerGroupRepository.search(this.customerGroupCriteriaWithFilter(selectedCustomerGroups))\n                .then(response => {\n                    const hasError = response.reduce((accumulator, customerGroup) => {\n                        if (accumulator) {\n                            return accumulator;\n                        }\n\n                        accumulator = !this.customerGroupCanBeDeleted(customerGroup);\n                        return accumulator;\n                    }, false);\n\n                    if (hasError) {\n                        this.createErrorNotification();\n                    }\n\n                    this.$refs.listing.deleteItems();\n                });\n        },\n\n        onContextMenuDelete(customerGroup) {\n            this.$refs.listing.deleteId = customerGroup.id;\n        },\n    },\n};\n","export default \"\\n{% block sw_settings_customer_group_list %}\\n<sw-page class=\\\"sw-settings-customer-group-list\\\">\\n\\n    \\n    {% block sw_settings_customer_group_list_search_bar %}\\n    <template #search-bar>\\n        <sw-search-bar\\n            initial-search-type=\\\"customer_group\\\"\\n            :placeholder=\\\"$tc('sw-settings-customer-group.general.placeholderSearchBar')\\\"\\n            :initial-search=\\\"term\\\"\\n            @search=\\\"onSearch\\\"\\n        />\\n    </template>\\n    {% endblock %}\\n\\n    \\n    {% block sw_settings_customer_group_list_smart_bar_header %}\\n    <template #smart-bar-header>\\n        \\n        {% block sw_settings_customer_group_list_smart_bar_header_title %}\\n        <h2>\\n            \\n            {% block sw_settings_customer_group_list_smart_bar_header_title_text %}\\n            {{ $tc('sw-settings.index.title') }}\\n            <sw-icon\\n                name=\\\"regular-chevron-right-xs\\\"\\n                small\\n            />\\n            {{ $tc('sw-settings-customer-group.general.mainMenuItemGeneral') }}\\n            {% endblock %}\\n\\n            \\n            {% block sw_settings_customer_group_list_smart_bar_header_amount %}\\n            <span\\n                v-if=\\\"!isLoading && customerGroups && total\\\"\\n                class=\\\"sw-page__smart-bar-amount\\\"\\n            >\\n                ({{ total }})\\n            </span>\\n            {% endblock %}\\n        </h2>\\n        {% endblock %}\\n    </template>\\n    {% endblock %}\\n\\n    \\n    {% block sw_settings_customer_group_list_language_switch %}\\n    <template #language-switch>\\n        <sw-language-switch @on-change=\\\"onRefresh\\\" />\\n    </template>\\n    {% endblock %}\\n\\n    \\n    {% block sw_settings_customer_group_list_actions %}\\n    <template #smart-bar-actions>\\n        \\n        {% block sw_settings_customer_group_list_actions_create %}\\n        <sw-button\\n            v-tooltip.bottom=\\\"{\\n                message: $tc('sw-privileges.tooltip.warning'),\\n                disabled: acl.can('customer_groups.creator'),\\n                showOnDisabledElements: true\\n            }\\\"\\n            class=\\\"sw-settings-customer-group-list__create\\\"\\n            variant=\\\"primary\\\"\\n            :disabled=\\\"!acl.can('customer_groups.creator')\\\"\\n            :router-link=\\\"{ name: 'sw.settings.customer.group.create' }\\\"\\n        >\\n            {{ $tc('sw-settings-customer-group.general.buttonCreate') }}\\n        </sw-button>\\n        {% endblock %}\\n    </template>\\n    {% endblock %}\\n\\n    \\n    {% block sw_settings_customer_group_list_cardview %}\\n    <template #content>\\n        <sw-card-view>\\n            \\n            {% block sw_settings_customer_group_list_card_content %}\\n            <sw-card\\n                position-identifier=\\\"sw-settings-customer-group-list\\\"\\n            >\\n\\n                \\n                {% block sw_settings_customer_group_list_grid %}\\n                <template #grid>\\n                    <sw-entity-listing\\n                        v-if=\\\"isLoading || entitySearchable\\\"\\n                        ref=\\\"listing\\\"\\n                        class=\\\"sw-settings-customer-group-list-grid\\\"\\n                        identifier=\\\"sw-settings-customer-group-list\\\"\\n                        detail-route=\\\"sw.settings.customer.group.detail\\\"\\n                        :repository=\\\"customerGroupRepository\\\"\\n                        :criteria-limit=\\\"limit\\\"\\n                        :is-loading=\\\"isLoading\\\"\\n                        :items=\\\"customerGroups\\\"\\n                        :columns=\\\"columns\\\"\\n                        :sort-by=\\\"currentSortBy\\\"\\n                        :sort-direction=\\\"sortDirection\\\"\\n                        :full-page=\\\"false\\\"\\n                        :allow-view=\\\"acl.can('customer_groups.viewer')\\\"\\n                        :allow-edit=\\\"acl.can('customer_groups.editor')\\\"\\n                        :allow-inline-edit=\\\"acl.can('customer_groups.editor')\\\"\\n                        :allow-delete=\\\"acl.can('customer_groups.deleter')\\\"\\n                        :show-selection=\\\"acl.can('customer_groups.deleter')\\\"\\n                        @column-sort=\\\"onSortColumn\\\"\\n                        @page-change=\\\"onPageChange\\\"\\n                    >\\n\\n                        <template #bulk-modal-delete-items>\\n                            <sw-button\\n                                variant=\\\"danger\\\"\\n                                size=\\\"small\\\"\\n                                @click=\\\"deleteCustomerGroups\\\"\\n                            >\\n                                {{ $tc('global.default.delete') }}\\n                            </sw-button>\\n                        </template>\\n\\n                        <template #delete-action=\\\"{ item }\\\">\\n                            <sw-context-menu-item\\n                                class=\\\"sw-settings-customer-group-list-grid__delete-action\\\"\\n                                variant=\\\"danger\\\"\\n                                :disabled=\\\"!acl.can('customer_groups.deleter')\\\"\\n                                @click=\\\"onContextMenuDelete(item)\\\"\\n                            >\\n                                {{ $tc('global.default.delete') }}\\n                            </sw-context-menu-item>\\n                        </template>\\n\\n                        <template #delete-modal-delete-item=\\\"{ item }\\\">\\n                            <sw-button\\n                                variant=\\\"danger\\\"\\n                                size=\\\"small\\\"\\n                                @click=\\\"deleteCustomerGroup(item)\\\"\\n                            >\\n                                {{ $tc('global.default.delete') }}\\n                            </sw-button>\\n                        </template>\\n\\n                        \\n                        {% block sw_settings_customer_group_list_grid_column_display_gross %}\\n                        <template #column-displayGross=\\\"{ item }\\\">\\n                            \\n                            {% block sw_settings_customer_group_list_grid_column_display_gross_inner %}\\n                            {{ $tc('sw-settings-customer-group.detail.fieldDisplayGrossValues', item.displayGross) }}\\n                            {% endblock %}\\n                        </template>\\n                        {% endblock %}\\n                    </sw-entity-listing>\\n                </template>\\n                {% endblock %}\\n\\n            </sw-card>\\n            {% endblock %}\\n        </sw-card-view>\\n\\n        \\n        {% block sw_settings_customer_group_list_empty_state %}\\n        <sw-empty-state\\n            v-if=\\\"!isLoading && !total && isValidTerm(term)\\\"\\n            :title=\\\"$tc('sw-empty-state.messageNoResultTitle')\\\"\\n        >\\n            <template #default>\\n                {{ $tc('sw-empty-state.messageNoResultSublineBefore') }}\\n                <router-link\\n                    class=\\\"sw-empty-state__description-link\\\"\\n                    :to=\\\"{ name: 'sw.profile.index.searchPreferences' }\\\"\\n                >\\n                    {{ $tc('sw-empty-state.messageNoResultSublineLink') }}\\n                </router-link>\\n                {{ $tc('sw-empty-state.messageNoResultSublineAfter') }}\\n            </template>\\n        </sw-empty-state>\\n        {% endblock %}\\n    </template>\\n    {% endblock %}\\n\\n</sw-page>\\n{% endblock %}\\n\";"],"sourceRoot":""}