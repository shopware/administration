{"version":3,"sources":["webpack:///./src/module/sw-order/component/sw-order-line-items-grid-sales-channel/index.js","webpack:///./src/module/sw-order/component/sw-order-line-items-grid-sales-channel/sw-order-line-items-grid-sales-channel.html.twig","webpack:///./src/module/sw-order/component/sw-order-line-items-grid-sales-channel/sw-order-line-items-grid-sales-channel.scss"],"names":["_Shopware","Shopware","Utils","State","Service","get","format","template","inject","props","salesChannelId","type","String","required","default","cart","Object","currency","isCustomerActive","Boolean","isLoading","data","selectedItems","searchTerm","computed","orderLineItemRepository","create","cartLineItems","this","lineItems","keyWords","split","filter","item","label","every","key","toLowerCase","includes","lineItemTypes","LineItemType","isCartTokenAvailable","getters","isAddNewItemButtonDisabled","taxStatus","unitPriceLabel","$tc","getLineItemColumns","columnDefinitions","property","dataIndex","allowResize","align","inlineEdit","width","primary","multiLine","push","concat","assetFilter","Filter","getByName","currencyFilter","methods","onInlineEditSave","priceDefinition","isCalculated","$emit","onInlineEditCancel","_isNew","initLineItem","identifier","initialQuantity","quantity","createNewOrderLineItem","$refs","itemFilter","term","versionId","Context","api","liveVersionId","taxRules","taxRate","percentage","price","unitPrice","totalPrice","precision","onInsertExistingItem","PRODUCT","unshift","commit","onInsertBlankItem","description","CUSTOM","onInsertCreditItem","CREDIT","onSelectionChanged","selection","onDeleteSelectedItems","_this","selectedIds","keys","forEach","length","dataGrid","resetSelection","itemCreatedFromProduct","onSearchTermChange","isCreditItem","isProductItem","getMinItemPrice","isPromotionItem","PROMOTION","isAutoPromotionItem","showTaxValue","checkItemPrice","Math","abs","tooltipTaxDetail","_this2","decorateTaxes","_toConsumableArray","calculatedTaxes","sort","prev","current","map","taxItem","tax","shortName","showDelay","message","join","hasMultipleTaxes","changeItemQuantity","value","content","__esModule","module","i","locals","exports","add"],"mappings":"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","file":"static/js/eacfc077032ae4fc09c2.js","sourcesContent":["import template from './sw-order-line-items-grid-sales-channel.html.twig';\nimport { LineItemType } from '../../order.types';\nimport './sw-order-line-items-grid-sales-channel.scss';\n\n/**\n * @package checkout\n */\n\nconst { Utils, State, Service } = Shopware;\nconst { get, format } = Utils;\n\n// eslint-disable-next-line sw-deprecation-rules/private-feature-declarations\nexport default {\n    template,\n\n    inject: ['feature'],\n\n    props: {\n        salesChannelId: {\n            type: String,\n            required: true,\n            default: '',\n        },\n\n        cart: {\n            type: Object,\n            required: true,\n        },\n\n        currency: {\n            type: Object,\n            required: true,\n        },\n\n        isCustomerActive: {\n            type: Boolean,\n            default: false,\n        },\n\n        isLoading: {\n            type: Boolean,\n            default: false,\n        },\n    },\n\n    data() {\n        return {\n            selectedItems: {},\n            searchTerm: '',\n        };\n    },\n\n    computed: {\n        orderLineItemRepository() {\n            return Service('repositoryFactory').create('order_line_item');\n        },\n\n        cartLineItems() {\n            if (!this.searchTerm) {\n                return this.cart.lineItems;\n            }\n\n            // Filter based on the product label is not blank and contains the search term or not\n            const keyWords = this.searchTerm.split(/[\\W_]+/ig);\n            return this.cart.lineItems.filter(item => {\n                if (!item.label) {\n                    return false;\n                }\n\n                return keyWords.every(key => item.label.toLowerCase().includes(key.toLowerCase()));\n            });\n        },\n\n        lineItemTypes() {\n            return LineItemType;\n        },\n\n        isCartTokenAvailable() {\n            return State.getters['swOrder/isCartTokenAvailable'];\n        },\n\n        isAddNewItemButtonDisabled() {\n            return !this.isCustomerActive || !this.isCartTokenAvailable || this.isLoading;\n        },\n\n        taxStatus() {\n            return get(this.cart, 'price.taxStatus', '');\n        },\n\n        unitPriceLabel() {\n            if (this.taxStatus === 'net') {\n                return this.$tc('sw-order.createBase.columnPriceNet');\n            }\n\n            if (this.taxStatus === 'tax-free') {\n                return this.$tc('sw-order.createBase.columnPriceTaxFree');\n            }\n\n            return this.$tc('sw-order.createBase.columnPriceGross');\n        },\n\n        getLineItemColumns() {\n            const columnDefinitions = [{\n                property: 'quantity',\n                dataIndex: 'quantity',\n                label: this.$tc('sw-order.createBase.columnQuantity'),\n                allowResize: false,\n                align: 'right',\n                inlineEdit: true,\n                width: '80px',\n            }, {\n                property: 'label',\n                dataIndex: 'label',\n                label: this.$tc('sw-order.createBase.columnProductName'),\n                allowResize: false,\n                primary: true,\n                inlineEdit: true,\n                multiLine: true,\n            }, {\n                property: 'unitPrice',\n                dataIndex: 'unitPrice',\n                label: this.unitPriceLabel,\n                allowResize: false,\n                align: 'right',\n                inlineEdit: true,\n                width: '120px',\n            }];\n\n            if (this.taxStatus !== 'tax-free') {\n                columnDefinitions.push({\n                    property: 'tax',\n                    label: this.$tc('sw-order.createBase.columnTax'),\n                    allowResize: false,\n                    align: 'right',\n                    inlineEdit: true,\n                    width: '100px',\n                });\n            }\n\n            return [...columnDefinitions, {\n                property: 'totalPrice',\n                dataIndex: 'totalPrice',\n                label: this.taxStatus === 'gross' ?\n                    this.$tc('sw-order.createBase.columnTotalPriceGross') :\n                    this.$tc('sw-order.createBase.columnTotalPriceNet'),\n                allowResize: false,\n                align: 'right',\n                width: '80px',\n            }];\n        },\n\n        assetFilter() {\n            return Shopware.Filter.getByName('asset');\n        },\n\n        currencyFilter() {\n            return Shopware.Filter.getByName('currency');\n        },\n    },\n\n    methods: {\n        onInlineEditSave(item) {\n            if (item.label === '') {\n                return;\n            }\n            item.priceDefinition.isCalculated = true;\n            this.$emit('on-save-item', item);\n        },\n\n        onInlineEditCancel(item) {\n            if (item._isNew) {\n                this.initLineItem(item);\n                delete item.identifier;\n            }\n\n            // Reset quantity\n            if (item.initialQuantity) {\n                item.quantity = item.initialQuantity;\n            }\n        },\n\n        createNewOrderLineItem() {\n            this.searchTerm = '';\n            this.$refs.itemFilter.term = '';\n\n            const item = this.orderLineItemRepository.create();\n            item.versionId = Shopware.Context.api.liveVersionId;\n            this.initLineItem(item);\n\n            return item;\n        },\n\n        initLineItem(item) {\n            item.priceDefinition = {\n                isCalculated: false,\n                taxRules: [{ taxRate: 0, percentage: 100 }],\n                price: 0,\n            };\n            item.price = {\n                taxRules: [{ taxRate: 0 }],\n                unitPrice: '...',\n                quantity: 1,\n                totalPrice: '...',\n            };\n            item.quantity = 1;\n            item.unitPrice = 0;\n            item.totalPrice = 0;\n            item.precision = 2;\n            item.label = '';\n        },\n\n        onInsertExistingItem() {\n            const item = this.createNewOrderLineItem();\n            item.type = this.lineItemTypes.PRODUCT;\n            this.cartLineItems.unshift(item);\n            State.commit('swOrder/setCartLineItems', this.cartLineItems);\n        },\n\n        onInsertBlankItem() {\n            const item = this.createNewOrderLineItem();\n            item.description = 'custom line item';\n            item.type = this.lineItemTypes.CUSTOM;\n            this.cartLineItems.unshift(item);\n            State.commit('swOrder/setCartLineItems', this.cartLineItems);\n        },\n\n        onInsertCreditItem() {\n            const item = this.createNewOrderLineItem();\n            item.description = 'credit line item';\n            item.type = this.lineItemTypes.CREDIT;\n            this.cartLineItems.unshift(item);\n            State.commit('swOrder/setCartLineItems', this.cartLineItems);\n        },\n\n        onSelectionChanged(selection) {\n            this.selectedItems = selection;\n        },\n\n        onDeleteSelectedItems() {\n            const selectedIds = [];\n\n            Object.keys(this.selectedItems).forEach(key => {\n                if (this.selectedItems[key].label === '') {\n                    State.commit('swOrder/removeEmptyLineItem', key);\n                } else {\n                    selectedIds.push(key);\n                }\n            });\n\n            if (selectedIds.length > 0) {\n                this.$emit('on-remove-items', selectedIds);\n            }\n\n            this.$refs.dataGrid.resetSelection();\n        },\n\n        itemCreatedFromProduct(item) {\n            return item._isNew && item.type === this.lineItemTypes.PRODUCT;\n        },\n\n        onSearchTermChange(searchTerm) {\n            this.searchTerm = searchTerm.toLowerCase();\n        },\n\n        isCreditItem(item) {\n            return item.type === this.lineItemTypes.CREDIT;\n        },\n\n        isProductItem(item) {\n            return item.type === this.lineItemTypes.PRODUCT;\n        },\n\n        getMinItemPrice(item) {\n            if (this.isCreditItem(item)) {\n                return null;\n            }\n            return 0;\n        },\n\n        isPromotionItem(item) {\n            return item.type === this.lineItemTypes.PROMOTION;\n        },\n\n        isAutoPromotionItem(item) {\n            return this.isPromotionItem(item) && !get(item, 'payload.code');\n        },\n\n        showTaxValue(item) {\n            return (this.isCreditItem(item) || this.isPromotionItem(item)) && (item.price.taxRules.length > 1)\n                ? this.$tc('sw-order.createBase.textCreditTax')\n                : `${item.price.taxRules[0].taxRate} %`;\n        },\n\n        checkItemPrice(price, item) {\n            if (this.isCreditItem(item)) {\n                item.priceDefinition.price = Math.abs(price) * -1;\n                return;\n            }\n\n            item.priceDefinition.price = price;\n        },\n\n        tooltipTaxDetail(item) {\n            const sortTaxes = [...item.price.calculatedTaxes].sort((prev, current) => {\n                return prev.taxRate - current.taxRate;\n            });\n\n            const decorateTaxes = sortTaxes.map((taxItem) => {\n                return this.$tc('sw-order.createBase.taxDetail', 0, {\n                    taxRate: taxItem.taxRate,\n                    tax: format.currency(taxItem.tax, this.currency.shortName),\n                });\n            });\n\n            return {\n                showDelay: 300,\n                message: `${this.$tc('sw-order.createBase.tax')}<br>${decorateTaxes.join('<br>')}`,\n            };\n        },\n\n        hasMultipleTaxes(item) {\n            return get(item, 'price.calculatedTaxes') && item.price.calculatedTaxes.length > 1;\n        },\n\n        changeItemQuantity(value, item) {\n            if (!item.initialQuantity) {\n                item.initialQuantity = item.quantity;\n            }\n\n            item.quantity = value;\n        },\n    },\n};\n","export default \"\\n{% block sw_order_line_items_grid_sales_channel %}\\n<sw-container\\n    type=\\\"row\\\"\\n    class=\\\"sw-order-line-items-grid-sales-channel\\\"\\n>\\n\\n    \\n    {% block sw_order_line_items_grid_sales_channel_actions %}\\n    <sw-container\\n        class=\\\"sw-order-line-items-grid-sales-channel__actions-container\\\"\\n        columns=\\\"1fr auto\\\"\\n        gap=\\\"16px\\\"\\n    >\\n\\n        \\n        {% block sw_order_line_items_grid_sales_channel_header %}\\n\\n        \\n        {% block sw_order_line_items_grid_sales_channel_line_item_filter %}\\n        <div align=\\\"left\\\">\\n            <sw-card-filter\\n                ref=\\\"itemFilter\\\"\\n                :placeholder=\\\"$tc('sw-order.createBase.placeholderSearchBarItem')\\\"\\n                @sw-card-filter-term-change=\\\"onSearchTermChange\\\"\\n            />\\n        </div>\\n        {% endblock %}\\n\\n        \\n        {% block sw_order_line_items_grid_sales_channel_create_actions_button_group %}\\n        <div align=\\\"right\\\">\\n            <sw-button-group>\\n\\n                \\n                {% block sw_order_line_items_grid_sales_channel_add_existing_product %}\\n                <sw-button\\n                    class=\\\"sw-order-line-items-grid-sales-channel__add-product\\\"\\n                    variant=\\\"ghost\\\"\\n                    size=\\\"small\\\"\\n                    :disabled=\\\"isAddNewItemButtonDisabled\\\"\\n                    @click=\\\"onInsertExistingItem\\\"\\n                >\\n                    {{ $tc('sw-order.createBase.buttonAddProduct') }}\\n                </sw-button>\\n                {% endblock %}\\n\\n                \\n                {% block sw_order_line_items_grid_sales_channel_create_actions_dropdown %}\\n                <sw-context-button>\\n                    <template #button>\\n                        <sw-button\\n                            variant=\\\"ghost\\\"\\n                            size=\\\"small\\\"\\n                            square\\n                            :disabled=\\\"isAddNewItemButtonDisabled\\\"\\n                        >\\n                            <sw-icon\\n                                name=\\\"regular-chevron-down-xxs\\\"\\n                                decorative\\n                            />\\n                        </sw-button>\\n                    </template>\\n\\n                    \\n                    {% block sw_order_line_items_grid_sales_channel_create_actions_dropdown_menu %}\\n                    <sw-context-menu-item\\n                        class=\\\"sw-order-line-items-grid-sales-channel__add-custom-item\\\"\\n                        @click=\\\"onInsertBlankItem\\\"\\n                    >\\n                        {{ $tc('sw-order.createBase.buttonAddBlankProduct') }}\\n                    </sw-context-menu-item>\\n                    <sw-context-menu-item\\n                        class=\\\"sw-order-line-items-grid-sales-channel__add-credit-item\\\"\\n                        @click=\\\"onInsertCreditItem\\\"\\n                    >\\n                        {{ $tc('sw-order.createBase.buttonAddCredit') }}\\n                    </sw-context-menu-item>\\n                    {% endblock %}\\n                </sw-context-button>\\n                {% endblock %}\\n            </sw-button-group>\\n        </div>\\n        {% endblock %}\\n\\n        {% endblock %}\\n    </sw-container>\\n    {% endblock %}\\n\\n    \\n    {% block sw_order_line_items_grid_sales_channel_grid %}\\n    \\n    {% block sw_order_line_items_grid_sales_channel_grid_no_items %}\\n    <sw-empty-state\\n        v-if=\\\"cartLineItems.length === 0\\\"\\n        :title=\\\"$tc('sw-order.createBase.messageEmptyItem')\\\"\\n        :absolute=\\\"false\\\"\\n    >\\n        <template #icon>\\n            <img\\n                :src=\\\"assetFilter('/administration/static/img/empty-states/products-empty-state.svg')\\\"\\n                :alt=\\\"$tc('sw-order.createBase.messageEmptyItem')\\\"\\n            >\\n        </template>\\n    </sw-empty-state>\\n    {% endblock %}\\n\\n    \\n    {% block sw_order_line_items_grid_sales_channel_grid_item_table %}\\n    <sw-data-grid\\n        v-else\\n        ref=\\\"dataGrid\\\"\\n        :data-source=\\\"cartLineItems\\\"\\n        :columns=\\\"getLineItemColumns\\\"\\n        :full-page=\\\"false\\\"\\n        :show-settings=\\\"false\\\"\\n        :show-selection=\\\"isCustomerActive\\\"\\n        show-actions\\n        :allow-column-edit=\\\"false\\\"\\n        :allow-inline-edit=\\\"isCustomerActive\\\"\\n        :is-record-editable=\\\"(item) => !isPromotionItem(item)\\\"\\n        :is-record-selectable=\\\"(item) => !isAutoPromotionItem(item)\\\"\\n        :compact-mode=\\\"false\\\"\\n        identifier=\\\"sw-order-line-item-grid-sales-channel\\\"\\n        class=\\\"sw-order-line-items-grid-sales-channel__data-grid\\\"\\n        @inline-edit-cancel=\\\"onInlineEditCancel\\\"\\n        @inline-edit-save=\\\"onInlineEditSave\\\"\\n        @selection-change=\\\"onSelectionChanged\\\"\\n    >\\n\\n        \\n        {% block sw_order_line_items_grid_sales_channel_grid_columns %}\\n        \\n        {% block sw_order_line_items_grid_sales_channel_grid_columns_label %}\\n        <template #column-label=\\\"{ item, isInlineEdit}\\\">\\n            \\n            {% block sw_order_line_items_grid_sales_channel_grid_columns_label_inline_edit %}\\n            <sw-order-product-select\\n                v-if=\\\"isInlineEdit\\\"\\n                :item=\\\"item\\\"\\n                :tax-status=\\\"taxStatus\\\"\\n                :sales-channel-id=\\\"salesChannelId\\\"\\n            />\\n            {% endblock %}\\n\\n            \\n            {% block sw_order_line_items_grid_sales_channel_grid_columns_label_link %}\\n            <div\\n                v-else-if=\\\"!isInlineEdit && isProductItem(item)\\\"\\n            >\\n\\n                \\n                {% block sw_order_line_items_grid_column_payload_options %}\\n                <router-link\\n                    v-if=\\\"item.payload && item.payload.options\\\"\\n                    target=\\\"_blank\\\"\\n                    class=\\\"sw-order-line-items-grid-sales-channel__item-payload-options\\\"\\n                    :title=\\\"$tc('sw-order.detailBase.contextMenuShowProduct')\\\"\\n                    :to=\\\"{ name: 'sw.product.detail', params: { id: item.identifier || item.id } }\\\"\\n                >\\n                    <sw-product-variant-info :variations=\\\"item.payload.options\\\">\\n                        <div class=\\\"sw-order-line-items-grid__item-label\\\">\\n                            {{ item.label }}\\n                        </div>\\n                    </sw-product-variant-info>\\n                </router-link>\\n\\n                <div\\n                    v-else\\n                    class=\\\"sw-order-line-items-grid-sales-channel__item-payload-options\\\"\\n                >\\n                    <span class=\\\"sw-order-line-items-grid__item-label\\\">\\n                        {{ item.label }}\\n                    </span>\\n                </div>\\n                {% endblock %}\\n            </div>\\n            {% endblock %}\\n\\n            \\n            {% block sw_order_line_items_grid_sales_channel_grid_columns_label_content %}\\n            <template v-else>\\n                <span class=\\\"sw-order-line-items-grid-sales-channel__item-label\\\">\\n                    {{ item.label }}\\n                </span>\\n            </template>\\n            {% endblock %}\\n        </template>\\n        {% endblock %}\\n\\n        \\n        {% block sw_order_line_items_grid_sales_channel_grid_columns_unit_price %}\\n        <template #column-unitPrice=\\\"{ item, isInlineEdit}\\\">\\n\\n            \\n            {% block sw_order_line_items_grid_sales_channel_grid_columns_unit_price_inline_edit %}\\n            <sw-number-field\\n                v-if=\\\"isInlineEdit && !itemCreatedFromProduct(item)\\\"\\n                placeholder=\\\"0\\\"\\n                size=\\\"small\\\"\\n                :min=\\\"getMinItemPrice(item)\\\"\\n                :value=\\\"item.priceDefinition.price\\\"\\n                {% if VUE3 %}\\n                @update:value=\\\"checkItemPrice($event, item)\\\"\\n                {% else %}\\n                @change=\\\"checkItemPrice($event, item)\\\"\\n                {% endif %}\\n            />\\n            {% endblock %}\\n\\n            \\n            {% block sw_order_line_items_grid_sales_channel_grid_columns_unit_price_content %}\\n            <template v-else>\\n                {{ currencyFilter(item.price.unitPrice,  currency.shortName) }}\\n            </template>\\n            {% endblock %}\\n\\n        </template>\\n        {% endblock %}\\n\\n        \\n        {% block sw_order_line_items_grid_sales_channel_grid_columns_total_price %}\\n        <template #column-totalPrice=\\\"{ item }\\\">\\n            \\n            {% block sw_order_line_items_grid_sales_channel_grid_columns_total_price_content %}\\n            {{ currencyFilter(item.price.totalPrice, currency.shortName) }}\\n            {% endblock %}\\n        </template>\\n        {% endblock %}\\n\\n        \\n        {% block sw_order_line_items_grid_sales_channel_grid_columns_quantity %}\\n        <template #column-quantity=\\\"{ item, isInlineEdit }\\\">\\n\\n            \\n            {% block sw_order_line_items_grid_sales_channel_grid_columns_quantity_inline_edit %}\\n            <sw-number-field\\n                v-if=\\\"isInlineEdit && !isCreditItem(item)\\\"\\n                number-type=\\\"int\\\"\\n                :min=\\\"1\\\"\\n                size=\\\"small\\\"\\n                placeholder=\\\"0\\\"\\n                :value=\\\"item.quantity\\\"\\n                {% if VUE3 %}\\n                @update:value=\\\"changeItemQuantity($event, item)\\\"\\n                {% else %}\\n                @change=\\\"changeItemQuantity($event, item)\\\"\\n                {% endif %}\\n            />\\n            {% endblock %}\\n\\n            \\n            {% block sw_order_line_items_grid_sales_channel_grid_columns_quantity_content %}\\n            <template v-else>\\n                <span class=\\\"sw-order-line-items-grid-sales-channel__quantity\\\">\\n                    {{ item.quantity }}\\n                </span>\\n            </template>\\n            {% endblock %}\\n        </template>\\n        {% endblock %}\\n\\n        \\n        {% block sw_order_line_items_grid_sales_channel_grid_columns_tax %}\\n        <template #column-tax=\\\"{ item, isInlineEdit }\\\">\\n\\n            \\n            {% block sw_order_line_items_grid_sales_channel_grid_columns_tax_inline_edit %}\\n            <sw-number-field\\n                v-if=\\\"isInlineEdit &&\\n                    !itemCreatedFromProduct(item.id) &&\\n                    item.priceDefinition &&\\n                    item.priceDefinition.taxRules &&\\n                    !isCreditItem(item)\\\"\\n                key=\\\"order-line-item-tax-edit-default\\\"\\n                {% if VUE3 %}\\n                v-model:value=\\\"item.priceDefinition.taxRules[0].taxRate\\\"\\n                {% else %}\\n                v-model=\\\"item.priceDefinition.taxRules[0].taxRate\\\"\\n                {% endif %}\\n                size=\\\"small\\\"\\n                placeholder=\\\"0\\\"\\n                :min=\\\"0\\\"\\n            />\\n            {% endblock %}\\n\\n            \\n            {% block sw_order_line_items_grid_sales_channel_grid_columns_tax_content_tooltip %}\\n            <span\\n                v-else-if=\\\"hasMultipleTaxes(item)\\\"\\n                v-tooltip=\\\"tooltipTaxDetail(item)\\\"\\n                class=\\\"sw-order-line-items-grid-sales-channel__item-tax-tooltip\\\"\\n            >\\n                {{ showTaxValue(item) }}\\n            </span>\\n            {% endblock %}\\n\\n            \\n            {% block sw_order_line_items_grid_sales_channel_grid_columns_tax_content %}\\n            <template v-else-if=\\\"item.price && item.price.taxRules.length\\\">\\n                {{ showTaxValue(item) }}\\n            </template>\\n            {% endblock %}\\n\\n        </template>\\n        {% endblock %}\\n\\n        \\n        {% block sw_order_line_items_grid_sales_channel_grid_actions %}\\n        <template #actions=\\\"{ item }\\\">\\n            \\n            {% block sw_order_line_items_grid_sales_channel_grid_actions_show %}\\n            <sw-context-menu-item\\n                :disabled=\\\"!isProductItem(item)\\\"\\n                icon=\\\"regular-eye\\\"\\n                :router-link=\\\"{ name: 'sw.product.detail', params: { id: item.id } }\\\"\\n                target=\\\"_blank\\\"\\n                rel=\\\"noopener\\\"\\n            >\\n                \\n                {% block sw_order_line_items_grid_sales_channel_grid_actions_show_label %}\\n                {{ $tc('sw-order.createBase.contextMenuShowProduct') }}\\n                {% endblock %}\\n            </sw-context-menu-item>\\n            {% endblock %}\\n        </template>\\n        {% endblock %}\\n\\n        \\n        {% block sw_order_line_items_grid_sales_channel_bulk_actions %}\\n        <template #bulk>\\n            \\n            {% block sw_order_line_items_grid_sales_channel_bulk_actions_delete %}\\n            <a\\n                class=\\\"link link-danger\\\"\\n                role=\\\"link\\\"\\n                tabindex=\\\"0\\\"\\n                @click=\\\"onDeleteSelectedItems\\\"\\n                @keydown.enter=\\\"onDeleteSelectedItems\\\"\\n            >\\n                {{ $tc('global.default.delete') }}\\n            </a>\\n            {% endblock %}\\n        </template>\\n        {% endblock %}\\n\\n        {% endblock %}\\n    </sw-data-grid>\\n    {% endblock %}\\n    {% endblock %}\\n</sw-container>\\n{% endblock %}\\n\";","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../../../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--15-1!../../../../../node_modules/css-loader/dist/cjs.js??ref--15-2!../../../../../node_modules/sass-loader/dist/cjs.js??ref--15-3!./sw-order-line-items-grid-sales-channel.scss\");\nif(content.__esModule) content = content.default;\nif(typeof content === 'string') content = [[module.id, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar add = require(\"!../../../../../node_modules/vue-style-loader/lib/addStylesClient.js\").default\nvar update = add(\"04dc37e6\", content, true, {});"],"sourceRoot":""}