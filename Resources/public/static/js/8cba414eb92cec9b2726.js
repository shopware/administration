"use strict";(window.webpackJsonpAdministration=window.webpackJsonpAdministration||[]).push([[16532],{616532:function(t,e,a){a.r(e),a.d(e,{default:function(){return i}});let{Component:n,Mixin:r}=Shopware,{Criteria:o}=Shopware.Data;var i=n.wrapComponentConfig({template:'\n{% block sw_order_state_history_modal %}\n<sw-modal\n    :title="$tc(\'sw-order.stateHistoryModal.modalTitle\')"\n    :is-loading="isLoading"\n    variant="large"\n    @modal-close="onClose"\n>\n    \n    {% block sw_order_state_history_modal_content %}\n    <sw-data-grid\n        :columns="columns"\n        :data-source="dataSource"\n        :is-loading="isLoading || statesLoading"\n        :plain-appearance="true"\n        :show-selection="false"\n        :show-actions="false"\n    >\n\n        \n        {% block sw_order_state_history_modal_content_columns_created_at %}\n        <template #column-createdAt="{ item }">\n            <sw-time-ago :date="item.createdAt" />\n        </template>\n        {% endblock %}\n\n        \n        {% block sw_order_state_history_modal_content_columns_entity %}\n        <template #column-entity="{ item }">\n            {{ $tc(\'global.entities.\' + item.entity) }} {{ enumerateTransaction(item) }}\n        </template>\n        {% endblock %}\n\n        \n        {% block sw_order_state_history_modal_content_columns_user %}\n        <template #column-user="{ item }">\n            {{ item.user?.username ?? $tc(\'sw-order.stateHistoryModal.labelSystemUser\') }}\n        </template>\n        {% endblock %}\n\n        \n        {% block sw_order_state_history_modal_content_columns_order_state %}\n        <template #column-order="{ item }">\n            <sw-label\n                :variant="getVariantState(\'order\', item.order)"\n                appearance="badged"\n            >\n                {{ item.order.translated.name }}\n            </sw-label>\n        </template>\n        {% endblock %}\n\n        \n        {% block sw_order_state_history_modal_content_columns_delivery_state %}\n        <template #column-delivery="{ item }">\n            <sw-label\n                v-if="item.delivery"\n                :variant="getVariantState(\'order_delivery\', item.delivery)"\n                appearance="badged"\n            >\n                {{ item.delivery.translated.name }}\n            </sw-label>\n        </template>\n        {% endblock %}\n\n        \n        {% block sw_order_state_history_modal_content_columns_transaction_state %}\n        <template #column-transaction="{ item }">\n            <sw-label\n                :variant="getVariantState(\'order_transaction\', item.transaction)"\n                appearance="badged"\n            >\n                {{ item.transaction.translated.name }}\n            </sw-label>\n        </template>\n        {% endblock %}\n\n        <template #pagination>\n            <sw-pagination\n                :page="page"\n                :limit="limit"\n                :total="total"\n                :steps="steps"\n                @page-change="onPageChange"\n            />\n        </template>\n    </sw-data-grid>\n    {% endblock %}\n\n    \n    {% block sw_order_state_history_modal_actions %}\n    <template #modal-footer>\n        \n        {% block sw_order_state_history_modal_action_close %}\n        <sw-button\n            size="small"\n            @click="onClose"\n        >\n            {{ $tc(\'global.default.close\') }}\n        </sw-button>\n        {% endblock %}\n    </template>\n    {% endblock %}\n</sw-modal>\n{% endblock %}\n\n',compatConfig:Shopware.compatConfig,inject:["repositoryFactory","stateStyleDataProviderService"],mixins:[r.getByName("notification")],props:{order:{type:Object,required:!0},isLoading:{type:Boolean,required:!0}},data(){return{dataSource:[],statesLoading:!0,limit:10,page:1,total:0,steps:[5,10,25]}},computed:{stateMachineHistoryRepository(){return this.repositoryFactory.create("state_machine_history")},stateMachineHistoryCriteria(){let t=new o(this.page,this.limit),e=[this.order.id,...(this.order.transactions??[]).map(t=>t.id),...(this.order.deliveries??[]).map(t=>t.id)];return t.addFilter(o.equalsAny("state_machine_history.referencedId",e)),t.addFilter(o.equalsAny("state_machine_history.entityName",["order","order_transaction","order_delivery"])),t.addAssociation("fromStateMachineState"),t.addAssociation("toStateMachineState"),t.addAssociation("user"),t.addSorting({field:"state_machine_history.createdAt",order:"ASC",naturalSorting:!1}),t},columns(){return[{property:"createdAt",label:this.$tc("sw-order.stateHistoryModal.column.createdAt")},{property:"entity",label:this.$tc("sw-order.stateHistoryModal.column.entity")},{property:"user",label:this.$tc("sw-order.stateHistoryModal.column.user")},{property:"transaction",label:this.$tc("sw-order.stateHistoryModal.column.transaction")},{property:"delivery",label:this.$tc("sw-order.stateHistoryModal.column.delivery")},{property:"order",label:this.$tc("sw-order.stateHistoryModal.column.order")}]},hasMultipleTransactions(){return(this.order?.transactions?.filter((t,e,a)=>a.indexOf(t)===e)?.length??0)>1}},created(){this.createdComponent()},methods:{createdComponent(){this.loadHistory()},async loadHistory(){this.statesLoading=!0;try{await this.getStateHistoryEntries()}catch(e){let t=e?.response?.data?.errors?.[0]?.detail||"";this.createNotificationError({message:t})}finally{this.statesLoading=!1}},getStateHistoryEntries(){return this.stateMachineHistoryRepository.search(this.stateMachineHistoryCriteria).then(t=>(this.dataSource=this.buildStateHistory(t),this.total=t.total??1,Promise.resolve(t)))},buildStateHistory(t){let e={order:t.filter(t=>"order"===t.entityName)[0]?.fromStateMachineState??this.order.stateMachineState,order_transaction:t.filter(t=>"order_transaction"===t.entityName)[0]?.fromStateMachineState??this.order.transactions?.last()?.stateMachineState,order_delivery:t.filter(t=>"order_delivery"===t.entityName)[0]?.fromStateMachineState??this.order.deliveries?.first()?.stateMachineState},a=[];1===this.page&&a.push(this.createEntry(e,this.order));let n=[];return t.forEach(t=>{"order_transaction"!==t.entityName||n.includes(t.referencedId)||(n.length>0&&a.push(this.createEntry({...e,order_transaction:t.fromStateMachineState},{...t,user:void 0})),n.push(t.referencedId)),e[t.entityName]=t.toStateMachineState,a.push(this.createEntry(e,t))}),a},createEntry(t,e){return{order:t.order,transaction:t.order_transaction,delivery:t.order_delivery,createdAt:"orderDateTime"in e?e.orderDateTime:e.createdAt,user:"user"in e?e.user:void 0,entity:"entityName"in e?e.entityName:"order",referencedId:"referencedId"in e?e.referencedId:void 0}},getVariantState(t,e){return this.stateStyleDataProviderService.getStyle(`${t}.state`,e.technicalName).variant},onClose(){this.$emit("modal-close")},onPageChange({page:t,limit:e}){this.page=t,this.limit=e,this.loadHistory()},enumerateTransaction(t){if("order_transaction"!==t.entity||!this.hasMultipleTransactions)return"";let e=this.order.transactions?.findIndex(e=>e.id===t.referencedId)??-1;return String(e>=0?e+1:"")}}})}}]);