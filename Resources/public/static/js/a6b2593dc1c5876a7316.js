(window.webpackJsonpAdministration=window.webpackJsonpAdministration||[]).push([[20014],{253540:function(){},120014:function(t,e,a){"use strict";a.r(e),a.d(e,{default:function(){return i}}),a(813907);let{Mixin:n}=Shopware,{mapPropertyErrors:s}=Shopware.Component.getComponentHelper();var i={template:'\n{% block sw_settings_tax_detail %}\n<sw-page class="sw-settings-tax-detail">\n    \n    {% block sw_settings_tax_detail_header %}\n    <template #smart-bar-header>\n        <h2 v-if="label">\n            {{ label }}\n        </h2>\n        <h2 v-else>\n            {{ $tc(\'sw-settings-tax.detail.textHeadline\') }}\n        </h2>\n    </template>\n    {% endblock %}\n\n    \n    {% block sw_settings_tax_detail_actions %}\n    <template #smart-bar-actions>\n        \n        {% block sw_settings_tax_detail_actions_abort %}\n        <sw-button\n            v-tooltip.bottom="{ message: \'ESC\', appearance: \'light\' }"\n            :disabled="isLoading"\n            @click="onCancel"\n        >\n            {{ $tc(\'sw-settings-tax.detail.buttonCancel\') }}\n        </sw-button>\n        {% endblock %}\n\n        \n        {% block sw_settings_tax_detail_actions_save %}\n        <sw-button-process\n            v-model:processSuccess="isSaveSuccessful"\n            v-tooltip.bottom="tooltipSave"\n            class="sw-settings-tax-detail__save-action"\n            variant="primary"\n            :is-loading="isLoading"\n            :disabled="isLoading || !allowSave || undefined"\n            @click.prevent="onSave"\n        >\n            {{ $tc(\'sw-settings-tax.detail.buttonSave\') }}\n        </sw-button-process>\n        {% endblock %}\n    </template>\n    {% endblock %}\n\n    <template #language-switch>\n        <sw-language-switch\n            :save-changes-function="saveOnLanguageChange"\n            :abort-change-function="abortOnLanguageChange"\n            @on-change="onChangeLanguage"\n        />\n    </template>\n\n    \n    {% block sw_settings_tax_detail_content %}\n    <template #content>\n        <sw-card-view>\n            <template v-if="isLoading">\n                <sw-skeleton />\n                <sw-skeleton />\n            </template>\n\n            <template v-else>\n                \n                {% block sw_settings_tax_detail_content_card %}\n                <sw-card\n                    :title="$tc(\'sw-settings-tax.detail.titleCard\')"\n                    position-identifier="sw-settings-tax-detail-content"\n                >\n                    <sw-container\n                        columns="repeat(auto-fit, minmax(250px, 1fr))"\n                        gap="0px 30px"\n                    >\n\n                        \n                        {% block sw_settings_tax_detail_content_field_name %}\n                        <sw-text-field\n                            id="sw-field--tax-name"\n                            :value="label"\n                            required\n                            name="sw-field--tax-name"\n                            :disabled="!acl.can(\'tax.editor\') || isShopwareDefaultTax || undefined"\n                            :label="$tc(\'sw-settings-tax.detail.labelName\')"\n                            :placeholder="$tc(\'sw-settings-tax.detail.placeholderName\')"\n                            :error="taxNameError"\n                            @update:value="changeName"\n                        />\n                        {% endblock %}\n\n                        \n                        {% block sw_settings_tax_detail_content_field_tax_rate %}\n                        <sw-number-field\n                            v-model:value="tax.taxRate"\n                            name="sw-field--tax-taxRate"\n                            required\n                            :digits="3"\n                            :disabled="!acl.can(\'tax.editor\') || undefined"\n                            :label="$tc(\'sw-settings-tax.detail.labelDefaultTaxRate\')"\n                            :placeholder="$tc(\'sw-settings-tax.detail.placeholderDefaultTaxRate\')"\n                            :error="taxTaxRateError"\n                        >\n                            <template #suffix>\n                                <span>\n                                    <span v-html="$sanitize($tc(\'sw-settings-tax.general.taxRateSymbol\'))"></span>\n                                </span>\n                            </template>\n                        </sw-number-field>\n                        {% endblock %}\n\n                        <div class="sw-settings-tax-detail__switches">\n                            \n                            {% block sw_settings_tax_detail_content_field_default_tax_rate %}\n                            <sw-switch-field\n                                :key="isDefault"\n                                class="sw-settings-tax-detail__default-tax-rate"\n                                :label="$tc(\'sw-settings-tax.detail.defaultTaxLabel\')"\n                                :help-text="$tc(\'sw-settings-tax.detail.defaultTaxHelpText\')"\n                                :value="isDefault"\n                                name="sw-field--isDefault"\n                                @update:value="onChangeDefaultTaxRate"\n                            />\n                        {% endblock %}\n                        </div>\n                    </sw-container>\n                </sw-card>\n                {% endblock %}\n\n                \n                {% block sw_settings_tax_detail_rule_card %}\n                <sw-tax-rule-card\n                    v-if="tax.id"\n                    :disabled="!taxId"\n                    class="sw-settings-tax-detail__tax-rule-grid"\n                    :tax="tax"\n                    :is-loading="isLoading"\n                />\n                {% endblock %}\n\n                \n                {% block sw_settings_tax_detail_custom_field_sets %}\n                <sw-card\n                    v-if="showCustomFields"\n                    position-identifier="sw-settings-tax-detail-custom-field-sets"\n                    :title="$tc(\'sw-settings-custom-field.general.mainMenuItemGeneral\')"\n                    :is-loading="isLoading"\n                >\n                    <sw-custom-field-set-renderer\n                        :entity="tax"\n                        :disabled="!acl.can(\'tax.editor\')"\n                        :sets="customFieldSets"\n                    />\n                </sw-card>\n                {% endblock %}\n            </template>\n        </sw-card-view>\n    </template>\n    {% endblock %}\n</sw-page>\n{% endblock %}\n',compatConfig:Shopware.compatConfig,inject:["repositoryFactory","acl","customFieldDataProviderService","systemConfigApiService","feature"],mixins:[n.getByName("notification")],shortcuts:{"SYSTEMKEY+S":{active(){return this.allowSave},method:"onSave"},ESCAPE:"onCancel"},props:{taxId:{type:String,required:!1,default:null}},data(){return{tax:{},isLoading:!1,isSaveSuccessful:!1,customFieldSets:null,defaultTaxRateId:null,changeDefaultTaxRate:!1,formerDefaultTaxName:"",config:{},isDefault:!1}},metaInfo(){return{title:this.$createTitle(this.identifier)}},computed:{identifier(){return this.tax.name||""},taxRepository(){return this.repositoryFactory.create("tax")},...s("tax",["name","taxRate"]),isNewTax(){return"function"===this.tax.isNew&&this.tax.isNew()},allowSave(){return this.isNewTax?this.acl.can("tax.creator"):this.acl.can("tax.editor")},tooltipSave(){if(!this.allowSave)return{message:this.$tc("sw-privileges.tooltip.warning"),disabled:this.allowSave,showOnDisabledElements:!0};let t=this.$device.getSystemKey();return{message:`${t} + S`,appearance:"light"}},isShopwareDefaultTax(){return this.$te(`global.tax-rates.${this.tax.name}`,"en-GB")},label(){return this.isShopwareDefaultTax?this.$tc(`global.tax-rates.${this.tax.name}`):this.tax.name},showCustomFields(){return this.customFieldSets&&this.customFieldSets.length>0},isDefaultTaxRate(){return!!this.defaultTaxRateId&&this.taxId===this.defaultTaxRateId}},watch:{taxId(){this.taxId||this.createdComponent()},isDefaultTaxRate(){this.isDefault=this.isDefaultTaxRate}},created(){this.createdComponent()},methods:{createdComponent(){if(this.isLoading=!0,this.taxId){this.taxRepository.get(this.taxId).then(t=>{this.tax=t,this.isLoading=!1}),this.loadCustomFieldSets(),this.reloadDefaultTaxRate();return}this.tax=this.taxRepository.create(),this.isLoading=!1},loadCustomFieldSets(){this.customFieldDataProviderService.getCustomFieldSets("tax").then(t=>{this.customFieldSets=t})},onSave(){return this.isSaveSuccessful=!1,this.isLoading=!0,this.taxRepository.save(this.tax).then(()=>{this.isSaveSuccessful=!0,this.taxId||this.$router.push({name:"sw.settings.tax.detail",params:{id:this.tax.id}}),this.taxRepository.get(this.tax.id).then(t=>{this.tax=t}).then(()=>this.systemConfigApiService.saveValues(this.config).then(()=>{this.defaultTaxRateId=this.tax.id,this.reloadDefaultTaxRate(),this.isLoading=!1}))}).catch(()=>{this.createNotificationError({message:this.$tc("sw-settings-tax.detail.messageSaveError")}),this.isLoading=!1})},onCancel(){this.$router.push({name:"sw.settings.tax.index"})},abortOnLanguageChange(){return this.taxRepository.hasChanges(this.tax)},saveOnLanguageChange(){return this.onSave()},onChangeLanguage(t){Shopware.State.commit("context/setApiLanguageId",t),this.createdComponent()},changeName(t){this.tax.name=t},reloadDefaultTaxRate(){this.systemConfigApiService.getValues("core.tax").then(t=>{this.defaultTaxRateId=t["core.tax.defaultTaxRate"]??null}).then(()=>{this.defaultTaxRateId&&this.taxRepository.get(this.defaultTaxRateId).then(t=>{this.formerDefaultTaxName=t.name})}).catch(()=>{this.defaultTaxRateId=null})},onChangeDefaultTaxRate(){let t=this.isDefaultTaxRate?"":this.taxId;this.$set(this.config,"core.tax.defaultTaxRate",t),this.changeDefaultTaxRate=!1}}}},813907:function(t,e,a){var n=a(253540);n.__esModule&&(n=n.default),"string"==typeof n&&(n=[[t.id,n,""]]),n.locals&&(t.exports=n.locals),a(745346).Z("e7bdadb6",n,!0,{})}}]);