{"version":3,"sources":["webpack:///./src/module/sw-settings-rule/page/sw-settings-rule-list/sw-settings-rule-list.scss","webpack:///./src/module/sw-settings-rule/page/sw-settings-rule-list/index.js","webpack:///./src/module/sw-settings-rule/page/sw-settings-rule-list/sw-settings-rule-list.html.twig"],"names":["content","__esModule","default","module","i","locals","exports","add","Mixin","Shopware","Criteria","Data","template","inject","mixins","getByName","data","rules","isLoading","sortBy","storeKey","activeFilterNumber","defaultFilters","filterCriteria","metaInfo","title","this","$createTitle","computed","getRuleDefinition","EntityDefinition","get","ruleRepository","repositoryFactory","create","conditionFilterOptions","_this","conditions","ruleConditionDataProviderService","getConditions","map","condition","value","type","label","$tc","sort","a","b","localeCompare","groupFilterOptions","_this2","groupFilter","Object","values","getGroups","forEach","group","conditionFilterString","getByGroup","id","join","push","name","associationFilterOptions","_this3","associations","assignmentProperties","propertyName","concat","listFilters","filters","conditionGroups","property","placeholder","options","assignments","existingType","tags","criteria","addSorting","filterFactory","listCriteria","page","limit","setTerm","term","naturalSort","includes","sorting","sortDirection","field","addAssociation","setAggregations","filter","addFilter","_this4","properties","keys","relation","dateFilter","Filter","methods","_this5","addAggregation","terms","count","getCounts","countBucket","aggregations","buckets","bucket","key","getList","_this6","_asyncToGenerator","_regeneratorRuntime","mark","_callee","wrap","_context","prev","next","filterService","mergeWithStoredFilters","sent","length","search","then","items","total","catch","stop","onChangeLanguage","languageId","State","commit","onDuplicate","referenceRule","_this7","behaviour","overwrites","createdAt","clone","Context","api","duplicatedData","$router","params","onInlineEditSave","promise","rule","_this8","createNotificationSuccess","message","createNotificationError","updateCriteria","getRuleColumns","columns","dataIndex","inlineEdit","routerLink","width","allowResize","primary","align","sortable","visible","labelPostfix","charAt","toUpperCase","slice"],"mappings":"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","file":"static/js/14cb1c5ea9d8cee9c1aa.js","sourcesContent":["// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../../../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--15-1!../../../../../node_modules/css-loader/dist/cjs.js??ref--15-2!../../../../../node_modules/sass-loader/dist/cjs.js??ref--15-3!./sw-settings-rule-list.scss\");\nif(content.__esModule) content = content.default;\nif(typeof content === 'string') content = [[module.id, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar add = require(\"!../../../../../node_modules/vue-style-loader/lib/addStylesClient.js\").default\nvar update = add(\"c195584a\", content, true, {});","import './sw-settings-rule-list.scss';\nimport template from './sw-settings-rule-list.html.twig';\n\nconst { Mixin } = Shopware;\nconst { Criteria } = Shopware.Data;\n\n/**\n * @private\n * @package services-settings\n */\nexport default {\n    template,\n\n    inject: [\n        'repositoryFactory',\n        'acl',\n        'filterFactory',\n        'ruleConditionDataProviderService',\n        'filterService',\n    ],\n\n    mixins: [\n        Mixin.getByName('listing'),\n        Mixin.getByName('notification'),\n    ],\n\n    data() {\n        return {\n            rules: null,\n            isLoading: false,\n            sortBy: 'name',\n            storeKey: 'grid.filter.rule',\n            activeFilterNumber: 0,\n            defaultFilters: [\n                'conditions',\n                'conditionGroups',\n                'assignments',\n                'tags',\n            ],\n            filterCriteria: [],\n        };\n    },\n\n    metaInfo() {\n        return {\n            title: this.$createTitle(),\n        };\n    },\n\n    computed: {\n        getRuleDefinition() {\n            return Shopware.EntityDefinition.get('rule');\n        },\n\n        ruleRepository() {\n            return this.repositoryFactory.create('rule');\n        },\n\n        conditionFilterOptions() {\n            const conditions = this.ruleConditionDataProviderService.getConditions().map((condition) => {\n                return { value: condition.type, label: this.$tc(condition.label) };\n            });\n            conditions.sort((a, b) => a.label.localeCompare(b.label));\n\n            return conditions;\n        },\n\n        groupFilterOptions() {\n            const groupFilter = [];\n            Object.values(this.ruleConditionDataProviderService.getGroups()).forEach((group) => {\n                const conditionFilterString = this.ruleConditionDataProviderService.getByGroup(group.id).map((condition) => {\n                    return condition.type;\n                }).join('|');\n\n                groupFilter.push({\n                    value: conditionFilterString,\n                    label: this.$tc(group.name),\n                });\n            });\n            groupFilter.sort((a, b) => a.label.localeCompare(b.label));\n\n            return groupFilter;\n        },\n\n        associationFilterOptions() {\n            const associations = [];\n            this.assignmentProperties.forEach((propertyName) => {\n                associations.push({\n                    value: propertyName,\n                    label: this.$tc(`sw-settings-rule.filter.assignmentFilter.values.${propertyName}`),\n                });\n            });\n            associations.sort((a, b) => a.label.localeCompare(b.label));\n\n            return associations;\n        },\n\n        listFilters() {\n            const filters = {\n                conditionGroups: {\n                    property: 'conditions.type',\n                    label: this.$tc('sw-settings-rule.filter.groupFilter.label'),\n                    placeholder: this.$tc('sw-settings-rule.filter.groupFilter.placeholder'),\n                    type: 'multi-select-filter',\n                    options: this.groupFilterOptions,\n                },\n                conditions: {\n                    property: 'conditions.type',\n                    label: this.$tc('sw-settings-rule.filter.conditionFilter.label'),\n                    placeholder: this.$tc('sw-settings-rule.filter.conditionFilter.placeholder'),\n                    type: 'multi-select-filter',\n                    options: this.conditionFilterOptions,\n                },\n                assignments: {\n                    existingType: true,\n                    property: 'conditions',\n                    label: this.$tc('sw-settings-rule.filter.assignmentFilter.label'),\n                    placeholder: this.$tc('sw-settings-rule.filter.assignmentFilter.placeholder'),\n                    type: 'multi-select-filter',\n                    options: this.associationFilterOptions,\n                },\n                tags: {\n                    property: 'tags',\n                    label: this.$tc('sw-settings-rule.filter.tagFilter.label'),\n                    placeholder: this.$tc('sw-settings-rule.filter.tagFilter.placeholder'),\n                    criteria: (new Criteria(1, 25)).addSorting(Criteria.sort('name')),\n                },\n            };\n\n            return this.filterFactory.create('rule', filters);\n        },\n\n        listCriteria() {\n            const criteria = new Criteria(this.page, this.limit);\n            criteria.setTerm(this.term);\n            const naturalSort = ['createdAt', 'updatedAt'].includes(this.sortBy);\n            const sorting = Criteria.sort(this.sortBy, this.sortDirection, naturalSort);\n\n            if (this.assignmentProperties.includes(this.sortBy)) {\n                sorting.field += '.id';\n                sorting.type = 'count';\n            }\n            criteria.addSorting(sorting);\n\n            criteria.addAssociation('tags');\n\n            this.setAggregations(criteria);\n\n            this.filterCriteria.forEach(filter => {\n                criteria.addFilter(filter);\n            });\n\n            return criteria;\n        },\n\n        assignmentProperties() {\n            const properties = [];\n\n            Object.keys(this.getRuleDefinition.properties).forEach((propertyName) => {\n                if (propertyName === 'conditions' || propertyName === 'tags') {\n                    return;\n                }\n\n                const property = this.getRuleDefinition.properties[propertyName];\n                if (property.relation === 'many_to_many' || property.relation === 'one_to_many') {\n                    properties.push(propertyName);\n                }\n            });\n\n            return properties;\n        },\n\n        dateFilter() {\n            return Shopware.Filter.getByName('date');\n        },\n    },\n\n    methods: {\n        setAggregations(criteria) {\n            Object.keys(this.getRuleDefinition.properties).forEach((propertyName) => {\n                if (propertyName === 'conditions' || propertyName === 'tags') {\n                    return;\n                }\n\n                const property = this.getRuleDefinition.properties[propertyName];\n\n                if (property.relation === 'many_to_many' || property.relation === 'one_to_many') {\n                    criteria.addAggregation(\n                        Criteria.terms(\n                            propertyName,\n                            'id',\n                            null,\n                            null,\n                            Criteria.count(propertyName, `rule.${propertyName}.id`),\n                        ),\n                    );\n                }\n            });\n        },\n\n        getCounts(propertyName, id) {\n            const countBucket = this.rules.aggregations[propertyName].buckets.filter((bucket) => {\n                return bucket.key === id;\n            })[0];\n\n            if (!countBucket[propertyName] || !countBucket[propertyName].count) {\n                return 0;\n            }\n\n            return countBucket[propertyName].count;\n        },\n\n        async getList() {\n            this.isLoading = true;\n\n            const criteria = await this.filterService.mergeWithStoredFilters(this.storeKey, this.listCriteria);\n\n            this.activeFilterNumber = criteria.filters.length;\n\n            this.ruleRepository.search(criteria).then((items) => {\n                this.total = items.total;\n                this.rules = items;\n                this.isLoading = false;\n\n                return items;\n            }).catch(() => {\n                this.isLoading = false;\n            });\n        },\n\n        onChangeLanguage(languageId) {\n            Shopware.State.commit('context/setApiLanguageId', languageId);\n            this.getList();\n        },\n\n        onDuplicate(referenceRule) {\n            const behaviour = {\n                overwrites: {\n                    name: `${referenceRule.name} ${this.$tc('global.default.copy')}`,\n                    // setting the createdAt to null, so that api does set a new date\n                    createdAt: null,\n                },\n            };\n\n            this.ruleRepository.clone(referenceRule.id, Shopware.Context.api, behaviour).then((duplicatedData) => {\n                this.$router.push(\n                    {\n                        name: 'sw.settings.rule.detail',\n                        params: { id: duplicatedData.id },\n                    },\n                );\n            });\n        },\n\n        onInlineEditSave(promise, rule) {\n            this.isLoading = true;\n\n            promise.then(() => {\n                this.isLoading = false;\n\n                this.createNotificationSuccess({\n                    message: this.$tc('sw-settings-rule.detail.messageSaveSuccess', 0, { name: rule.name }),\n                });\n            }).catch(() => {\n                this.getList();\n                this.createNotificationError({\n                    message: this.$tc('sw-settings-rule.detail.messageSaveError'),\n                });\n            });\n        },\n\n        updateCriteria(criteria) {\n            this.page = 1;\n            this.filterCriteria = criteria;\n            return this.getList();\n        },\n\n        getRuleColumns() {\n            const columns = [{\n                property: 'name',\n                dataIndex: 'name',\n                inlineEdit: 'string',\n                label: 'sw-settings-rule.list.columnName',\n                routerLink: 'sw.settings.rule.detail',\n                width: '250px',\n                allowResize: true,\n                primary: true,\n            }, {\n                property: 'priority',\n                label: 'sw-settings-rule.list.columnPriority',\n                inlineEdit: 'number',\n                allowResize: true,\n            }, {\n                property: 'description',\n                label: 'sw-settings-rule.list.columnDescription',\n                width: '250px',\n                allowResize: true,\n            }, {\n                property: 'updatedAt',\n                label: 'sw-settings-rule.list.columnDateUpdated',\n                align: 'right',\n                allowResize: true,\n            }, {\n                property: 'createdAt',\n                label: 'sw-settings-rule.list.columnDateCreated',\n                align: 'right',\n                allowResize: true,\n            }, {\n                property: 'invalid',\n                label: 'sw-settings-rule.list.columnStatus',\n                allowResize: true,\n            }, {\n                property: 'tags',\n                label: 'sw-settings-rule.list.columnTags',\n                width: '250px',\n                allowResize: true,\n                sortable: false,\n                visible: false,\n            }];\n\n            this.assignmentProperties.forEach((propertyName) => {\n                const labelPostfix = propertyName.charAt(0).toUpperCase() + propertyName.slice(1);\n                columns.push({\n                    property: `${propertyName}`,\n                    label: `sw-settings-rule.list.column${labelPostfix}`,\n                    width: '250px',\n                    allowResize: true,\n                    sortable: true,\n                    visible: false,\n                });\n            });\n\n            return columns;\n        },\n    },\n};\n","export default \"\\n{% block sw_settings_list %}\\n\\n{% block sw_settings_rule_index %}\\n<sw-page class=\\\"sw-settings-rule-list\\\">\\n\\n    \\n    {% block sw_settings_rule_list_search_bar %}\\n    <template #search-bar>\\n        <sw-search-bar\\n            initial-search-type=\\\"rule\\\"\\n            :placeholder=\\\"$tc('sw-settings-rule.general.placeholderSearchBar')\\\"\\n            :initial-search=\\\"term\\\"\\n            @search=\\\"onSearch\\\"\\n        />\\n    </template>\\n    {% endblock %}\\n\\n    \\n    {% block sw_settings_rule_list_smart_bar_header %}\\n    <template #smart-bar-header>\\n        \\n        {% block sw_settings_rule_list_smart_bar_header_title %}\\n        <h2>\\n            \\n            {% block sw_settings_rule_list_smart_bar_header_title_text %}\\n            {{ $tc('sw-settings.index.title') }} <sw-icon\\n                name=\\\"regular-chevron-right-xs\\\"\\n                small\\n            /> {{ $tc('sw-settings-rule.list.textHeadline') }}\\n            {% endblock %}\\n\\n            \\n            {% block sw_settings_rule_list_smart_bar_header_title_amount %}\\n            <span\\n                v-if=\\\"!isLoading\\\"\\n                class=\\\"sw-page__smart-bar-amount\\\"\\n            >\\n                ({{ total }})\\n            </span>\\n            {% endblock %}\\n        </h2>\\n        {% endblock %}\\n    </template>\\n    {% endblock %}\\n\\n    \\n    {% block sw_settings_rule_list_smart_bar_actions %}\\n    <template #smart-bar-actions>\\n        \\n        {% block sw_settings_rule_list_smart_bar_actions_add %}\\n        <sw-button\\n            v-tooltip=\\\"{\\n                message: $tc('sw-privileges.tooltip.warning'),\\n                disabled: acl.can('rule.creator'),\\n                showOnDisabledElements: true\\n            }\\\"\\n            :router-link=\\\"{ name: 'sw.settings.rule.create' }\\\"\\n            :disabled=\\\"!acl.can('rule.creator')\\\"\\n            variant=\\\"primary\\\"\\n        >\\n            {{ $tc('sw-settings-rule.list.buttonAddRule') }}\\n        </sw-button>\\n        {% endblock %}\\n    </template>\\n    {% endblock %}\\n\\n    <template #language-switch>\\n        <sw-language-switch\\n            @on-change=\\\"onChangeLanguage\\\"\\n        />\\n    </template>\\n\\n    \\n    {% block sw_settings_rule_list_content %}\\n    <template #content>\\n        \\n        {% block sw_settings_rule_list_content_card %}\\n        <div class=\\\"sw-settings-rule-list__content\\\">\\n            \\n            {% block sw_settings_rule_list_grid %}\\n            <sw-entity-listing\\n                v-if=\\\"isLoading || rules\\\"\\n                ref=\\\"swRuleGrid\\\"\\n                identifier=\\\"sw-settings-rule-list\\\"\\n                class=\\\"sw-rule-list-grid\\\"\\n                :items=\\\"rules\\\"\\n                :columns=\\\"getRuleColumns()\\\"\\n                :repository=\\\"ruleRepository\\\"\\n                :is-loading=\\\"isLoading\\\"\\n                :full-page=\\\"true\\\"\\n                :show-selection=\\\"acl.can('rule.deleter')\\\"\\n                :allow-edit=\\\"acl.can('rule.editor')\\\"\\n                :allow-delete=\\\"acl.can('rule.deleter')\\\"\\n                detail-route=\\\"sw.settings.rule.detail\\\"\\n                :disable-data-fetching=\\\"true\\\"\\n                :sort-by=\\\"sortBy\\\"\\n                :sort-direction=\\\"sortDirection\\\"\\n                @column-sort=\\\"onSortColumn\\\"\\n                @page-change=\\\"onPageChange\\\"\\n                @inline-edit-save=\\\"onInlineEditSave\\\"\\n                @items-delete-finish=\\\"getList\\\"\\n            >\\n\\n                \\n                {% block sw_settings_rule_list_grid_column_tags %}\\n                <template #column-tags=\\\"{ item }\\\">\\n                    <span class=\\\"sw-data-grid__cell-value\\\">\\n                        <sw-label\\n                            v-for=\\\"tag in item.tags\\\"\\n                            :key=\\\"tag.id\\\"\\n                        >\\n                            {{ tag.name }}\\n                        </sw-label>\\n                    </span>\\n                </template>\\n                {% endblock %}\\n\\n                \\n                {% block sw_settings_rule_list_grid_column_assignments %}\\n                <template\\n                    v-for=\\\"(propertyName, index) in assignmentProperties\\\"\\n                    {% if VUE3 %}\\n                    :key=\\\"index\\\"\\n                    {% endif %}\\n                    #[`column-${propertyName}`]=\\\"{ item }\\\"\\n                >\\n                    <span\\n                        {% if VUE2 %}\\n                        :key=\\\"index\\\"\\n                        {% endif %}\\n                        class=\\\"sw-data-grid__cell-value\\\"\\n                    >\\n                        {{ getCounts(propertyName, item.id) }}\\n                        {{ $tc(`sw-settings-rule.list.assignments.${propertyName}`, getCounts(propertyName, item.id)) }}\\n                    </span>\\n                </template>\\n                {% endblock %}\\n\\n                <template #column-invalid=\\\"{item}\\\">\\n                    <template v-if=\\\"item.invalid\\\">\\n                        {{ $tc('sw-settings-rule.list.invalid') }}\\n                    </template>\\n                    <template v-else>\\n                        {{ $tc('sw-settings-rule.list.valid') }}\\n                    </template>\\n                </template>\\n\\n                <template #column-updatedAt=\\\"{item}\\\">\\n                    {{ dateFilter(item.updatedAt) }}\\n                </template>\\n\\n                <template #column-createdAt=\\\"{item}\\\">\\n                    {{ dateFilter(item.createdAt) }}\\n                </template>\\n\\n                \\n                {% block sw_settings_rule_list_grid_columns_actions %}\\n                <template #more-actions=\\\"{ item }\\\">\\n                    \\n                    {% block sw_settings_rule_list_grid_columns_actions_duplicate %}\\n                    <sw-context-menu-item\\n                        :disabled=\\\"!acl.can('rule.creator')\\\"\\n                        @click=\\\"onDuplicate(item)\\\"\\n                    >\\n                        {{ $tc('sw-settings-rule.list.contextMenuDuplicate') }}\\n                    </sw-context-menu-item>\\n                    {% endblock %}\\n                </template>\\n                {% endblock %}\\n            </sw-entity-listing>\\n            {% endblock %}\\n\\n            \\n            {% block sw_settings_rule_list_empty_message %}\\n            <sw-empty-state\\n                v-else-if=\\\"!isLoading && !total\\\"\\n                :title=\\\"$tc('sw-settings-rule.list.messageEmpty')\\\"\\n            />\\n            {% endblock %}\\n        </div>\\n        {% endblock %}\\n    </template>\\n\\n    \\n    {% block sw_settings_rule_list_sidebar %}\\n    <template #sidebar>\\n        <sw-sidebar>\\n            \\n            {% block sw_settings_rule_list_sidebar_refresh %}\\n            <sw-sidebar-item\\n                icon=\\\"regular-undo\\\"\\n                :title=\\\"$tc('sw-settings-rule.list.titleSidebarItemRefresh')\\\"\\n                @click=\\\"onRefresh\\\"\\n            />\\n            {% endblock %}\\n\\n            \\n            {% block sw_settings_rule_list_sidebar_filter %}\\n            <sw-sidebar-filter-panel\\n                entity=\\\"rule\\\"\\n                :store-key=\\\"storeKey\\\"\\n                :active-filter-number=\\\"activeFilterNumber\\\"\\n                :filters=\\\"listFilters\\\"\\n                :defaults=\\\"defaultFilters\\\"\\n                @criteria-changed=\\\"updateCriteria\\\"\\n            />\\n        {% endblock %}\\n        </sw-sidebar>\\n    </template>\\n    {% endblock %}\\n    {% endblock %}\\n</sw-page>\\n    {% endblock %}\\n{% endblock %}\\n\";"],"sourceRoot":""}