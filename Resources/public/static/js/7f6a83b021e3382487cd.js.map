{"version":3,"sources":["webpack:///./src/module/sw-settings-payment/page/sw-settings-payment-detail/sw-settings-payment-detail.scss","webpack:///./src/module/sw-settings-payment/page/sw-settings-payment-detail/index.js","webpack:///./src/module/sw-settings-payment/page/sw-settings-payment-detail/sw-settings-payment-detail.html.twig"],"names":["content","__esModule","default","module","i","locals","exports","add","Mixin","Shopware","Criteria","Data","warn","Utils","debug","mapPropertyErrors","Component","getComponentHelper","template","inject","mixins","getByName","shortcuts","active","this","acl","can","method","ESCAPE","data","paymentMethod","mediaItem","uploadTag","isLoading","isSaveSuccessful","customFieldSets","metaInfo","title","$createTitle","identifier","computed","_objectSpread","placeholder","paymentMethodRepository","repositoryFactory","create","ruleRepository","mediaRepository","tooltipSave","message","$tc","disabled","showOnDisabledElements","systemKey","$device","getSystemKey","concat","appearance","tooltipCancel","ruleFilter","criteria","addFilter","multi","contains","equals","addAssociation","addSorting","sort","showCustomFields","length","watch","mediaId","setMediaItem","targetId","created","createdComponent","methods","$route","params","id","paymentMethodId","loadEntityData","loadCustomFieldSets","onSaveRule","ruleId","availabilityRuleId","onDismissRule","abortOnLanguageChange","hasChanges","saveOnLanguageChange","onSave","onChangeLanguage","_this","get","then","finally","_this2","customFieldDataProviderService","getCustomFieldSets","sets","saveFinish","_this3","technicalName","save","$refs","mediaSidebarItem","getList","catch","exception","onError","_name","response","State","dispatch","expression","error","Classes","ShopwareError","code","Promise","reject","errorDetails","errors","detail","e","createNotificationError","name","onCancel","$router","push","_ref","_this4","updatedMedia","setMediaFromSidebar","mediaEntity","onUnlinkLogo","onDropMedia","openMediaSidebar","openContent"],"mappings":"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","file":"static/js/7f6a83b021e3382487cd.js","sourcesContent":["// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../../../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--15-1!../../../../../node_modules/css-loader/dist/cjs.js??ref--15-2!../../../../../node_modules/sass-loader/dist/cjs.js??ref--15-3!./sw-settings-payment-detail.scss\");\nif(content.__esModule) content = content.default;\nif(typeof content === 'string') content = [[module.id, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar add = require(\"!../../../../../node_modules/vue-style-loader/lib/addStylesClient.js\").default\nvar update = add(\"e28daa00\", content, true, {});","import template from './sw-settings-payment-detail.html.twig';\nimport './sw-settings-payment-detail.scss';\n\nconst { Mixin } = Shopware;\nconst { Criteria } = Shopware.Data;\nconst { warn } = Shopware.Utils.debug;\nconst { mapPropertyErrors } = Shopware.Component.getComponentHelper();\n\n/**\n * @package checkout\n */\n// eslint-disable-next-line sw-deprecation-rules/private-feature-declarations\nexport default {\n    template,\n\n    inject: [\n        'repositoryFactory',\n        'acl',\n        'customFieldDataProviderService',\n        'feature',\n    ],\n\n    mixins: [\n        Mixin.getByName('notification'),\n        Mixin.getByName('placeholder'),\n    ],\n\n    shortcuts: {\n        'SYSTEMKEY+S': {\n            active() {\n                return this.acl.can('payment.editor');\n            },\n            method: 'onSave',\n        },\n        ESCAPE: 'onCancel',\n    },\n\n    data() {\n        return {\n            paymentMethod: null,\n            mediaItem: null,\n            uploadTag: 'sw-payment-method-upload-tag',\n            isLoading: false,\n            isSaveSuccessful: false,\n            customFieldSets: null,\n        };\n    },\n\n    metaInfo() {\n        return {\n            title: this.$createTitle(this.identifier),\n        };\n    },\n\n    computed: {\n        identifier() {\n            return this.placeholder(this.paymentMethod, 'name');\n        },\n\n        paymentMethodRepository() {\n            return this.repositoryFactory.create('payment_method');\n        },\n\n        ruleRepository() {\n            return this.repositoryFactory.create('rule');\n        },\n\n        mediaRepository() {\n            return this.repositoryFactory.create('media');\n        },\n\n        tooltipSave() {\n            if (!this.acl.can('payment.editor')) {\n                return {\n                    message: this.$tc('sw-privileges.tooltip.warning'),\n                    disabled: this.acl.can('payment.editor'),\n                    showOnDisabledElements: true,\n                };\n            }\n            const systemKey = this.$device.getSystemKey();\n\n            return {\n                message: `${systemKey} + S`,\n                appearance: 'light',\n            };\n        },\n\n        tooltipCancel() {\n            return {\n                message: 'ESC',\n                appearance: 'light',\n            };\n        },\n\n        ruleFilter() {\n            const criteria = new Criteria(1, 25);\n            criteria.addFilter(Criteria.multi(\n                'OR',\n                [\n                    Criteria.contains('rule.moduleTypes.types', 'payment'),\n                    Criteria.equals('rule.moduleTypes', null),\n                ],\n            ));\n\n            criteria.addAssociation('conditions')\n                .addSorting(Criteria.sort('name', 'ASC', false));\n\n            return criteria;\n        },\n\n        showCustomFields() {\n            return this.paymentMethod && this.customFieldSets && this.customFieldSets.length > 0;\n        },\n\n        ...mapPropertyErrors('paymentMethod', ['name', 'technicalName']),\n    },\n\n    watch: {\n        'paymentMethod.mediaId'() {\n            if (this.paymentMethod.mediaId) {\n                this.setMediaItem({ targetId: this.paymentMethod.mediaId });\n            }\n        },\n    },\n\n    created() {\n        this.createdComponent();\n    },\n\n    methods: {\n        createdComponent() {\n            if (this.$route.params.id) {\n                this.paymentMethodId = this.$route.params.id;\n                this.loadEntityData();\n                this.loadCustomFieldSets();\n            }\n        },\n\n        onSaveRule(ruleId) {\n            this.paymentMethod.availabilityRuleId = ruleId;\n        },\n\n        onDismissRule() {\n            this.paymentMethod.availabilityRuleId = null;\n        },\n\n        abortOnLanguageChange() {\n            return this.paymentMethodRepository.hasChanges(this.paymentMethod);\n        },\n\n        saveOnLanguageChange() {\n            return this.onSave();\n        },\n\n        onChangeLanguage() {\n            this.loadEntityData();\n        },\n\n        loadEntityData() {\n            this.isLoading = true;\n\n            this.paymentMethodRepository.get(this.paymentMethodId)\n                .then((paymentMethod) => {\n                    this.paymentMethod = paymentMethod;\n\n                    if (!paymentMethod?.mediaId) {\n                        return;\n                    }\n\n                    this.setMediaItem({ targetId: paymentMethod.mediaId });\n                })\n                .finally(() => {\n                    this.isLoading = false;\n                });\n        },\n\n        loadCustomFieldSets() {\n            this.customFieldDataProviderService.getCustomFieldSets('payment_method').then((sets) => {\n                this.customFieldSets = sets;\n            });\n        },\n\n        saveFinish() {\n            this.isSaveSuccessful = false;\n        },\n\n        onSave() {\n            this.isSaveSuccessful = false;\n\n            /**\n             * @deprecated tag:v6.7.0 - Can be removed: technical names are now required\n             */\n            if (!this.paymentMethod.technicalName) {\n                Shopware.State.dispatch('error/addApiError', {\n                    expression: `payment_method.${this.paymentMethod.id}.technicalName`,\n                    error: new Shopware.Classes.ShopwareError(\n                        {\n                            code: 'c1051bb4-d103-4f74-8988-acbcafc7fdc3',\n                        },\n                    ),\n                });\n\n                return Promise.reject();\n            }\n\n            this.isLoading = true;\n\n            return this.paymentMethodRepository.save(this.paymentMethod)\n                .then(() => {\n                    this.isSaveSuccessful = true;\n                    this.$refs.mediaSidebarItem.getList();\n                    this.loadEntityData();\n                })\n                .catch((exception) => {\n                    this.onError(exception);\n                    warn(this._name, exception.message, exception.response);\n                    throw exception;\n                })\n                .finally(() => {\n                    this.isLoading = false;\n                });\n        },\n\n        onError(error) {\n            let errorDetails = null;\n\n            try {\n                errorDetails = error.response.data.errors[0].detail;\n            } catch (e) {\n                errorDetails = '';\n            }\n\n            this.createNotificationError({\n                title: this.$tc('global.default.error'),\n                // eslint-disable-next-line max-len\n                message: `${this.$tc('sw-settings-payment.detail.messageSaveError', 0, { name: this.paymentMethod.name })} ${errorDetails}`,\n            });\n        },\n\n        onCancel() {\n            this.$router.push({ name: 'sw.settings.payment.overview' });\n        },\n\n        setMediaItem({ targetId }) {\n            this.mediaRepository.get(targetId)\n                .then((updatedMedia) => {\n                    this.mediaItem = updatedMedia;\n                    this.paymentMethod.mediaId = targetId;\n                });\n        },\n\n        setMediaFromSidebar(mediaEntity) {\n            this.mediaItem = mediaEntity;\n            this.paymentMethod.mediaId = mediaEntity.id;\n        },\n\n        onUnlinkLogo() {\n            this.mediaItem = null;\n            this.paymentMethod.mediaId = null;\n        },\n\n        onDropMedia(mediaItem) {\n            this.setMediaItem({ targetId: mediaItem.id });\n        },\n\n        openMediaSidebar() {\n            this.$refs.mediaSidebarItem.openContent();\n        },\n    },\n};\n","export default \"\\n{% block sw_settings_payment_detail %}\\n<sw-page class=\\\"sw-settings-payment-detail\\\">\\n\\n    \\n    {% block sw_settings_payment_detail_header %}\\n    <template #smart-bar-header>\\n        <h2>{{ placeholder(paymentMethod, 'name', $tc('sw-settings-payment.detail.textHeadline')) }}</h2>\\n    </template>\\n    {% endblock %}\\n\\n    \\n    {% block sw_settings_payment_detail_actions %}\\n    <template #smart-bar-actions>\\n        \\n        {% block sw_settings_payment_detail_actions_abort %}\\n        <sw-button\\n            v-tooltip.bottom=\\\"tooltipCancel\\\"\\n            :disabled=\\\"isLoading\\\"\\n            @click=\\\"onCancel\\\"\\n        >\\n            {{ $tc('sw-settings-payment.detail.buttonCancel') }}\\n        </sw-button>\\n        {% endblock %}\\n\\n        \\n        {% block sw_settings_payment_detail_actions_save %}\\n        <sw-button-process\\n            v-tooltip.bottom=\\\"tooltipSave\\\"\\n            class=\\\"sw-payment-detail__save-action\\\"\\n            :is-loading=\\\"isLoading\\\"\\n            :process-success=\\\"isSaveSuccessful\\\"\\n            :disabled=\\\"isLoading || !acl.can('payment.editor')\\\"\\n            variant=\\\"primary\\\"\\n            {% if VUE3 %}\\n            @update:process-success=\\\"saveFinish\\\"\\n            {% else %}\\n            @process-finish=\\\"saveFinish\\\"\\n            {% endif %}\\n            @click.prevent=\\\"onSave\\\"\\n        >\\n            {{ $tc('sw-settings-payment.detail.buttonSave') }}\\n        </sw-button-process>\\n        {% endblock %}\\n    </template>\\n    {% endblock %}\\n\\n    \\n    {% block sw_settings_payment_detail_language_switch %}\\n    <template #language-switch>\\n        <sw-language-switch\\n            :save-changes-function=\\\"saveOnLanguageChange\\\"\\n            :abort-change-function=\\\"abortOnLanguageChange\\\"\\n            @on-change=\\\"onChangeLanguage\\\"\\n        />\\n    </template>\\n    {% endblock %}\\n\\n    \\n    {% block sw_settings_payment_detail_content %}\\n    <template #content>\\n        <sw-card-view>\\n            <template v-if=\\\"isLoading\\\">\\n                <sw-skeleton />\\n                <sw-skeleton />\\n            </template>\\n\\n            <template v-else>\\n                \\n                {% block sw_product_stream_detail_content_language_info %}\\n                <sw-language-info\\n                    :entity-description=\\\"placeholder(paymentMethod, 'name', $tc('sw-settings-payment.detail.textHeadline'))\\\"\\n                />\\n                {% endblock %}\\n\\n                \\n                {% block sw_settings_payment_detail_content_card %}\\n                <sw-card\\n                    position-identifier=\\\"sw-settings-payment-detail-content\\\"\\n                    :title=\\\"$tc('sw-settings-payment.detail.titleCard')\\\"\\n                    :is-loading=\\\"isLoading\\\"\\n                >\\n                    <template v-if=\\\"!isLoading\\\">\\n                        \\n                        {% block sw_settings_payment_detail_content_field_plugin %}\\n                        <sw-plugin-box\\n                            v-if=\\\"!!paymentMethod.pluginId\\\"\\n                            :plugin-id=\\\"paymentMethod.pluginId\\\"\\n                        />\\n                        {% endblock %}\\n\\n                        <sw-container\\n                            columns=\\\"3fr 3fr 1fr\\\"\\n                            gap=\\\"0px 30px\\\"\\n                        >\\n                            \\n                            {% block sw_settings_payment_detail_content_field_name %}\\n                            <sw-text-field\\n                                {% if VUE3 %}\\n                                v-model:value=\\\"paymentMethod.name\\\"\\n                                {% else %}\\n                                v-model=\\\"paymentMethod.name\\\"\\n                                {% endif %}\\n                                name=\\\"sw-field--paymentMethod-name\\\"\\n                                class=\\\"sw-settings-payment-detail__field-name\\\"\\n                                required\\n                                :disabled=\\\"!acl.can('payment.editor')\\\"\\n                                :label=\\\"$tc('sw-settings-payment.detail.labelName')\\\"\\n                                :placeholder=\\\"placeholder(paymentMethod, 'name', $tc('sw-settings-payment.detail.placeholderName'))\\\"\\n                                :error=\\\"paymentMethodNameError\\\"\\n                            />\\n                            {% endblock %}\\n\\n                            \\n                            {% block sw_settings_payment_detail_content_field_technical_name %}\\n                            <sw-text-field\\n                                {% if VUE3 %}\\n                                v-model:value=\\\"paymentMethod.technicalName\\\"\\n                                {% else %}\\n                                v-model=\\\"paymentMethod.technicalName\\\"\\n                                {% endif %}\\n                                name=\\\"sw-field--paymentMethod-technicalName\\\"\\n                                class=\\\"sw-settings-payment-detail__field-technical-name\\\"\\n                                :required=\\\"feature.isActive('v6.7.0.0')\\\"\\n                                :disabled=\\\"!acl.can('payment.editor')\\\"\\n                                :label=\\\"$tc('sw-settings-payment.detail.labelTechnicalName')\\\"\\n                                :placeholder=\\\"placeholder(paymentMethod, 'technicalName', $tc('sw-settings-payment.detail.placeholderTechnicalName'))\\\"\\n                                :error=\\\"paymentMethodTechnicalNameError\\\"\\n                                :help-text=\\\"$tc('sw-settings-payment.detail.helpTextTechnicalName')\\\"\\n                            />\\n                            {% endblock %}\\n\\n                            \\n                            {% block sw_settings_payment_detail_content_field_position %}\\n                            <sw-number-field\\n                                {% if VUE3 %}\\n                                v-model:value=\\\"paymentMethod.position\\\"\\n                                {% else %}\\n                                v-model=\\\"paymentMethod.position\\\"\\n                                {% endif %}\\n                                name=\\\"sw-field--paymentMethod-position\\\"\\n                                class=\\\"sw-settings-payment-detail__field-position\\\"\\n                                :disabled=\\\"!acl.can('payment.editor')\\\"\\n                                :label=\\\"$tc('sw-settings-payment.detail.labelPosition')\\\"\\n                                :placeholder=\\\"$tc('sw-settings-payment.detail.placeholderPosition')\\\"\\n                            />\\n                            {% endblock %}\\n                        </sw-container>\\n\\n                        <sw-container\\n                            columns=\\\"repeat(auto-fit, minmax(250px, 1fr))\\\"\\n                            gap=\\\"0px 30px\\\"\\n                        >\\n                            \\n                            {% block sw_settings_payment_detail_base_content_field_description %}\\n                            <sw-textarea-field\\n                                {% if VUE3 %}\\n                                v-model:value=\\\"paymentMethod.description\\\"\\n                                {% else %}\\n                                v-model=\\\"paymentMethod.description\\\"\\n                                {% endif %}\\n                                name=\\\"sw-field--paymentMethod-description\\\"\\n                                :disabled=\\\"!acl.can('payment.editor')\\\"\\n                                :value=\\\"paymentMethod.description\\\"\\n                                class=\\\"sw-settings-payment-detail__description\\\"\\n                                :label=\\\"$tc('sw-settings-payment.detail.labelDescription')\\\"\\n                                :placeholder=\\\"placeholder(paymentMethod, 'description', $tc('sw-settings-payment.detail.placeholderDescription'))\\\"\\n                            />\\n                            {% endblock %}\\n\\n                            \\n                            {% block sw_settings_payment_detail_base_content_media_upload %}\\n                            <sw-upload-listener\\n                                :upload-tag=\\\"uploadTag\\\"\\n                                auto-upload\\n                                @media-upload-finish=\\\"setMediaItem\\\"\\n                            />\\n                            <sw-media-upload-v2\\n                                :disabled=\\\"!acl.can('payment.editor')\\\"\\n                                :upload-tag=\\\"uploadTag\\\"\\n                                :source=\\\"mediaItem\\\"\\n                                class=\\\"sw-settings-payment-detail__logo-image-upload\\\"\\n                                :allow-multi-select=\\\"false\\\"\\n                                variant=\\\"regular\\\"\\n                                :label=\\\"$tc('sw-settings-payment.detail.labelLogoUpload')\\\"\\n                                :default-folder=\\\"paymentMethod.getEntityName()\\\"\\n                                @media-drop=\\\"onDropMedia\\\"\\n                                @media-upload-sidebar-open=\\\"openMediaSidebar\\\"\\n                                @media-upload-remove-image=\\\"onUnlinkLogo\\\"\\n                            />\\n                            {% endblock %}\\n                        </sw-container>\\n\\n                        <sw-container\\n                            columns=\\\"repeat(auto-fit, minmax(250px, 2fr))\\\"\\n                            gap=\\\"0px 30px\\\"\\n                        >\\n                            \\n                            {% block sw_settings_payment_detail_content_field_active %}\\n                            <sw-switch-field\\n                                {% if VUE3 %}\\n                                v-model:value=\\\"paymentMethod.active\\\"\\n                                {% else %}\\n                                v-model=\\\"paymentMethod.active\\\"\\n                                {% endif %}\\n                                name=\\\"sw-field--paymentMethod-active\\\"\\n                                class=\\\"sw-settings-payment-detail__field-active\\\"\\n                                :disabled=\\\"!acl.can('payment.editor')\\\"\\n                                :label=\\\"$tc('sw-settings-payment.detail.labelActive')\\\"\\n                            />\\n                            {% endblock %}\\n\\n                            \\n                            {% block sw_settings_payment_detail_content_field_after_order_enabled %}\\n                            <sw-switch-field\\n                                {% if VUE3 %}\\n                                v-model:value=\\\"paymentMethod.afterOrderEnabled\\\"\\n                                {% else %}\\n                                v-model=\\\"paymentMethod.afterOrderEnabled\\\"\\n                                {% endif %}\\n                                name=\\\"sw-field--paymentMethod-afterOrderEnabled\\\"\\n                                class=\\\"sw-settings-payment-detail__field-after-order\\\"\\n                                :disabled=\\\"!acl.can('payment.editor')\\\"\\n                                :label=\\\"$tc('sw-settings-payment.detail.labelAfterOrderEnabled')\\\"\\n                            />\\n                            {% endblock %}\\n                        </sw-container>\\n                    </template>\\n                </sw-card>\\n                {% endblock %}\\n\\n                \\n                {% block sw_settings_payment_detail_top_rule %}\\n                <sw-card\\n                    class=\\\"sw-settings-payment-detail__condition_container\\\"\\n                    position-identifier=\\\"sw-settings-payment-detail-condition-container\\\"\\n                    :title=\\\"$tc('sw-settings-payment.detail.topRule')\\\"\\n                    :is-loading=\\\"isLoading\\\"\\n                >\\n                    \\n                    {% block sw_settings_payment_detail_top_rule_select %}\\n                    <sw-select-rule-create\\n                        v-if=\\\"!isLoading\\\"\\n                        class=\\\"sw-settings-payment-detail__field-availability-rule\\\"\\n                        :disabled=\\\"!acl.can('payment.editor')\\\"\\n                        :rule-id=\\\"paymentMethod.availabilityRuleId\\\"\\n                        :rule-filter=\\\"ruleFilter\\\"\\n                        :placeholder=\\\"$tc('sw-settings-payment.detail.placeholderAvailabilityRule')\\\"\\n                        rule-aware-group-key=\\\"paymentMethods\\\"\\n                        @save-rule=\\\"onSaveRule\\\"\\n                        @dismiss-rule=\\\"onDismissRule\\\"\\n                    />\\n                    {% endblock %}\\n                </sw-card>\\n                {% endblock %}\\n\\n                \\n                {% block sw_settings_payment_detail_custom_field_sets %}\\n                <sw-card\\n                    v-if=\\\"showCustomFields\\\"\\n                    position-identifier=\\\"sw-settings-payment-detail-custom-field-sets\\\"\\n                    :title=\\\"$tc('sw-settings-custom-field.general.mainMenuItemGeneral')\\\"\\n                    :is-loading=\\\"isLoading\\\"\\n                >\\n                    <sw-custom-field-set-renderer\\n                        :entity=\\\"paymentMethod\\\"\\n                        :disabled=\\\"!acl.can('payment.editor')\\\"\\n                        :sets=\\\"customFieldSets\\\"\\n                    />\\n                </sw-card>\\n                {% endblock %}\\n            </template>\\n        </sw-card-view>\\n    </template>\\n    {% endblock %}\\n\\n    <template #sidebar>\\n        <sw-sidebar :propagate-width=\\\"true\\\">\\n            <sw-sidebar-media-item ref=\\\"mediaSidebarItem\\\">\\n                <template\\n                    #context-menu-items=\\\"media\\\"\\n                >\\n                    <sw-context-menu-item @click=\\\"setMediaFromSidebar(media.mediaItem)\\\">\\n                        {{ $tc('sw-settings-payment.detail.sidebar.labelUseAsLogo') }}\\n                    </sw-context-menu-item>\\n                </template>\\n            </sw-sidebar-media-item>\\n        </sw-sidebar>\\n    </template>\\n\\n</sw-page>\\n{% endblock %}\\n\";"],"sourceRoot":""}