{"version":3,"sources":["webpack:///./src/module/sw-cms/component/sw-cms-sidebar/index.js","webpack:///./src/module/sw-cms/component/sw-cms-sidebar/sw-cms-sidebar.html.twig","webpack:///./src/module/sw-cms/component/sw-cms-sidebar/sw-cms-sidebar.scss"],"names":["_Shopware","Shopware","Component","Mixin","mapPropertyErrors","getComponentHelper","Criteria","Data","cloneDeep","Utils","object","types","template","inject","mixins","getByName","props","page","type","Object","required","demoEntity","String","default","demoEntityIdProp","disabled","Boolean","data","demoEntityId","this","currentBlockCategory","currentDragSectionIndex","showSidebarNavigatorModal","navigatorDontRemind","computed","_objectSpread","pageTypes","cmsPageTypeService","getTypes","blockRepository","repositoryFactory","create","slotRepository","cmsBlocks","_this","currentPageType","State","get","blocks","entries","cmsService","getCmsBlockRegistry","filter","_ref","_ref2","_slicedToArray","name","hidden","isBlockAllowedInPageType","fromEntries","mediaRepository","addBlockTitle","isSystemDefaultLanguage","$tc","pageSections","sections","sidebarItemSettings","selectedBlock","tooltipDisabled","message","demoCriteria","criteria","addAssociation","demoContext","Context","api","inheritance","blockTypes","keys","pageConfigErrors","pageNameError","error","hasPageConfigErrors","length","showDefaultLayoutSelection","acl","can","feature","isActive","cmsBlocksBySelectedBlockCategory","_this2","result","values","b","cmsBlockFavorites","isFavorite","category","created","createdComponent","methods","_this3","some","blockName","onPageTypeChange","pageType","$emit","onDemoEntityChange","onCloseBlockConfig","commit","isDisabledPageType","includes","openSectionSettings","sectionIndex","_this4","$refs","pageConfigSidebar","openContent","$nextTick","sectionConfigSidebar","collapseItem","blockIsRemovable","block","removable","blockIsUnique","CMS","PAGE_TYPES","PRODUCT_DETAIL","slots","slot","UNIQUE_SLOTS_KEBAB","blockIsDuplicable","sectionIsDuplicable","section","_this5","every","onBlockDragSort","dragData","dropData","validDrop","_this6","_asyncToGenerator","_regeneratorRuntime","mark","_callee","dragSectionIndex","dropSectionIndex","dropSection","dropSectionHasBlock","removeIndex","oldSection","wrap","_context","prev","next","abrupt","sectionPosition","isDragging","has","id","Math","abs","sectionId","add","remove","_origin","refreshPosition","position","moveItem","stop","elements","forEach","element","index","onSidebarNavigatorClick","blockNavigator","localStorage","getItem","onSidebarNavigationConfirm","setItem","onSidebarNavigationCancel","_this7","getDragData","delay","dragGroup","validDragCls","onDragEnter","onDrop","onBlockDragStop","getDropData","onBlockDropAbort","dragSectionHasBlock","onBlockStageDrop","_this8","dropIndex","blockConfig","newBlock","visibility","desktop","tablet","mobile","assign","blockConfigDefaults","defaultConfig","slotName","_slotConfig$default","_slotDefaultData$medi","_slotDefaultData$slid","slotConfig","blockId","isPlainObject","slotDefaultData","media","source","sliderItems","config","splice","moveSectionUp","moveSectionDown","onSectionDuplicate","onSectionDelete","onBlockDelete","onBlockDuplicate","onRemoveSectionBackgroundMedia","backgroundMediaId","backgroundMedia","pageUpdate","onSetSectionBackgroundMedia","_ref3","mediaItem","onToggleBlockFavorite","update","successfulUpload","_this9","targetId","then","uploadTag","concat","getMainContentBlocks","sectionBlocks","_this10","blockTypeExists","getSidebarContentBlocks","_this11","onOpenLayoutAssignment","onOpenLayoutSetAsDefault","onVisibilityChange","viewport","isVisible","content","__esModule","module","i","locals","exports"],"mappings":"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","file":"static/js/84871392379299056637.js","sourcesContent":["import template from './sw-cms-sidebar.html.twig';\nimport CMS from '../../constant/sw-cms.constant';\nimport './sw-cms-sidebar.scss';\n\nconst { Component, Mixin } = Shopware;\nconst { mapPropertyErrors } = Component.getComponentHelper();\nconst { Criteria } = Shopware.Data;\nconst { cloneDeep } = Shopware.Utils.object;\nconst types = Shopware.Utils.types;\n\n/**\n * @package buyers-experience\n */\n// eslint-disable-next-line sw-deprecation-rules/private-feature-declarations\nexport default {\n    template,\n\n    inject: [\n        'acl',\n        'cmsService',\n        'repositoryFactory',\n        'feature',\n        'cmsBlockFavorites',\n        'cmsPageTypeService',\n    ],\n\n    mixins: [\n        Mixin.getByName('cms-state'),\n        Mixin.getByName('placeholder'),\n    ],\n\n    props: {\n        page: {\n            type: Object,\n            required: true,\n        },\n\n        demoEntity: {\n            type: String,\n            required: false,\n            default: null,\n        },\n\n        demoEntityIdProp: {\n            type: String,\n            required: false,\n            default: null,\n        },\n\n        disabled: {\n            type: Boolean,\n            required: false,\n            default: false,\n        },\n    },\n\n    data() {\n        return {\n            demoEntityId: this.demoEntityIdProp,\n            currentBlockCategory: 'text',\n            currentDragSectionIndex: null,\n            showSidebarNavigatorModal: false,\n            navigatorDontRemind: false,\n        };\n    },\n\n    computed: {\n        pageTypes() {\n            return this.cmsPageTypeService.getTypes();\n        },\n\n        blockRepository() {\n            return this.repositoryFactory.create('cms_block');\n        },\n\n        slotRepository() {\n            return this.repositoryFactory.create('cms_slot');\n        },\n\n        cmsBlocks() {\n            const currentPageType = Shopware.State.get('cmsPageState').currentPageType;\n\n            const blocks = Object.entries(this.cmsService.getCmsBlockRegistry()).filter(([name, block]) => {\n                return block.hidden !== true && this.cmsService.isBlockAllowedInPageType(name, currentPageType);\n            });\n\n            return Object.fromEntries(blocks);\n        },\n\n        mediaRepository() {\n            return this.repositoryFactory.create('media');\n        },\n\n        addBlockTitle() {\n            if (!this.isSystemDefaultLanguage) {\n                return this.$tc('sw-cms.general.disabledAddingBlocksToolTip');\n            }\n\n            return this.$tc('sw-cms.detail.sidebar.titleBlockOverview');\n        },\n\n        pageSections() {\n            return this.page.sections;\n        },\n\n        sidebarItemSettings() {\n            if (this.selectedBlock !== null) {\n                return this.$tc('sw-cms.detail.sidebar.titleBlockSettings');\n            }\n\n            return this.$tc('sw-cms.detail.sidebar.titleSectionSettings');\n        },\n\n        tooltipDisabled() {\n            return {\n                message: this.$tc('sw-cms.detail.tooltip.cannotSelectProductPageLayout'),\n                disabled: this.page.type !== 'product_detail',\n            };\n        },\n\n        demoCriteria() {\n            if (this.demoEntity === 'product') {\n                const criteria = new Criteria(1, 25);\n                criteria.addAssociation('options.group');\n\n                return criteria;\n            }\n\n            return new Criteria(1, 25);\n        },\n\n        demoContext() {\n            if (this.demoEntity === 'product') {\n                return { ...Shopware.Context.api, inheritance: true };\n            }\n\n            return Shopware.Context.api;\n        },\n\n        blockTypes() {\n            return Object.keys(this.cmsService.getCmsBlockRegistry());\n        },\n\n        pageConfigErrors() {\n            return [this.pageNameError].filter(error => !!error);\n        },\n\n        hasPageConfigErrors() {\n            return this.pageConfigErrors.length > 0;\n        },\n\n        showDefaultLayoutSelection() {\n            if (!this.acl.can('system_config.editor')) {\n                return false;\n            }\n\n            if (this.page.type === 'product_list') {\n                return true;\n            }\n\n            if (this.page.type === 'product_detail' && this.feature.isActive('v6.6.0.0')) {\n                return true;\n            }\n\n            return false;\n        },\n\n        cmsBlocksBySelectedBlockCategory() {\n            const result = Object.values(this.cmsBlocks).filter(b => b.hidden !== true);\n\n            if (this.currentBlockCategory === 'favorite') {\n                return result.filter(b => this.cmsBlockFavorites.isFavorite(b.name));\n            }\n\n            return result.filter(b => b.category === this.currentBlockCategory);\n        },\n\n        ...mapPropertyErrors('page', ['name']),\n    },\n\n    created() {\n        this.createdComponent();\n    },\n\n    methods: {\n        createdComponent() {\n            if (this.blockTypes.some(blockName => this.cmsBlockFavorites.isFavorite(blockName))) {\n                this.currentBlockCategory = 'favorite';\n            }\n        },\n\n        onPageTypeChange(pageType) {\n            this.$emit('page-type-change', pageType);\n        },\n\n        onDemoEntityChange(demoEntityId) {\n            this.$emit('demo-entity-change', demoEntityId);\n        },\n\n        onCloseBlockConfig() {\n            Shopware.State.commit('cmsPageState/removeSelectedBlock');\n            Shopware.State.commit('cmsPageState/removeSelectedSection');\n        },\n\n        isDisabledPageType(pageType) {\n            if (this.page.type === 'product_detail') {\n                return true;\n            }\n\n            if (this.page.type.includes('custom_entity_')) {\n                return !pageType.name.includes('custom_entity_');\n            }\n\n            return pageType.name === 'product_detail' || pageType.name.includes('custom_entity_');\n        },\n\n        openSectionSettings(sectionIndex) {\n            this.$refs.pageConfigSidebar.openContent();\n            this.$nextTick(() => {\n                this.$refs.sectionConfigSidebar[sectionIndex].collapseItem();\n            });\n        },\n\n        blockIsRemovable(block) {\n            const cmsBlocks = this.cmsService.getCmsBlockRegistry();\n            return (cmsBlocks[block.type].removable !== false) && this.isSystemDefaultLanguage;\n        },\n\n        blockIsUnique(block) {\n            if (this.page.type !== CMS.PAGE_TYPES.PRODUCT_DETAIL) {\n                return false;\n            }\n\n            return block.slots.some((slot) => {\n                return CMS.UNIQUE_SLOTS_KEBAB.includes(slot.type);\n            });\n        },\n\n        blockIsDuplicable(block) {\n            return !this.blockIsUnique(block);\n        },\n\n        sectionIsDuplicable(section) {\n            return section.blocks.every((block) => this.blockIsDuplicable(block));\n        },\n\n        async onBlockDragSort(dragData, dropData, validDrop) {\n            if (validDrop !== true) {\n                return;\n            }\n\n            const dragSectionIndex = dragData.sectionIndex;\n            const dropSectionIndex = dropData.sectionIndex;\n\n            const dropSection = this.page.sections[dropSectionIndex];\n\n            if (dragSectionIndex < 0 || dragSectionIndex >= this.page.sections.length ||\n                dropSectionIndex < 0 || dropSectionIndex >= this.page.sections.length) {\n                return;\n            }\n\n            if (dragData.block.sectionPosition !== dropData.block.sectionPosition) {\n                dragData.block.isDragging = true;\n                dragData.block.sectionPosition = dropData.block.sectionPosition;\n            }\n\n            // set current drag index to initial drag start index\n            if (this.currentDragSectionIndex === null) {\n                this.currentDragSectionIndex = dragSectionIndex;\n            }\n\n            // check if the section where the block is moved already has the block\n            const dropSectionHasBlock = dropSection.blocks.has(dragData.block.id);\n            if (this.currentDragSectionIndex !== dropSectionIndex && !dropSectionHasBlock) {\n                dragData.block.isDragging = true;\n\n                // calculate the remove index (this may differ since the block is moved each time it enters a new\n                // section while the dragSectionIndex is the static start index of the drag\n                let removeIndex = dragSectionIndex;\n                if (this.currentDragSectionIndex !== dragSectionIndex &&\n                    Math.abs(this.currentDragSectionIndex - dropSectionIndex) === 1) {\n                    removeIndex = this.currentDragSectionIndex;\n                }\n\n                // drag direction is upwards so the currentDragSectionIndex is incremented\n                if (this.currentDragSectionIndex - dropSectionIndex < 0) {\n                    this.currentDragSectionIndex += 1;\n                }\n\n                // drag direction is downwards so the currentDragSectionIndex is decremented\n                if (this.currentDragSectionIndex - dropSectionIndex > 0) {\n                    this.currentDragSectionIndex -= 1;\n                }\n\n                dragData.block.sectionId = dropSection.id;\n\n                dropSection.blocks.add(dragData.block);\n\n                const oldSection = this.page.sections[removeIndex];\n                oldSection.blocks.remove(dragData.block.id);\n                oldSection._origin.blocks.remove(dragData.block.id);\n\n                this.refreshPosition(oldSection.blocks);\n                this.refreshPosition(dropSection.blocks);\n                return;\n            }\n\n            if (dragData.block.position === dropData.block.position) {\n                return;\n            }\n\n            // move item inside the section\n            this.page.sections[dropSectionIndex].blocks.moveItem(dragData.block.position, dropData.block.position);\n            this.refreshPosition(dropSection.blocks);\n        },\n\n        refreshPosition(elements) {\n            return elements.forEach((element, index) => {\n                element.position = index;\n            });\n        },\n\n        onSidebarNavigatorClick() {\n            if (!this.$refs.blockNavigator.isActive) {\n                return;\n            }\n\n            if (localStorage.getItem('cmsNavigatorDontRemind') === 'true') {\n                this.onSidebarNavigationConfirm();\n                return;\n            }\n\n            this.navigatorDontRemind = false;\n            this.showSidebarNavigatorModal = true;\n        },\n\n        onSidebarNavigationConfirm() {\n            if (this.navigatorDontRemind) {\n                localStorage.setItem('cmsNavigatorDontRemind', true);\n            }\n\n            this.$emit('page-save');\n            this.showSidebarNavigatorModal = false;\n        },\n\n        onSidebarNavigationCancel() {\n            this.showSidebarNavigatorModal = false;\n            this.$nextTick(() => {\n                this.$refs.pageConfigSidebar.openContent();\n            });\n        },\n\n        getDragData(block, sectionIndex) {\n            return {\n                delay: 300,\n                dragGroup: 'cms-navigator',\n                data: { block, sectionIndex },\n                validDragCls: null,\n                onDragEnter: this.onBlockDragSort,\n                onDrop: this.onBlockDragStop,\n            };\n        },\n\n        getDropData(block, sectionIndex) {\n            return {\n                dragGroup: 'cms-navigator',\n                data: { block, sectionIndex },\n                onDrop: this.onBlockDropAbort,\n            };\n        },\n\n        onBlockDragStop(dragData) {\n            this.currentDragSectionIndex = null;\n            dragData.block.isDragging = false;\n        },\n\n        onBlockDropAbort(dragData, dropData) {\n            const dragSectionIndex = dragData.sectionIndex;\n            const dropSectionIndex = dropData.sectionIndex;\n            if (dragSectionIndex < 0 || dropSectionIndex < 0) {\n                return;\n            }\n\n            const dragSectionHasBlock = this.page.sections[dragSectionIndex].blocks.has(dragData.block.id);\n            const dropSectionHasBlock = this.page.sections[dropSectionIndex].blocks.has(dragData.block.id);\n            if (!dragSectionHasBlock && !dropSectionHasBlock) {\n                this.page.sections[dragSectionIndex].blocks.add(dragData.block);\n            }\n        },\n\n        onBlockStageDrop(dragData, dropData) {\n            if (!dropData || !dragData.block || dropData.dropIndex < 0 || !dropData.section) {\n                return;\n            }\n\n            const cmsBlocks = this.cmsService.getCmsBlockRegistry();\n            const section = dropData.section;\n            const blockConfig = cmsBlocks[dragData.block.name];\n            const newBlock = this.blockRepository.create();\n\n            newBlock.type = dragData.block.name;\n            newBlock.position = dropData.dropIndex;\n            newBlock.sectionPosition = dropData.sectionPosition;\n            newBlock.sectionId = section.id;\n\n            newBlock.visibility = {\n                desktop: true,\n                tablet: true,\n                mobile: true,\n            };\n\n            Object.assign(\n                newBlock,\n                cloneDeep(this.blockConfigDefaults),\n                cloneDeep(blockConfig.defaultConfig || {}),\n            );\n\n            Object.keys(blockConfig.slots).forEach((slotName) => {\n                const slotConfig = blockConfig.slots[slotName];\n                const element = this.slotRepository.create();\n                element.blockId = newBlock.id;\n                element.slot = slotName;\n\n                if (typeof slotConfig === 'string') {\n                    element.type = slotConfig;\n                } else if (types.isPlainObject(slotConfig)) {\n                    element.type = slotConfig.type;\n\n                    if (slotConfig.default && types.isPlainObject(slotConfig.default)) {\n                        Object.assign(element, cloneDeep(slotConfig.default));\n                    }\n                }\n\n                const slotDefaultData = slotConfig.default?.data;\n                if ([slotDefaultData?.media?.source, slotDefaultData?.sliderItems?.source].includes('default')) {\n                    element.config = { ...element.config, ...slotDefaultData };\n                }\n\n                newBlock.slots.add(element);\n            });\n            this.page.sections[section.position].blocks.splice(dropData.dropIndex, 0, newBlock);\n\n            this.$emit('block-stage-drop');\n            this.$emit('current-block-change', section.id, newBlock);\n        },\n\n        moveSectionUp(section) {\n            this.page.sections.moveItem(section.position, section.position - 1);\n\n            this.$emit('page-save', true);\n        },\n\n        moveSectionDown(section) {\n            this.page.sections.moveItem(section.position, section.position + 1);\n\n            this.$emit('page-save', true);\n        },\n\n        onSectionDuplicate(section) {\n            this.$emit('section-duplicate', section);\n        },\n\n        onSectionDelete(sectionId) {\n            Shopware.State.commit('cmsPageState/removeSelectedSection');\n            this.page.sections.remove(sectionId);\n            this.$emit('page-save');\n        },\n\n        onBlockDelete(block, section) {\n            if (!section) {\n                section = this.page.sections.get(block.sectionId);\n            }\n\n            section.blocks.remove(block.id);\n\n            if (this.selectedBlock && this.selectedBlock.id === block.id) {\n                Shopware.State.commit('cmsPageState/removeSelectedBlock');\n            }\n\n            this.$emit('page-save', true);\n        },\n\n        onBlockDuplicate(block, section) {\n            if (!section) {\n                section = this.page.sections.get(block.sectionId);\n            }\n\n            this.$emit('block-duplicate', block, section);\n        },\n\n        onRemoveSectionBackgroundMedia(section) {\n            section.backgroundMediaId = null;\n            section.backgroundMedia = null;\n\n            this.pageUpdate();\n        },\n\n        onSetSectionBackgroundMedia([mediaItem], section) {\n            section.backgroundMediaId = mediaItem.id;\n            section.backgroundMedia = mediaItem;\n\n            this.pageUpdate();\n        },\n\n        onToggleBlockFavorite(blockName) {\n            this.cmsBlockFavorites.update(!this.cmsBlockFavorites.isFavorite(blockName), blockName);\n        },\n\n        successfulUpload(media, section) {\n            section.backgroundMediaId = media.targetId;\n\n            this.mediaRepository.get(media.targetId).then((mediaItem) => {\n                section.backgroundMedia = mediaItem;\n                this.pageUpdate();\n            });\n        },\n\n        uploadTag(section) {\n            return `cms-section-media-config-${section.id}`;\n        },\n\n        getMainContentBlocks(sectionBlocks) {\n            return sectionBlocks.filter((block) => this.blockTypeExists(block.type) && block.sectionPosition === 'main');\n        },\n\n        getSidebarContentBlocks(sectionBlocks) {\n            return sectionBlocks.filter((block) => this.blockTypeExists(block.type) && block.sectionPosition === 'sidebar');\n        },\n\n        pageUpdate() {\n            this.$emit('page-update');\n        },\n\n        onOpenLayoutAssignment() {\n            this.$emit('open-layout-assignment');\n        },\n\n        onOpenLayoutSetAsDefault() {\n            this.$emit('open-layout-set-as-default');\n        },\n\n        blockTypeExists(type) {\n            return this.blockTypes.includes(type);\n        },\n\n        onVisibilityChange(selectedBlock, viewport, isVisible) {\n            selectedBlock.visibility[viewport] = isVisible;\n        },\n    },\n};\n","export default \"\\n{% block sw_cms_sidebar %}\\n<sw-sidebar class=\\\"sw-cms-sidebar\\\">\\n\\n    \\n    {% block sw_cms_sidebar_page_settings %}\\n    <sw-sidebar-item\\n        ref=\\\"pageConfigSidebar\\\"\\n        icon=\\\"regular-cog\\\"\\n        :title=\\\"$tc('sw-cms.detail.sidebar.titlePageSettings')\\\"\\n        :has-simple-badge=\\\"hasPageConfigErrors\\\"\\n        badge-type=\\\"error\\\"\\n        :disabled=\\\"page.locked || disabled\\\"\\n    >\\n\\n        \\n        {% block sw_cms_sidebar_page_settings_content %}\\n        <sw-sidebar-collapse :expand-on-loading=\\\"true\\\">\\n\\n            \\n            {% block sw_cms_sidebar_page_settings_header %}\\n            <template #header>\\n                <span>{{ $tc('sw-cms.detail.sidebar.headerPageSettings') }}</span>\\n            </template>\\n            {% endblock %}\\n\\n            \\n            {% block sw_cms_sidebar_page_settings_form %}\\n            <template #content>\\n                <div class=\\\"sw-cms-sidebar__settings\\\">\\n                    \\n                    {% block sw_cms_sidebar_page_settings_name_field %}\\n                    <sw-text-field\\n                        {% if VUE3 %}\\n                        v-model:value=\\\"page.name\\\"\\n                        {% else %}\\n                        v-model=\\\"page.name\\\"\\n                        {% endif %}\\n                        :label=\\\"$tc('sw-cms.detail.label.pageName')\\\"\\n                        :placeholder=\\\"placeholder(page, 'name')\\\"\\n                        :error=\\\"pageNameError\\\"\\n                    />\\n                    {% endblock %}\\n\\n                    \\n                    {% block sw_cms_sidebar_page_settings_css_class_field %}\\n                    <sw-text-field\\n                        {% if VUE3 %}\\n                        v-model:value=\\\"page.cssClass\\\"\\n                        {% else %}\\n                        v-model=\\\"page.cssClass\\\"\\n                        {% endif %}\\n                        :label=\\\"$tc('sw-cms.detail.label.pageCssClass')\\\"\\n                        :placeholder=\\\"placeholder(page, 'cssClass')\\\"\\n                        :help-text=\\\"$tc('sw-cms.detail.helpText.cssClassField')\\\"\\n                    />\\n                    {% endblock %}\\n\\n                    \\n                    {% block sw_cms_sidebar_page_settings_type_field %}\\n                    <sw-select-field\\n                        v-tooltip.bottom=\\\"tooltipDisabled\\\"\\n                        :value=\\\"page.type\\\"\\n                        :label=\\\"$tc('sw-cms.detail.label.pageTypeSelection')\\\"\\n                        :disabled=\\\"!isSystemDefaultLanguage || page.type === 'product_detail'\\\"\\n                        {% if VUE3 %}\\n                        @update:value=\\\"onPageTypeChange\\\"\\n                        {% else %}\\n                        @change=\\\"onPageTypeChange\\\"\\n                        {% endif %}\\n                    >\\n                        \\n                        {% block sw_cms_sidebar_page_settings_type_field_options %}\\n                        <option\\n                            v-for=\\\"pageType in pageTypes\\\"\\n                            :key=\\\"pageType.name\\\"\\n                            :value=\\\"pageType.name\\\"\\n                            :disabled=\\\"isDisabledPageType(pageType)\\\"\\n                        >\\n                            {{ $tc(pageType.title) }}\\n                        </option>\\n                        {% endblock %}\\n                    </sw-select-field>\\n                    {% endblock %}\\n\\n                    \\n                    {% block sw_cms_sidebar_page_settings_demo_field %}\\n                    <sw-entity-single-select\\n                        v-if=\\\"demoEntity !== null\\\"\\n                        v-model=\\\"demoEntityId\\\"\\n                        :label=\\\"$tc('sw-cms.detail.label.demoEntity')\\\"\\n                        :placeholder=\\\"$tc('sw-cms.detail.placeholder.demoEntity')\\\"\\n                        :entity=\\\"demoEntity\\\"\\n                        :criteria=\\\"demoCriteria\\\"\\n                        :context=\\\"demoContext\\\"\\n                        show-clearable-button\\n                        {% if VUE3 %}\\n                        @update:value=\\\"onDemoEntityChange\\\"\\n                        {% else %}\\n                        @change=\\\"onDemoEntityChange\\\"\\n                        {% endif %}\\n                    >\\n\\n                        \\n                        {% block sw_cms_sidebar_page_settings_demo_field_variant_label %}\\n                        <template\\n                            v-if=\\\"demoEntity === 'product'\\\"\\n                            #selection-label-property=\\\"{ item }\\\"\\n                        >\\n                            <sw-product-variant-info :variations=\\\"item.variation\\\">\\n                                {{ item.translated.name || item.name }}\\n                            </sw-product-variant-info>\\n                        </template>\\n                        {% endblock %}\\n\\n                        \\n                        {% block sw_cms_sidebar_page_settings_demo_field_result_item %}\\n                        <template\\n                            v-if=\\\"demoEntity === 'product'\\\"\\n                            #result-item=\\\"{ item, index }\\\"\\n                        >\\n                            <sw-select-result\\n                                v-bind=\\\"{ item, index }\\\"\\n                            >\\n\\n                                \\n                                {% block sw_cms_sidebar_page_settings_demo_field_result_label %}\\n                                <span class=\\\"sw-select-result__result-item-text\\\">\\n                                    <sw-product-variant-info :variations=\\\"item.variation\\\">\\n                                        {{ item.translated.name || item.name }}\\n                                    </sw-product-variant-info>\\n                                </span>\\n                                {% endblock %}\\n                            </sw-select-result>\\n                        </template>\\n                        {% endblock %}\\n                    </sw-entity-single-select>\\n                    {% endblock %}\\n                </div>\\n            </template>\\n            {% endblock %}\\n        </sw-sidebar-collapse>\\n        {% endblock %}\\n    </sw-sidebar-item>\\n    {% endblock %}\\n\\n    \\n    {% block sw_cms_sidebar_block_overview %}\\n    <sw-sidebar-item\\n        ref=\\\"blockSelectionSidebar\\\"\\n        icon=\\\"regular-plus-circle\\\"\\n        :title=\\\"addBlockTitle\\\"\\n        :disabled=\\\"currentDeviceView === 'form' || !isSystemDefaultLanguage || page.locked || disabled\\\"\\n    >\\n        \\n        {% block sw_cms_sidebar_block_overview_content %}\\n        <div class=\\\"sw-cms-sidebar__block-overview\\\">\\n\\n            \\n            {% block sw_cms_sidebar_block_overview_category %}\\n            <div class=\\\"sw-cms-sidebar__block-category\\\">\\n                <sw-select-field\\n                    {% if VUE3 %}\\n                    v-model:value=\\\"currentBlockCategory\\\"\\n                    {% else %}\\n                    v-model=\\\"currentBlockCategory\\\"\\n                    {% endif %}\\n                    :label=\\\"$tc('sw-cms.detail.label.blockCategorySelection')\\\"\\n                >\\n                    \\n                    {% block sw_cms_sidebar_block_overview_category_options %}\\n                    <option value=\\\"favorite\\\">\\n                        {{ $tc('sw-cms.detail.label.blockCategoryFavorite') }}\\n                    </option>\\n                    <option value=\\\"text\\\">\\n                        {{ $tc('sw-cms.detail.label.blockCategoryText') }}\\n                    </option>\\n                    <option value=\\\"image\\\">\\n                        {{ $tc('sw-cms.detail.label.blockCategoryImage') }}\\n                    </option>\\n                    <option value=\\\"video\\\">\\n                        {{ $tc('sw-cms.detail.label.blockCategoryVideo') }}\\n                    </option>\\n                    <option value=\\\"text-image\\\">\\n                        {{ $tc('sw-cms.detail.label.blockCategoryTextImage') }}\\n                    </option>\\n                    <option value=\\\"commerce\\\">\\n                        {{ $tc('sw-cms.detail.label.blockCategoryCommerce') }}\\n                    </option>\\n                    <option value=\\\"sidebar\\\">\\n                        {{ $tc('sw-cms.detail.label.blockCategorySidebar') }}\\n                    </option>\\n                    <option value=\\\"form\\\">\\n                        {{ $tc('sw-cms.detail.label.blockCategoryForm') }}\\n                    </option>\\n                    {% endblock %}\\n                </sw-select-field>\\n            </div>\\n            {% endblock %}\\n\\n            \\n            {% block sw_cms_sidebar_block_overview_preview %}\\n            <div\\n                class=\\\"sw-cms-sidebar__block-selection\\\"\\n            >\\n                <sw-empty-state\\n                    v-if=\\\"cmsBlocksBySelectedBlockCategory.length === 0 && currentBlockCategory === 'favorite'\\\"\\n                    icon=\\\"solid-heart\\\"\\n                    :absolute=\\\"false\\\"\\n                    :title=\\\"$tc('sw-cms.detail.title.blockFavoriteEmptyState')\\\"\\n                >\\n                    {{ $tc('sw-cms.detail.label.blockFavoriteEmptyState') }}\\n                </sw-empty-state>\\n                <div\\n                    v-for=\\\"block in cmsBlocksBySelectedBlockCategory\\\"\\n                    :key=\\\"block.name\\\"\\n                    class=\\\"sw-cms-sidebar__block\\\"\\n                >\\n\\n                    <div class=\\\"sw-cms-sidebar__block-preview-with-actions\\\">\\n                        <div\\n                            v-draggable=\\\"{ dragGroup: 'cms-stage', data: { block }, onDrop: onBlockStageDrop }\\\"\\n                            class=\\\"sw-cms-sidebar__block-preview\\\"\\n                            :class=\\\"{ 'has--no-label': !block.label }\\\"\\n                        >\\n\\n                            \\n                            {% block sw_cms_sidebar_block_overview_preview_component %}\\n                            <component :is=\\\"block.previewComponent\\\" />\\n                            {% endblock %}\\n                        </div>\\n\\n                        \\n                        {% block sw_cms_sidebar_block_overview_preview_favorite_action %}\\n                        <sw-button\\n                            class=\\\"sw-cms-sidebar__block-favorite\\\"\\n                            size=\\\"small\\\"\\n                            square\\n                            block\\n                            @click=\\\"onToggleBlockFavorite(block.name)\\\"\\n                        >\\n                            <sw-icon\\n                                v-if=\\\"cmsBlockFavorites.isFavorite(block.name)\\\"\\n                                name=\\\"solid-heart\\\"\\n                                size=\\\"20\\\"\\n                                class=\\\"sw-cms-sidebar__icon-cms-block-favorite\\\"\\n                            />\\n                            <sw-icon\\n                                v-else\\n                                name=\\\"regular-heart\\\"\\n                                size=\\\"20\\\"\\n                                class=\\\"sw-cms-sidebar__icon-cms-block-favorite\\\"\\n                            />\\n                        </sw-button>\\n                        {% endblock %}\\n                    </div>\\n\\n                    \\n                    {% block sw_cms_sidebar_block_overview_preview_label %}\\n                    <span\\n                        v-if=\\\"block.label\\\"\\n                        class=\\\"sw-cms-sidebar__block-label\\\"\\n                    >\\n                        {{ $tc(block.label) }}\\n                    </span>\\n                    {% endblock %}\\n                </div>\\n            </div>\\n            {% endblock %}\\n        </div>\\n        {% endblock %}\\n    </sw-sidebar-item>\\n    {% endblock %}\\n\\n    \\n    {% block sw_cms_sidebar_block_and_section_settings %}\\n    <sw-sidebar-item\\n        ref=\\\"itemConfigSidebar\\\"\\n        icon=\\\"regular-file-edit\\\"\\n        :title=\\\"sidebarItemSettings\\\"\\n        :disabled=\\\"(selectedBlock === null && selectedSection === null) || page.locked || disabled\\\"\\n        @close-content=\\\"onCloseBlockConfig\\\"\\n    >\\n\\n        \\n        {% block sw_cms_sidebar_block_settings %}\\n        <div class=\\\"sw-cms-sidebar__block-settings\\\">\\n            <template v-if=\\\"selectedBlock !== null\\\">\\n\\n                \\n                {% block sw_cms_sidebar_block_settings_content %}\\n                <sw-sidebar-collapse :expand-on-loading=\\\"true\\\">\\n\\n                    \\n                    {% block sw_cms_sidebar_block_settings_header %}\\n                    <template #header>\\n                        <span>\\n                            {{ $tc('sw-cms.sidebar.contentMenu.generalSettings') }}\\n                        </span>\\n                    </template>\\n                    {% endblock %}\\n\\n                    \\n                    {% block sw_cms_sidebar_block_settings_form %}\\n                    <template #content>\\n                        <sw-cms-block-config\\n                            :block=\\\"selectedBlock\\\"\\n                            @block-delete=\\\"onBlockDelete\\\"\\n                            @block-duplicate=\\\"onBlockDuplicate\\\"\\n                        />\\n                    </template>\\n                    {% endblock %}\\n                </sw-sidebar-collapse>\\n                {% endblock %}\\n\\n                \\n                {% block sw_cms_sidebar_block_layout_settings_content %}\\n                <sw-sidebar-collapse :expand-on-loading=\\\"false\\\">\\n\\n                    \\n                    {% block sw_cms_sidebar_block_layout_settings_header %}\\n                    <template #header>\\n                        <span> {{ $tc('sw-cms.sidebar.contentMenu.layoutSettings') }}</span>\\n                    </template>\\n                    {% endblock %}\\n\\n                    \\n                    {% block sw_cms_sidebar_block_layout_settings_form %}\\n                    <template #content>\\n                        <sw-cms-block-layout-config :block=\\\"selectedBlock\\\" />\\n                    </template>\\n                    {% endblock %}\\n                </sw-sidebar-collapse>\\n                {% endblock %}\\n\\n                <sw-sidebar-collapse :expand-on-loading=\\\"false\\\">\\n                    <template #header>\\n                        <span>{{ $tc('sw-cms.sidebar.contentMenu.visibilitySettings') }}</span>\\n                    </template>\\n                    <template #content>\\n                        <sw-cms-visibility-config\\n                            class=\\\"sw-cms-sidebar__visibility-config-block\\\"\\n                            :visibility=\\\"selectedBlock.visibility\\\"\\n                            @visibility-change=\\\"(viewport, isVisible) => onVisibilityChange(selectedBlock, viewport, isVisible)\\\"\\n                        />\\n                    </template>\\n                </sw-sidebar-collapse>\\n            </template>\\n        </div>\\n        {% endblock %}\\n\\n        \\n        {% block sw_cms_sidebar_section_settings %}\\n        <div class=\\\"sw-cms-sidebar__section-settings\\\">\\n            <template v-if=\\\"selectedSection !== null\\\">\\n\\n                \\n                {% block sw_cms_sidebar_section_settings_content %}\\n                <sw-sidebar-collapse :expand-on-loading=\\\"true\\\">\\n\\n                    \\n                    {% block sw_cms_sidebar_section_settings_header %}\\n                    <template #header>\\n                        <span>\\n                            {{ $tc('sw-cms.sidebar.contentMenu.generalSettings') }}\\n                        </span>\\n                    </template>\\n                    {% endblock %}\\n\\n                    \\n                    {% block sw_cms_sidebar_section_settings_form %}\\n                    <template #content>\\n                        <sw-cms-section-config\\n                            :section=\\\"selectedSection\\\"\\n                            @section-duplicate=\\\"onSectionDuplicate\\\"\\n                            @section-delete=\\\"onSectionDelete\\\"\\n                        />\\n                    </template>\\n                    {% endblock %}\\n                </sw-sidebar-collapse>\\n\\n                <sw-sidebar-collapse :expand-on-loading=\\\"false\\\">\\n                    <template #header>\\n                        <span>{{ $tc('sw-cms.sidebar.contentMenu.visibilitySettings') }}</span>\\n                    </template>\\n                    <template #content>\\n                        <sw-cms-visibility-config\\n                            class=\\\"sw-cms-sidebar__visibility-config-section\\\"\\n                            :visibility=\\\"selectedSection.visibility\\\"\\n                            @visibility-change=\\\"(viewport, isVisible) => onVisibilityChange(selectedSection, viewport, isVisible)\\\"\\n                        />\\n                    </template>\\n                </sw-sidebar-collapse>\\n                {% endblock %}\\n            </template>\\n        </div>\\n        {% endblock %}\\n    </sw-sidebar-item>\\n    {% endblock %}\\n\\n    \\n    {% block sw_cms_sidebar_navigator %}\\n    <sw-sidebar-item\\n        ref=\\\"blockNavigator\\\"\\n        icon=\\\"regular-layer-group\\\"\\n        :title=\\\"$tc('sw-cms.detail.sidebar.titleNavigator')\\\"\\n        :disabled=\\\"!page.sections.length === 0 || currentDeviceView === 'form' || page.locked || disabled\\\"\\n        @click=\\\"onSidebarNavigatorClick\\\"\\n    >\\n        \\n        {% block sw_cms_sidebar_navigator_content %}\\n        <div class=\\\"sw-cms-sidebar__navigator\\\">\\n\\n            \\n            {% block sw_cms_sidebar_navigator_section %}\\n            <div\\n                v-for=\\\"(section, sectionIndex) in page.sections\\\"\\n                :id=\\\"`sw-cms-sidebar__section-${section.id}`\\\"\\n                :key=\\\"section.id\\\"\\n                class=\\\"sw-cms-sidebar__navigator-section\\\"\\n            >\\n\\n                \\n                {% block sw_cms_sidebar_navigator_section_header %}\\n                <div class=\\\"sw-cms-sidebar__navigator-section-header\\\">\\n                    <template v-if=\\\"section.name\\\">\\n                        {{ $tc('sw-cms.section.layoutSection') }} - {{ section.name }}\\n                    </template>\\n\\n                    <template v-else-if=\\\"section.type === 'sidebar'\\\">\\n                        {{ $tc('sw-cms.section.isSidebar') }}\\n                    </template>\\n\\n                    <template v-else>\\n                        {{ $tc('sw-cms.section.isDefault') }}\\n                    </template>\\n\\n                    \\n                    {% block sw_cms_sidebar_navigator_section_menu %}\\n                    <sw-context-button :key=\\\"section.position\\\">\\n\\n                        \\n                        {% block sw_cms_sidebar_navigator_section_menu_move_up %}\\n                        <sw-context-menu-item\\n                            class=\\\"sw-cms-sidebar__navigator-section-move-up\\\"\\n                            :disabled=\\\"section.position === 0\\\"\\n                            @click=\\\"moveSectionUp(section)\\\"\\n                        >\\n                            {{ $tc('sw-cms.sidebar.contentMenu.moveUp') }}\\n                        </sw-context-menu-item>\\n                        {% endblock %}\\n\\n                        \\n                        {% block sw_cms_sidebar_navigator_section_menu_move_down %}\\n                        <sw-context-menu-item\\n                            class=\\\"sw-cms-sidebar__navigator-section-move-down\\\"\\n                            :disabled=\\\"section.position === page.sections.length - 1\\\"\\n                            @click=\\\"moveSectionDown(section)\\\"\\n                        >\\n                            {{ $tc('sw-cms.sidebar.contentMenu.moveDown') }}\\n                        </sw-context-menu-item>\\n                        {% endblock %}\\n\\n                        \\n                        {% block sw_cms_sidebar_navigator_section_menu_settings %}\\n                        <sw-context-menu-item\\n                            class=\\\"sw-cms-sidebar__navigator-section-settings\\\"\\n                            @click=\\\"openSectionSettings(sectionIndex)\\\"\\n                        >\\n                            {{ $tc('sw-cms.sidebar.contentMenu.settings') }}\\n                        </sw-context-menu-item>\\n                        {% endblock %}\\n\\n                        \\n                        {% block sw_cms_sidebar_navigator_section_menu_duplicate %}\\n                        <sw-context-menu-item\\n                            class=\\\"sw-cms-sidebar__navigator-section-duplicate\\\"\\n                            :disabled=\\\"!sectionIsDuplicable(section)\\\"\\n                            @click=\\\"onSectionDuplicate(section)\\\"\\n                        >\\n                            {{ $tc('global.default.duplicate') }}\\n                        </sw-context-menu-item>\\n                        {% endblock %}\\n\\n                        \\n                        {% block sw_cms_sidebar_navigator_section_menu_delete %}\\n                        <sw-context-menu-item\\n                            class=\\\"sw-cms-sidebar__navigator-section-delete\\\"\\n                            variant=\\\"danger\\\"\\n                            @click=\\\"onSectionDelete(section.id)\\\"\\n                        >\\n                            {{ $tc('sw-cms.general.buttonDelete') }}\\n                        </sw-context-menu-item>\\n                        {% endblock %}\\n                    </sw-context-button>\\n                    {% endblock %}\\n                </div>\\n                {% endblock %}\\n\\n                \\n                {% block sw_cms_sidebar_navigator_main_elements %}\\n                <template v-if=\\\"getMainContentBlocks(section.blocks).length > 0\\\">\\n                    \\n                    {% block sw_cms_sidebar_navigator_main_element %}\\n                    <template\\n                        v-for=\\\"block in getMainContentBlocks(section.blocks)\\\"\\n                        {% if VUE3 %}\\n                        :key=\\\"block.id\\\"\\n                        {% endif %}\\n                    >\\n                        <sw-cms-sidebar-nav-element\\n                            {% if VUE2 %}\\n                            :key=\\\"block.id\\\"\\n                            {% endif %}\\n                            v-draggable=\\\"getDragData(block, sectionIndex)\\\"\\n                            v-droppable=\\\"getDropData(block, sectionIndex)\\\"\\n                            :block=\\\"block\\\"\\n                            class=\\\"sw-cms-sidebar__navigator-block\\\"\\n                            :removable=\\\"blockIsRemovable(block)\\\"\\n                            :duplicable=\\\"blockIsDuplicable(block)\\\"\\n                            :class=\\\"{ 'is--dragging': block.isDragging }\\\"\\n                            @block-delete=\\\"onBlockDelete($event, section)\\\"\\n                            @block-duplicate=\\\"onBlockDuplicate($event, section)\\\"\\n                        />\\n                    </template>\\n                    {% endblock %}\\n                </template>\\n\\n                <template v-else>\\n                    \\n                    {% block sw_cms_sidebar_navigator_main_empty %}\\n                    <div\\n                        :key=\\\"section.id + '_main'\\\"\\n                        v-droppable=\\\"getDropData({ position: 0, sectionPosition: 'main' }, sectionIndex)\\\"\\n                        class=\\\"sw-cms-sidebar__navigator-empty-element\\\"\\n                    >\\n                        {{ $tc('sw-cms.detail.label.addBlocks') }}\\n                    </div>\\n                    {% endblock %}\\n                </template>\\n                {% endblock %}\\n\\n                <template v-if=\\\"section.type === 'sidebar'\\\">\\n                    <div class=\\\"sw-cms-sidebar__navigator-section-spacer\\\"></div>\\n\\n                    \\n                    {% block sw_cms_sidebar_navigator_sidebar_elements %}\\n                    <template v-if=\\\"getSidebarContentBlocks(section.blocks).length > 0\\\">\\n                        \\n                        {% block sw_cms_sidebar_navigator_sidebar_element %}\\n                        <template\\n                            v-for=\\\"block in getSidebarContentBlocks(section.blocks)\\\"\\n                            {% if VUE3 %}\\n                            :key=\\\"block.id\\\"\\n                            {% endif %}\\n                        >\\n                            <sw-cms-sidebar-nav-element\\n                                {% if VUE2 %}\\n                                :key=\\\"block.id\\\"\\n                                {% endif %}\\n                                v-draggable=\\\"getDragData(block, sectionIndex)\\\"\\n                                v-droppable=\\\"getDropData(block, sectionIndex)\\\"\\n                                :block=\\\"block\\\"\\n                                :removable=\\\"blockIsRemovable(block)\\\"\\n                                class=\\\"sw-cms-sidebar__navigator-block is--sidebar\\\"\\n                                :class=\\\"{ 'is--dragging': block.isDragging }\\\"\\n                                @block-delete=\\\"onBlockDelete($event, section)\\\"\\n                                @block-duplicate=\\\"onBlockDuplicate($event, section)\\\"\\n                            />\\n                        </template>\\n                        {% endblock %}\\n                    </template>\\n\\n                    <template v-else>\\n                        \\n                        {% block sw_cms_sidebar_navigator_sidebar_empty %}\\n                        <div\\n                            :key=\\\"section.id + '_sidebar'\\\"\\n                            v-droppable=\\\"getDropData({ position: 0, sectionPosition: 'sidebar' }, sectionIndex)\\\"\\n                            class=\\\"sw-cms-sidebar__navigator-empty-element\\\"\\n                        >\\n                            {{ $tc('sw-cms.detail.label.addBlocks') }}\\n                        </div>\\n                        {% endblock %}\\n                    </template>\\n                    {% endblock %}\\n                </template>\\n            </div>\\n            {% endblock %}\\n        </div>\\n        {% endblock %}\\n    </sw-sidebar-item>\\n    {% endblock %}\\n\\n    \\n    {% block sw_cms_sidebar_layout_assignment %}\\n    <sw-sidebar-item\\n        ref=\\\"layoutAssignment\\\"\\n        class=\\\"sw-cms-sidebar__layout-assignment\\\"\\n        icon=\\\"regular-share\\\"\\n        :title=\\\"$tc('sw-cms.detail.sidebar.titleLayoutAssignment')\\\"\\n        :disabled=\\\"page.locked || disabled\\\"\\n    >\\n\\n        \\n        {% block sw_cms_sidebar_layout_assignment_content %}\\n        <div class=\\\"sw-cms-sidebar__layout-assignment-content\\\">\\n            \\n            {% block sw_cms_sidebar_layout_assignment_headline %}\\n            <h3 class=\\\"sw-cms-sidebar__layout-assignment-headline\\\">\\n                {{ $tc('sw-cms.sidebar.layoutAssignment.headline') }}\\n            </h3>\\n            {% endblock %}\\n\\n            \\n            {% block sw_cms_sidebar_layout_assignment_info_text %}\\n            <p class=\\\"sw-cms-sidebar__layout-assignment-info-text\\\">\\n                {{ $tc('sw-cms.sidebar.layoutAssignment.infoText') }}\\n            </p>\\n            {% endblock %}\\n\\n            \\n            {% block sw_cms_sidebar_layout_assignment_action_open %}\\n            <sw-button\\n                variant=\\\"ghost\\\"\\n                size=\\\"small\\\"\\n                class=\\\"sw-cms-sidebar__layout-assignment-open\\\"\\n                @click=\\\"onOpenLayoutAssignment\\\"\\n            >\\n                {{ $tc('sw-cms.sidebar.layoutAssignment.actionAssignLayout') }}\\n            </sw-button>\\n            {% endblock %}\\n        </div>\\n        {% endblock %}\\n\\n        <div\\n            v-if=\\\"showDefaultLayoutSelection\\\"\\n            class=\\\"sw-cms-sidebar__layout-set-as-default-content\\\"\\n        >\\n            <h3 class=\\\"sw-cms-sidebar__layout-set-as-default-headline\\\">\\n                {{ $tc('sw-cms.sidebar.layoutSetAsDefault.headline') }}\\n            </h3>\\n\\n            <p class=\\\"sw-cms-sidebar__layout-set-as-default-info-text\\\">\\n                {{ $tc('sw-cms.components.setDefaultLayoutModal.infoText') }}\\n            </p>\\n\\n            <sw-button\\n                variant=\\\"ghost\\\"\\n                size=\\\"small\\\"\\n                class=\\\"sw-cms-sidebar__layout-set-as-default-open\\\"\\n                @click=\\\"onOpenLayoutSetAsDefault\\\"\\n            >\\n                {{ $tc('sw-cms.sidebar.layoutSetAsDefault.actionSetAsDefaultLayout') }}\\n            </sw-button>\\n        </div>\\n    </sw-sidebar-item>\\n    {% endblock %}\\n\\n    \\n    {% block sw_cms_sidebar_navigator_confirm_modal %}\\n    <sw-modal\\n        v-if=\\\"showSidebarNavigatorModal\\\"\\n        class=\\\"sw-cms-sidebar__navigator-confirm-modal\\\"\\n        :title=\\\"$tc('global.default.warning')\\\"\\n        variant=\\\"small\\\"\\n        @modal-close=\\\"onSidebarNavigationCancel\\\"\\n    >\\n\\n        \\n        {% block sw_cms_sidebar_navigator_confirm_modal_content %}\\n        <p class=\\\"sw-confirm-modal__text\\\">\\n            {{ $tc('sw-cms.detail.sidebar.confirmTextNavigator') }}\\n\\n            \\n            {% block sw_cms_sidebar_navigator_confirm_modal_content_input_reminder %}\\n            <sw-checkbox-field\\n                {% if VUE3 %}\\n                v-model:value=\\\"navigatorDontRemind\\\"\\n                {% else %}\\n                v-model=\\\"navigatorDontRemind\\\"\\n                {% endif %}\\n                class=\\\"sw-cms-sidebar__navigator-confirm-modal-reminder\\\"\\n                :label=\\\"$tc('sw-cms.detail.sidebar.confirmReminderNavigator')\\\"\\n            />\\n            {% endblock %}\\n        </p>\\n        {% endblock %}\\n\\n        <template #modal-footer>\\n            \\n            {% block sw_cms_sidebar_navigator_confirm_modal_content_footer %}\\n            \\n            {% block sw_cms_sidebar_navigator_confirm_modal_content_footer_cancel %}\\n            <sw-button\\n                class=\\\"sw-cms-sidebar__navigator-confirm-modal-cancel\\\"\\n                size=\\\"small\\\"\\n                @click=\\\"onSidebarNavigationCancel\\\"\\n            >\\n                {{ $tc('global.default.cancel') }}\\n            </sw-button>\\n            {% endblock %}\\n\\n            \\n            {% block sw_cms_sidebar_navigator_confirm_modal_content_footer_confirm %}\\n            <sw-button\\n                class=\\\"sw-cms-sidebar__navigator-confirm-modal-confirm\\\"\\n                variant=\\\"primary\\\"\\n                size=\\\"small\\\"\\n                @click=\\\"onSidebarNavigationConfirm\\\"\\n            >\\n                {{ $tc('global.default.confirm') }}\\n            </sw-button>\\n            {% endblock %}\\n            {% endblock %}\\n        </template>\\n    </sw-modal>\\n    {% endblock %}\\n</sw-sidebar>\\n{% endblock %}\\n\";","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../../../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--15-1!../../../../../node_modules/css-loader/dist/cjs.js??ref--15-2!../../../../../node_modules/sass-loader/dist/cjs.js??ref--15-3!./sw-cms-sidebar.scss\");\nif(content.__esModule) content = content.default;\nif(typeof content === 'string') content = [[module.id, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar add = require(\"!../../../../../node_modules/vue-style-loader/lib/addStylesClient.js\").default\nvar update = add(\"0e9f6041\", content, true, {});"],"sourceRoot":""}