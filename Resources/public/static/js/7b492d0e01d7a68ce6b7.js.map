{"version":3,"sources":["webpack:///./src/module/sw-category/component/sw-category-tree/sw-category-tree.scss","webpack:///./src/module/sw-category/component/sw-category-tree/index.js","webpack:///./src/module/sw-category/component/sw-category-tree/sw-category-tree.html.twig"],"names":["content","__esModule","default","module","i","locals","exports","add","Criteria","Shopware","Data","mapState","Component","getComponentHelper","template","inject","mixins","props","categoryId","type","String","required","currentLanguageId","allowEdit","Boolean","allowCreate","allowDelete","data","loadedCategories","translationContext","linkContext","isLoadingInitialData","loadedParentIds","sortable","this","computed","_objectSpread","categoryRepository","repositoryFactory","create","category","State","get","categories","Object","values","disableContextMenu","Context","api","systemLanguageId","contextMenuTooltipText","$tc","criteria","addAssociation","criteriaWithChildren","parentCriteria","fromCriteria","setLimit","associations","push","association","cmsPageRepository","productRepository","watch","categoriesToDelete","value","undefined","$refs","categoryTree","onDeleteElements","commit","newVal","oldVal","_this","id","affectedCategoryIds","concat","_toConsumableArray","navigationSalesChannels","map","salesChannel","navigationCategoryId","footerSalesChannels","footerCategoryId","serviceSalesChannels","serviceCategoryId","setIds","filter","index","self","indexOf","search","then","addCategories","openInitialTree","created","createdComponent","methods","_this2","loadRootCategories","finally","_this3","path","Promise","resolve","parentIds","split","parentPromises","forEach","promise","result","children","all","onUpdatePositions","Utils","debounce","_ref","_this4","draggedItem","oldParentId","newParentId","length","child","removeFromStore","syncSiblings","parentId","syncProducts","addFilter","multi","equals","iterateIds","indexProducts","ids","headers","buildHeaders","Application","getContainer","httpClient","post","checkedElementsCount","count","$emit","deleteCheckedItems","checkedItems","_this5","_asyncToGenerator","_regeneratorRuntime","mark","_callee","_categories","wrap","_context","prev","next","keys","some","_this5$loadedCategori","_this5$loadedCategori2","createNotificationError","message","deleted","$delete","$nextTick","abrupt","syncDeleted","fixSortingForCategories","stop","onDeleteCategory","_ref2","_this6","checked","isNew","isErrorNavigationEntryPoint","isDeleted","getNextCategory","afterCategoryId","entryPointWarningMessage","delete","_callee2","updatedParent","_context2","sent","addCategory","$router","name","_this7","isSorted","arguments","categoriesToBeChanged","nextCategory","find","item","saveAll","key","changeCategory","route","params","hasChanges","onGetTreeItems","_this8","includes","getChildrenFromParent","_this9","createNewElement","contextItem","newCategory","createNewCategory","_this10","childCount","active","visible","save","_ref4","_this11","siblings","sync","parent","$set","_this12","_this13","deletedIds","getDeletedIds","loadedId","idToDelete","_this14","idsToDelete","apply","getCategoryUrl","href","isHighlighted","_ref5","navigation","entryPointLabel"],"mappings":"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","file":"static/js/7b492d0e01d7a68ce6b7.js","sourcesContent":["// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../../../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--15-1!../../../../../node_modules/css-loader/dist/cjs.js??ref--15-2!../../../../../node_modules/sass-loader/dist/cjs.js??ref--15-3!./sw-category-tree.scss\");\nif(content.__esModule) content = content.default;\nif(typeof content === 'string') content = [[module.id, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar add = require(\"!../../../../../node_modules/vue-style-loader/lib/addStylesClient.js\").default\nvar update = add(\"9a7f517a\", content, true, {});","import template from './sw-category-tree.html.twig';\nimport './sw-category-tree.scss';\n\nconst { Criteria } = Shopware.Data;\nconst { mapState } = Shopware.Component.getComponentHelper();\n\n/**\n * @package content\n */\n// eslint-disable-next-line sw-deprecation-rules/private-feature-declarations\nexport default {\n    template,\n\n    inject: ['repositoryFactory', 'syncService'],\n\n    mixins: ['notification'],\n\n    props: {\n        categoryId: {\n            type: String,\n            required: false,\n            default: null,\n        },\n\n        currentLanguageId: {\n            type: String,\n            required: true,\n        },\n\n        allowEdit: {\n            type: Boolean,\n            required: false,\n            // TODO: Boolean props should only be opt in and therefore default to false\n            // eslint-disable-next-line vue/no-boolean-default\n            default: true,\n        },\n\n        allowCreate: {\n            type: Boolean,\n            required: false,\n            // TODO: Boolean props should only be opt in and therefore default to false\n            // eslint-disable-next-line vue/no-boolean-default\n            default: true,\n        },\n\n        allowDelete: {\n            type: Boolean,\n            required: false,\n            // TODO: Boolean props should only be opt in and therefore default to false\n            // eslint-disable-next-line vue/no-boolean-default\n            default: true,\n        },\n    },\n\n    data() {\n        return {\n            loadedCategories: {},\n            translationContext: 'sw-category',\n            linkContext: 'sw.category.detail',\n            isLoadingInitialData: true,\n            loadedParentIds: [],\n            sortable: this.allowEdit,\n        };\n    },\n\n    computed: {\n        ...mapState('swCategoryDetail', [\n            'categoriesToDelete',\n        ]),\n\n        categoryRepository() {\n            return this.repositoryFactory.create('category');\n        },\n\n        category() {\n            return Shopware.State.get('swCategoryDetail').category;\n        },\n\n        categories() {\n            return Object.values(this.loadedCategories);\n        },\n\n        disableContextMenu() {\n            if (!this.allowEdit) {\n                return true;\n            }\n\n            return this.currentLanguageId !== Shopware.Context.api.systemLanguageId;\n        },\n\n        contextMenuTooltipText() {\n            if (!this.allowEdit) {\n                return this.$tc('sw-privileges.tooltip.warning');\n            }\n\n            return null;\n        },\n\n        criteria() {\n            return new Criteria(1, 500)\n                .addAssociation('navigationSalesChannels')\n                .addAssociation('footerSalesChannels')\n                .addAssociation('serviceSalesChannels');\n        },\n\n        criteriaWithChildren() {\n            const parentCriteria = Criteria.fromCriteria(this.criteria).setLimit(1);\n            parentCriteria.associations.push({\n                association: 'children',\n                criteria: Criteria.fromCriteria(this.criteria),\n            });\n\n            return parentCriteria;\n        },\n\n        cmsPageRepository() {\n            return this.repositoryFactory.create('cms_page');\n        },\n\n        productRepository() {\n            return this.repositoryFactory.create('product');\n        },\n    },\n\n    watch: {\n        categoriesToDelete(value) {\n            if (value === undefined) {\n                return;\n            }\n\n            this.$refs.categoryTree.onDeleteElements(value);\n\n            Shopware.State.commit('swCategoryDetail/setCategoriesToDelete', {\n                categoriesToDelete: undefined,\n            });\n        },\n\n        allowEdit(value) {\n            this.sortable = value;\n        },\n\n        category(newVal, oldVal) {\n            // load data when path is available\n            if (!oldVal && this.isLoadingInitialData) {\n                this.openInitialTree();\n                return;\n            }\n\n            // back to index\n            if (newVal === null) {\n                return;\n            }\n\n            // reload after save\n            if (oldVal && newVal.id === oldVal.id) {\n                const affectedCategoryIds = [\n                    newVal.id,\n                    ...oldVal.navigationSalesChannels.map(salesChannel => salesChannel.navigationCategoryId),\n                    ...oldVal.footerSalesChannels.map(salesChannel => salesChannel.footerCategoryId),\n                    ...oldVal.serviceSalesChannels.map(salesChannel => salesChannel.serviceCategoryId),\n                ];\n\n                const criteria = Criteria.fromCriteria(this.criteria)\n                    .setIds(affectedCategoryIds.filter((value, index, self) => {\n                        return value !== null && self.indexOf(value) === index;\n                    }));\n\n                this.categoryRepository.search(criteria).then((categories) => {\n                    this.addCategories(categories);\n                });\n            }\n        },\n\n        currentLanguageId() {\n            this.openInitialTree();\n        },\n    },\n\n    created() {\n        this.createdComponent();\n    },\n\n    methods: {\n        createdComponent() {\n            if (this.category !== null) {\n                this.openInitialTree();\n            }\n\n            if (!this.categoryId) {\n                this.loadRootCategories().finally(() => {\n                    this.isLoadingInitialData = false;\n                });\n            }\n        },\n\n        openInitialTree() {\n            this.isLoadingInitialData = true;\n            this.loadedCategories = {};\n            this.loadedParentIds = [];\n\n            this.loadRootCategories()\n                .then(() => {\n                    if (!this.category || this.category.path === null) {\n                        this.isLoadingInitialData = false;\n                        return Promise.resolve();\n                    }\n\n                    const parentIds = this.category.path.split('|').filter((id) => !!id);\n                    const parentPromises = [];\n\n                    parentIds.forEach((id) => {\n                        const promise = this.categoryRepository.get(id, Shopware.Context.api, this.criteriaWithChildren)\n                            .then((result) => {\n                                this.addCategories([result, ...result.children]);\n                            });\n                        parentPromises.push(promise);\n                    });\n\n                    return Promise.all(parentPromises).then(() => {\n                        this.isLoadingInitialData = false;\n                    });\n                });\n        },\n\n        onUpdatePositions: Shopware.Utils.debounce(function onUpdatePositions({ draggedItem, oldParentId, newParentId }) {\n            if (draggedItem.children.length > 0) {\n                draggedItem.children.forEach((child) => {\n                    this.removeFromStore(child.id);\n                });\n                this.loadedParentIds = this.loadedParentIds.filter((id) => id !== draggedItem.id);\n            }\n\n            this.syncSiblings({ parentId: newParentId }).then(() => {\n                if (oldParentId !== newParentId) {\n                    this.syncSiblings({ parentId: oldParentId }).then(() => {\n                        this.syncProducts(draggedItem.id);\n                    });\n                }\n\n                this.sortable = this.allowEdit;\n            });\n        }, 400),\n\n        syncProducts(categoryId) {\n            const criteria = new Criteria(1, 50);\n            criteria.addFilter(Criteria.multi('or', [\n                Criteria.equals('categoriesRo.id', categoryId),\n                Criteria.equals('categories.id', categoryId),\n            ]));\n\n            return this.productRepository.iterateIds(criteria, this.indexProducts);\n        },\n\n        indexProducts(ids) {\n            const headers = this.productRepository.buildHeaders();\n\n            const initContainer = Shopware.Application.getContainer('init');\n            const httpClient = initContainer.httpClient;\n\n            return httpClient.post('/_action/index-products', { ids }, { headers });\n        },\n\n        checkedElementsCount(count) {\n            this.$emit('category-checked-elements-count', count);\n        },\n\n        async deleteCheckedItems(checkedItems) {\n            const ids = Object.keys(checkedItems);\n\n            const hasNavigationCategories = ids.some((id) => {\n                return this.loadedCategories[id]?.navigationSalesChannels !== null\n                    && this.loadedCategories[id]?.navigationSalesChannels.length > 0;\n            });\n\n            if (hasNavigationCategories) {\n                this.createNotificationError({\n                    message: this.$tc('sw-category.general.errorNavigationEntryPointMultiple'),\n                });\n\n                const categories = ids.map((id) => {\n                    return this.loadedCategories[id];\n                });\n\n                // reload to remove selection\n                ids.forEach((deleted) => {\n                    this.$delete(this.loadedCategories, deleted);\n                });\n                this.$nextTick(() => {\n                    this.addCategories(categories);\n                });\n\n                return;\n            }\n\n            await this.categoryRepository.syncDeleted(ids, Shopware.Context.api);\n\n            const categories = ids.map((id) => this.loadedCategories[id]);\n\n            await this.fixSortingForCategories(categories);\n\n            ids.forEach(id => {\n                this.removeFromStore(id);\n            });\n        },\n\n        onDeleteCategory({ data: category, children, checked }) {\n            if (category.isNew()) {\n                this.$delete(this.loadedCategories, category.id);\n                return Promise.resolve();\n            }\n\n            if (this.isErrorNavigationEntryPoint(category)) {\n                // remove delete flags\n                category.isDeleted = false;\n                if (children.length > 0) {\n                    children.forEach((child) => {\n                        child.data.isDeleted = false;\n                    });\n                }\n\n                // reinsert category in sorting because the tree\n                // already overwrites the afterCategoryId of the following category\n                const next = this.getNextCategory(category);\n\n                if (next) {\n                    next.afterCategoryId = category.id;\n                }\n\n                // reload after changes\n                this.loadedCategories = { ...this.loadedCategories };\n\n                this.createNotificationError({ message: this.entryPointWarningMessage(category) });\n                return Promise.resolve();\n            }\n\n            return this.categoryRepository.delete(category.id).then(async () => {\n                this.removeFromStore(category.id);\n\n                if (category.parentId !== null) {\n                    const updatedParent = await this.categoryRepository.get(\n                        category.parentId,\n                        Shopware.Context.api,\n                        this.criteria,\n                    );\n                    this.addCategory(updatedParent);\n                }\n\n                await this.fixSortingForCategories([category], true);\n\n                if (category.id === this.categoryId) {\n                    this.$router.push({ name: 'sw.category.index' });\n                }\n\n                if (checked === true) {\n                    this.$refs.categoryTree.checkedElementsCount -= 1;\n                    this.$emit(\n                        'category-checked-elements-count',\n                        this.$refs.categoryTree.checkedElementsCount,\n                    );\n                }\n            });\n        },\n\n        fixSortingForCategories(categories, isSorted = false) {\n            const categoriesToBeChanged = [];\n\n            categories.forEach(category => {\n                // We need the second parameter, because the value of `afterCategoryId` of the actual next category\n                // is either updated already in case of `onDeleteCategory`, but not in case of `deleteCheckedItems`\n                const nextCategory = this.getNextCategory(category, isSorted ? 'afterCategoryId' : 'id');\n\n                if (!nextCategory) {\n                    return;\n                }\n\n                nextCategory.afterCategoryId = category.afterCategoryId;\n\n                if (categories.find(item => item.id === nextCategory.id)) {\n                    return;\n                }\n\n                categoriesToBeChanged.push(nextCategory);\n            });\n\n            return this.categoryRepository.saveAll(categoriesToBeChanged);\n        },\n\n        getNextCategory(category, key = 'id') {\n            return Object.values(this.loadedCategories).find((item) => {\n                return item.parentId === category.parentId && item.afterCategoryId === category[key];\n            });\n        },\n\n        changeCategory(category) {\n            const route = { name: 'sw.category.detail', params: { id: category.id } };\n            if (this.category && this.categoryRepository.hasChanges(this.category)) {\n                this.$emit('unsaved-changes', route);\n            } else {\n                this.$router.push(route);\n            }\n        },\n\n        onGetTreeItems(parentId) {\n            if (this.loadedParentIds.includes(parentId)) {\n                return Promise.resolve();\n            }\n\n            const criteria = Criteria.fromCriteria(this.criteria);\n            criteria.addFilter(Criteria.equals('parentId', parentId));\n            // in case the criteria has been altered to search specific ids e.g. by dragndrop position change\n            // reset all ids so categories can be found solely by parentId\n            criteria.setIds([]);\n\n            return this.categoryRepository.search(criteria).then((children) => {\n                this.addCategories(children);\n                this.loadedParentIds.push(parentId);\n            });\n        },\n\n        getChildrenFromParent(parentId) {\n            return this.onGetTreeItems(parentId);\n        },\n\n        loadRootCategories() {\n            const criteria = Criteria.fromCriteria(this.criteria)\n                .addFilter(Criteria.equals('parentId', null));\n\n            return this.categoryRepository.search(criteria).then((result) => {\n                this.addCategories(result);\n            });\n        },\n\n        createNewElement(contextItem, parentId, name = '') {\n            this.sortable = false;\n\n            if (!parentId && contextItem) {\n                parentId = contextItem.parentId;\n            }\n            const newCategory = this.createNewCategory(name, parentId);\n            this.addCategory(newCategory);\n            return newCategory;\n        },\n\n        createNewCategory(name, parentId) {\n            const newCategory = this.categoryRepository.create();\n\n            newCategory.name = name;\n            newCategory.parentId = parentId;\n            newCategory.childCount = 0;\n            newCategory.active = false;\n            newCategory.visible = true;\n\n            newCategory.save = () => {\n                return this.categoryRepository.save(newCategory).then(() => {\n                    const criteria = Criteria.fromCriteria(this.criteria)\n                        .setIds([newCategory.id, parentId].filter((id) => id !== null));\n                    this.categoryRepository.search(criteria).then((categories) => {\n                        this.addCategories(categories);\n\n                        this.sortable = this.allowEdit;\n                    });\n                });\n            };\n\n            return newCategory;\n        },\n\n        syncSiblings({ parentId }) {\n            const siblings = this.categories.filter((category) => {\n                return category.parentId === parentId;\n            });\n\n            return this.categoryRepository.sync(siblings).then(() => {\n                this.loadedParentIds = this.loadedParentIds.filter(id => id !== parentId);\n                return this.getChildrenFromParent(parentId);\n            }).then(() => {\n                this.categoryRepository.get(parentId, Shopware.Context.api, this.criteria).then((parent) => {\n                    this.addCategory(parent);\n                });\n            });\n        },\n\n        addCategory(category) {\n            if (!category) {\n                return;\n            }\n\n            this.$set(this.loadedCategories, category.id, category);\n        },\n\n        addCategories(categories) {\n            categories.forEach((category) => {\n                this.$set(this.loadedCategories, category.id, category);\n            });\n        },\n\n        removeFromStore(id) {\n            const deletedIds = this.getDeletedIds(id);\n            this.loadedParentIds = this.loadedParentIds.filter((loadedId) => {\n                return !deletedIds.includes(loadedId);\n            });\n\n            deletedIds.forEach((deleted) => {\n                this.$delete(this.loadedCategories, deleted);\n            });\n        },\n\n        getDeletedIds(idToDelete) {\n            const idsToDelete = [idToDelete];\n            Object.keys(this.loadedCategories).forEach((id) => {\n                const currentCategory = this.loadedCategories[id];\n                if (currentCategory.parentId === idToDelete) {\n                    idsToDelete.push(...this.getDeletedIds(id));\n                }\n            });\n            return idsToDelete;\n        },\n\n        getCategoryUrl(category) {\n            return this.$router.resolve({\n                name: this.linkContext,\n                params: { id: category.id },\n            }).href;\n        },\n\n        isHighlighted({ data: category }) {\n            return (category.navigationSalesChannels !== null && category.navigationSalesChannels.length > 0)\n                || (category.serviceSalesChannels !== null && category.serviceSalesChannels.length > 0)\n                || (category.footerSalesChannels !== null && category.footerSalesChannels.length > 0);\n        },\n\n        isErrorNavigationEntryPoint(category) {\n            const { navigationSalesChannels, serviceSalesChannels, footerSalesChannels } = category;\n\n            return [\n                navigationSalesChannels,\n                serviceSalesChannels,\n                footerSalesChannels,\n            ].some(navigation => navigation !== null && navigation?.length > 0);\n        },\n\n        entryPointWarningMessage(category) {\n            const { serviceSalesChannels, footerSalesChannels } = category;\n\n            if (serviceSalesChannels !== null && serviceSalesChannels?.length > 0) {\n                return this.$tc(\n                    'sw-category.general.errorNavigationEntryPoint',\n                    0,\n                    { entryPointLabel: this.$tc('sw-category.base.entry-point-card.types.labelServiceNavigation') },\n                );\n            }\n\n            if (footerSalesChannels !== null && footerSalesChannels?.length > 0) {\n                return this.$tc(\n                    'sw-category.general.errorNavigationEntryPoint',\n                    0,\n                    { entryPointLabel: this.$tc('sw-category.base.entry-point-card.types.labelFooterNavigation') },\n                );\n            }\n\n            return this.$tc(\n                'sw-category.general.errorNavigationEntryPoint',\n                0,\n                { entryPointLabel: this.$tc('sw-category.base.entry-point-card.types.labelMainNavigation') },\n            );\n        },\n    },\n};\n","export default \"\\n{% block sw_category_tree %}\\n<div class=\\\"sw-category-tree\\\">\\n    <sw-tree\\n        v-if=\\\"!isLoadingInitialData\\\"\\n        ref=\\\"categoryTree\\\"\\n        class=\\\"sw-category-tree__inner\\\"\\n        after-id-property=\\\"afterCategoryId\\\"\\n        :items=\\\"categories\\\"\\n        :sortable=\\\"sortable\\\"\\n        :searchable=\\\"false\\\"\\n        :active-tree-item-id=\\\"categoryId\\\"\\n        :translation-context=\\\"translationContext\\\"\\n        :on-change-route=\\\"changeCategory\\\"\\n        :disable-context-menu=\\\"disableContextMenu\\\"\\n        :allow-delete-categories=\\\"allowDelete\\\"\\n        initially-expanded-root\\n        @batch-delete=\\\"deleteCheckedItems\\\"\\n        @delete-element=\\\"onDeleteCategory\\\"\\n        @drag-end=\\\"onUpdatePositions\\\"\\n        @get-tree-items=\\\"onGetTreeItems\\\"\\n        @editing-end=\\\"syncSiblings\\\"\\n        @checked-elements-count=\\\"checkedElementsCount\\\"\\n    >\\n\\n        <template #headline>\\n            <span></span>\\n        </template>\\n\\n        \\n        {% block sw_category_tree_items %}\\n        <template\\n            #items=\\\"{\\n                treeItems,\\n                sortable,\\n                draggedItem,\\n                newElementId,\\n                checkItem,\\n                translationContext,\\n                onChangeRoute,\\n                disableContextMenu,\\n                selectedItemsPathIds,\\n                checkedItemIds,\\n            }\\\"\\n        >\\n            <sw-tree-item\\n                v-for=\\\"item in treeItems\\\"\\n                :key=\\\"item.id\\\"\\n                :item=\\\"item\\\"\\n                :should-show-active-state=\\\"true\\\"\\n                :allow-duplicate=\\\"false\\\"\\n                :allow-new-categories=\\\"allowCreate\\\"\\n                :allow-delete-categories=\\\"allowDelete\\\"\\n                :active=\\\"item.active\\\"\\n                :translation-context=\\\"translationContext\\\"\\n                :on-change-route=\\\"onChangeRoute\\\"\\n                :sortable=\\\"sortable\\\"\\n                :dragged-item=\\\"draggedItem\\\"\\n                :disable-context-menu=\\\"disableContextMenu\\\"\\n                :display-checkbox=\\\"allowEdit\\\"\\n                :context-menu-tooltip-text=\\\"contextMenuTooltipText\\\"\\n                :new-element-id=\\\"newElementId\\\"\\n                :get-item-url=\\\"getCategoryUrl\\\"\\n                :get-is-highlighted=\\\"isHighlighted\\\"\\n                :active-parent-ids=\\\"selectedItemsPathIds\\\"\\n                :active-item-ids=\\\"checkedItemIds\\\"\\n                @check-item=\\\"checkItem\\\"\\n            />\\n        </template>\\n        {% endblock %}\\n    </sw-tree>\\n\\n    <div v-else>\\n        <sw-skeleton variant=\\\"tree-item\\\" />\\n        <sw-skeleton variant=\\\"tree-item-nested\\\" />\\n        <sw-skeleton variant=\\\"tree-item-nested\\\" />\\n        <sw-skeleton variant=\\\"tree-item-nested\\\" />\\n        <sw-skeleton variant=\\\"tree-item\\\" />\\n        <sw-skeleton variant=\\\"tree-item-nested\\\" />\\n        <sw-skeleton variant=\\\"tree-item-nested\\\" />\\n    </div>\\n</div>\\n{% endblock %}\\n\";"],"sourceRoot":""}