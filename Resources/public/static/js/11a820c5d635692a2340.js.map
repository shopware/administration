{"version":3,"sources":["webpack:///./src/app/asyncComponent/media/sw-media-list-selection-v2/index.js","webpack:///./src/app/asyncComponent/media/sw-media-list-selection-v2/sw-media-list-selection-v2.html.twig","webpack:///./src/app/asyncComponent/media/sw-media-list-selection-v2/sw-media-list-selection-v2.scss"],"names":["_Shopware","Shopware","Mixin","Context","utils","Utils","template","inject","mixins","getByName","props","entity","type","Object","required","entityMediaItems","Array","uploadTag","String","default","defaultFolderName","data","columnCount","columnWidth","computed","mediaRepository","this","repositoryFactory","create","currentCount","length","mediaItems","items","_toConsumableArray","splice","apply","concat","createPlaceholders","forEach","item","index","position","gridAutoRows","uploadId","id","defaultFolder","getEntityName","mounted","mountedComponent","methods","$device","onResize","listener","updateColumnCount","component","_this","$nextTick","cssColumns","window","getComputedStyle","$refs","grid","getPropertyValue","split","count","fill","isPlaceholder","media","name","mediaId","onUploadsAdded","_ref","_this2","_asyncToGenerator","_regeneratorRuntime","mark","_callee","wrap","_context","prev","next","abrupt","isLoading","mediaService","runUploads","stop","onMediaUploadButtonOpenSidebar","$emit","successfulUpload","_ref2","_this3","_callee2","targetId","mediaItem","_context2","get","api","sent","$forceUpdate","onUploadFailed","uploadTask","toRemove","find","removeItem","onMediaItemDragSort","dragData","dropData","validDrop","onDeboundDragDrop","debounce","content","__esModule","module","i","locals","exports","add"],"mappings":"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","file":"static/js/11a820c5d635692a2340.js","sourcesContent":["import template from './sw-media-list-selection-v2.html.twig';\nimport './sw-media-list-selection-v2.scss';\n\nconst { Mixin, Context } = Shopware;\nconst utils = Shopware.Utils;\n\n/**\n * @package content\n */\n// eslint-disable-next-line sw-deprecation-rules/private-feature-declarations\nexport default {\n    template,\n\n    inject: ['repositoryFactory', 'mediaService'],\n\n    mixins: [\n        Mixin.getByName('notification'),\n    ],\n\n    props: {\n        entity: {\n            type: Object,\n            required: true,\n        },\n\n        entityMediaItems: {\n            type: Array,\n            required: true,\n        },\n\n        uploadTag: {\n            type: String,\n            required: false,\n            default: null,\n        },\n\n        defaultFolderName: {\n            type: String,\n            required: false,\n            default: null,\n        },\n    },\n\n    data() {\n        return {\n            columnCount: 8,\n            columnWidth: '90px',\n        };\n    },\n\n    computed: {\n        mediaRepository() {\n            return this.repositoryFactory.create('media');\n        },\n\n        currentCount() {\n            return this.entityMediaItems.length;\n        },\n\n        mediaItems() {\n            // two rows with columnCount columns\n            const columnCount = this.columnCount * 2;\n            if (this.currentCount >= columnCount) {\n                return this.entityMediaItems;\n            }\n\n            const items = [...this.entityMediaItems];\n            items.splice(this.currentCount, 0, ...this.createPlaceholders(columnCount - this.currentCount));\n            items.forEach((item, index) => {\n                item.position = index;\n            });\n            return items;\n        },\n\n        gridAutoRows() {\n            return `grid-auto-rows: ${this.columnWidth}`;\n        },\n\n        uploadId() {\n            return this.uploadTag || this.entity.id;\n        },\n\n        defaultFolder() {\n            return this.defaultFolderName || this.entity.getEntityName();\n        },\n    },\n\n    mounted() {\n        this.mountedComponent();\n    },\n\n    methods: {\n        mountedComponent() {\n            this.$device.onResize({\n                listener: this.updateColumnCount,\n                component: this,\n            });\n            this.updateColumnCount();\n        },\n\n        updateColumnCount() {\n            this.$nextTick(() => {\n                const cssColumns = window.getComputedStyle(this.$refs.grid, null)\n                    .getPropertyValue('grid-template-columns')\n                    .split(' ');\n                this.columnCount = cssColumns.length;\n                this.columnWidth = cssColumns[0];\n            });\n        },\n\n        createPlaceholders(count) {\n            return (new Array(count)).fill({\n                isPlaceholder: true,\n                media: {\n                    isPlaceholder: true,\n                    name: '',\n                },\n                mediaId: this.currentCount,\n            });\n        },\n\n        async onUploadsAdded({ data }) {\n            if (data.length === 0) {\n                return;\n            }\n\n            this.entity.isLoading = true;\n\n            await this.mediaService.runUploads(this.uploadId);\n            this.entity.isLoading = false;\n        },\n\n        onMediaUploadButtonOpenSidebar() {\n            this.$emit('open-sidebar');\n        },\n\n        async successfulUpload({ targetId }) {\n            const mediaItem = await this.mediaRepository.get(targetId, Context.api);\n            this.$forceUpdate();\n            this.$emit('upload-finish', mediaItem);\n        },\n\n        onUploadFailed(uploadTask) {\n            const toRemove = this.mediaItems.find((media) => {\n                return media.mediaId === uploadTask.targetId;\n            });\n\n            if (toRemove) {\n                this.removeItem(toRemove);\n            }\n\n            this.entity.isLoading = false;\n        },\n\n        onMediaItemDragSort(dragData, dropData, validDrop) {\n            if (validDrop !== true || (dropData.position > this.currentCount) || (dragData.position > this.currentCount)) {\n                return;\n            }\n            this.$emit('item-sort', dragData, dropData);\n        },\n\n        onDeboundDragDrop: utils.debounce(function debouncedDragDrop(dragData, dropData, validDrop) {\n            this.onMediaItemDragSort(dragData, dropData, validDrop);\n        }, 500),\n\n        removeItem(mediaItem, index) {\n            this.$emit('item-remove', mediaItem, index);\n        },\n    },\n};\n","export default \"\\n{% block sw_media_list_selection_v2 %}\\n<div class=\\\"sw-media-list-selection-v2\\\">\\n\\n    \\n    {% block sw_media_list_selection_v2_upload %}\\n    <sw-upload-listener\\n        :upload-tag=\\\"uploadId\\\"\\n        @media-upload-add=\\\"onUploadsAdded\\\"\\n        @media-upload-finish=\\\"successfulUpload\\\"\\n        @media-upload-fail=\\\"onUploadFailed\\\"\\n    />\\n\\n    <sw-media-upload-v2\\n        :upload-tag=\\\"uploadId\\\"\\n        variant=\\\"regular\\\"\\n        :default-folder=\\\"defaultFolderName\\\"\\n        @media-upload-sidebar-open=\\\"onMediaUploadButtonOpenSidebar\\\"\\n    />\\n    {% endblock %}\\n\\n    \\n    {% block sw_media_list_selection_v2_grid %}\\n    <div\\n        ref=\\\"grid\\\"\\n        class=\\\"sw-media-list-selection-v2__grid\\\"\\n        :style=\\\"gridAutoRows\\\"\\n    >\\n        <sw-loader v-if=\\\"entity.isLoading\\\" />\\n        {%  block sw_media_list_selection_v2_grid_items %}\\n        <sw-media-list-selection-item-v2\\n            v-for=\\\"(mediaItem, i) in mediaItems\\\"\\n            :key=\\\"i\\\"\\n            v-draggable=\\\"{ dragGroup: 'media-items', data: mediaItem, onDragEnter: onDeboundDragDrop }\\\"\\n            v-droppable=\\\"{ dragGroup: 'media-items', data: mediaItem }\\\"\\n            :item=\\\"mediaItem\\\"\\n            @item-remove=\\\"removeItem(mediaItem, i)\\\"\\n        />\\n        {% endblock %}\\n    </div>\\n    {% endblock %}\\n</div>\\n{% endblock %}\\n\";","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../../../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--15-1!../../../../../node_modules/css-loader/dist/cjs.js??ref--15-2!../../../../../node_modules/sass-loader/dist/cjs.js??ref--15-3!./sw-media-list-selection-v2.scss\");\nif(content.__esModule) content = content.default;\nif(typeof content === 'string') content = [[module.id, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar add = require(\"!../../../../../node_modules/vue-style-loader/lib/addStylesClient.js\").default\nvar update = add(\"2287950a\", content, true, {});"],"sourceRoot":""}