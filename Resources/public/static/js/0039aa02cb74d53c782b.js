(window.webpackJsonpAdministration=window.webpackJsonpAdministration||[]).push([[94770],{731840:function(){},294770:function(t,e,n){"use strict";n.r(e),n.d(e,{default:function(){return r}}),n(152559);let{Component:s,Mixin:i}=Shopware,{mapPropertyErrors:o}=s.getComponentHelper(),{Criteria:a}=Shopware.Data;var r={template:'\n{% block sw_settings_country_detail %}\n<sw-page class="sw-settings-country-detail">\n\n    \n    {% block sw_settings_country_detail_header %}\n    <template #smart-bar-header>\n        <h2>{{ placeholder(country, \'name\', $tc(\'sw-settings-country.detail.textHeadline\')) }}</h2>\n    </template>\n    {% endblock %}\n\n    \n    {% block sw_settings_country_detail_actions %}\n    <template #smart-bar-actions>\n        \n        {% block sw_settings_country_detail_actions_abort %}\n        <sw-button\n            v-tooltip.bottom="{\n                message: \'ESC\',\n                appearance: \'light\'\n            }"\n            :disabled="isLoading"\n            @click="onCancel"\n        >\n            {{ $tc(\'sw-settings-country.detail.buttonCancel\') }}\n        </sw-button>\n        {% endblock %}\n\n        \n        {% block sw_settings_country_detail_actions_save %}\n        <sw-button-process\n            v-tooltip.bottom="tooltipSave"\n            class="sw-settings-country-detail__save-action"\n            :is-loading="isLoading"\n            :process-success="isSaveSuccessful"\n            :disabled="!country || !allowSave || undefined"\n            variant="primary"\n            @update:process-success="saveFinish"\n            @click.prevent="onSave"\n        >\n            {{ $tc(\'sw-settings-country.detail.buttonSave\') }}\n        </sw-button-process>\n        {% endblock %}\n    </template>\n    {% endblock %}\n\n    \n    {% block sw_settings_country_detail_language_switch %}\n    <template #language-switch>\n        <sw-language-switch\n            :save-changes-function="saveOnLanguageChange"\n            :abort-change-function="abortOnLanguageChange"\n            @on-change="onChangeLanguage"\n        />\n    </template>\n    {% endblock %}\n\n    \n    {% block sw_settings_country_detail_content %}\n    <template #content>\n        <sw-card-view>\n            \n            {% block sw_settings_country_detail_content_language_info %}\n            <sw-language-info\n                :entity-description="placeholder(country, \'name\', $tc(\'sw-settings-country.detail.textHeadline\'))"\n            />\n            {% endblock %}\n\n            \n            {% block sw_settings_country_tabs_header %}\n            <sw-tabs position-identifier="sw-settings-country-detail-header">\n                \n                {% block sw_setting_country_tabs_setting %}\n                <sw-tabs-item\n                    v-bind="$props"\n                    class="sw-settings-country__setting-tab"\n                    :route="{ name: isNewCountry ? \'sw.settings.country.create.general\' : \'sw.settings.country.detail.general\' }"\n                >\n                    {{ $tc(\'sw-settings-country.page.generalTab\') }}\n                </sw-tabs-item>\n                {% endblock %}\n\n                \n                {% block sw_setting_country_tabs_state %}\n                <sw-tabs-item\n                    v-bind="$props"\n                    class="sw-settings-country__state-tab"\n                    :route="{ name: isNewCountry ? \'sw.settings.country.create.state\' : \'sw.settings.country.detail.state\' }"\n                >\n                    {{ $tc(\'sw-settings-country.page.stateTab\') }}\n                </sw-tabs-item>\n                {% endblock %}\n\n                \n                {% block sw_setting_country_tabs_address_handling %}\n                <sw-tabs-item\n                    v-bind="$props"\n                    class="sw-settings-country__address-handling-tab"\n                    :route="{ name: isNewCountry ? \'sw.settings.country.create.address-handling\' : \'sw.settings.country.detail.address-handling\' }"\n                >\n                    {{ $tc(\'sw-settings-country.page.addressHandlingTab\') }}\n                </sw-tabs-item>\n                {% endblock %}\n\n                \n                {% block sw_setting_country_tabs_extension %}{% endblock %}\n            </sw-tabs>\n            {% endblock %}\n\n            <template v-if="isLoading">\n                <sw-skeleton />\n                <sw-skeleton />\n            </template>\n\n            <template v-else>\n                \n                {% block sw_settings_country_tabs_content %}\n                <router-view\n                    v-slot="{ Component }"\n                >\n                    <component\n                        :is="Component"\n                        :country="country"\n                        :country-state-repository="countryStateRepository"\n                        :is-loading="isLoading"\n                        :user-config="userConfig"\n                        :user-config-values="userConfigValues"\n                        @modal-save="onSaveModal"\n                        @update:country="onUpdateCountry"\n                    />\n                </router-view>\n                {% endblock %}\n\n                \n                {% block sw_settings_country_detail_custom_field_sets %}\n                <sw-card\n                    v-if="showCustomFields"\n                    position-identifier="sw-settings-country-detail-custom-field-sets"\n                    :title="$tc(\'sw-settings-custom-field.general.mainMenuItemGeneral\')"\n                    :is-loading="isLoading"\n                >\n                    <sw-custom-field-set-renderer\n                        :entity="country"\n                        :disabled="!acl.can(\'country.editor\')"\n                        :sets="customFieldSets"\n                    />\n                </sw-card>\n                {% endblock %}\n            </template>\n        </sw-card-view>\n    </template>\n    {% endblock %}\n</sw-page>\n{% endblock %}\n',compatConfig:Shopware.compatConfig,inject:["repositoryFactory","acl","customFieldDataProviderService"],mixins:[i.getByName("notification"),i.getByName("placeholder"),i.getByName("discard-detail-page-changes")("country")],shortcuts:{"SYSTEMKEY+S":{active(){return this.allowSave},method:"onSave"},ESCAPE:"onCancel"},data(){return{country:{customerTax:{enabled:!1},companyTax:{enabled:!1}},countryId:null,isLoading:!1,countryStateRepository:null,isSaveSuccessful:!1,customFieldSets:null,userConfig:{value:{}},userConfigValues:{},showPreviewModal:!1,previewData:null}},metaInfo(){return{title:this.$createTitle(this.identifier)}},computed:{currentUserId(){return Shopware.State.get("session").currentUser.id},countryRepository(){return this.repositoryFactory.create("country")},userConfigRepository(){return this.repositoryFactory.create("user_config")},identifier(){return this.placeholder(this.country,"name")},stateColumns(){return this.getStateColumns()},isNewCountry(){return"function"==typeof this.country.isNew&&this.country.isNew()},allowSave(){return this.isNewCountry?this.acl.can("country.creator"):this.acl.can("country.editor")},tooltipSave(){if(!this.allowSave)return{message:this.$tc("sw-privileges.tooltip.warning"),disabled:this.allowSave,showOnDisabledElements:!0};let t=this.$device.getSystemKey();return{message:`${t} + S`,appearance:"light"}},userConfigCriteria(){return new a(1,25).addFilter(a.multi("AND",[a.equals("userId",this.currentUserId),a.equals("key","setting-country")]))},...o("country",["name"]),showCustomFields(){return this.customFieldSets&&this.customFieldSets.length>0}},created(){this.createdComponent()},methods:{createdComponent(){this.$route.params.id&&(this.countryId=this.$route.params.id,Promise.all([this.loadEntityData(),this.loadCustomFieldSets(),this.loadUserConfig()]))},loadEntityData(){return!("function"==typeof this.country.isNew&&this.country.isNew())&&(this.isLoading=!0,this.countryRepository.get(this.countryId).then(t=>{this.country=t,this.isLoading=!1,this.countryStateRepository=this.repositoryFactory.create(this.country.states.entity,this.country.states.source)}).catch(()=>{this.isLoading=!1}))},loadCustomFieldSets(){this.customFieldDataProviderService.getCustomFieldSets("country").then(t=>{this.customFieldSets=t})},loadUserConfig(){return this.userConfigRepository.search(this.userConfigCriteria,Shopware.Context.api).then(t=>{if(0===t.length){this.userConfig=this.userConfigRepository.create(Shopware.Context.api),this.userConfig.userId=this.currentUserId,this.userConfig.key="setting-country",this.userConfig.value=[];return}this.userConfig=t.first(),this.userConfigValues=this.userConfig.value[this.countryId],this.userConfigValues||(this.userConfig.value[this.countryId]={},this.userConfigValues=this.userConfig.value[this.countryId])})},saveFinish(){this.isSaveSuccessful=!1},onSave(){this.isSaveSuccessful=!1,this.isLoading=!0;let t=this.userConfig.value[this.countryId];return this.countryRepository.save(this.country,Shopware.Context.api).then(()=>{t&&Object.keys(t).length>0&&this.userConfigRepository.save(this.userConfig,Shopware.Context.api).then(()=>{this.loadUserConfig()}),this.loadEntityData(),this.isLoading=!1,this.isSaveSuccessful=!0}).catch(()=>{this.isLoading=!1})},onCancel(){this.$router.push({name:"sw.settings.country.index"})},abortOnLanguageChange(){return this.countryRepository.hasChanges(this.country)},saveOnLanguageChange(){return this.onSave()},onChangeLanguage(){this.loadEntityData()},getStateColumns(){return[{property:"name",label:this.$tc("sw-settings-country.detail.columnStateNameLabel"),inlineEdit:"string",primary:!0},{property:"shortCode",label:this.$tc("sw-settings-country.detail.columnStateShortCodeLabel"),inlineEdit:"string"}]},onSaveModal(){return this.onSave()},onUpdateCountry(t,e){Shopware.Utils.object.set(this.country,t,e)}}}},152559:function(t,e,n){var s=n(731840);s.__esModule&&(s=s.default),"string"==typeof s&&(s=[[t.id,s,""]]),s.locals&&(t.exports=s.locals),n(745346).Z("0b8f112c",s,!0,{})}}]);