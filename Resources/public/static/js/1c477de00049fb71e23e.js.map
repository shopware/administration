{"version":3,"sources":["webpack:///./src/module/sw-dashboard/component/sw-dashboard-statistics/sw-dashboard-statistics.scss","webpack:///./src/module/sw-dashboard/component/sw-dashboard-statistics/index.ts","webpack:///./src/module/sw-dashboard/component/sw-dashboard-statistics/sw-dashboard-statistics.html.twig"],"names":["content","__esModule","default","module","i","locals","exports","add","Criteria","Shopware","Data","Component","wrapComponentConfig","template","inject","data","historyOrderDataCount","historyOrderDataSum","todayOrderData","todayOrderDataLoaded","todayOrderDataSortBy","todayOrderDataSortDirection","ordersDateRange","label","range","interval","aggregate","turnoverDateRange","isLoading","computed","rangesValueMap","availableRanges","this","map","chartOptionsOrderCount","xaxis","type","min","getDateAgo","getTime","labels","datetimeUTC","yaxis","tickAmount","formatter","value","parseInt","chartOptionsOrderSum","Utils","format","currency","Number","parseFloat","Context","app","systemCurrencyISOCode","orderRepository","repositoryFactory","create","orderCountSeries","_this","seriesData","buckets","x","parseDate","key","y","count","todayBucketCount","push","today","name","$tc","orderCountToday","orderSumMonthSeries","orderSumSeries","_this2","totalAmount","sum","todayBucketSum","orderSumToday","hasOrderToday","length","hasOrderInMonth","dateWithUserTimezone","setHours","calculateTodayBucket","isSessionLoaded","_Shopware$State$get","State","get","userPending","currencyFilter","Filter","getByName","dateFilter","watch","immediate","handler","_this3","_asyncToGenerator","_regeneratorRuntime","mark","_callee","wrap","_context","prev","next","initializeOrderData","stop","methods","aggregation","findDateStats","find","dateCount","Date","_this4","_callee2","_context2","acl","can","abrupt","getHistoryOrderData","fetchTodayData","sent","_this5","Promise","all","fetchHistoryOrderDataCount","then","response","fetchHistoryOrderDataSum","fetchHistory","formatDateToISO","paid","since","_Shopware$State$get$c","_Shopware$State$get$c2","headers","buildHeaders","httpClient","Application","getContainer","timezone","currentUser","timeZone","concat","toString","statistic","bucket","date","apiAlias","amount","criteria","addAssociation","addFilter","equals","addSorting","sort","search","toISODate","formatChartHeadlineDate","lastKnownLang","locale","getLastKnownLocale","toLocaleDateString","day","month","orderGridColumns","property","routerLink","allowResize","primary","dataIndex","align","getVariantFromOrderState","order","_order$stateMachineSt","state","stateMachineState","technicalName","stateStyleDataProviderService","getStyle","variant","replace","valueOf","onOrdersRangeUpdate","_this6","_callee3","_context3","item","Error","onTurnoverRangeUpdate","_this7","_callee4","_context4","getCardSubtitle","getHours","setDate","getDate"],"mappings":"iIAGA,IAAIA,EAAU,EAAQ,QACnBA,EAAQC,aAAYD,EAAUA,EAAQE,SACnB,iBAAZF,IAAsBA,EAAU,CAAC,CAACG,EAAOC,EAAIJ,EAAS,MAC7DA,EAAQK,SAAQF,EAAOG,QAAUN,EAAQK,SAG/BE,EADH,EAAQ,QAAwEL,SACzE,WAAYF,GAAS,EAAM,K,uFCLpCQ,G,UAAaC,SAASC,KAAtBF,UAkDOC,mBAASE,UAAUC,oBAAoB,CAClDC,SCvDW,6vTDyDXC,OAAQ,CACJ,oBACA,gCACA,OAGJC,KAAI,WACA,MAAO,CACHC,sBAAuB,KACvBC,oBAAqB,KACrBC,eAAgB,KAChBC,sBAAsB,EACtBC,qBAAsB,gBACtBC,4BAA6B,OAC7BC,gBAAiB,CACbC,MAAO,SACPC,MAAO,GACPC,SAAU,MACVC,UAAW,OAEfC,kBAAmB,CACfJ,MAAO,SACPC,MAAO,GACPC,SAAU,MACVC,UAAW,OAEfE,WAAW,IAInBC,SAAU,CACNC,eAAc,WACV,MAAO,CAAC,CACJP,MAAO,SACPC,MAAO,GACPC,SAAU,MACVC,UAAW,OACZ,CACCH,MAAO,SACPC,MAAO,GACPC,SAAU,MACVC,UAAW,OACZ,CACCH,MAAO,QACPC,MAAO,EACPC,SAAU,MACVC,UAAW,OACZ,CACCH,MAAO,UACPC,MAAO,GACPC,SAAU,OACVC,UAAW,QACZ,CACCH,MAAO,YACPC,MAAO,EACPC,SAAU,MACVC,UAAW,UAInBK,gBAAe,WACX,OAAOC,KAAKF,eAAeG,KAAI,SAACT,GAAK,OAAKA,EAAMD,UAGpDW,uBAAsB,WAClB,MAAO,CACHC,MAAO,CACHC,KAAM,WAENC,IAAKL,KAAKM,WAAWN,KAAKV,iBAAiBiB,UAC3CC,OAAQ,CACJC,aAAa,IAGrBC,MAAO,CACHL,IAAK,EACLM,WAAY,EACZH,OAAQ,CACJI,UAAW,SAACC,GAAoB,OAAOC,SAASD,EAAO,SAMvEE,qBAAoB,WAChB,MAAO,CACHZ,MAAO,CACHC,KAAM,WAENC,IAAKL,KAAKM,WAAWN,KAAKL,mBAAmBY,UAC7CC,OAAQ,CACJC,aAAa,IAGrBC,MAAO,CACHL,IAAK,EACLM,WAAY,EACZH,OAAQ,CAEJI,UAAW,SAACC,GAAa,OAAKpC,SAASuC,MAAMC,OAAOC,SAChDC,OAAOC,WAAWP,GAClBpC,SAAS4C,QAAQC,IAAIC,sBACrB,QAOpBC,gBAAe,WACX,OAAOxB,KAAKyB,kBAAkBC,OAAO,UAGzCC,iBAAgB,WAAI,IAADC,EAAA,KACf,IAAK5B,KAAKhB,sBACN,MAAO,GAIX,IAAM6C,EAAa7B,KAAKhB,sBAAsB8C,QAAQ7B,KAAI,SAAClB,GACvD,MAAO,CAAEgD,EAAGH,EAAKI,UAAUjD,EAAKkD,KAAMC,EAAGnD,EAAKoD,UAQlD,OAJKnC,KAAKoC,kBACNP,EAAWQ,KAAK,CAAEN,EAAG/B,KAAKsC,MAAM/B,UAAW2B,EAAG,IAG3C,CAAC,CAAEK,KAAMvC,KAAKwC,IAAI,0CAA2CzD,KAAM8C,KAG9EY,gBAAe,WACX,OAAIzC,KAAKoC,iBACEpC,KAAKoC,iBAAiBD,MAE1B,GAGXO,oBAAmB,WACf,OAAO1C,KAAK2C,gBAGhBA,eAAc,WAAI,IAADC,EAAA,KACb,IAAK5C,KAAKf,oBACN,MAAO,GAIX,IAAM4C,EAAa7B,KAAKf,oBAAoB6C,QAAQ7B,KAAI,SAAClB,GACrD,MAAO,CAAEgD,EAAGa,EAAKZ,UAAUjD,EAAKkD,KAAMC,EAAGnD,EAAK8D,YAAYC,QAQ9D,OAJK9C,KAAK+C,gBACNlB,EAAWQ,KAAK,CAAEN,EAAG/B,KAAKsC,MAAM/B,UAAW2B,EAAG,IAG3C,CAAC,CAAEK,KAAMvC,KAAKwC,IAAI,yCAA0CzD,KAAM8C,KAG7EmB,cAAa,WACT,OAAIhD,KAAKoC,iBACEpC,KAAKoC,iBAAiBS,YAAYC,IAEtC,GAGXG,cAAa,WACT,OAAOjD,KAAKd,gBAAkBc,KAAKd,eAAegE,OAAS,GAG/DC,gBAAe,WACX,QAASnD,KAAKhB,yBAA2BgB,KAAKf,qBAGlDqD,MAAK,WACD,IAAMA,EAAQ7D,SAASuC,MAAMC,OAAOmC,uBAEpC,OADAd,EAAMe,SAAS,EAAG,EAAG,EAAG,GACjBf,GAGXF,iBAAgB,WACZ,OAAOpC,KAAKsD,qBAAqBtD,KAAKhB,wBAG1C+D,eAAc,WACV,OAAO/C,KAAKsD,qBAAqBtD,KAAKf,sBAG1CsC,sBAAqB,WACjB,OAAO9C,SAAS4C,QAAQC,IAAIC,uBAGhCgC,gBAAe,WAAI,IAADC,EACd,QAAqC,QAA9BA,EAAC/E,SAASgF,MAAMC,IAAI,kBAAU,IAAAF,GAA7BA,EAA+BG,cAG3CC,eAAc,WACV,OAAOnF,SAASoF,OAAOC,UAAU,aAGrCC,WAAU,WACN,OAAOtF,SAASoF,OAAOC,UAAU,UAIzCE,MAAO,CACHT,gBAAiB,CACbU,WAAW,EACLC,QAAO,WAAI,IAADC,EAAA,YAAAC,IAAAC,IAAAC,MAAA,SAAAC,IAAA,OAAAF,IAAAG,MAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,WACRR,EAAKZ,gBAAgB,CAADkB,EAAAE,KAAA,eAAAF,EAAAE,KAAA,EACdR,EAAKS,sBAAsB,KAAD,mBAAAH,EAAAI,UAAAN,MAFxBH,MAQxBU,QAAS,CACLxB,qBAAoB,SAACyB,GACjB,IAAMjD,EAAUiD,aAAW,EAAXA,EAAajD,QAE7B,IAAKA,EACD,OAAO,KAGX,IAAMQ,EAAQtC,KAAKsC,MAEb0C,EAAgBlD,EAAQmD,MAAK,SAACC,GAEhC,QAAIA,EAAUjD,KAEG,IAAIkD,KAAKD,EAAUjD,KAEpBoB,SAAS,EAAG,EAAG,EAAG,KAAOf,EAAMe,SAAS,EAAG,EAAG,EAAG,MAMrE,OAAI2B,GAGG,MAGLJ,oBAAmB,WAAI,IAADQ,EAAA,YAAAhB,IAAAC,IAAAC,MAAA,SAAAe,IAAA,OAAAhB,IAAAG,MAAA,SAAAc,GAAA,cAAAA,EAAAZ,KAAAY,EAAAX,MAAA,UACnBS,EAAKG,IAAIC,IAAI,gBAAgB,CAADF,EAAAX,KAAA,QACN,OAAvBS,EAAKxF,WAAY,EAAM0F,EAAAG,OAAA,iBAKO,OAAlCL,EAAKjG,sBAAuB,EAAMmG,EAAAX,KAAA,EAE5BS,EAAKM,sBAAsB,KAAD,SAAAJ,EAAAX,KAAA,EACJS,EAAKO,iBAAiB,KAAD,EAAjDP,EAAKlG,eAAcoG,EAAAM,KACnBR,EAAKjG,sBAAuB,EAC5BiG,EAAKxF,WAAY,EAAM,yBAAA0F,EAAAT,UAAAQ,MAZCjB,IAe5BsB,oBAAmB,WAAI,IAADG,EAAA,KAClB,OAAOC,QAAQC,IAAI,CACf/F,KAAKgG,6BAA6BC,MAAK,SAACC,GACpCL,EAAK7G,sBAAwBkH,KAEjClG,KAAKmG,2BAA2BF,MAAK,SAACC,GAClCL,EAAK5G,oBAAsBiH,QAKvCF,2BAA0B,WACtB,OAAOhG,KAAKoG,cAAa,EAAOpG,KAAKqG,gBAAgBrG,KAAKM,WAAWN,KAAKV,oBAG9E6G,yBAAwB,WACpB,OAAOnG,KAAKoG,cAAa,EAAMpG,KAAKqG,gBAAgBrG,KAAKM,WAAWN,KAAKL,sBAG7EyG,aAAY,SAACE,EAAeC,GAAgB,IAADC,EAAAC,EACjCC,EAAU1G,KAAKwB,gBAAgBmF,eAG/BC,EADgBnI,SAASoI,YAAYC,aAAa,QACvBF,WAC3BG,EAA8D,QAAtDP,EAA4C,QAA5CC,EAAGhI,SAASgF,MAAMC,IAAI,WAAWsD,mBAAW,IAAAP,OAAA,EAAzCA,EAA2CQ,gBAAQ,IAAAT,IAAI,MAExE,OAAOI,EACFlD,IAAG,kCAAAwD,OAQiCX,EAAK,cAAAW,OAAaH,EAAQ,UAAAG,OAASZ,EAAKa,YAAc,CAAET,YAC5FT,MAAK,SAACC,GAaH,MAAO,CACH3D,KAAM,mBACNT,QAdYoE,EAASnH,KAAKqI,UAAUnH,KAAI,SAACoH,GACzC,MAAO,CACHpF,IAAKoF,EAAOC,KACZnF,MAAOkF,EAAOlF,MACdoF,SAAU,qBACV1E,YAAa,CACTC,IAAKuE,EAAOG,OACZjF,KAAM,mBAQdgF,SAAU,oCAK1B5B,eAAc,WACV,IAAM8B,EAAW,IAAIjJ,EAAS,EAAG,IAOjC,OALAiJ,EAASC,eAAe,YAExBD,EAASE,UAAUnJ,EAASoJ,OAAO,YAAa5H,KAAKqG,gBAAgB,IAAIlB,QACzEsC,EAASI,WAAWrJ,EAASsJ,KAAK9H,KAAKZ,qBAAsBY,KAAKX,8BAE3DW,KAAKwB,gBAAgBuG,OAAON,IAGvCpB,gBAAe,SAACiB,GACZ,OAAO7I,SAASuC,MAAMC,OAAO+G,UAAUV,GAAM,IAGjDW,wBAAuB,SAACX,GACpB,IAAMY,EAAgBzJ,SAASoI,YAAYC,aAAa,WAAWqB,OAAOC,qBAE1E,OAAOd,EAAKe,mBAAmBH,EAAe,CAC1CI,IAAK,UACLC,MAAO,WAIfC,iBAAgB,WACZ,MAAO,CAAC,CACJC,SAAU,cACVlJ,MAAO,kCACPmJ,WAAY,kBACZC,aAAa,EACbC,SAAS,GACV,CACCH,SAAU,gBACVI,UAAW,gBACXtJ,MAAO,oCACPoJ,aAAa,EACbC,SAAS,GACV,CACCH,SAAU,0BACVI,UAAW,iDACXtJ,MAAO,mCACPoJ,aAAa,GACd,CACCF,SAAU,yBACVlJ,MAAO,4BACPoJ,aAAa,GACd,CACCF,SAAU,cACVlJ,MAAO,6BACPuJ,MAAO,QACPH,aAAa,KAIrBI,yBAAwB,SAACC,GAA6B,IAADC,EAC3CC,EAA+B,QAA1BD,EAAGD,EAAMG,yBAAiB,IAAAF,OAAA,EAAvBA,EAAyBG,cACvC,OAAKF,EAIElJ,KAAKqJ,8BAA8BC,SACtC,cACAJ,GACFK,QANS,IASfvH,UAAS,SAACsF,GAEN,OADmB,IAAInC,KAAKmC,EAAKkC,QAAQ,KAAM,KAAKA,QAAQ,IAAK,KAAKA,QAAQ,YAAa,KACzEC,WAGhBC,oBAAmB,SAAClK,GAA+B,IAADmK,EAAA,YAAAvF,IAAAC,IAAAC,MAAA,SAAAsF,IAAA,IAAAtK,EAAA,OAAA+E,IAAAG,MAAA,SAAAqF,GAAA,cAAAA,EAAAnF,KAAAmF,EAAAlF,MAAA,OAC+C,GAA7FrF,EAAkBqK,EAAK7J,eAAemF,MAAK,SAAC6E,GAAsB,OAAKA,EAAKvK,QAAUC,KAEvE,CAADqK,EAAAlF,KAAA,cACVoF,MAAM,mBAAmB,KAAD,EAGK,OAAvCJ,EAAKrK,gBAAkBA,EAAgBuK,EAAAlF,KAAA,EAEJgF,EAAK3D,6BAA6B,KAAD,EAApE2D,EAAK3K,sBAAqB6K,EAAAjE,KAAA,wBAAAiE,EAAAhF,UAAA+E,MAT0BxF,IAYlD4F,sBAAqB,SAACxK,GAA+B,IAADyK,EAAA,YAAA7F,IAAAC,IAAAC,MAAA,SAAA4F,IAAA,IAAAvK,EAAA,OAAA0E,IAAAG,MAAA,SAAA2F,GAAA,cAAAA,EAAAzF,KAAAyF,EAAAxF,MAAA,OAC+C,GAA/FhF,EAAoBsK,EAAKnK,eAAemF,MAAK,SAAC6E,GAAsB,OAAKA,EAAKvK,QAAUC,KAEvE,CAAD2K,EAAAxF,KAAA,cACZoF,MAAM,mBAAmB,KAAD,EAGS,OAA3CE,EAAKtK,kBAAoBA,EAAkBwK,EAAAxF,KAAA,EACVsF,EAAK9D,2BAA2B,KAAD,EAAhE8D,EAAKhL,oBAAmBkL,EAAAvE,KAAA,wBAAAuE,EAAAtF,UAAAqF,MAR8B9F,IAW1DgG,gBAAe,SAAC5K,GACZ,MAAM,GAAN0H,OAAUlH,KAAKiI,wBAAwBjI,KAAKM,WAAWd,IAAO,OAAA0H,OAAMlH,KAAKiI,wBAAwBjI,KAAKsC,SAG1GhC,WAAU,SAACd,GACP,IAAM8H,EAAO7I,SAASuC,MAAMC,OAAOmC,uBAEnC,MAAuB,SAAnB5D,EAAMC,UACN6H,EAAKjE,SAASiE,EAAK+C,WAAa7K,EAAMA,OAE/B8H,IAGXA,EAAKgD,QAAQhD,EAAKiD,UAAY/K,EAAMA,OACpC8H,EAAKjE,SAAS,EAAG,EAAG,EAAG,GAEhBiE","file":"static/js/1c477de00049fb71e23e.js","sourcesContent":["// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../../../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--15-1!../../../../../node_modules/css-loader/dist/cjs.js??ref--15-2!../../../../../node_modules/sass-loader/dist/cjs.js??ref--15-3!./sw-dashboard-statistics.scss\");\nif(content.__esModule) content = content.default;\nif(typeof content === 'string') content = [[module.id, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar add = require(\"!../../../../../node_modules/vue-style-loader/lib/addStylesClient.js\").default\nvar update = add(\"6d701a54\", content, true, {});","import type EntityCollection from '@shopware-ag/admin-extension-sdk/es/data/_internals/EntityCollection';\nimport template from './sw-dashboard-statistics.html.twig';\nimport './sw-dashboard-statistics.scss';\n\nconst { Criteria } = Shopware.Data;\n\ntype OrderEntity = EntitySchema.order;\n\ntype HistoryDateRange = {\n    label: string,\n    range: number,\n    interval: 'hour' | 'day',\n    aggregate: 'hour' | 'day',\n}\n\ntype BucketData = {\n    key: string,\n    count: number,\n    totalAmount: {\n        sum: number,\n    },\n}\n\ntype HistoryOrderDataCount = {\n    apiAlias: 'order_sum_bucket_aggregation',\n    buckets: Array<BucketData>,\n    name: 'order_sum_bucket',\n}\n\ntype HistoryOrderDataSum = {\n    apiAlias: 'order_sum_bucket_aggregation',\n    buckets: Array<BucketData>,\n    name: 'order_sum_bucket',\n}\n\ntype HistoryOrderData = HistoryOrderDataCount | HistoryOrderDataSum | null;\n\ninterface ComponentData {\n    historyOrderDataCount: HistoryOrderDataCount | null,\n    historyOrderDataSum: HistoryOrderDataSum | null,\n    todayOrderData: EntityCollection<'order'> | null,\n    todayOrderDataLoaded: boolean\n    todayOrderDataSortBy: 'orderDateTime',\n    todayOrderDataSortDirection: 'DESC' | 'ASC',\n    ordersDateRange: HistoryDateRange,\n    turnoverDateRange: HistoryDateRange,\n    isLoading: boolean,\n}\n\n/**\n * @package services-settings\n *\n * @private\n */\nexport default Shopware.Component.wrapComponentConfig({\n    template,\n\n    inject: [\n        'repositoryFactory',\n        'stateStyleDataProviderService',\n        'acl',\n    ],\n\n    data(): ComponentData {\n        return {\n            historyOrderDataCount: null,\n            historyOrderDataSum: null,\n            todayOrderData: null,\n            todayOrderDataLoaded: false,\n            todayOrderDataSortBy: 'orderDateTime',\n            todayOrderDataSortDirection: 'DESC',\n            ordersDateRange: {\n                label: '30Days',\n                range: 30,\n                interval: 'day',\n                aggregate: 'day',\n            },\n            turnoverDateRange: {\n                label: '30Days',\n                range: 30,\n                interval: 'day',\n                aggregate: 'day',\n            },\n            isLoading: true,\n        };\n    },\n\n    computed: {\n        rangesValueMap(): Array<HistoryDateRange> {\n            return [{\n                label: '30Days',\n                range: 30,\n                interval: 'day',\n                aggregate: 'day',\n            }, {\n                label: '14Days',\n                range: 14,\n                interval: 'day',\n                aggregate: 'day',\n            }, {\n                label: '7Days',\n                range: 7,\n                interval: 'day',\n                aggregate: 'day',\n            }, {\n                label: '24Hours',\n                range: 24,\n                interval: 'hour',\n                aggregate: 'hour',\n            }, {\n                label: 'yesterday',\n                range: 1,\n                interval: 'day',\n                aggregate: 'hour',\n            }];\n        },\n\n        availableRanges(): string[] {\n            return this.rangesValueMap.map((range) => range.label);\n        },\n\n        chartOptionsOrderCount() {\n            return {\n                xaxis: {\n                    type: 'datetime',\n                    // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment,@typescript-eslint/no-unsafe-call\n                    min: this.getDateAgo(this.ordersDateRange).getTime(),\n                    labels: {\n                        datetimeUTC: false,\n                    },\n                },\n                yaxis: {\n                    min: 0,\n                    tickAmount: 3,\n                    labels: {\n                        formatter: (value: string) => { return parseInt(value, 10); },\n                    },\n                },\n            };\n        },\n\n        chartOptionsOrderSum() {\n            return {\n                xaxis: {\n                    type: 'datetime',\n                    // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment,@typescript-eslint/no-unsafe-call\n                    min: this.getDateAgo(this.turnoverDateRange).getTime(),\n                    labels: {\n                        datetimeUTC: false,\n                    },\n                },\n                yaxis: {\n                    min: 0,\n                    tickAmount: 5,\n                    labels: {\n                        // price aggregations do not support currencies yet, see NEXT-5069\n                        formatter: (value: string) => Shopware.Utils.format.currency(\n                            Number.parseFloat(value),\n                            Shopware.Context.app.systemCurrencyISOCode as string,\n                            2,\n                        ),\n                    },\n                },\n            };\n        },\n\n        orderRepository() {\n            return this.repositoryFactory.create('order');\n        },\n\n        orderCountSeries() {\n            if (!this.historyOrderDataCount) {\n                return [];\n            }\n\n            // format data for chart\n            const seriesData = this.historyOrderDataCount.buckets.map((data: BucketData) => {\n                return { x: this.parseDate(data.key), y: data.count };\n            });\n\n            // add empty value for today if there isn't any order, otherwise today would be missing\n            if (!this.todayBucketCount) {\n                seriesData.push({ x: this.today.getTime(), y: 0 });\n            }\n\n            return [{ name: this.$tc('sw-dashboard.monthStats.numberOfOrders'), data: seriesData }];\n        },\n\n        orderCountToday() {\n            if (this.todayBucketCount) {\n                return this.todayBucketCount.count;\n            }\n            return 0;\n        },\n\n        orderSumMonthSeries() {\n            return this.orderSumSeries;\n        },\n\n        orderSumSeries() {\n            if (!this.historyOrderDataSum) {\n                return [];\n            }\n\n            // format data for chart\n            const seriesData = this.historyOrderDataSum.buckets.map((data: BucketData) => {\n                return { x: this.parseDate(data.key), y: data.totalAmount.sum };\n            });\n\n            // add empty value for today if there isn't any order, otherwise today would be missing\n            if (!this.todayBucketSum) {\n                seriesData.push({ x: this.today.getTime(), y: 0 });\n            }\n\n            return [{ name: this.$tc('sw-dashboard.monthStats.totalTurnover'), data: seriesData }];\n        },\n\n        orderSumToday() {\n            if (this.todayBucketCount) {\n                return this.todayBucketCount.totalAmount.sum;\n            }\n            return 0;\n        },\n\n        hasOrderToday() {\n            return this.todayOrderData && this.todayOrderData.length > 0;\n        },\n\n        hasOrderInMonth() {\n            return !!this.historyOrderDataCount && !!this.historyOrderDataSum;\n        },\n\n        today() {\n            const today = Shopware.Utils.format.dateWithUserTimezone();\n            today.setHours(0, 0, 0, 0);\n            return today;\n        },\n\n        todayBucketCount(): BucketData | null {\n            return this.calculateTodayBucket(this.historyOrderDataCount);\n        },\n\n        todayBucketSum(): BucketData | null {\n            return this.calculateTodayBucket(this.historyOrderDataSum);\n        },\n\n        systemCurrencyISOCode() {\n            return Shopware.Context.app.systemCurrencyISOCode;\n        },\n\n        isSessionLoaded() {\n            return !Shopware.State.get('session')?.userPending;\n        },\n\n        currencyFilter() {\n            return Shopware.Filter.getByName('currency');\n        },\n\n        dateFilter() {\n            return Shopware.Filter.getByName('date');\n        },\n    },\n\n    watch: {\n        isSessionLoaded: {\n            immediate: true,\n            async handler() {\n                if (this.isSessionLoaded) {\n                    await this.initializeOrderData();\n                }\n            },\n        },\n    },\n\n    methods: {\n        calculateTodayBucket(aggregation: HistoryOrderData): BucketData | null {\n            const buckets = aggregation?.buckets;\n\n            if (!buckets) {\n                return null;\n            }\n\n            const today = this.today;\n            // search for stats with same timestamp as today\n            const findDateStats = buckets.find((dateCount) => {\n                // when date exists\n                if (dateCount.key) {\n                    // if time is today\n                    const date = new Date(dateCount.key);\n\n                    return date.setHours(0, 0, 0, 0) === today.setHours(0, 0, 0, 0);\n                }\n\n                return false;\n            });\n\n            if (findDateStats) {\n                return findDateStats;\n            }\n            return null;\n        },\n\n        async initializeOrderData() {\n            if (!this.acl.can('order.viewer')) {\n                this.isLoading = false;\n\n                return;\n            }\n\n            this.todayOrderDataLoaded = false;\n\n            await this.getHistoryOrderData();\n            this.todayOrderData = await this.fetchTodayData();\n            this.todayOrderDataLoaded = true;\n            this.isLoading = false;\n        },\n\n        getHistoryOrderData() {\n            return Promise.all([\n                this.fetchHistoryOrderDataCount().then((response) => {\n                    this.historyOrderDataCount = response;\n                }),\n                this.fetchHistoryOrderDataSum().then((response) => {\n                    this.historyOrderDataSum = response;\n                }),\n            ]);\n        },\n\n        fetchHistoryOrderDataCount() {\n            return this.fetchHistory(false, this.formatDateToISO(this.getDateAgo(this.ordersDateRange)));\n        },\n\n        fetchHistoryOrderDataSum() {\n            return this.fetchHistory(true, this.formatDateToISO(this.getDateAgo(this.turnoverDateRange)));\n        },\n\n        fetchHistory(paid: boolean, since: string) {\n            const headers = this.orderRepository.buildHeaders();\n\n            const initContainer = Shopware.Application.getContainer('init');\n            const httpClient = initContainer.httpClient;\n            const timezone = Shopware.State.get('session').currentUser?.timeZone ?? 'UTC';\n\n            return httpClient\n                .get<undefined, {\n                    data: {\n                        statistic: Array<{\n                            date: string,\n                            count: number,\n                            amount: number\n                        }>\n                    }\n                }>(`/_admin/dashboard/order-amount/${since}?timezone=${timezone}&paid=${paid.toString()}`, { headers })\n                .then((response) => {\n                    const buckets = response.data.statistic.map((bucket) => {\n                        return {\n                            key: bucket.date,\n                            count: bucket.count,\n                            apiAlias: 'aggregation_bucket',\n                            totalAmount: {\n                                sum: bucket.amount,\n                                name: 'totalAmount',\n                            },\n                        };\n                    });\n\n                    return {\n                        name: 'order_sum_bucket',\n                        buckets: buckets,\n                        apiAlias: 'order_sum_bucket_aggregation',\n                    } as const;\n                });\n        },\n\n        fetchTodayData() {\n            const criteria = new Criteria(1, 10);\n\n            criteria.addAssociation('currency');\n\n            criteria.addFilter(Criteria.equals('orderDate', this.formatDateToISO(new Date())));\n            criteria.addSorting(Criteria.sort(this.todayOrderDataSortBy, this.todayOrderDataSortDirection));\n\n            return this.orderRepository.search(criteria);\n        },\n\n        formatDateToISO(date: Date) {\n            return Shopware.Utils.format.toISODate(date, false);\n        },\n\n        formatChartHeadlineDate(date: Date) {\n            const lastKnownLang = Shopware.Application.getContainer('factory').locale.getLastKnownLocale();\n\n            return date.toLocaleDateString(lastKnownLang, {\n                day: 'numeric',\n                month: 'short',\n            });\n        },\n\n        orderGridColumns() {\n            return [{\n                property: 'orderNumber',\n                label: 'sw-order.list.columnOrderNumber',\n                routerLink: 'sw.order.detail',\n                allowResize: true,\n                primary: true,\n            }, {\n                property: 'orderDateTime',\n                dataIndex: 'orderDateTime',\n                label: 'sw-dashboard.todayStats.orderTime',\n                allowResize: true,\n                primary: false,\n            }, {\n                property: 'orderCustomer.firstName',\n                dataIndex: 'orderCustomer.firstName,orderCustomer.lastName',\n                label: 'sw-order.list.columnCustomerName',\n                allowResize: true,\n            }, {\n                property: 'stateMachineState.name',\n                label: 'sw-order.list.columnState',\n                allowResize: true,\n            }, {\n                property: 'amountTotal',\n                label: 'sw-order.list.columnAmount',\n                align: 'right',\n                allowResize: true,\n            }];\n        },\n\n        getVariantFromOrderState(order: OrderEntity): string {\n            const state = order.stateMachineState?.technicalName;\n            if (!state) {\n                return '';\n            }\n\n            return this.stateStyleDataProviderService.getStyle(\n                'order.state',\n                state,\n            ).variant;\n        },\n\n        parseDate(date: string): number {\n            const parsedDate = new Date(date.replace(/-/g, '/').replace('T', ' ').replace(/\\..*|\\+.*/, ''));\n            return parsedDate.valueOf();\n        },\n\n        async onOrdersRangeUpdate(range: string): Promise<void> {\n            const ordersDateRange = this.rangesValueMap.find((item: HistoryDateRange) => item.label === range);\n\n            if (!ordersDateRange) {\n                throw Error('Range not found');\n            }\n\n            this.ordersDateRange = ordersDateRange;\n\n            this.historyOrderDataCount = await this.fetchHistoryOrderDataCount();\n        },\n\n        async onTurnoverRangeUpdate(range: string): Promise<void> {\n            const turnoverDateRange = this.rangesValueMap.find((item: HistoryDateRange) => item.label === range);\n\n            if (!turnoverDateRange) {\n                throw Error('Range not found');\n            }\n\n            this.turnoverDateRange = turnoverDateRange;\n            this.historyOrderDataSum = await this.fetchHistoryOrderDataSum();\n        },\n\n        getCardSubtitle(range: HistoryDateRange): string {\n            return `${this.formatChartHeadlineDate(this.getDateAgo(range))} - ${this.formatChartHeadlineDate(this.today)}`;\n        },\n\n        getDateAgo(range: HistoryDateRange): Date {\n            const date = Shopware.Utils.format.dateWithUserTimezone();\n\n            if (range.interval === 'hour') {\n                date.setHours(date.getHours() - range.range);\n\n                return date;\n            }\n\n            date.setDate(date.getDate() - range.range);\n            date.setHours(0, 0, 0, 0);\n\n            return date;\n        },\n    },\n});\n\n/**\n * @private\n */\nexport type { HistoryDateRange };\n","export default \"\\n{% block sw_dashboard_statistics %}\\n<div\\n    v-if=\\\"acl.can('order.viewer')\\\"\\n    class=\\\"sw-dashboard-statistics\\\"\\n>\\n    <template v-if=\\\"isLoading\\\">\\n        <sw-skeleton variant=\\\"detail\\\" />\\n        <sw-skeleton variant=\\\"detail\\\" />\\n    </template>\\n\\n    <template v-else>\\n        <template v-if=\\\"hasOrderToday\\\">\\n            \\n            {% block sw_dashboard_statistics_intro_stats_headline %}\\n            <div class=\\\"sw-dashboard-statistics__card-headline\\\">\\n                \\n                {% block sw_dashboard_index_content_intro_stats_headline_title %}\\n                <h1>{{ $tc('sw-dashboard.todayStats.headline') }}</h1>\\n                {% endblock %}\\n\\n                \\n                {% block sw_dashboard_statistics_intro_stats_headline_date %}\\n                <span class=\\\"sw-dashboard-statistics__card-headline-timerange\\\">\\n                    {{ formatChartHeadlineDate(today) }}\\n                </span>\\n                {% endblock %}\\n            </div>\\n            {% endblock %}\\n\\n            <sw-card position-identifier=\\\"sw-dashboard-statistics-stats-today\\\">\\n                \\n                {% block sw_dashboard_statistics_intro_stats_today %}\\n                <div class=\\\"sw-dashboard-statistics__intro-stats-today\\\">\\n                    \\n                    {% block sw_dashboard_statistics_intro_stats_today_stats %}\\n                    <div\\n                        v-if=\\\"hasOrderToday\\\"\\n                        class=\\\"sw-dashboard-statistics__intro-stats-today-stats\\\"\\n                    >\\n                        \\n                        {% block sw_dashboard_statistics_intro_stats_today_stats_single_count %}\\n                        <div class=\\\"sw-dashboard-statistics__intro-stats-today-single-stat\\\">\\n                            <span class=\\\"sw-dashboard-statistics__intro-stats-today-single-stat-number-type\\\">{{ $tc('sw-dashboard.todayStats.orders') }}</span>\\n                            <span class=\\\"sw-dashboard-statistics__intro-stats-today-single-stat-number-value\\\">{{ orderCountToday }}</span>\\n                        </div>\\n                        {% endblock %}\\n\\n                        \\n                        {% block sw_dashboard_statistics_intro_stats_today_stats_single_sum %}\\n                        <div class=\\\"sw-dashboard-statistics__intro-stats-today-single-stat\\\">\\n                            <span class=\\\"sw-dashboard-statistics__intro-stats-today-single-stat-number-type\\\">{{ $tc('sw-dashboard.todayStats.turnover') }}</span>\\n                            {# price aggregations do not support currencies yet, see NEXT-5069 #}\\n                            <span class=\\\"sw-dashboard-statistics__intro-stats-today-single-stat-number-value\\\">{{ currencyFilter(orderSumToday, systemCurrencyISOCode, 2) }}</span>\\n                        </div>\\n                        {% endblock %}\\n                    </div>\\n                    {% endblock %}\\n                </div>\\n                {% endblock %}\\n\\n                \\n                {% block sw_dashboard_statistics_grid %}\\n                <template #grid>\\n                    <sw-entity-listing\\n                        v-if=\\\"todayOrderDataLoaded\\\"\\n                        :sort-by=\\\"todayOrderDataSortBy\\\"\\n                        :sort-direction=\\\"todayOrderDataSortDirection\\\"\\n                        :repository=\\\"orderRepository\\\"\\n                        :items=\\\"todayOrderData\\\"\\n                        :columns=\\\"orderGridColumns()\\\"\\n                        :show-selection=\\\"false\\\"\\n                        :allow-column-edit=\\\"false\\\"\\n                        :full-page=\\\"false\\\"\\n                    >\\n                        \\n                        {% block sw_dashboard_statistics_grid_created_at %}\\n                        <template\\n                            #column-orderDateTime=\\\"{ item }\\\"\\n                        >\\n                            {{ dateFilter(item.orderDateTime, {\\n                            hour: '2-digit',\\n                            minute: '2-digit',\\n                            year: undefined,\\n                            month: undefined,\\n                            day: undefined\\n                            }) }}\\n                        </template>\\n                        {% endblock %}\\n\\n                        \\n                        {% block sw_dashboard_statistics_grid_first_name %}\\n                        <template #column-orderCustomer.firstName=\\\"{ item }\\\">\\n                            <router-link\\n                                :to=\\\"{ name: 'sw.order.detail', params: { id: item.id } }\\\"\\n                                class=\\\"sw-data-grid__cell-value\\\"\\n                            >\\n                                {{ item.orderCustomer.firstName }} {{ item.orderCustomer.lastName }}\\n                            </router-link>\\n                        </template>\\n                        {% endblock %}\\n\\n                        \\n                        {% block sw_dashboard_statistics_grid_short_name %}\\n                        <template\\n                            #column-amountTotal=\\\"{ item }\\\"\\n                        >\\n                            {{ currencyFilter(item.amountTotal, item.currency.shortName) }}\\n                        </template>\\n                        {% endblock %}\\n\\n                        \\n                        {% block sw_dashboard_statistics_grid_state %}\\n                        <template #column-stateMachineState.name=\\\"{ item }\\\">\\n                            <sw-label\\n                                :variant=\\\"getVariantFromOrderState(item)\\\"\\n                                appearance=\\\"pill\\\"\\n                            >\\n                                {{ item.stateMachineState.translated.name }}\\n                            </sw-label>\\n                        </template>\\n                        {% endblock %}\\n\\n                        \\n                        {% block sw_dashboard_statistics_grid_actions %}\\n                        <template\\n                            #actions=\\\"{ item }\\\"\\n                        >\\n                            \\n                            {% block sw_dashboard_statistics_grid_actions_view %}\\n                            <sw-context-menu-item\\n                                class=\\\"sw-order-list__order-view-action\\\"\\n                                :router-link=\\\"{ name: 'sw.order.detail', params: { id: item.id } }\\\"\\n                            >\\n                                {{ $tc('sw-order.list.contextMenuView') }}\\n                            </sw-context-menu-item>\\n                            {% endblock %}\\n\\n                        </template>\\n                        {% endblock %}\\n\\n                    </sw-entity-listing>\\n\\n                    <sw-loader v-else-if=\\\"!todayOrderDataLoaded\\\" />\\n                </template>\\n                {% endblock %}\\n            </sw-card>\\n        </template>\\n\\n        <sw-extension-component-section\\n            position-identifier=\\\"sw-chart-card__before\\\"\\n        />\\n\\n        <template v-if=\\\"hasOrderInMonth\\\">\\n            \\n            {% block sw_dashboard_statistics_count %}\\n            <sw-chart-card\\n                class=\\\"sw-dashboard-statistics__statistics-count\\\"\\n                :available-ranges=\\\"availableRanges\\\"\\n                :card-subtitle=\\\"getCardSubtitle(ordersDateRange)\\\"\\n                :series=\\\"orderCountSeries\\\"\\n                :options=\\\"chartOptionsOrderCount\\\"\\n                :fill-empty-values=\\\"ordersDateRange.aggregate\\\"\\n                type=\\\"line\\\"\\n                sort\\n                position-identifier=\\\"sw-chart-card__statistics-count\\\"\\n                @sw-chart-card-range-update=\\\"onOrdersRangeUpdate\\\"\\n            >\\n                \\n                {% block sw_dashboard_statistics_count_title %}\\n                <template #header-title>\\n                    {{ $tc('sw-dashboard.monthStats.orderNumber') }}\\n                </template>\\n                {% endblock %}\\n\\n                \\n                {% block sw_dashboard_statistics_count_range_select %}\\n                <template #range-option=\\\"{ range }\\\">\\n                    {{ $tc(`sw-dashboard.monthStats.dateRanges.${range}`) }}\\n                </template>\\n                {% endblock %}\\n            </sw-chart-card>\\n            {% endblock %}\\n\\n            \\n            {% block sw_dashboard_statistics_sum %}\\n            <sw-chart-card\\n                class=\\\"sw-dashboard-statistics__statistics-sum\\\"\\n                :available-ranges=\\\"availableRanges\\\"\\n                :card-subtitle=\\\"getCardSubtitle(turnoverDateRange)\\\"\\n                :series=\\\"orderSumSeries\\\"\\n                :options=\\\"chartOptionsOrderSum\\\"\\n                :fill-empty-values=\\\"turnoverDateRange.aggregate\\\"\\n                type=\\\"line\\\"\\n                sort\\n                position-identifier=\\\"sw-chart-card__statistics-sum\\\"\\n                @sw-chart-card-range-update=\\\"onTurnoverRangeUpdate\\\"\\n            >\\n                \\n                {% block sw_dashboard_statistics_sum_title %}\\n                <template #header-title>\\n                    {{ $tc('sw-dashboard.monthStats.turnover') }}\\n                    <sw-help-text\\n                        class=\\\"sw-dashboard-index__help-text\\\"\\n                        :text=\\\"$tc('sw-dashboard.monthStats.helperText')\\\"\\n                    />\\n                </template>\\n                {% endblock %}\\n\\n                \\n                {% block sw_dashboard_statistics_sum_range_select %}\\n                <template #range-option=\\\"{ range }\\\">\\n                    {{ $tc(`sw-dashboard.monthStats.dateRanges.${range}`) }}\\n                </template>\\n                {% endblock %}\\n            </sw-chart-card>\\n            {% endblock %}\\n        </template>\\n\\n        <sw-extension-component-section\\n            position-identifier=\\\"sw-chart-card__after\\\"\\n        />\\n    </template>\\n</div>\\n{% endblock %}\\n\";"],"sourceRoot":""}