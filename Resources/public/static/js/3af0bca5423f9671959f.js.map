{"version":3,"sources":["webpack:///./src/module/sw-settings-rule/page/sw-settings-rule-detail/index.js","webpack:///./src/module/sw-settings-rule/page/sw-settings-rule-detail/sw-settings-rule-detail.html.twig","webpack:///./src/module/sw-settings-rule/page/sw-settings-rule-detail/sw-settings-rule-detail.scss"],"names":["_Shopware","Shopware","Component","Mixin","Context","mapPropertyErrors","getComponentHelper","_Shopware$Data","Data","Criteria","EntityCollection","template","inject","mixins","getByName","shortcuts","ESCAPE","props","ruleId","type","String","required","default","data","rule","conditions","conditionTree","deletedIds","isLoading","isSaveSuccessful","conditionTreeFinishedLoading","conditionsTreeContainsUserChanges","nextRoute","isDisplayingSaveChangesWarning","forceDiscardChanges","metaInfo","title","this","$createTitle","identifier","computed","_objectSpread","name","ruleRepository","repositoryFactory","create","ruleCriteria","criteria","addAssociation","appScriptConditionRepository","conditionRepository","entity","source","tooltipSave","acl","can","message","$tc","disabled","showOnDisabledElements","systemKey","$device","getSystemKey","concat","appearance","tooltipCancel","tabItems","route","params","id","$route","cssClassSuffix","watch","immediate","handler","_this","loadConditionData","then","scripts","ruleConditionDataProviderService","addScriptConditions","createRule","loadEntityData","setTreeFinishedLoading","deep","newRoute","oldRoute","_this2","beforeRouteUpdate","to","from","next","unsavedDataLeaveHandler","beforeRouteLeave","methods","context","api","languageId","State","get","Promise","all","search","ruleConditionsConfigApiService","load","results","_this3","loadConditions","checkUnsavedData","_ref","hasChanges","_this4","$nextTick","onLeaveModalClose","onLeaveModalConfirm","destination","_this5","_asyncToGenerator","_regeneratorRuntime","mark","_callee","wrap","_context","prev","$router","push","stop","_this6","arguments","length","undefined","inheritance","searchResult","total","resolve","page","limit","apply","_toConsumableArray","conditionsChanged","_ref2","validateRuleAwareness","_this7","equalsAnyConfigurations","getAwarenessKeysWithEqualsAnyConfig","isValid","forEach","key","condition","children","getChildrenConditions","restrictions","getRestrictionsByAssociation","entityName","isRestricted","getTranslatedConditionViolationList","equalsAnyNotMatched","entityLabel","assignmentSnippet","createNotificationError","_this8","child","onSave","_this9","isNew","saveRule","catch","showErrorNotification","syncConditions","abortOnLanguageChange","saveOnLanguageChange","onChangeLanguage","_this10","commit","save","_this11","sync","syncDeleted","tabHasError","tab","ruleNameError","rulePriorityError","onCancel","onDuplicate","_this12","behaviour","overwrites","createdAt","clone","duplicatedData","content","__esModule","module","i","locals","exports","add"],"mappings":"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","file":"static/js/3af0bca5423f9671959f.js","sourcesContent":["import template from './sw-settings-rule-detail.html.twig';\nimport './sw-settings-rule-detail.scss';\n\nconst { Component, Mixin, Context } = Shopware;\nconst { mapPropertyErrors } = Component.getComponentHelper();\nconst { Criteria, EntityCollection } = Shopware.Data;\n\n/**\n * @private\n * @package services-settings\n */\nexport default {\n    template,\n\n    inject: [\n        'ruleConditionDataProviderService',\n        'ruleConditionsConfigApiService',\n        'repositoryFactory',\n        'acl',\n    ],\n\n    mixins: [\n        Mixin.getByName('notification'),\n    ],\n\n    shortcuts: {\n        'SYSTEMKEY+S': 'onSave',\n        ESCAPE: 'onCancel',\n    },\n\n    props: {\n        ruleId: {\n            type: String,\n            required: false,\n            default: null,\n        },\n    },\n\n    data() {\n        return {\n            rule: null,\n            conditions: null,\n            conditionTree: null,\n            deletedIds: [],\n            isLoading: false,\n            isSaveSuccessful: false,\n            conditionTreeFinishedLoading: false,\n            conditionsTreeContainsUserChanges: false,\n            nextRoute: null,\n            isDisplayingSaveChangesWarning: false,\n            forceDiscardChanges: false,\n        };\n    },\n\n    metaInfo() {\n        return {\n            title: this.$createTitle(this.identifier),\n        };\n    },\n\n    computed: {\n        identifier() {\n            return this.rule ? this.rule.name : '';\n        },\n\n        ruleRepository() {\n            return this.repositoryFactory.create('rule');\n        },\n\n        ruleCriteria() {\n            const criteria = new Criteria();\n            criteria.addAssociation('tags');\n\n            criteria.addAssociation('personaPromotions');\n            criteria.addAssociation('orderPromotions');\n            criteria.addAssociation('cartPromotions');\n            criteria.addAssociation('promotionDiscounts');\n            criteria.addAssociation('promotionSetGroups');\n            criteria.addAssociation('flowSequences.flow');\n            criteria.addAssociation('shippingMethodPriceCalculations');\n            criteria.addAssociation('shippingMethodPrices');\n            criteria.addAssociation('productPrices');\n            criteria.addAssociation('shippingMethods');\n            criteria.addAssociation('paymentMethods');\n\n            return criteria;\n        },\n\n        appScriptConditionRepository() {\n            return this.repositoryFactory.create('app_script_condition');\n        },\n\n        conditionRepository() {\n            if (!this.rule) {\n                return null;\n            }\n\n            return this.repositoryFactory.create(\n                this.rule.conditions.entity,\n                this.rule.conditions.source,\n            );\n        },\n\n        tooltipSave() {\n            if (!this.acl.can('rule.editor')) {\n                return {\n                    message: this.$tc('sw-privileges.tooltip.warning'),\n                    disabled: this.acl.can('rule.editor'),\n                    showOnDisabledElements: true,\n                };\n            }\n\n            const systemKey = this.$device.getSystemKey();\n\n            return {\n                message: `${systemKey} + S`,\n                appearance: 'light',\n            };\n        },\n\n        tooltipCancel() {\n            return {\n                message: 'ESC',\n                appearance: 'light',\n            };\n        },\n\n        tabItems() {\n            return [\n                {\n                    title: this.$tc('sw-settings-rule.detail.tabGeneral'),\n                    route: { name: 'sw.settings.rule.detail.base', params: { id: this.$route.params.id } },\n                    cssClassSuffix: 'general',\n                },\n                {\n                    title: this.$tc('sw-settings-rule.detail.tabAssignments'),\n                    route: { name: 'sw.settings.rule.detail.assignments', params: { id: this.$route.params.id } },\n                    cssClassSuffix: 'assignments',\n                },\n            ];\n        },\n\n        ...mapPropertyErrors('rule', ['name', 'priority']),\n    },\n\n    watch: {\n        ruleId: {\n            immediate: true,\n            handler() {\n                this.isLoading = true;\n\n                this.loadConditionData().then((scripts) => {\n                    this.ruleConditionDataProviderService.addScriptConditions(scripts);\n\n                    if (!this.ruleId) {\n                        this.isLoading = false;\n                        this.createRule();\n                        return;\n                    }\n\n                    this.loadEntityData(this.ruleId).then(() => {\n                        this.isLoading = false;\n                    });\n                    this.setTreeFinishedLoading();\n                });\n            },\n        },\n        conditionTree: {\n            deep: true,\n            handler() {\n                if (!this.conditionTreeFinishedLoading) {\n                    return;\n                }\n                this.conditionsTreeContainsUserChanges = true;\n            },\n        },\n\n        $route(newRoute, oldRoute) {\n            // Reload the rule data when switching from assignments to base tab because changes to the assignments\n            // can affect the conditions that are selectable - rule awareness\n            if (newRoute.name === 'sw.settings.rule.detail.base' &&\n                oldRoute.name === 'sw.settings.rule.detail.assignments') {\n                this.isLoading = true;\n                this.loadEntityData(this.ruleId).then(() => {\n                    this.isLoading = false;\n                    this.setTreeFinishedLoading();\n                });\n            }\n        },\n    },\n\n    beforeRouteUpdate(to, from, next) {\n        this.unsavedDataLeaveHandler(to, from, next);\n    },\n\n    beforeRouteLeave(to, from, next) {\n        this.unsavedDataLeaveHandler(to, from, next);\n    },\n\n    methods: {\n        loadConditionData() {\n            const context = { ...Context.api, languageId: Shopware.State.get('session').languageId };\n            const criteria = new Criteria();\n\n            return Promise.all([\n                this.appScriptConditionRepository.search(criteria, context),\n                this.ruleConditionsConfigApiService.load(),\n            ]).then((results) => {\n                return results[0];\n            });\n        },\n\n        createRule() {\n            this.rule = this.ruleRepository.create(Context.api);\n            this.conditions = this.rule.conditions;\n        },\n\n        loadEntityData(ruleId) {\n            this.isLoading = true;\n            this.conditions = null;\n\n            return this.ruleRepository.get(ruleId, Context.api, this.ruleCriteria).then((rule) => {\n                this.rule = rule;\n                return this.loadConditions();\n            });\n        },\n\n        unsavedDataLeaveHandler(to, from, next) {\n            if (this.forceDiscardChanges) {\n                this.forceDiscardChanges = false;\n                next();\n                return;\n            }\n\n            if (to.name === 'sw.settings.rule.detail.assignments' && from.name === 'sw.settings.rule.detail.base') {\n                this.checkUnsavedData({ to, from, next });\n            } else if (to.name === 'sw.settings.rule.detail.base' || to.name === 'sw.settings.rule.create.base') {\n                this.conditionsTreeContainsUserChanges = false;\n                this.conditionTreeFinishedLoading = false;\n                next();\n                return;\n            }\n\n            this.checkUnsavedData({ to, from, next });\n        },\n\n        checkUnsavedData({ to, next }) {\n            if (this.conditionsTreeContainsUserChanges || this.ruleRepository.hasChanges(this.rule)) {\n                this.isDisplayingSaveChangesWarning = true;\n                this.nextRoute = to;\n                next(false);\n            } else {\n                next();\n            }\n        },\n\n        setTreeFinishedLoading() {\n            this.$nextTick(() => {\n                this.conditionsTreeContainsUserChanges = false;\n                this.conditionTreeFinishedLoading = true;\n            });\n        },\n\n        onLeaveModalClose() {\n            this.nextRoute = null;\n            this.isDisplayingSaveChangesWarning = false;\n        },\n\n        async onLeaveModalConfirm(destination) {\n            this.forceDiscardChanges = true;\n            this.isDisplayingSaveChangesWarning = false;\n\n            if (destination.name === 'sw.settings.rule.detail.assignments') {\n                await this.loadEntityData(this.ruleId).then(() => {\n                    this.isLoading = false;\n                });\n            }\n\n            this.$nextTick(() => {\n                this.$router.push({ name: destination.name, params: destination.params });\n            });\n        },\n\n        loadConditions(conditions = null) {\n            const context = { ...Context.api, inheritance: true };\n\n            if (conditions === null) {\n                return this.conditionRepository.search(new Criteria(), context).then((searchResult) => {\n                    return this.loadConditions(searchResult);\n                });\n            }\n\n            if (conditions.total <= conditions.length) {\n                this.conditions = conditions;\n                return Promise.resolve();\n            }\n\n            const criteria = new Criteria(\n                conditions.criteria.page + 1,\n                conditions.criteria.limit,\n            );\n\n            if (conditions.entity === 'product') {\n                criteria.addAssociation('options.group');\n            }\n\n            return this.conditionRepository.search(criteria, conditions.context).then((searchResult) => {\n                conditions.push(...searchResult);\n                conditions.criteria = searchResult.criteria;\n                conditions.total = searchResult.total;\n\n                return this.loadConditions(conditions);\n            });\n        },\n\n        conditionsChanged({ conditions, deletedIds }) {\n            this.conditionTree = conditions;\n            this.deletedIds = [...this.deletedIds, ...deletedIds];\n        },\n\n        validateRuleAwareness() {\n            const equalsAnyConfigurations = this.ruleConditionDataProviderService.getAwarenessKeysWithEqualsAnyConfig();\n            if (equalsAnyConfigurations.length <= 0) {\n                return true;\n            }\n\n            let isValid = true;\n            equalsAnyConfigurations.forEach((key) => {\n                if (this.rule[key].length > 0) {\n                    const conditions = [];\n                    this.conditionTree.forEach((condition) => {\n                        conditions.push(condition);\n\n                        if (condition.children) {\n                            const children = this.getChildrenConditions(condition);\n                            conditions.push(...children);\n                        }\n                    });\n\n                    const restrictions = this.ruleConditionDataProviderService.getRestrictionsByAssociation(\n                        new EntityCollection(\n                            this.conditionRepository.route,\n                            this.conditionRepository.entityName,\n                            Context.api,\n                            null,\n                            conditions,\n                        ),\n                        key,\n                    );\n\n                    if (restrictions.isRestricted) {\n                        const message = this.$tc(\n                            'sw-restricted-rules.restrictedAssignment.equalsAnyViolationTooltip',\n                            0,\n                            {\n                                conditions: this.ruleConditionDataProviderService.getTranslatedConditionViolationList(\n                                    restrictions.equalsAnyNotMatched,\n                                    'sw-restricted-rules.or',\n                                ),\n                                entityLabel: this.$tc(restrictions.assignmentSnippet, 2),\n                            },\n                        );\n\n                        this.createNotificationError({ message });\n                        isValid = false;\n                    }\n                }\n            });\n\n            return isValid;\n        },\n\n        getChildrenConditions(condition) {\n            const conditions = [];\n            condition.children.forEach((child) => {\n                conditions.push(child);\n                if (child.children) {\n                    const children = this.getChildrenConditions(child);\n                    conditions.push(...children);\n                }\n            });\n\n            return conditions;\n        },\n\n        onSave() {\n            if (!this.validateRuleAwareness()) {\n                return Promise.resolve();\n            }\n\n            this.isSaveSuccessful = false;\n            this.isLoading = true;\n\n            if (this.rule.isNew()) {\n                this.rule.conditions = this.conditionTree;\n                return this.saveRule().then(() => {\n                    this.$router.push({ name: 'sw.settings.rule.detail', params: { id: this.rule.id } });\n                    this.isSaveSuccessful = true;\n                    this.conditionsTreeContainsUserChanges = false;\n                }).catch(() => {\n                    this.showErrorNotification();\n                });\n            }\n\n            return this.saveRule()\n                .then(this.syncConditions)\n                .then(() => {\n                    this.isSaveSuccessful = true;\n                    this.loadEntityData(this.rule.id).then(() => {\n                        this.setTreeFinishedLoading();\n                    });\n                })\n                .then(() => {\n                    this.isLoading = false;\n                })\n                .catch(() => {\n                    this.isLoading = false;\n                    this.showErrorNotification();\n                });\n        },\n\n        abortOnLanguageChange() {\n            return this.ruleRepository.hasChanges(this.rule);\n        },\n\n        saveOnLanguageChange() {\n            return this.onSave();\n        },\n\n        onChangeLanguage(languageId) {\n            Shopware.State.commit('context/setApiLanguageId', languageId);\n\n            this.isLoading = true;\n            this.loadEntityData(this.ruleId).then(() => {\n                this.isLoading = false;\n                this.setTreeFinishedLoading();\n            });\n        },\n\n        saveRule() {\n            return this.ruleRepository.save(this.rule, Context.api);\n        },\n\n        syncConditions() {\n            return this.conditionRepository.sync(this.conditionTree, Context.api)\n                .then(() => {\n                    if (this.deletedIds.length > 0) {\n                        return this.conditionRepository.syncDeleted(this.deletedIds, Context.api).then(() => {\n                            this.deletedIds = [];\n                        });\n                    }\n                    return Promise.resolve();\n                });\n        },\n\n        showErrorNotification() {\n            this.createNotificationError({\n                message: this.$tc('sw-settings-rule.detail.messageSaveError', 0, { name: this.rule.name }),\n            });\n            this.isLoading = false;\n        },\n\n        tabHasError(tab) {\n            if (tab.route.name !== 'sw.settings.rule.detail.base') {\n                return false;\n            }\n\n            return !!this.ruleNameError || !!this.rulePriorityError;\n        },\n\n        onCancel() {\n            this.$router.push({ name: 'sw.settings.rule.index' });\n        },\n\n        onDuplicate() {\n            return this.onSave().then(() => {\n                const behaviour = {\n                    overwrites: {\n                        name: `${this.rule.name} ${this.$tc('global.default.copy')}`,\n                        // setting the createdAt to null, so that api does set a new date\n                        createdAt: null,\n                    },\n                };\n\n                return this.ruleRepository.clone(this.rule.id, Shopware.Context.api, behaviour).then((duplicatedData) => {\n                    this.$router.push(\n                        {\n                            name: 'sw.settings.rule.detail',\n                            params: { id: duplicatedData.id },\n                        },\n                    );\n                });\n            });\n        },\n    },\n};\n","export default \"\\n{% block sw_settings_rule_detail %}\\n<sw-page class=\\\"sw-settings-rule-detail\\\">\\n    \\n    {% block sw_settings_rule_detail_header %}\\n    <template #smart-bar-header>\\n        <h2 v-if=\\\"rule\\\">\\n            {{ rule.name }}\\n        </h2>\\n        <h2 v-else>\\n            {{ $tc('sw-settings-rule.detail.textHeadline') }}\\n        </h2>\\n    </template>\\n    {% endblock %}\\n\\n    \\n    {% block sw_settings_rule_detail_actions %}\\n    <template #smart-bar-actions>\\n\\n        \\n        {% block sw_settings_rule_detail_actions_cancel %}\\n        <sw-button\\n            v-tooltip.bottom=\\\"tooltipCancel\\\"\\n            :disabled=\\\"isLoading\\\"\\n            @click=\\\"onCancel\\\"\\n        >\\n            {{ $tc('sw-settings-rule.detail.buttonCancel') }}\\n        </sw-button>\\n        {% endblock %}\\n\\n        <sw-button-group\\n            v-tooltip.bottom=\\\"{\\n                message: $tc('sw-privileges.tooltip.warning'),\\n                disabled: acl.can('rule.editor'),\\n                showOnDisabledElements: true\\n            }\\\"\\n            class=\\\"sw-settings-rule-detail__save-button-group\\\"\\n            :split-button=\\\"true\\\"\\n        >\\n            \\n            {% block sw_settings_rule_detail_actions_save %}\\n            <sw-button-process\\n                {% if VUE3 %}\\n                v-model:processSuccess=\\\"isSaveSuccessful\\\"\\n                {% else %}\\n                v-model=\\\"isSaveSuccessful\\\"\\n                {% endif %}\\n                v-tooltip.bottom=\\\"tooltipSave\\\"\\n                class=\\\"sw-settings-rule-detail__save-action\\\"\\n                :is-loading=\\\"isLoading\\\"\\n                variant=\\\"primary\\\"\\n                :disabled=\\\"!acl.can('rule.editor')\\\"\\n                @click=\\\"onSave\\\"\\n            >\\n                {{ $tc('sw-settings-rule.detail.buttonSave') }}\\n            </sw-button-process>\\n            {% endblock %}\\n\\n            \\n            {% block sw_settings_rule_detail_actions_save_context_menu %}\\n            <sw-context-button>\\n                <template #button>\\n                    <sw-button\\n                        class=\\\"sw-settings-rule-detail__button-context-menu\\\"\\n                        square\\n                        variant=\\\"primary\\\"\\n                        :disabled=\\\"isLoading || !acl.can('rule.editor')\\\"\\n                    >\\n                        <sw-icon\\n                            name=\\\"regular-chevron-down-xs\\\"\\n                            size=\\\"16\\\"\\n                        />\\n                    </sw-button>\\n                </template>\\n\\n                \\n                {% block sw_settings_rule_detail_actions_save_context_menu_actions %}\\n                \\n                {% block sw_settings_rule_detail_actions_duplicate %}\\n                <sw-context-menu-item\\n                    class=\\\"sw-settings-rule-detail__save-duplicate-action\\\"\\n                    :disabled=\\\"!acl.can('rule.creator') || !acl.can('rule.editor')\\\"\\n                    @click=\\\"onDuplicate\\\"\\n                >\\n                    {{ $tc('sw-product.detail.buttonSaveDuplicate') }}\\n                </sw-context-menu-item>\\n                {% endblock %}\\n                {% endblock %}\\n            </sw-context-button>\\n            {% endblock %}\\n        </sw-button-group>\\n    </template>\\n    {% endblock %}\\n\\n    <template #language-switch>\\n        <sw-language-switch\\n            :save-changes-function=\\\"saveOnLanguageChange\\\"\\n            :abort-change-function=\\\"abortOnLanguageChange\\\"\\n            :disabled=\\\"!ruleId\\\"\\n            @on-change=\\\"onChangeLanguage\\\"\\n        />\\n    </template>\\n\\n    \\n    {% block sw_settings_rule_detail_content %}\\n    <template #content>\\n        \\n        {% block sw_settings_rule_detail_tabs_discard_changes_modal %}\\n        <sw-discard-changes-modal\\n            v-if=\\\"isDisplayingSaveChangesWarning\\\"\\n            @keep-editing=\\\"onLeaveModalClose(nextRoute)\\\"\\n            @discard-changes=\\\"onLeaveModalConfirm(nextRoute)\\\"\\n        />\\n        {% endblock %}\\n        <sw-card-view>\\n            \\n            {% block sw_settings_rule_detail_tabs %}\\n            <sw-tabs\\n                v-if=\\\"rule && !rule.isNew()\\\"\\n                class=\\\"sw-settings-rule-detail__tabs\\\"\\n                position-identifier=\\\"sw-settings-rule-detail\\\"\\n            >\\n                \\n                {% block sw_settings_rule_detail_tab_items %}\\n                <sw-tabs-item\\n                    v-for=\\\"tab in tabItems\\\"\\n                    :key=\\\"tab.route.name\\\"\\n                    :class=\\\"'sw-settings-rule-detail__tab-item sw-settings-rule-detail__tab-item-' + tab.cssClassSuffix\\\"\\n                    :route=\\\"tab.route\\\"\\n                    :title=\\\"tab.title\\\"\\n                    :has-error=\\\"tabHasError(tab)\\\"\\n                >\\n                    {{ tab.title }}\\n                </sw-tabs-item>\\n                {% endblock %}\\n            </sw-tabs>\\n            {% endblock %}\\n\\n            \\n            {% block sw_settings_rule_detail_content_view %}\\n            <template v-if=\\\"isLoading\\\">\\n                <sw-skeleton variant=\\\"detail-bold\\\" />\\n                <sw-skeleton />\\n            </template>\\n\\n            <template v-else-if=\\\"rule !== null\\\">\\n            {% if VUE3 %}\\n                <router-view\\n                    v-slot=\\\"{ Component }\\\"\\n                    :key=\\\"$route.path\\\"\\n                >\\n                    <component\\n                        :is=\\\"Component\\\"\\n                        :rule=\\\"rule\\\"\\n                        :conditions=\\\"conditions\\\"\\n                        :condition-repository=\\\"conditionRepository\\\"\\n                        :is-loading=\\\"isLoading\\\"\\n                        :detail-page-loading=\\\"isLoading\\\"\\n                        :rule-name-error=\\\"ruleNameError\\\"\\n                        :rule-priority-error=\\\"rulePriorityError\\\"\\n                        @conditions-changed=\\\"conditionsChanged\\\"\\n                        @tree-finished-loading=\\\"setTreeFinishedLoading\\\"\\n                    />\\n                </router-view>\\n            {% else %}\\n                <router-view\\n                    :key=\\\"$route.path\\\"\\n                    :rule=\\\"rule\\\"\\n                    :conditions=\\\"conditions\\\"\\n                    :condition-repository=\\\"conditionRepository\\\"\\n                    :is-loading=\\\"isLoading\\\"\\n                    :detail-page-loading=\\\"isLoading\\\"\\n                    :rule-name-error=\\\"ruleNameError\\\"\\n                    :rule-priority-error=\\\"rulePriorityError\\\"\\n                    @conditions-changed=\\\"conditionsChanged\\\"\\n                    @tree-finished-loading=\\\"setTreeFinishedLoading\\\"\\n                />\\n            {% endif %}\\n            </template>\\n            {% endblock %}\\n        </sw-card-view>\\n    </template>\\n    {% endblock %}\\n</sw-page>\\n{% endblock %}\\n\";","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../../../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--15-1!../../../../../node_modules/css-loader/dist/cjs.js??ref--15-2!../../../../../node_modules/sass-loader/dist/cjs.js??ref--15-3!./sw-settings-rule-detail.scss\");\nif(content.__esModule) content = content.default;\nif(typeof content === 'string') content = [[module.id, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar add = require(\"!../../../../../node_modules/vue-style-loader/lib/addStylesClient.js\").default\nvar update = add(\"7e96f5bc\", content, true, {});"],"sourceRoot":""}