{"version":3,"sources":["webpack:///./src/module/sw-first-run-wizard/view/sw-first-run-wizard-data-import/index.js","webpack:///./src/module/sw-first-run-wizard/view/sw-first-run-wizard-data-import/sw-first-run-wizard-data-import.html.twig","webpack:///./src/module/sw-first-run-wizard/view/sw-first-run-wizard-data-import/sw-first-run-wizard-data-import.scss"],"names":["Criteria","Shopware","Data","template","inject","data","plugins","demodata","name","isInstalled","migration","demoDataPluginName","migrationPluginName","isPluginAlreadyInstalled","isInstallingPlugin","installationError","pluginError","pluginInstalledSuccessfully","computed","pluginRepository","this","repositoryFactory","create","buttonConfig","key","label","$tc","position","variant","action","disabled","assetFilter","Filter","getByName","watch","updateButtons","created","createdComponent","methods","setTitle","getInstalledPlugins","$emit","notInstalled","pluginKey","onInstall","_this","plugin","extensionStoreActionService","downloadExtension","then","installExtension","activateExtension","catch","error","_error$response","_error$response$data","response","errors","pop","_this2","pluginNames","Object","values","map","pluginCriteria","addFilter","equalsAny","search","result","total","forEach","active","installedAt","findPluginKeyByName","_Object$entries$find","entries","find","_ref","_ref2","_slicedToArray","content","__esModule","default","module","i","locals","exports","add"],"mappings":"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","file":"static/js/d79397ffde183fb462bf.js","sourcesContent":["import template from './sw-first-run-wizard-data-import.html.twig';\nimport './sw-first-run-wizard-data-import.scss';\n\nconst { Criteria } = Shopware.Data;\n\n/**\n * @package services-settings\n * @deprecated tag:v6.6.0 - Will be private\n */\n// eslint-disable-next-line sw-deprecation-rules/private-feature-declarations\nexport default {\n    template,\n\n    inject: [\n        'extensionStoreActionService',\n        'repositoryFactory',\n    ],\n\n    data() {\n        return {\n            plugins: {\n                demodata: {\n                    name: 'SwagPlatformDemoData',\n                    isInstalled: false,\n                },\n                migration: {\n                    name: 'SwagMigrationAssistant',\n                    isInstalled: false,\n                },\n            },\n            demoDataPluginName: 'SwagPlatformDemoData',\n            migrationPluginName: 'SwagMigrationAssistant',\n            isPluginAlreadyInstalled: false,\n            isInstallingPlugin: false,\n            installationError: false,\n            pluginError: null,\n            pluginInstalledSuccessfully: {\n                demodata: false,\n                migration: false,\n            },\n        };\n    },\n\n    computed: {\n        pluginRepository() {\n            return this.repositoryFactory.create('plugin');\n        },\n\n        buttonConfig() {\n            return [\n                {\n                    key: 'skip',\n                    label: this.$tc('sw-first-run-wizard.general.buttonNext'),\n                    position: 'right',\n                    variant: 'primary',\n                    action: 'sw.first.run.wizard.index.defaults',\n                    disabled: this.isInstallingPlugin,\n                },\n            ];\n        },\n\n        assetFilter() {\n            return Shopware.Filter.getByName('asset');\n        },\n    },\n\n    watch: {\n        isInstallingPlugin() {\n            this.updateButtons();\n        },\n    },\n\n\n    created() {\n        this.createdComponent();\n    },\n\n    methods: {\n        createdComponent() {\n            this.updateButtons();\n            this.setTitle();\n            this.getInstalledPlugins();\n        },\n\n        updateButtons() {\n            this.$emit('buttons-update', this.buttonConfig);\n        },\n\n        setTitle() {\n            this.$emit('frw-set-title', this.$tc('sw-first-run-wizard.dataImport.modalTitle'));\n        },\n\n        notInstalled(pluginKey) {\n            return !this.plugins[pluginKey].isInstalled;\n        },\n\n        onInstall(pluginKey) {\n            const plugin = this.plugins[pluginKey];\n            this.isInstallingPlugin = true;\n            this.installationError = false;\n\n            return this.extensionStoreActionService.downloadExtension(plugin.name)\n                .then(() => {\n                    return this.extensionStoreActionService.installExtension(plugin.name, 'plugin');\n                })\n                .then(() => {\n                    return this.extensionStoreActionService.activateExtension(plugin.name, 'plugin');\n                })\n                .then(() => {\n                    this.$emit('extension-activated');\n                    this.isInstallingPlugin = false;\n                    this.plugins[pluginKey].isInstalled = true;\n\n                    return false;\n                })\n                .catch((error) => {\n                    this.isInstallingPlugin = false;\n                    this.installationError = true;\n\n                    if (error.response?.data?.errors) {\n                        this.pluginError = error.response.data.errors.pop();\n                    }\n\n                    return true;\n                });\n        },\n\n        getInstalledPlugins() {\n            const pluginNames = Object.values(this.plugins).map(plugin => plugin.name);\n            const pluginCriteria = new Criteria(1, 5);\n\n            pluginCriteria\n                .addFilter(\n                    Criteria.equalsAny('plugin.name', pluginNames),\n                );\n\n            this.pluginRepository.search(pluginCriteria)\n                .then((result) => {\n                    if (result.total < 1) {\n                        return;\n                    }\n\n                    result.forEach((plugin) => {\n                        if (!plugin.active || plugin.installedAt === null) {\n                            return;\n                        }\n\n                        const key = this.findPluginKeyByName(plugin.name);\n\n                        this.plugins[key].isInstalled = true;\n                    });\n                });\n        },\n\n        findPluginKeyByName(name) {\n            const [pluginKey] = Object.entries(this.plugins).find(([key, state]) => {\n                if (state.name === name) {\n                    return key;\n                }\n\n                return '';\n            });\n\n            return pluginKey;\n        },\n    },\n};\n","export default \"\\n{% block sw_first_run_wizard_data_import %}\\n<div class=\\\"sw-first-run-wizard-data-import\\\">\\n    <sw-container\\n        v-if=\\\"!isInstallingPlugin\\\"\\n        columns=\\\"1fr 1fr\\\"\\n        gap=\\\"24px 0\\\"\\n    >\\n        <div class=\\\"sw-first-run-wizard-data-import__card\\\">\\n            <img\\n                class=\\\"sw-first-run-wizard-data-import__icon-demodata\\\"\\n                :src=\\\"assetFilter('/administration/static/img/first-run-wizard/plugin-demodata-set.svg')\\\"\\n                alt=\\\"\\\"\\n            >\\n            <h5 class=\\\"sw-first-run-wizard-data-import__headline\\\">\\n                {{ $tc('sw-first-run-wizard.dataImport.headlineDemoData') }}\\n            </h5>\\n            <p\\n                class=\\\"sw-first-run-wizard-data-import__message\\\"\\n                v-html=\\\"$tc('sw-first-run-wizard.dataImport.messageDemoData')\\\"\\n            ></p>\\n\\n            <sw-button-process\\n                v-if=\\\"notInstalled('demodata')\\\"\\n                variant=\\\"primary\\\"\\n                size=\\\"small\\\"\\n                :is-loading=\\\"isInstallingPlugin\\\"\\n                :disabled=\\\"isInstallingPlugin\\\"\\n                :process-success=\\\"pluginInstalledSuccessfully.demodata\\\"\\n                class=\\\"button-plugin-install\\\"\\n                @click=\\\"onInstall('demodata')\\\"\\n            >\\n                {{ $tc('sw-first-run-wizard.dataImport.buttonInstallDemoData') }}\\n            </sw-button-process>\\n            <div\\n                v-else\\n                class=\\\"plugin-status\\\"\\n            >\\n                <span class=\\\"plugin-installed\\\">\\n                    <sw-icon\\n                        name=\\\"regular-check-circle-s\\\"\\n                        size=\\\"16\\\"\\n                    />\\n                    {{ $tc('sw-first-run-wizard.general.pluginInstalled') }}\\n                </span>\\n            </div>\\n        </div>\\n\\n        <div class=\\\"sw-first-run-wizard-data-import__card\\\">\\n            <img\\n                class=\\\"sw-first-run-wizard-data-import__icon-migration\\\"\\n                :src=\\\"assetFilter('/administration/static/img/first-run-wizard/plugin-migration-assistant.svg')\\\"\\n                alt=\\\"\\\"\\n            >\\n            <h5 class=\\\"sw-first-run-wizard-import-data__headline\\\">\\n                {{ $tc('sw-first-run-wizard.dataImport.headlineMigration') }}\\n            </h5>\\n            <p\\n                class=\\\"sw-first-run-wizard-data-import__message\\\"\\n                v-html=\\\"$tc('sw-first-run-wizard.dataImport.messageMigration')\\\"\\n            ></p>\\n\\n            <sw-button-process\\n                v-if=\\\"notInstalled('migration')\\\"\\n                variant=\\\"primary\\\"\\n                size=\\\"small\\\"\\n                :is-loading=\\\"isInstallingPlugin\\\"\\n                :disabled=\\\"isInstallingPlugin\\\"\\n                :process-success=\\\"pluginInstalledSuccessfully.migration\\\"\\n                class=\\\"button-plugin-install\\\"\\n                @click=\\\"onInstall('migration')\\\"\\n            >\\n                {{ $tc('sw-first-run-wizard.dataImport.buttonInstallMigration') }}\\n            </sw-button-process>\\n            <div\\n                v-else\\n                class=\\\"plugin-status\\\"\\n            >\\n                <span class=\\\"plugin-installed\\\">\\n                    <sw-icon\\n                        name=\\\"regular-check-circle-s\\\"\\n                        size=\\\"16\\\"\\n                    />\\n                    {{ $tc('sw-first-run-wizard.general.pluginInstalled') }}\\n                </span>\\n            </div>\\n        </div>\\n    </sw-container>\\n\\n    <div\\n        v-else\\n        class=\\\"installing-plugin\\\"\\n    >\\n        <sw-loader size=\\\"48px\\\" />\\n        <p\\n            class=\\\"sw-loader-info-text\\\"\\n            v-html=\\\"$tc('sw-first-run-wizard.dataImport.loadingMessage')\\\"\\n        ></p>\\n    </div>\\n\\n    <div\\n        v-if=\\\"installationError\\\"\\n        class=\\\"sw-first-run-wizard-plugin-installation__error\\\"\\n    >\\n        <sw-alert\\n            :title=\\\"pluginError.title\\\"\\n            variant=\\\"error\\\"\\n            appearance=\\\"notification\\\"\\n        >\\n            {{ pluginError.detail }}\\n        </sw-alert>\\n    </div>\\n</div>\\n{% endblock %}\\n\";","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../../../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--15-1!../../../../../node_modules/css-loader/dist/cjs.js??ref--15-2!../../../../../node_modules/sass-loader/dist/cjs.js??ref--15-3!./sw-first-run-wizard-data-import.scss\");\nif(content.__esModule) content = content.default;\nif(typeof content === 'string') content = [[module.id, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar add = require(\"!../../../../../node_modules/vue-style-loader/lib/addStylesClient.js\").default\nvar update = add(\"67931fe3\", content, true, {});"],"sourceRoot":""}