{"version":3,"sources":["webpack:///./src/module/sw-product/component/sw-product-variants/sw-product-variants-delivery/sw-product-variants-delivery-media/sw-product-variants-delivery-media.scss","webpack:///./src/module/sw-product/component/sw-product-variants/sw-product-variants-delivery/sw-product-variants-delivery-media/index.js","webpack:///./src/module/sw-product/component/sw-product-variants/sw-product-variants-delivery/sw-product-variants-delivery-media/sw-product-variants-delivery-media.html.twig"],"names":["content","__esModule","default","module","i","locals","exports","add","template","inject","props","product","type","Object","required","selectedGroups","Array","data","activeGroup","isLoading","computed","selectedGroupsSorted","sortedGroups","selectedGroupsCopy","_toConsumableArray","this","variantListingConfig","configuratorGroupConfig","length","reduce","acc","configGroup","relatedGroup","find","group","id","push","splice","indexOf","concat","optionColumns","property","label","rawData","activeOptions","_this","configuratorSettings","filter","element","isDeleted","option","groupId","watch","_this2","$nextTick","then","$refs","variantsMedia","compact","handler","_this3","methods","onUploadsAdded","_ref","_this4","_asyncToGenerator","_regeneratorRuntime","mark","_callee","uploadData","relatedOption","wrap","_context","prev","next","abrupt","uploadTag","forEach","upload","mediaId","targetId","mediaService","runUploads","stop","successfulUpload","_this5","_callee2","_context2","$forceUpdate","removeMedia","setMedia","selection","optionId","onChangeGroupListing","value","_this6","existingIndex","findIndex","existingConfig","expressionForListings","representation"],"mappings":"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","file":"static/js/21b3eb508f028ff9c678.js","sourcesContent":["// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../../../../../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--15-1!../../../../../../../node_modules/css-loader/dist/cjs.js??ref--15-2!../../../../../../../node_modules/sass-loader/dist/cjs.js??ref--15-3!./sw-product-variants-delivery-media.scss\");\nif(content.__esModule) content = content.default;\nif(typeof content === 'string') content = [[module.id, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar add = require(\"!../../../../../../../node_modules/vue-style-loader/lib/addStylesClient.js\").default\nvar update = add(\"4ba8e378\", content, true, {});","/*\n * @package inventory\n */\n\nimport template from './sw-product-variants-delivery-media.html.twig';\nimport './sw-product-variants-delivery-media.scss';\n\n// eslint-disable-next-line sw-deprecation-rules/private-feature-declarations\nexport default {\n    template,\n\n    inject: ['repositoryFactory', 'mediaService'],\n\n    props: {\n        product: {\n            type: Object,\n            required: true,\n        },\n\n        selectedGroups: {\n            type: Array,\n            required: true,\n        },\n    },\n\n    data() {\n        return {\n            activeGroup: {},\n            isLoading: false,\n        };\n    },\n\n    computed: {\n        selectedGroupsSorted() {\n            // prepare group sorting\n            let sortedGroups = [];\n            const selectedGroupsCopy = [...this.selectedGroups];\n\n            // check if sorting exists on server\n            if (this.product.variantListingConfig.configuratorGroupConfig\n                && this.product.variantListingConfig.configuratorGroupConfig.length > 0) {\n                // add server sorting to the sortedGroups\n                sortedGroups = this.product.variantListingConfig.configuratorGroupConfig.reduce((acc, configGroup) => {\n                    const relatedGroup = selectedGroupsCopy.find(group => group.id === configGroup.id);\n\n                    if (relatedGroup) {\n                        acc.push(relatedGroup);\n\n                        // remove from original array\n                        selectedGroupsCopy.splice(selectedGroupsCopy.indexOf(relatedGroup), 1);\n                    }\n\n                    return acc;\n                }, []);\n            }\n\n            // add non sorted groups at the end of the sorted array\n            sortedGroups = [...sortedGroups, ...selectedGroupsCopy];\n\n            return sortedGroups;\n        },\n\n        optionColumns() {\n            return [\n                {\n                    property: 'name',\n                    label: 'sw-product.variations.deliveryModal.mediaOptions',\n                    rawData: true,\n                },\n                {\n                    property: 'option.media',\n                    label: 'sw-product.variations.deliveryModal.media',\n                    rawData: true,\n                },\n            ];\n        },\n\n        activeOptions() {\n            return this.product.configuratorSettings.filter((element) => {\n                return !element.isDeleted && element.option.groupId === this.activeGroup.id;\n            });\n        },\n    },\n\n    watch: {\n        activeOptions() {\n            // TODO: Replace it with prop when the sw-data-grid allows to deactivate the compact mode\n            this.$nextTick().then(() => {\n                if (this.$refs.variantsMedia) {\n                    this.$refs.variantsMedia.compact = false;\n                }\n            });\n        },\n\n        activeGroup: {\n            handler() {\n                this.product.variantListingConfig.configuratorGroupConfig.find((group) => {\n                    return group.id === this.activeGroup.id;\n                });\n            },\n        },\n    },\n\n    methods: {\n        async onUploadsAdded({ data }) {\n            if (data.length === 0) {\n                return;\n            }\n\n            const uploadData = data[0];\n            const relatedOption = this.activeOptions.find((option) => option.id === uploadData.uploadTag);\n\n            this.isLoading = true;\n\n            data.forEach((upload) => {\n                relatedOption.mediaId = upload.targetId;\n            });\n\n            await this.mediaService.runUploads(uploadData.uploadTag);\n        },\n\n        async successfulUpload() {\n            this.isLoading = false;\n\n            this.$forceUpdate();\n        },\n\n        removeMedia(option) {\n            option.mediaId = null;\n        },\n\n        setMedia(selection, optionId) {\n            const relatedOption = this.activeOptions.find((option) => option.id === optionId);\n            relatedOption.mediaId = selection[0].id;\n        },\n\n        onChangeGroupListing(value) {\n            const existingIndex = this.product.variantListingConfig.configuratorGroupConfig\n                .findIndex((group) => group.id === this.activeGroup.id);\n\n            if (existingIndex >= 0) {\n                const existingConfig = this.product.variantListingConfig.configuratorGroupConfig[existingIndex];\n\n                this.product.variantListingConfig.configuratorGroupConfig[existingIndex] = {\n                    id: existingConfig.id,\n                    expressionForListings: value,\n                    representation: existingConfig.representation,\n                };\n            } else {\n                this.product.variantListingConfig.configuratorGroupConfig = [\n                    ...this.product.variantListingConfig.configuratorGroupConfig, {\n                        id: this.activeGroup.id,\n                        expressionForListings: value,\n                        representation: 'box',\n                    }];\n            }\n        },\n    },\n};\n","export default \"\\n{% block sw_product_variants_delivery_media %}\\n<div class=\\\"sw-product-variants-delivery-media\\\">\\n    \\n    {% block sw_product_variants_delivery_media_groups %}\\n    <div class=\\\"sw-product-variants-delivery-media__groups\\\">\\n        <ul>\\n            <li\\n                v-for=\\\"group in selectedGroupsSorted\\\"\\n                :key=\\\"group.id\\\"\\n                class=\\\"sw-product-variants-delivery-media__groupElement\\\"\\n                role=\\\"button\\\"\\n                tabindex=\\\"0\\\"\\n                :class=\\\"{'is--selected': activeGroup.id == group.id}\\\"\\n                @click=\\\"activeGroup = group\\\"\\n                @keydown.enter=\\\"activeGroup = group\\\"\\n            >\\n                <sw-icon\\n                    name=\\\"regular-folder\\\"\\n                    size=\\\"16px\\\"\\n                    multicolor\\n                />\\n                {{ group.translated.name }}\\n            </li>\\n        </ul>\\n    </div>\\n    {% endblock %}\\n\\n    \\n    {% block sw_product_variants_delivery_media_media %}\\n    <div\\n        v-if=\\\"activeOptions.length\\\"\\n        class=\\\"sw-product-variants-delivery-media__media\\\"\\n    >\\n        \\n        {% block sw_product_variants_delivery_media_data_grid %}\\n        <sw-data-grid\\n            ref=\\\"variantsMedia\\\"\\n            :data-source=\\\"activeOptions\\\"\\n            :columns=\\\"optionColumns\\\"\\n            :show-actions=\\\"false\\\"\\n            :show-selection=\\\"false\\\"\\n            :compact-mode=\\\"false\\\"\\n            full-page\\n        >\\n\\n            \\n            {% block sw_product_variants_delivery_media_data_grid_column_name %}\\n            <template\\n                #column-name=\\\"{ item, isInlineEdit, compact }\\\"\\n            >\\n                {{ item.option.translated.name }}\\n            </template>\\n            {% endblock %}\\n\\n            \\n            {% block sw_product_variants_delivery_media_data_grid_column_option_media %}\\n            <template #column-option.media=\\\"{ item, isInlineEdit, compact }\\\">\\n                \\n                {% block sw_product_variants_delivery_media_data_grid_column_option_media_listener %}\\n                <sw-upload-listener\\n                    :upload-tag=\\\"item.id\\\"\\n                    @media-upload-add=\\\"onUploadsAdded\\\"\\n                    @media-upload-finish=\\\"successfulUpload\\\"\\n                />\\n                {% endblock %}\\n\\n                \\n                {% block sw_product_variants_delivery_media_data_grid_column_option_media_upload %}\\n                <sw-media-compact-upload-v2\\n                    :source=\\\"item.mediaId\\\"\\n                    :upload-tag=\\\"item.id\\\"\\n                    :default-folder=\\\"product.getEntityName()\\\"\\n                    @media-upload-remove-image=\\\"removeMedia(item)\\\"\\n                    @selection-change=\\\"setMedia\\\"\\n                />\\n                {% endblock %}\\n            </template>\\n            {% endblock %}\\n\\n        </sw-data-grid>\\n        {% endblock %}\\n    </div>\\n    {% endblock %}\\n\\n    \\n    {% block sw_product_variants_delivery_media_loader %}\\n    <sw-loader v-if=\\\"isLoading\\\" />\\n    {% endblock %}\\n\\n</div>\\n{% endblock %}\\n\";"],"sourceRoot":""}