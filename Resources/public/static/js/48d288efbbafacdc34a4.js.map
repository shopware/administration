{"version":3,"sources":["webpack:///./src/module/sw-settings-rule/service/rule-assignment-configuration.service.js","webpack:///./src/module/sw-settings-rule/view/sw-settings-rule-detail-assignments/index.js","webpack:///./src/module/sw-settings-rule/view/sw-settings-rule-detail-assignments/sw-settings-rule-detail-assignments.html.twig","webpack:///./src/module/sw-settings-rule/view/sw-settings-rule-detail-assignments/sw-settings-rule-detail-assignments.scss"],"names":["Context","Shopware","Criteria","Data","createRuleAssignmentConfigService","ruleId","associationLimit","configuration","product","id","associationName","notAssignedDataTotal","allowAdd","entityName","label","criteria","addFilter","equals","addAssociation","api","_objectSpread","inheritance","detailRoute","gridColumns","property","rawData","sortable","routerLink","allowEdit","shipping_method_availability_rule","addContext","type","entity","column","searchColumn","not","shipping_method_prices","multi","tax_provider","payment_method","deleteContext","promotion_order_rule","association","promotion_customer_rule","promotion_cart_rule","promotion_discount_rule","promotion_group_rule","flow","width","getConfiguration","_Shopware","Mixin","Utils","template","inject","mixins","getByName","props","rule","Object","required","conditions","Array","default","detailPageLoading","Boolean","data","isLoading","ruleAssociationsLoaded","products","shippingMethods","paymentMethods","promotions","associationSteps","associationEntities","deleteModal","deleteEntity","deleteItem","addModal","addEntityContext","computed","getRuleAssignmentConfiguration","RuleAssignmentConfigurationService","this","associationEntitiesConfig","values","assetFilter","Filter","created","createdComponent","methods","prepareAssociationEntitiesList","loadAssociationData","disableAdd","_entity$associationNa","ruleConditionDataProviderService","isRuleRestricted","getTooltipConfig","_entity$associationNa2","getRestrictedRuleTooltipConfig","allowDeletion","_this","map","item","repository","repositoryFactory","create","loadedData","onOpenDeleteModal","onCloseDeleteModal","onOpenAddModal","entityContext","onCloseAddModal","onEntitiesSaved","refreshAssignmentData","onDeleteItems","selection","_this2","_asyncToGenerator","_regeneratorRuntime","mark","_callee2","wrap","_context2","prev","next","Promise","all","_ref","_callee","_context","doDeleteItem","stop","_x","apply","arguments","abrupt","then","onDelete","_this3","_this4","getEntityName","object","set","get","remove","save","finally","_this5","_callee3","result","total","_context3","search","sent","loadNotAssignedDataTotals","forEach","currentEntity","onFilterEntity","term","_this6","setPage","setTerm","_this7","_callee4","_context4","resolve","filters","notAssignedDataResult","getRouterLink","name","params","_this8","_ref2","_callee5","_context5","_x2","catch","createNotificationError","message","$tc","content","__esModule","module","i","locals","exports","add"],"mappings":"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","file":"static/js/48d288efbbafacdc34a4.js","sourcesContent":["const { Context } = Shopware;\nconst { Criteria } = Shopware.Data;\n\n/**\n * @module app/service/rule-assignment-configuration\n */\n\n/**\n * @private\n * @package services-settings\n * @memberOf module:core/service/rule-assignment-configuration\n * @constructor\n * @method createRuleAssignmentConfigService\n * @returns {Object}\n */\nexport default function createRuleAssignmentConfigService(ruleId, associationLimit) {\n    const configuration = {\n        product: {\n            id: 'product',\n            associationName: 'productPrices',\n            notAssignedDataTotal: 0,\n            allowAdd: false,\n            entityName: 'product',\n            label: 'sw-settings-rule.detail.associations.products',\n            criteria: () => {\n                const criteria = new Criteria(1, associationLimit);\n                criteria.addFilter(Criteria.equals('prices.rule.id', ruleId));\n                criteria.addAssociation('options.group');\n\n                return criteria;\n            },\n            api: () => {\n                const api = { ...Context.api };\n                api.inheritance = true;\n\n                return api;\n            },\n            detailRoute: 'sw.product.detail.prices',\n            gridColumns: [\n                {\n                    property: 'name',\n                    label: 'Name',\n                    rawData: true,\n                    sortable: true,\n                    routerLink: 'sw.product.detail.prices',\n                    allowEdit: false,\n                },\n            ],\n        },\n        shipping_method_availability_rule: {\n            id: 'shipping_method_availability_rule',\n            associationName: 'shippingMethods',\n            notAssignedDataTotal: 0,\n            allowAdd: true,\n            entityName: 'shipping_method',\n            label: 'sw-settings-rule.detail.associations.shippingMethodAvailabilityRule',\n            criteria: () => {\n                const criteria = new Criteria(1, associationLimit);\n                criteria.addFilter(Criteria.equals('availabilityRuleId', ruleId));\n\n                return criteria;\n            },\n            detailRoute: 'sw.settings.shipping.detail',\n            gridColumns: [\n                {\n                    property: 'name',\n                    label: 'Name',\n                    rawData: true,\n                    sortable: true,\n                    routerLink: 'sw.settings.shipping.detail',\n                    allowEdit: false,\n                },\n            ],\n            addContext: {\n                type: 'one-to-many',\n                entity: 'shipping_method',\n                column: 'availabilityRuleId',\n                searchColumn: 'name',\n                criteria: () => {\n                    const criteria = new Criteria(1, 25);\n                    criteria.addFilter(Criteria.not(\n                        'AND',\n                        [Criteria.equals('availabilityRuleId', ruleId)],\n                    ));\n\n                    return criteria;\n                },\n                gridColumns: [\n                    {\n                        property: 'name',\n                        label: 'Name',\n                        rawData: true,\n                        sortable: true,\n                        allowEdit: false,\n                    },\n                    {\n                        property: 'description',\n                        label: 'Description',\n                        rawData: true,\n                        sortable: true,\n                        allowEdit: false,\n                    },\n                    {\n                        property: 'taxType',\n                        label: 'Tax calculation',\n                        rawData: true,\n                        sortable: true,\n                        allowEdit: false,\n                    },\n                    {\n                        property: 'active',\n                        label: 'Active',\n                        rawData: true,\n                        sortable: true,\n                        allowEdit: false,\n                    },\n                ],\n            },\n        },\n        shipping_method_prices: {\n            id: 'shipping_method_prices',\n            associationName: 'shippingMethodPrices',\n            notAssignedDataTotal: 0,\n            allowAdd: false,\n            entityName: 'shipping_method',\n            label: 'sw-settings-rule.detail.associations.shippingMethodPrices',\n            criteria: () => {\n                const criteria = new Criteria(1, associationLimit);\n                criteria.addFilter(\n                    Criteria.multi(\n                        'OR',\n                        [\n                            Criteria.equals('prices.ruleId', ruleId),\n                            Criteria.equals('prices.calculationRuleId', ruleId),\n                        ],\n                    ),\n                );\n\n                return criteria;\n            },\n            detailRoute: 'sw.settings.shipping.detail',\n            gridColumns: [\n                {\n                    property: 'name',\n                    label: 'Name',\n                    rawData: true,\n                    sortable: true,\n                    routerLink: 'sw.settings.shipping.detail',\n                    allowEdit: false,\n                },\n            ],\n        },\n        tax_provider: {\n            id: 'tax_provider',\n            notAssignedDataTotal: 0,\n            allowAdd: true,\n            entityName: 'tax_provider',\n            label: 'sw-settings-rule.detail.associations.taxProviders',\n            criteria: () => {\n                const criteria = new Criteria(1, associationLimit);\n                criteria.addFilter(Criteria.equals('availabilityRuleId', ruleId));\n\n                return criteria;\n            },\n            detailRoute: 'sw.settings.tax.tax_provider.detail',\n            gridColumns: [\n                {\n                    property: 'name',\n                    label: 'Name',\n                    rawData: true,\n                    sortable: true,\n                    routerLink: 'sw.settings.tax.tax_provider.detail',\n                },\n                {\n                    property: 'active',\n                    label: 'Active',\n                    rawData: true,\n                    sortable: true,\n                    allowEdit: false,\n                },\n            ],\n            addContext: {\n                type: 'one-to-many',\n                entity: 'tax_provider',\n                column: 'availabilityRuleId',\n                searchColumn: 'name',\n                criteria: () => {\n                    const criteria = new Criteria(1, 25);\n                    criteria.addFilter(Criteria.not(\n                        'AND',\n                        [Criteria.equals('availabilityRuleId', ruleId)],\n                    ));\n\n                    return criteria;\n                },\n                gridColumns: [\n                    {\n                        property: 'name',\n                        label: 'Name',\n                        rawData: true,\n                        sortable: true,\n                        allowEdit: false,\n                    },\n                    {\n                        property: 'active',\n                        label: 'Active',\n                        rawData: true,\n                        sortable: true,\n                        allowEdit: false,\n                    },\n                ],\n            },\n        },\n        payment_method: {\n            id: 'payment_method',\n            associationName: 'paymentMethods',\n            notAssignedDataTotal: 0,\n            allowAdd: true,\n            entityName: 'payment_method',\n            label: 'sw-settings-rule.detail.associations.paymentMethods',\n            criteria: () => {\n                const criteria = new Criteria(1, associationLimit);\n                criteria.addFilter(Criteria.equals('availabilityRuleId', ruleId));\n\n                return criteria;\n            },\n            detailRoute: 'sw.settings.payment.detail',\n            gridColumns: [\n                {\n                    property: 'name',\n                    label: 'Name',\n                    rawData: true,\n                    sortable: true,\n                    routerLink: 'sw.settings.payment.detail',\n                    allowEdit: false,\n                },\n            ],\n            deleteContext: {\n                type: 'one-to-many',\n                entity: 'payment_method',\n                column: 'availabilityRuleId',\n            },\n            addContext: {\n                type: 'one-to-many',\n                entity: 'payment_method',\n                column: 'availabilityRuleId',\n                searchColumn: 'name',\n                criteria: () => {\n                    const criteria = new Criteria(1, 25);\n                    criteria.addFilter(Criteria.not(\n                        'AND',\n                        [Criteria.equals('availabilityRuleId', ruleId)],\n                    ));\n\n                    return criteria;\n                },\n                gridColumns: [\n                    {\n                        property: 'name',\n                        label: 'Name',\n                        rawData: true,\n                        sortable: true,\n                        allowEdit: false,\n                    },\n                    {\n                        property: 'extension',\n                        label: 'Extension',\n                        rawData: true,\n                        sortable: true,\n                        allowEdit: false,\n                    },\n                    {\n                        property: 'active',\n                        label: 'Active',\n                        rawData: true,\n                        sortable: true,\n                        allowEdit: false,\n                    },\n                    {\n                        property: 'position',\n                        label: 'Position',\n                        rawData: true,\n                        sortable: true,\n                        allowEdit: false,\n                    },\n                ],\n            },\n        },\n        promotion_order_rule: {\n            id: 'promotion_order_rule',\n            associationName: 'orderPromotions',\n            notAssignedDataTotal: 0,\n            allowAdd: true,\n            entityName: 'promotion',\n            label: 'sw-settings-rule.detail.associations.promotionOrderRules',\n            criteria: () => {\n                const criteria = new Criteria(1, associationLimit);\n                criteria.addFilter(Criteria.equals('orderRules.id', ruleId));\n                criteria.addAssociation('orderRules');\n\n                return criteria;\n            },\n            detailRoute: 'sw.promotion.v2.detail.conditions',\n            gridColumns: [\n                {\n                    property: 'name',\n                    label: 'Name',\n                    rawData: true,\n                    sortable: true,\n                    routerLink: 'sw.promotion.v2.detail.conditions',\n                },\n            ],\n            deleteContext: {\n                type: 'many-to-many',\n                entity: 'promotion',\n                column: 'orderRules',\n            },\n            addContext: {\n                type: 'many-to-many',\n                entity: 'promotion_order_rule',\n                column: 'promotionId',\n                searchColumn: 'name',\n                association: 'orderRules',\n                criteria: () => {\n                    const criteria = new Criteria(1, 25);\n                    criteria.addFilter(Criteria.not('AND', [Criteria.equals('orderRules.id', ruleId)]));\n\n                    return criteria;\n                },\n                gridColumns: [\n                    {\n                        property: 'name',\n                        label: 'Name',\n                        rawData: true,\n                        sortable: true,\n                        allowEdit: false,\n                    },\n                    {\n                        property: 'active',\n                        label: 'Active',\n                        rawData: true,\n                        sortable: true,\n                        allowEdit: false,\n                    },\n                    {\n                        property: 'validFrom',\n                        label: 'Valid from',\n                        rawData: true,\n                        sortable: true,\n                        allowEdit: false,\n                    },\n                    {\n                        property: 'validTo',\n                        label: 'Valid to',\n                        rawData: true,\n                        sortable: true,\n                        allowEdit: false,\n                    },\n                ],\n            },\n        },\n        promotion_customer_rule: {\n            id: 'promotion_customer_rule',\n            associationName: 'personaPromotions',\n            notAssignedDataTotal: 0,\n            allowAdd: true,\n            entityName: 'promotion',\n            label: 'sw-settings-rule.detail.associations.promotionCustomerRules',\n            criteria: () => {\n                const criteria = new Criteria(1, associationLimit);\n                criteria.addFilter(Criteria.equals('personaRules.id', ruleId));\n                criteria.addAssociation('personaRules');\n\n                return criteria;\n            },\n            detailRoute: 'sw.promotion.v2.detail.conditions',\n            gridColumns: [\n                {\n                    property: 'name',\n                    label: 'Name',\n                    rawData: true,\n                    sortable: true,\n                    routerLink: 'sw.promotion.v2.detail.conditions',\n                },\n            ],\n            deleteContext: {\n                type: 'many-to-many',\n                entity: 'promotion',\n                column: 'personaRules',\n            },\n            addContext: {\n                type: 'many-to-many',\n                entity: 'promotion_persona_rule',\n                column: 'promotionId',\n                searchColumn: 'name',\n                association: 'personaRules',\n                criteria: () => {\n                    const criteria = new Criteria(1, 25);\n                    criteria.addFilter(Criteria.not('AND', [Criteria.equals('personaRules.id', ruleId)]));\n\n                    return criteria;\n                },\n                gridColumns: [\n                    {\n                        property: 'name',\n                        label: 'Name',\n                        rawData: true,\n                        sortable: true,\n                        allowEdit: false,\n                    },\n                    {\n                        property: 'active',\n                        label: 'Active',\n                        rawData: true,\n                        sortable: true,\n                        allowEdit: false,\n                    },\n                    {\n                        property: 'validFrom',\n                        label: 'Valid from',\n                        rawData: true,\n                        sortable: true,\n                        allowEdit: false,\n                    },\n                    {\n                        property: 'validTo',\n                        label: 'Valid to',\n                        rawData: true,\n                        sortable: true,\n                        allowEdit: false,\n                    },\n                ],\n            },\n        },\n        promotion_cart_rule: {\n            id: 'promotion_cart_rule',\n            associationName: 'cartPromotions',\n            notAssignedDataTotal: 0,\n            allowAdd: true,\n            entityName: 'promotion',\n            label: 'sw-settings-rule.detail.associations.promotionCartRules',\n            criteria: () => {\n                const criteria = new Criteria(1, associationLimit);\n                criteria.addFilter(Criteria.equals('cartRules.id', ruleId));\n                criteria.addAssociation('cartRules');\n\n                return criteria;\n            },\n            detailRoute: 'sw.promotion.v2.detail.conditions',\n            gridColumns: [\n                {\n                    property: 'name',\n                    label: 'Name',\n                    rawData: true,\n                    sortable: true,\n                    routerLink: 'sw.promotion.v2.detail.conditions',\n                },\n            ],\n            deleteContext: {\n                type: 'many-to-many',\n                entity: 'promotion',\n                column: 'cartRules',\n            },\n            addContext: {\n                type: 'many-to-many',\n                entity: 'promotion_cart_rule',\n                column: 'promotionId',\n                searchColumn: 'name',\n                association: 'cartRules',\n                criteria: () => {\n                    const criteria = new Criteria(1, 25);\n                    criteria.addFilter(Criteria.not('AND', [Criteria.equals('cartRules.id', ruleId)]));\n\n                    return criteria;\n                },\n                gridColumns: [\n                    {\n                        property: 'name',\n                        label: 'Name',\n                        rawData: true,\n                        sortable: true,\n                        allowEdit: false,\n                    },\n                    {\n                        property: 'active',\n                        label: 'Active',\n                        rawData: true,\n                        sortable: true,\n                        allowEdit: false,\n                    },\n                    {\n                        property: 'validFrom',\n                        label: 'Valid from',\n                        rawData: true,\n                        sortable: true,\n                        allowEdit: false,\n                    },\n                    {\n                        property: 'validTo',\n                        label: 'Valid to',\n                        rawData: true,\n                        sortable: true,\n                        allowEdit: false,\n                    },\n                ],\n            },\n        },\n        promotion_discount_rule: {\n            id: 'promotion_discount_rule',\n            associationName: 'promotionDiscounts',\n            notAssignedDataTotal: 0,\n            allowAdd: false,\n            entityName: 'promotion',\n            label: 'sw-settings-rule.detail.associations.promotionDiscountRules',\n            criteria: () => {\n                const criteria = new Criteria(1, associationLimit);\n                criteria.addFilter(Criteria.equals('discounts.discountRules.id', ruleId));\n\n                return criteria;\n            },\n            detailRoute: 'sw.promotion.v2.detail.conditions',\n            gridColumns: [\n                {\n                    property: 'name',\n                    label: 'Name',\n                    rawData: true,\n                    sortable: true,\n                    routerLink: 'sw.promotion.v2.detail.conditions',\n                },\n            ],\n        },\n        promotion_group_rule: {\n            id: 'promotion_group_rule',\n            associationName: 'promotionSetGroups',\n            notAssignedDataTotal: 0,\n            allowAdd: false,\n            entityName: 'promotion',\n            label: 'sw-settings-rule.detail.associations.promotionGroupRules',\n            criteria: () => {\n                const criteria = new Criteria(1, associationLimit);\n                criteria.addFilter(Criteria.equals('setgroups.setGroupRules.id', ruleId));\n\n                return criteria;\n            },\n            detailRoute: 'sw.promotion.v2.detail.conditions',\n            gridColumns: [\n                {\n                    property: 'name',\n                    label: 'Name',\n                    rawData: true,\n                    sortable: true,\n                    routerLink: 'sw.promotion.v2.detail.conditions',\n                },\n            ],\n        },\n        flow: {\n            id: 'flow',\n            notAssignedDataTotal: 0,\n            allowAdd: false,\n            entityName: 'flow',\n            label: 'sw-settings-rule.detail.associations.flows',\n            criteria: () => {\n                const criteria = new Criteria(1, associationLimit);\n                criteria.addFilter(Criteria.equals('sequences.rule.id', ruleId));\n\n                return criteria;\n            },\n            detailRoute: 'sw.flow.detail',\n            gridColumns: [\n                {\n                    property: 'name',\n                    label: 'Flow',\n                    rawData: true,\n                    sortable: true,\n                    width: '50%',\n                    routerLink: 'sw.flow.detail',\n                },\n                {\n                    property: 'eventName',\n                    label: 'Trigger',\n                    rawData: true,\n                    sortable: true,\n                    width: '50%',\n                    routerLink: false,\n                },\n            ],\n        },\n    };\n\n    return {\n        getConfiguration,\n    };\n\n    function getConfiguration() {\n        return configuration;\n    }\n}\n","import RuleAssignmentConfigurationService from 'src/module/sw-settings-rule/service/rule-assignment-configuration.service';\nimport template from './sw-settings-rule-detail-assignments.html.twig';\nimport './sw-settings-rule-detail-assignments.scss';\n\nconst { Mixin, Context, Utils } = Shopware;\nconst { Criteria } = Shopware.Data;\n\n/**\n * @private\n * @package services-settings\n */\nexport default {\n    // eslint-disable-next-line max-len\n    template,\n\n    inject: [\n        'repositoryFactory',\n        'ruleConditionDataProviderService',\n        'feature',\n        'acl',\n    ],\n\n    mixins: [\n        Mixin.getByName('notification'),\n    ],\n\n    props: {\n        rule: {\n            type: Object,\n            required: true,\n        },\n\n        conditions: {\n            type: Array,\n            required: false,\n            default: null,\n        },\n\n        detailPageLoading: {\n            type: Boolean,\n            required: false,\n            default: false,\n        },\n    },\n\n    data() {\n        return {\n            associationLimit: 5,\n            isLoading: false,\n            ruleAssociationsLoaded: false,\n            products: null,\n            shippingMethods: null,\n            paymentMethods: null,\n            promotions: null,\n            associationSteps: [5, 10],\n            associationEntities: null,\n            deleteModal: false,\n            deleteEntity: null,\n            deleteItem: null,\n            addModal: false,\n            addEntityContext: null,\n        };\n    },\n\n    computed: {\n        getRuleAssignmentConfiguration() {\n            return RuleAssignmentConfigurationService(this.rule.id, this.associationLimit).getConfiguration();\n        },\n\n        /* eslint-disable max-len */\n        /**\n         * Definition of the associated entities of the current rule.\n         * The component will render a sw-entity-listing for each association entity,\n         * if results are given.\n         *\n         * @type {[{id: String, notAssignedDataTotal: int, entityName: String, label: String, criteria: Function, api: Function, detailRoute: String, gridColumns: Array<Object>, deleteContext: Object, addContext: Object }]}\n         * @returns {Array<Object>}\n         */\n        /* eslint-enable max-len */\n        associationEntitiesConfig() {\n            return Object.values(this.getRuleAssignmentConfiguration);\n        },\n\n        assetFilter() {\n            return Shopware.Filter.getByName('asset');\n        },\n    },\n\n    created() {\n        this.createdComponent();\n    },\n\n    methods: {\n        createdComponent() {\n            this.prepareAssociationEntitiesList();\n            this.loadAssociationData();\n        },\n\n        disableAdd(entity) {\n            const association = entity.associationName ?? null;\n            if (this.ruleConditionDataProviderService.isRuleRestricted(this.conditions, association)) {\n                return true;\n            }\n\n            return entity.notAssignedDataTotal === 0;\n        },\n\n        getTooltipConfig(entity) {\n            const association = entity.associationName ?? null;\n\n            return this.ruleConditionDataProviderService.getRestrictedRuleTooltipConfig(this.conditions, association);\n        },\n\n        allowDeletion(entity) {\n            return !!entity.deleteContext;\n        },\n\n        prepareAssociationEntitiesList() {\n            this.associationEntities = this.associationEntitiesConfig.map((item) => {\n                return {\n                    repository: this.repositoryFactory.create(item.entityName),\n                    loadedData: null,\n                    ...item,\n                };\n            });\n        },\n\n        onOpenDeleteModal(entity, item) {\n            this.deleteModal = true;\n            this.deleteEntity = entity;\n            this.deleteItem = item;\n        },\n\n        onCloseDeleteModal() {\n            this.deleteModal = false;\n            this.deleteContext = null;\n            this.deleteItem = null;\n        },\n\n        onOpenAddModal(entityContext) {\n            this.addModal = true;\n            this.addEntityContext = entityContext;\n        },\n\n        onCloseAddModal() {\n            this.addModal = false;\n            this.addEntityContext = null;\n        },\n\n        onEntitiesSaved() {\n            this.addModal = false;\n\n            return this.refreshAssignmentData(this.addEntityContext);\n        },\n\n        async onDeleteItems(entity, selection) {\n            await Promise.all(Object.values(selection).map(async (item) => {\n                this.deleteEntity = entity;\n                this.deleteItem = item;\n\n                await this.doDeleteItem();\n            }));\n\n            return this.refreshAssignmentData(entity).then(() => {\n                this.onCloseDeleteModal();\n            });\n        },\n\n        onDelete() {\n            return this.doDeleteItem().then(() => {\n                return this.refreshAssignmentData(this.deleteEntity).then(() => {\n                    this.onCloseDeleteModal();\n                });\n            });\n        },\n\n        doDeleteItem() {\n            const api = this.deleteEntity.api ? this.deleteEntity.api() : Context.api;\n            const repository = this.repositoryFactory.create(this.deleteItem.getEntityName());\n\n            if (this.deleteEntity.deleteContext.type === 'one-to-many') {\n                Utils.object.set(this.deleteItem, this.deleteEntity.deleteContext.column, null);\n            } else {\n                Utils.object.get(this.deleteItem, this.deleteEntity.deleteContext.column).remove(this.rule.id);\n            }\n\n            this.isLoading = true;\n            return repository.save(this.deleteItem, api).finally(() => {\n                this.isLoading = false;\n            });\n        },\n\n        async refreshAssignmentData(entity) {\n            this.isLoading = true;\n            const api = entity.api ? entity.api() : Context.api;\n            const result = await entity.repository.search(entity.criteria(), api);\n            const total = await this.loadNotAssignedDataTotals(entity, api);\n\n            this.associationEntities.forEach((currentEntity) => {\n                if (entity.id === currentEntity.id) {\n                    currentEntity.loadedData = result;\n                    currentEntity.notAssignedDataTotal = total;\n                }\n            });\n            this.isLoading = false;\n        },\n\n        onFilterEntity(item, term) {\n            const api = item.api ? item.api() : Context.api;\n            const criteria = item.criteria();\n\n            criteria.setPage(1);\n            criteria.setTerm(term);\n\n            this.isLoading = true;\n            return item.repository.search(criteria, api).then((result) => {\n                item.loadedData = result;\n            }).finally(() => {\n                this.isLoading = false;\n            });\n        },\n\n        async loadNotAssignedDataTotals(item, api) {\n            if (!item.deleteContext && !item.addContext) {\n                return Promise.resolve(true);\n            }\n\n            const criteria = new Criteria(1, 1);\n            criteria.addFilter(Criteria.not('AND', item.criteria().filters));\n\n            this.isLoading = true;\n            return item.repository.search(criteria, api).then((notAssignedDataResult) => {\n                return Promise.resolve(notAssignedDataResult.total);\n            }).finally(() => {\n                this.isLoading = false;\n            });\n        },\n\n        getRouterLink(entity, item) {\n            return { name: entity.detailRoute, params: { id: item.id } };\n        },\n\n        loadAssociationData() {\n            this.isLoading = true;\n\n            return Promise\n                .all(this.associationEntities.map((item) => {\n                    const api = item.api ? item.api() : Context.api;\n\n                    return item.repository.search(item.criteria(), api).then(async (result) => {\n                        item.loadedData = result;\n\n                        item.notAssignedDataTotal = await this.loadNotAssignedDataTotals(item, api);\n                    });\n                }))\n                .catch(() => {\n                    this.createNotificationError({\n                        message: this.$tc('sw-settings-rule.detail.associationsLoadingError'),\n                    });\n                })\n                .finally(() => {\n                    this.isLoading = false;\n                });\n        },\n    },\n};\n","export default \"\\n{% block sw_settings_rule_detail_assignments %}\\n<div class=\\\"sw-settings-rule-detail-assignments\\\">\\n\\n    \\n    {% block sw_settings_rule_detail_assignments_entity_cards %}\\n    <sw-card\\n        v-for=\\\"entity in associationEntities\\\"\\n        :key=\\\"entity.id\\\"\\n        class=\\\"sw-settings-rule-detail-assignments__card\\\"\\n        position-identifier=\\\"sw-settings-rule-detail-assignments-entity\\\"\\n        :class=\\\"`sw-settings-rule-detail-assignments__card-${entity.id}`\\\"\\n        :title=\\\"$tc(entity.label)\\\"\\n    >\\n        <template #toolbar>\\n            \\n            {% block sw_settings_rule_detail_assignments_toolbar %}\\n            <sw-card-filter\\n                placeholder=\\\"\\\"\\n                @sw-card-filter-term-change=\\\"onFilterEntity(entity, $event)\\\"\\n            >\\n                <template #filter>\\n                    \\n                    {% block sw_settings_rule_detail_assignments_add_button %}\\n                    <sw-button\\n                        v-if=\\\"entity.allowAdd\\\"\\n                        v-tooltip=\\\"getTooltipConfig(entity)\\\"\\n                        :disabled=\\\"disableAdd(entity) || !acl.can('rule.editor')\\\"\\n                        variant=\\\"ghost\\\"\\n                        size=\\\"small\\\"\\n                        class=\\\"sw-settings-rule-detail-assignments__add-button\\\"\\n                        @click=\\\"onOpenAddModal(entity)\\\"\\n                    >\\n                        {{ $tc('sw-settings-rule.detail.buttonAddAssignment') }}\\n                    </sw-button>\\n                    {% endblock %}\\n                </template>\\n            </sw-card-filter>\\n            {% endblock %}\\n        </template>\\n\\n        <template #grid>\\n            \\n            {% block sw_settings_rule_detail_assignments_entity_listing %}\\n            <sw-settings-rule-assignment-listing\\n                v-if=\\\"entity.loadedData && entity.loadedData.length > 0\\\"\\n                class=\\\"sw-settings-rule-detail-assignments__entity-listing\\\"\\n                :class=\\\"`sw-settings-rule-detail-assignments__entity-listing-${entity.id}`\\\"\\n                :is-loading=\\\"isLoading\\\"\\n                :detail-route=\\\"entity.detailRoute\\\"\\n                :items=\\\"entity.loadedData\\\"\\n                :repository=\\\"entity.repository\\\"\\n                :local-mode=\\\"false\\\"\\n                :criteria-limit=\\\"5\\\"\\n                :allow-delete=\\\"allowDeletion(entity) && acl.can('rule.editor')\\\"\\n                :allow-inline-edit=\\\"false\\\"\\n                :show-settings=\\\"false\\\"\\n                :show-selection=\\\"allowDeletion(entity) && acl.can('rule.editor')\\\"\\n                :allow-column-edit=\\\"false\\\"\\n                :steps=\\\"associationSteps\\\"\\n                :columns=\\\"entity.gridColumns\\\"\\n                :full-page=\\\"false\\\"\\n                @delete-items=\\\"onDeleteItems(entity, ...arguments)\\\"\\n            >\\n                <template #link-column=\\\"{ item, column, renderColumn }\\\">\\n                    <router-link\\n                        v-if=\\\"column.routerLink\\\"\\n                        :to=\\\"getRouterLink(entity, item)\\\"\\n                    >\\n                        <sw-product-variant-info\\n                            v-if=\\\"item.variation\\\"\\n                            :variations=\\\"item.variation\\\"\\n                        >\\n                            {{ renderColumn(item, column) }}\\n                        </sw-product-variant-info>\\n                        <span v-if=\\\"!item.variation\\\">\\n                            {{ renderColumn(item, column) }}\\n                        </span>\\n                    </router-link>\\n                    <span v-else>\\n                        <sw-product-variant-info\\n                            v-if=\\\"item.variation\\\"\\n                            :variations=\\\"item.variation\\\"\\n                        >\\n                            {{ renderColumn(item, column) }}\\n                        </sw-product-variant-info>\\n                        <span v-else>\\n                            {{ renderColumn(item, column) }}\\n                        </span>\\n                    </span>\\n                </template>\\n                <template #actions=\\\"{ item }\\\">\\n                    \\n                    {% block sw_settings_rule_detail_assignments_entity_listing_actions %}\\n                    \\n                    {% block sw_settings_rule_detail_assignments_entity_listing_view_action %}\\n                    <sw-context-menu-item :router-link=\\\"getRouterLink(entity, item)\\\">\\n                        {{ $tc('global.default.view') }}\\n                    </sw-context-menu-item>\\n                    {% endblock %}\\n                    \\n                    {% block sw_settings_rule_detail_assignments_entity_listing_delete_action %}\\n                    <sw-context-menu-item\\n                        v-if=\\\"entity.deleteContext && acl.can('rule.editor')\\\"\\n                        variant=\\\"danger\\\"\\n                        @click=\\\"onOpenDeleteModal(entity, item)\\\"\\n                    >\\n                        {{ $tc('global.default.remove') }}\\n                    </sw-context-menu-item>\\n                    {% endblock %}\\n                    {% endblock %}\\n                </template>\\n\\n                <template #bulk-modal-delete-confirm-text=\\\"{ selectionCount }\\\">\\n                    {{ $tc('sw-settings-rule.detail.textModalBulkDelete', selectionCount, { count: selectionCount }) }}\\n                </template>\\n\\n                <template #bulk-modal-delete-items=\\\"{ isBulkLoading, deleteItems }\\\">\\n                    <sw-button\\n                        variant=\\\"danger\\\"\\n                        size=\\\"small\\\"\\n                        :is-loading=\\\"isBulkLoading\\\"\\n                        @click=\\\"deleteItems\\\"\\n                    >\\n                        {{ $tc('global.default.remove') }}\\n                    </sw-button>\\n                </template>\\n            </sw-settings-rule-assignment-listing>\\n\\n            \\n            {% block sw_settings_rule_detail_assignments_empty_state %}\\n            <sw-empty-state\\n                v-else\\n                class=\\\"sw-settings-rule-detail-assignments__entity-empty-state\\\"\\n                :class=\\\"`sw-settings-rule-detail-assignments__entity-empty-state-${entity.id}`\\\"\\n                :title=\\\"$tc('sw-settings-rule.detail.hasNoAssociations')\\\"\\n                :absolute=\\\"false\\\"\\n                :show-description=\\\"false\\\"\\n            >\\n                <template #icon>\\n                    <img\\n                        :src=\\\"assetFilter('administration/static/img/empty-states/settings-empty-state.svg')\\\"\\n                        :alt=\\\"$tc('sw-settings-rule.detail.hasNoAssociations')\\\"\\n                    >\\n                </template>\\n            </sw-empty-state>\\n            {% endblock %}\\n            {% endblock %}\\n        </template>\\n    </sw-card>\\n    {% endblock %}\\n\\n    \\n    {% block sw_settings_rule_detail_assignments_delete_modal %}\\n    <sw-modal\\n        v-if=\\\"deleteModal\\\"\\n        :title=\\\"$tc('sw-settings-rule.detail.titleModalDelete')\\\"\\n        variant=\\\"small\\\"\\n        @modal-close=\\\"onCloseDeleteModal\\\"\\n    >\\n\\n        \\n        {% block sw_settings_rule_detail_assignments_delete_modal_text %}\\n        <p class=\\\"sw-settings-rule-detail-assignments__delete-text\\\">\\n            {{ $tc('sw-settings-rule.detail.textModalDelete') }}\\n        </p>\\n        {% endblock %}\\n\\n        \\n        {% block sw_settings_rule_detail_assignments_delete_modal_footer %}\\n        <template #modal-footer>\\n\\n            \\n            {% block sw_settings_rule_detail_assignments_delete_modal_cancel %}\\n            <sw-button\\n                size=\\\"small\\\"\\n                @click=\\\"onCloseDeleteModal\\\"\\n            >\\n                {{ $tc('global.default.cancel') }}\\n            </sw-button>\\n            {% endblock %}\\n\\n            \\n            {% block sw_settings_rule_detail_assignments_delete_modal_confirm %}\\n            \\n            {% block sw_settings_rule_detail_assignments_delete_modal_confirm_single %}\\n            <sw-button\\n                size=\\\"small\\\"\\n                variant=\\\"danger\\\"\\n                @click=\\\"onDelete\\\"\\n            >\\n                {{ $tc('global.default.remove') }}\\n            </sw-button>\\n            {% endblock %}\\n            {% endblock %}\\n        </template>\\n        {% endblock %}\\n    </sw-modal>\\n    {% endblock %}\\n\\n    \\n    {% block sw_settings_rule_detail_assignments_add_modal %}\\n    <sw-settings-rule-add-assignment-modal\\n        v-if=\\\"addModal\\\"\\n        :rule=\\\"rule\\\"\\n        :entity-context=\\\"addEntityContext\\\"\\n        @entities-saved=\\\"onEntitiesSaved\\\"\\n        @close-add-modal=\\\"onCloseAddModal\\\"\\n    />\\n    {% endblock %}\\n</div>\\n{% endblock %}\\n\";","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../../../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--15-1!../../../../../node_modules/css-loader/dist/cjs.js??ref--15-2!../../../../../node_modules/sass-loader/dist/cjs.js??ref--15-3!./sw-settings-rule-detail-assignments.scss\");\nif(content.__esModule) content = content.default;\nif(typeof content === 'string') content = [[module.id, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar add = require(\"!../../../../../node_modules/vue-style-loader/lib/addStylesClient.js\").default\nvar update = add(\"5b950941\", content, true, {});"],"sourceRoot":""}