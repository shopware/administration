{"version":3,"sources":["webpack:///./src/module/sw-product-stream/component/sw-product-stream-field-select/index.js","webpack:///./src/module/sw-product-stream/component/sw-product-stream-field-select/sw-product-stream-field-select.html.twig","webpack:///./src/module/sw-product-stream/component/sw-product-stream-field-select/sw-product-stream-field-select.scss"],"names":["template","inject","props","definition","type","Object","required","field","String","default","index","Number","disabled","Boolean","hasError","computed","options","_this","entityFields","keys","this","properties","map","property","conditionDataProviderService","isPropertyInAllowList","entity","label","getPropertyTranslation","value","filter","option","values","allowedJsonAccessors","forEach","push","trans","productCustomFields","customField","arrowPrimaryColor","watch","immediate","handler","length","changeField","methods","$emit","translationKey","concat","translated","$tc","content","__esModule","module","i","locals","exports","add"],"mappings":"6JAUe,WACXA,SCXW,wpBDaXC,OAAQ,CACJ,+BACA,uBAGJC,MAAO,CACHC,WAAY,CACRC,KAAMC,OACNC,UAAU,GAGdC,MAAO,CACHH,KAAMI,OACNF,UAAU,EACVG,QAAS,MAGbC,MAAO,CACHN,KAAMO,OACNL,UAAU,GAGdM,SAAU,CACNR,KAAMS,QACNP,UAAU,EACVG,SAAS,GAGbK,SAAU,CACNV,KAAMS,QACNP,UAAU,EACVG,SAAS,IAIjBM,SAAU,CACNC,QAAO,WAAI,IAADC,EAAA,KACAC,EAAeb,OAAOc,KAAKC,KAAKjB,WAAWkB,YAAYC,KAAI,SAACC,GAC9D,OAAKN,EAAKO,6BAA6BC,sBAAsBR,EAAKd,WAAWuB,OAAQH,GAIpE,OAAbA,EACO,CACHI,MAAOV,EAAKW,uBAAuBX,EAAKd,WAAWuB,QACnDG,MAAON,GAIR,CACHI,MAAOV,EAAKW,uBAAuBL,GACnCM,MAAON,GAZA,QAcZO,QAAO,SAACC,GAAM,OAAgB,OAAXA,KAetB,MAb+B,YAA3BX,KAAKjB,WAAWuB,SAChBrB,OAAO2B,OAAOZ,KAAKI,6BAA6BS,sBAAsBC,SAAQ,SAAC3B,GAC3EW,EAAaiB,KAAK,CACdR,MAAOV,EAAKW,uBAAuBrB,EAAM6B,OACzCP,MAAOtB,EAAMsB,WAIrBxB,OAAOc,KAAKC,KAAKiB,qBAAqBH,SAAQ,SAACI,GAC3CpB,EAAaiB,KAAKlB,EAAKoB,oBAAoBC,QAI5CpB,GAGXqB,kBAAiB,WACb,OAAInB,KAAKN,SACE,UAGJ,YAIf0B,MAAO,CACH,oBAAqB,CACjBC,WAAW,EACXC,QAAO,SAACb,GAEEA,GAAiC,IAAxBT,KAAKJ,QAAQ2B,SAAiBvB,KAAKb,OAC9Ca,KAAKwB,YAAYxB,KAAKJ,QAAQ,GAAGa,SAK7CtB,MAAO,CACHmC,QAAO,SAACb,GAEET,KAAKjB,WAAWuB,QAAkC,IAAxBN,KAAKJ,QAAQ2B,SAAiBd,GAC1DT,KAAKwB,YAAYxB,KAAKJ,QAAQ,GAAGa,UAMjDgB,QAAS,CACLD,YAAW,SAACf,GACRT,KAAK0B,MAAM,gBAAiB,CAAEvC,MAAOsB,EAAOnB,MAAOU,KAAKV,SAG5DkB,uBAAsB,SAACL,GACnB,IAAMwB,EAAc,mCAAAC,OAAsCzB,GACpD0B,EAAa7B,KAAK8B,IAAIH,GAE5B,OAAOE,IAAeF,EAAiBxB,EAAW0B,M,qBExH9D,IAAIE,EAAU,EAAQ,QACnBA,EAAQC,aAAYD,EAAUA,EAAQ1C,SACnB,iBAAZ0C,IAAsBA,EAAU,CAAC,CAACE,EAAOC,EAAIH,EAAS,MAC7DA,EAAQI,SAAQF,EAAOG,QAAUL,EAAQI,SAG/BE,EADH,EAAQ,QAAwEhD,SACzE,WAAY0C,GAAS,EAAM","file":"static/js/6f9719ed9ccff906e74d.js","sourcesContent":["/*\n * @package business-ops\n */\n\nimport template from './sw-product-stream-field-select.html.twig';\nimport './sw-product-stream-field-select.scss';\n\n/**\n * @private\n */\nexport default {\n    template,\n\n    inject: [\n        'conditionDataProviderService',\n        'productCustomFields',\n    ],\n\n    props: {\n        definition: {\n            type: Object,\n            required: true,\n        },\n\n        field: {\n            type: String,\n            required: false,\n            default: null,\n        },\n\n        index: {\n            type: Number,\n            required: true,\n        },\n\n        disabled: {\n            type: Boolean,\n            required: false,\n            default: false,\n        },\n\n        hasError: {\n            type: Boolean,\n            required: false,\n            default: false,\n        },\n    },\n\n    computed: {\n        options() {\n            const entityFields = Object.keys(this.definition.properties).map((property) => {\n                if (!this.conditionDataProviderService.isPropertyInAllowList(this.definition.entity, property)) {\n                    return null;\n                }\n\n                if (property === 'id') {\n                    return {\n                        label: this.getPropertyTranslation(this.definition.entity),\n                        value: property,\n                    };\n                }\n\n                return {\n                    label: this.getPropertyTranslation(property),\n                    value: property,\n                };\n            }).filter((option) => option !== null);\n\n            if (this.definition.entity === 'product') {\n                Object.values(this.conditionDataProviderService.allowedJsonAccessors).forEach((field) => {\n                    entityFields.push({\n                        label: this.getPropertyTranslation(field.trans),\n                        value: field.value,\n                    });\n                });\n\n                Object.keys(this.productCustomFields).forEach((customField) => {\n                    entityFields.push(this.productCustomFields[customField]);\n                });\n            }\n\n            return entityFields;\n        },\n\n        arrowPrimaryColor() {\n            if (this.hasError) {\n                return '#de294c';\n            }\n\n            return '#758ca3';\n        },\n    },\n\n    watch: {\n        'definition.entity': {\n            immediate: true,\n            handler(value) {\n                // emit change when there is only one selectable option\n                if (!!value && this.options.length === 1 && !this.field) {\n                    this.changeField(this.options[0].value);\n                }\n            },\n        },\n\n        field: {\n            handler(value) {\n                // emit change when there is only one selectable option\n                if (!!this.definition.entity && this.options.length === 1 && !value) {\n                    this.changeField(this.options[0].value);\n                }\n            },\n        },\n    },\n\n    methods: {\n        changeField(value) {\n            this.$emit('field-changed', { field: value, index: this.index });\n        },\n\n        getPropertyTranslation(property) {\n            const translationKey = `sw-product-stream.filter.values.${property}`;\n            const translated = this.$tc(translationKey);\n\n            return translated === translationKey ? property : translated;\n        },\n    },\n};\n","export default \"\\n{% block sw_condition_base_field_condition %}\\n<sw-arrow-field\\n    v-if=\\\"options.length > 1\\\"\\n    class=\\\"sw-product-stream-field-select\\\"\\n    :class=\\\"{ 'has--error': hasError }\\\"\\n    :primary=\\\"arrowPrimaryColor\\\"\\n    secondary=\\\"#ffffff\\\"\\n>\\n    <sw-single-select\\n        size=\\\"medium\\\"\\n        :options=\\\"options\\\"\\n        :value=\\\"field\\\"\\n        :placeholder=\\\"$tc('sw-product-stream.filter.placeholderFieldSelect')\\\"\\n        :disabled=\\\"disabled\\\"\\n        show-clearable-button\\n        {% if VUE3 %}\\n        @update:value=\\\"changeField\\\"\\n        {% else %}\\n        @change=\\\"changeField\\\"\\n        {% endif %}\\n    />\\n</sw-arrow-field>\\n{% endblock %}\\n\";","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../../../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--15-1!../../../../../node_modules/css-loader/dist/cjs.js??ref--15-2!../../../../../node_modules/sass-loader/dist/cjs.js??ref--15-3!./sw-product-stream-field-select.scss\");\nif(content.__esModule) content = content.default;\nif(typeof content === 'string') content = [[module.id, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar add = require(\"!../../../../../node_modules/vue-style-loader/lib/addStylesClient.js\").default\nvar update = add(\"2497ba9c\", content, true, {});"],"sourceRoot":""}