{"version":3,"sources":["webpack:///./src/module/sw-sales-channel/view/sw-sales-channel-detail-products/index.js","webpack:///./src/module/sw-sales-channel/view/sw-sales-channel-detail-products/sw-sales-channel-detail-products.html.twig","webpack:///./src/module/sw-sales-channel/view/sw-sales-channel-detail-products/sw-sales-channel-detail-products.scss"],"names":["_Shopware","Shopware","Mixin","Context","_Shopware$Data","Data","EntityCollection","Criteria","template","inject","mixins","getByName","props","salesChannel","type","Object","required","default","data","products","isLoading","searchTerm","page","limit","total","showProductsModal","isAssignProductLoading","computed","productRepository","this","repositoryFactory","create","productVisibilityRepository","productCriteria","criteria","setTotalCountMode","addAssociation","addFilter","equals","id","setTerm","productColumns","property","label","$tc","allowResize","primary","align","assetFilter","Filter","watch","deep","immediate","handler","newValue","oldValue","getProducts","methods","_this$salesChannel","_this","Promise","reject","context","_objectSpread","api","inheritance","search","then","length","catch","finally","onDeleteProduct","product","_this2","deleteId","getDeleteId","delete","$refs","entityListing","resetSelection","error","_error$response","_error$response$data","response","errors","showNotificationError","createNotificationError","message","onDeleteProducts","_this3","deleteIds","values","selection","map","syncDeleted","_error$response2","_error$response2$data","_error$response2$data2","_error$response2$data3","product_visibility","result","_this4","visibilities","find","visibility","salesChannelId","_this5","forEach","concat","code","detail","onChangePage","_this6","sortings","_ref","field","naturalSorting","order","addSorting","sort","onChangeSearchTerm","openAddProductsModal","onAddProducts","_this7","route","entityName","el","_this7$products","has","assign","productId","add","saveProductVisibilities","resolve","saveAll","isProductRemovable","_this8","relevantVisibility","parentId","content","__esModule","module","i","locals","exports"],"mappings":"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","file":"static/js/eb0b138d34ba1cf47773.js","sourcesContent":["/**\n * @package buyers-experience\n */\n\nimport template from './sw-sales-channel-detail-products.html.twig';\nimport './sw-sales-channel-detail-products.scss';\n\nconst { Mixin, Context } = Shopware;\nconst { EntityCollection, Criteria } = Shopware.Data;\n\n// eslint-disable-next-line sw-deprecation-rules/private-feature-declarations\nexport default {\n    template,\n\n    inject: ['repositoryFactory', 'feature', 'acl'],\n\n    mixins: [\n        Mixin.getByName('notification'),\n    ],\n\n    props: {\n        salesChannel: {\n            type: Object,\n            required: false,\n            default: () => {},\n        },\n    },\n\n    data() {\n        return {\n            products: [],\n            isLoading: false,\n            searchTerm: null,\n            page: 1,\n            limit: 25,\n            total: 0,\n            showProductsModal: false,\n            isAssignProductLoading: false,\n        };\n    },\n\n    computed: {\n        productRepository() {\n            return this.repositoryFactory.create('product');\n        },\n\n        productVisibilityRepository() {\n            return this.repositoryFactory.create('product_visibility');\n        },\n\n        productCriteria() {\n            const criteria = new Criteria(this.page, this.limit);\n\n            criteria.setTotalCountMode(1);\n\n            criteria.addAssociation('visibilities.salesChannel');\n            criteria.addAssociation('options.group');\n            criteria.addFilter(\n                Criteria.equals('product.visibilities.salesChannelId', this.salesChannel.id),\n            );\n\n            if (this.searchTerm) {\n                criteria.setTerm(this.searchTerm);\n            }\n\n            return criteria;\n        },\n\n        productColumns() {\n            return [\n                {\n                    property: 'name',\n                    label: this.$tc('sw-sales-channel.detail.products.columnProductName'),\n                    allowResize: true,\n                    primary: true,\n                },\n                {\n                    property: 'active',\n                    label: this.$tc('sw-sales-channel.detail.products.columnActive'),\n                    allowResize: true,\n                    align: 'center',\n                },\n                {\n                    property: 'productNumber',\n                    label: this.$tc('sw-sales-channel.detail.products.columnProductNumber'),\n                    allowResize: true,\n                },\n            ];\n        },\n\n        assetFilter() {\n            return Shopware.Filter.getByName('asset');\n        },\n    },\n\n    watch: {\n        salesChannel: {\n            deep: true,\n            immediate: true,\n            handler(newValue, oldValue) {\n                if (!newValue || oldValue?.id === newValue.id) {\n                    return;\n                }\n\n                this.getProducts();\n            },\n        },\n    },\n\n    methods: {\n        getProducts() {\n            if (!this.salesChannel?.id) {\n                return Promise.reject();\n            }\n\n            const context = { ...Context.api };\n            context.inheritance = true;\n\n            this.isLoading = true;\n            return this.productRepository.search(this.productCriteria, context)\n                .then((products) => {\n                    this.products = products;\n                    this.total = products.total;\n\n                    if (this.total > 0 && this.products.length <= 0) {\n                        this.page = (this.page === 1) ? 1 : this.page - 1;\n                        this.getProducts();\n                    }\n                })\n                .catch(() => {\n                    this.products = [];\n                })\n                .finally(() => {\n                    this.isLoading = false;\n                });\n        },\n\n        onDeleteProduct(product) {\n            const deleteId = this.getDeleteId(product);\n\n            return this.productVisibilityRepository.delete(deleteId, Context.api)\n                .then(() => {\n                    this.getProducts();\n\n                    this.$refs.entityListing.resetSelection();\n                })\n                .catch((error) => {\n                    if (error?.response?.data?.errors) {\n                        this.showNotificationError(error.response.data.errors);\n\n                        return;\n                    }\n\n                    this.createNotificationError({\n                        message: error.message,\n                    });\n                });\n        },\n\n        onDeleteProducts() {\n            const deleteIds = Object.values(this.$refs.entityListing.selection).map((product) => {\n                return this.getDeleteId(product);\n            });\n\n            this.isLoading = true;\n            return this.productVisibilityRepository.syncDeleted(deleteIds, Context.api)\n                .then(() => {\n                    this.isLoading = false;\n                    this.getProducts();\n\n                    this.$refs.entityListing.resetSelection();\n                })\n                .catch((error) => {\n                    this.isLoading = false;\n\n                    if (error?.response?.data?.data?.product_visibility?.result) {\n                        this.showNotificationError(error.response.data.data.product_visibility.result);\n\n                        return;\n                    }\n\n                    this.createNotificationError({\n                        message: error.message,\n                    });\n                });\n        },\n\n        getDeleteId(product) {\n            return product.visibilities.find((visibility) => {\n                return visibility.salesChannelId === this.salesChannel.id;\n            }).id;\n        },\n\n        showNotificationError(errors) {\n            errors.forEach((error) => {\n                if (error.errors) {\n                    this.showNotificationError(error.errors);\n                } else {\n                    this.createNotificationError({\n                        message: `${error.code}: ${error.detail}`,\n                    });\n                }\n            });\n        },\n\n        onChangePage(data) {\n            this.page = data.page;\n            this.limit = data.limit;\n            this.products.criteria.sortings.forEach(({ field, naturalSorting, order }) => {\n                this.productCriteria.addSorting(\n                    Criteria.sort(field, order, naturalSorting),\n                );\n            });\n\n            this.getProducts();\n        },\n\n        onChangeSearchTerm(searchTerm) {\n            this.searchTerm = searchTerm;\n\n            if (searchTerm) {\n                this.page = 1;\n            }\n\n            this.getProducts();\n        },\n\n        openAddProductsModal() {\n            this.showProductsModal = true;\n        },\n\n        onAddProducts(products) {\n            if (products.length <= 0) {\n                this.showProductsModal = false;\n                return Promise.reject();\n            }\n\n            const visibilities = new EntityCollection(\n                this.productVisibilityRepository.route,\n                this.productVisibilityRepository.entityName,\n                Context.api,\n            );\n\n            products.forEach(el => {\n                if (this.products?.has(el.id)) {\n                    return;\n                }\n\n                const visibility = this.productVisibilityRepository.create(Context.api);\n                Object.assign(visibility, {\n                    visibility: 30,\n                    productId: el.id,\n                    salesChannelId: this.salesChannel.id,\n                    salesChannel: this.salesChannel,\n                });\n\n                visibilities.add(visibility);\n            });\n\n            this.isAssignProductLoading = true;\n\n            return this.saveProductVisibilities(visibilities)\n                .then(() => {\n                    this.getProducts();\n                })\n                .catch((error) => {\n                    this.createNotificationError({\n                        message: error,\n                    });\n                })\n                .finally(() => {\n                    this.showProductsModal = false;\n                    this.isAssignProductLoading = false;\n                });\n        },\n\n        saveProductVisibilities(data) {\n            if (data.length <= 0) {\n                return Promise.resolve();\n            }\n\n            return this.productVisibilityRepository.saveAll(data, Context.api);\n        },\n\n        isProductRemovable(product) {\n            const relevantVisibility = product.visibilities.find(\n                visibility => visibility.salesChannelId === this.salesChannel.id,\n            );\n\n            return product.parentId !== relevantVisibility.productId;\n        },\n    },\n};\n","export default \"\\n{% block sw_sales_channel_detail_products %}\\n<sw-card\\n    v-if=\\\"salesChannel && products\\\"\\n    position-identifier=\\\"sw-sales-channel-detail-products\\\"\\n    class=\\\"sw-sales-channel-detail-products\\\"\\n    :is-loading=\\\"isLoading\\\"\\n>\\n    \\n    {% block sw_sales_channel_detail_products_filled_state %}\\n    <template\\n        v-if=\\\"products.length > 0 || searchTerm\\\"\\n        #grid\\n    >\\n        \\n        {% block sw_sales_channel_detail_products_card_section %}\\n        <sw-container rows=\\\"auto 500px\\\">\\n            \\n            {% block sw_sales_channel_detail_products_card_section_secondary %}\\n            <sw-card-section secondary>\\n                <sw-container\\n                    columns=\\\"1fr auto\\\"\\n                    gap=\\\"0 15px\\\"\\n                >\\n                    \\n                    {% block sw_sales_channel_detail_products_card_section_secondary_input %}\\n                    <sw-simple-search-field\\n                        v-model=\\\"searchTerm\\\"\\n                        variant=\\\"form\\\"\\n                        size=\\\"small\\\"\\n                        @search-term-change=\\\"onChangeSearchTerm\\\"\\n                    />\\n                    {% endblock %}\\n\\n                    \\n                    {% block sw_sales_channel_detail_products_card_section_secondary_button %}\\n                    <sw-button\\n                        v-tooltip=\\\"{\\n                            message: $tc('sw-privileges.tooltip.warning'),\\n                            disabled: acl.can('sales_channel.editor'),\\n                            showOnDisabledElements: true\\n                        }\\\"\\n                        variant=\\\"ghost\\\"\\n                        size=\\\"small\\\"\\n                        :disabled=\\\"!acl.can('sales_channel.editor')\\\"\\n                        @click=\\\"openAddProductsModal\\\"\\n                    >\\n                        {{ $tc('sw-sales-channel.detail.products.buttonAddProducts', 0) }}\\n                    </sw-button>\\n                    {% endblock %}\\n                </sw-container>\\n            </sw-card-section>\\n            {% endblock %}\\n\\n            \\n            {% block sw_sales_channel_detail_products_card_section_primary %}\\n            <sw-card-section divider=\\\"top\\\">\\n                \\n                {% block sw_sales_channel_detail_products_card_section_primary_filled_state %}\\n                <sw-entity-listing\\n                    v-if=\\\"products.length > 0\\\"\\n                    ref=\\\"entityListing\\\"\\n                    class=\\\"sw-sales-channel-detail-products__list\\\"\\n                    identifier=\\\"sw-sales-channel-detail-products-list\\\"\\n                    detail-route=\\\"sw.product.detail\\\"\\n                    :repository=\\\"productRepository\\\"\\n                    :items=\\\"products\\\"\\n                    :data-source=\\\"products\\\"\\n                    :columns=\\\"productColumns\\\"\\n                    :plain-appearance=\\\"true\\\"\\n                    :skeleton-item-amount=\\\"limit\\\"\\n                    :is-loading=\\\"isLoading\\\"\\n                    :allow-inline-edit=\\\"false\\\"\\n                    :allow-view=\\\"acl.can('sales_channel.viewer')\\\"\\n                    :allow-edit=\\\"acl.can('product.editor')\\\"\\n                    :allow-delete=\\\"acl.can('sales_channel.deleter')\\\"\\n                    :is-record-selectable=\\\"isProductRemovable\\\"\\n                >\\n                    <template #selection-content=\\\"{ item, isSelected, isRecordSelectable, selectItem, itemIdentifierProperty }\\\">\\n                        <slot v-bind=\\\"{ item, isSelected, isRecordSelectable, selectItem, itemIdentifierProperty }\\\">\\n                            <div class=\\\"sw-data-grid__cell-content\\\">\\n                                \\n                                {% block sw_sales_channel_detail_products_listing_select_item_checkbox %}\\n                                <sw-checkbox-field\\n                                    v-tooltip=\\\"{\\n                                        message: $tc('sw-sales-channel.detail.products.inheritVariantNotRemovableTooltip'),\\n                                        disabled: isRecordSelectable(item),\\n                                        showOnDisabledElements: true\\n                                    }\\\"\\n                                    :disabled=\\\"!isRecordSelectable(item)\\\"\\n                                    :value=\\\"isSelected(item[itemIdentifierProperty])\\\"\\n                                    {% if VUE3 %}\\n                                    @update:value=\\\"selectItem($event, item)\\\"\\n                                    {% else %}\\n                                    @change=\\\"selectItem($event, item)\\\"\\n                                    {% endif %}\\n                                />\\n                                {% endblock %}\\n                            </div>\\n                        </slot>\\n                    </template>\\n                    <template #column-name=\\\"{ item }\\\">\\n                        <slot v-bind=\\\"{ item }\\\">\\n                            \\n                            {% block sw_sales_channel_detail_products_listing_column_name %}\\n                            <sw-product-variant-info\\n                                :variations=\\\"item.variation\\\"\\n                            >\\n                                <router-link :to=\\\"{ name: 'sw.product.detail', params: { id: item.id } }\\\">\\n                                    {{ item.translated.name || item.name }}\\n                                </router-link>\\n                            </sw-product-variant-info>\\n                            {% endblock %}\\n                        </slot>\\n                    </template>\\n\\n                    <template #column-active=\\\"{ item }\\\">\\n                        \\n                        {% block sw_sales_channel_detail_products_listing_column_active %}\\n                        <sw-icon\\n                            small\\n                            :name=\\\"item.active === false ? 'regular-times-s' : 'regular-checkmark-xs'\\\"\\n                            :color=\\\"item.active === false ? '#de294c' : '#37d046'\\\"\\n                        />\\n                        {% endblock %}\\n                    </template>\\n\\n                    <template #pagination>\\n                        \\n                        {% block sw_sales_channel_detail_products_listing_pagination %}\\n                        <sw-pagination\\n                            v-bind=\\\"{ page, limit, total }\\\"\\n                            :total-visible=\\\"5\\\"\\n                            :auto-hide=\\\"false\\\"\\n                            @page-change=\\\"onChangePage\\\"\\n                        />\\n                        {% endblock %}\\n                    </template>\\n\\n                    <template #delete-action=\\\"{ item }\\\">\\n                        \\n                        {% block sw_sales_channel_detail_products_listing_delete_action %}\\n                        <sw-context-menu-item\\n                            variant=\\\"warning\\\"\\n                            :disabled=\\\"!isProductRemovable(item)\\\"\\n                            @click=\\\"onDeleteProduct(item)\\\"\\n                        >\\n                            {{ $tc('global.default.remove') }}\\n                        </sw-context-menu-item>\\n                        {% endblock %}\\n                    </template>\\n\\n                    <template #bulk>\\n                        \\n                        {% block sw_sales_channel_detail_products_listing_bulk %}\\n                        <a\\n                            class=\\\"link link-warning\\\"\\n                            role=\\\"button\\\"\\n                            tabindex=\\\"0\\\"\\n                            @click=\\\"onDeleteProducts\\\"\\n                            @keydown.enter=\\\"onDeleteProducts\\\"\\n                        >\\n                            {{ $tc('global.default.remove') }}\\n                        </a>\\n                        {% endblock %}\\n                    </template>\\n                </sw-entity-listing>\\n                {% endblock %}\\n\\n                \\n                {% block sw_sales_channel_detail_products_card_section_primary_empty_state %}\\n                <sw-empty-state\\n                    v-else\\n                    :show-description=\\\"false\\\"\\n                    :title=\\\"$tc('sw-sales-channel.detail.products.titleEmptyStateTable')\\\"\\n                >\\n                    <template #icon>\\n                        \\n                        {% block sw_sales_channel_detail_products_card_section_primary_image %}\\n                        <img\\n                            :src=\\\"assetFilter('/administration/static/img/empty-states/products-empty-state.svg')\\\"\\n                            :alt=\\\"$tc('sw-sales-channel.detail.products.titleEmptyStateTable')\\\"\\n                        >\\n                        {% endblock %}\\n                    </template>\\n                </sw-empty-state>\\n                {% endblock %}\\n            </sw-card-section>\\n            {% endblock %}\\n        </sw-container>\\n        {% endblock %}\\n    </template>\\n    {% endblock %}\\n\\n    \\n    {% block sw_sales_channel_detail_products_empty_state %}\\n    <sw-empty-state\\n        v-if=\\\"products.length <= 0 && !searchTerm && !isLoading\\\"\\n        :show-description=\\\"false\\\"\\n        {% if VUE3 %}\\n        :absolute=\\\"false\\\"\\n        {% endif %}\\n        :title=\\\"$tc('sw-sales-channel.detail.products.titleEmptyState')\\\"\\n    >\\n        <template #icon>\\n            \\n            {% block sw_sales_channel_detail_products_empty_state_image %}\\n            <img\\n                :src=\\\"assetFilter('/administration/static/img/empty-states/products-empty-state.svg')\\\"\\n                :alt=\\\"$tc('sw-sales-channel.detail.products.titleEmptyState')\\\"\\n            >\\n            {% endblock %}\\n        </template>\\n\\n        <template #actions>\\n            \\n            {% block sw_sales_channel_detail_products_empty_state_button %}\\n            <sw-button\\n                v-tooltip=\\\"{\\n                    message: $tc('sw-privileges.tooltip.warning'),\\n                    disabled: acl.can('sales_channel.editor'),\\n                    showOnDisabledElements: true\\n                }\\\"\\n                variant=\\\"ghost\\\"\\n                :disabled=\\\"!acl.can('sales_channel.editor')\\\"\\n                @click=\\\"openAddProductsModal\\\"\\n            >\\n                {{ $tc('sw-sales-channel.detail.products.buttonAddProducts', 0) }}\\n            </sw-button>\\n            {% endblock %}\\n        </template>\\n    </sw-empty-state>\\n    {% endblock %}\\n\\n    \\n    {% block sw_sales_channel_detail_products_assignment_modal %}\\n    <sw-sales-channel-products-assignment-modal\\n        v-if=\\\"showProductsModal\\\"\\n        :sales-channel=\\\"salesChannel\\\"\\n        :is-assign-product-loading=\\\"isAssignProductLoading\\\"\\n        @modal-close=\\\"showProductsModal = false\\\"\\n        @products-add=\\\"onAddProducts\\\"\\n    />\\n    {% endblock %}\\n</sw-card>\\n{% endblock %}\\n\";","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../../../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--15-1!../../../../../node_modules/css-loader/dist/cjs.js??ref--15-2!../../../../../node_modules/sass-loader/dist/cjs.js??ref--15-3!./sw-sales-channel-detail-products.scss\");\nif(content.__esModule) content = content.default;\nif(typeof content === 'string') content = [[module.id, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar add = require(\"!../../../../../node_modules/vue-style-loader/lib/addStylesClient.js\").default\nvar update = add(\"e540ead6\", content, true, {});"],"sourceRoot":""}