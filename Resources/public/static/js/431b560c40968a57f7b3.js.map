{"version":3,"sources":["webpack:///./src/module/sw-bulk-edit/component/sw-bulk-edit-save-modal-success/sw-bulk-edit-save-modal-success.scss","webpack:///./src/module/sw-bulk-edit/component/sw-bulk-edit-save-modal-success/index.js","webpack:///./src/module/sw-bulk-edit/component/sw-bulk-edit-save-modal-success/sw-bulk-edit-save-modal-success.html.twig"],"names":["content","__esModule","default","module","i","locals","exports","add","Criteria","Shopware","Data","template","inject","mixins","Mixin","getByName","data","latestDocuments","document","invoice","isDownloading","storno","delivery_note","credit_note","computed","documentRepository","this","repositoryFactory","create","selectedIds","State","get","downloadOrderDocuments","_Shopware$State$get","_Shopware$State$get$o","orderDocuments","download","latestDocumentsCriteria","criteria","addFilter","equalsAny","selectedDocumentTypes","map","item","id","addSorting","sort","isChanged","value","length","filter","selected","description","$tc","created","createdComponent","methods","_this","_asyncToGenerator","_regeneratorRuntime","mark","_callee","wrap","_context","prev","next","updateButtons","setTitle","getLatestDocuments","stop","$emit","buttonConfig","key","label","position","variant","action","disabled","_this2","_callee2","maxDocsPerType","documents","_context2","abrupt","search","sent","forEach","documentType","_documentType$technic","_latestDocuments$_doc","technicalName","latestDoc","documentsGrouped","documentTypeId","latestDocKeyedByOrderId","doc","Object","values","hasOwnProperty","orderId","push","downloadDocument","_this3","documentIds","$set","orderDocumentApiService","then","response","filename","headers","split","link","createElement","href","URL","createObjectURL","dispatchEvent","MouseEvent","remove","catch","error","createNotificationError","message","finally","createNotificationInfo","Promise","resolve"],"mappings":"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","file":"static/js/431b560c40968a57f7b3.js","sourcesContent":["// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../../../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--15-1!../../../../../node_modules/css-loader/dist/cjs.js??ref--15-2!../../../../../node_modules/sass-loader/dist/cjs.js??ref--15-3!./sw-bulk-edit-save-modal-success.scss\");\nif(content.__esModule) content = content.default;\nif(typeof content === 'string') content = [[module.id, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar add = require(\"!../../../../../node_modules/vue-style-loader/lib/addStylesClient.js\").default\nvar update = add(\"23964138\", content, true, {});","/**\n * @package system-settings\n */\nimport template from './sw-bulk-edit-save-modal-success.html.twig';\nimport './sw-bulk-edit-save-modal-success.scss';\n\nconst { Criteria } = Shopware.Data;\n\n// eslint-disable-next-line sw-deprecation-rules/private-feature-declarations\nexport default {\n    template,\n\n    inject: ['repositoryFactory', 'orderDocumentApiService'],\n\n    mixins: [\n        Shopware.Mixin.getByName('notification'),\n    ],\n\n    data() {\n        return {\n            latestDocuments: {},\n            document: {\n                invoice: {\n                    isDownloading: false,\n                },\n                storno: {\n                    isDownloading: false,\n                },\n                delivery_note: {\n                    isDownloading: false,\n                },\n                credit_note: {\n                    isDownloading: false,\n                },\n            },\n        };\n    },\n\n    computed: {\n        documentRepository() {\n            return this.repositoryFactory.create('document');\n        },\n\n        selectedIds() {\n            return Shopware.State.get('shopwareApps').selectedIds;\n        },\n\n        downloadOrderDocuments() {\n            return Shopware.State.get('swBulkEdit')?.orderDocuments?.download;\n        },\n\n        latestDocumentsCriteria() {\n            const criteria = new Criteria(1, null);\n            criteria.addFilter(Criteria.equalsAny('documentTypeId', this.selectedDocumentTypes.map(item => item.id)));\n            criteria.addFilter(Criteria.equalsAny('orderId', this.selectedIds));\n            criteria.addSorting(Criteria.sort('createdAt', 'DESC'));\n\n            return criteria;\n        },\n\n        selectedDocumentTypes() {\n            if (!this.downloadOrderDocuments) {\n                return [];\n            }\n\n            if (!this.downloadOrderDocuments.isChanged) {\n                return [];\n            }\n\n            if (this.downloadOrderDocuments.value.length <= 0) {\n                return [];\n            }\n\n            return this.downloadOrderDocuments.value.filter((item) => item.selected);\n        },\n\n        description() {\n            return this.selectedDocumentTypes.length > 0\n                ? this.$tc('sw-bulk-edit.modal.success.instruction')\n                : this.$tc('sw-bulk-edit.modal.success.description');\n        },\n    },\n\n    created() {\n        this.createdComponent();\n    },\n\n    methods: {\n        async createdComponent() {\n            this.updateButtons();\n            this.setTitle();\n            await this.getLatestDocuments();\n        },\n\n        setTitle() {\n            this.$emit('title-set', this.$tc('sw-bulk-edit.modal.success.title'));\n        },\n\n        updateButtons() {\n            const buttonConfig = [\n                {\n                    key: 'close',\n                    label: this.$tc('global.sw-modal.labelClose'),\n                    position: 'right',\n                    variant: 'primary',\n                    action: '',\n                    disabled: false,\n                },\n            ];\n\n            this.$emit('buttons-update', buttonConfig);\n        },\n\n        async getLatestDocuments() {\n            if (this.selectedDocumentTypes.length <= 0) {\n                return;\n            }\n\n            const latestDocuments = {};\n            const maxDocsPerType = this.selectedIds.length;\n\n            const documents = await this.documentRepository.search(this.latestDocumentsCriteria);\n\n            this.selectedDocumentTypes.forEach(documentType => {\n                latestDocuments[documentType.technicalName] ??= [];\n                const latestDoc = latestDocuments[documentType.technicalName];\n\n                const documentsGrouped = documents.filter(document => {\n                    return document.documentTypeId === documentType.id;\n                });\n\n                const latestDocKeyedByOrderId = {};\n\n                documentsGrouped.forEach(doc => {\n                    if (Object.values(latestDoc).length === maxDocsPerType) {\n                        return;\n                    }\n\n                    if (!latestDocKeyedByOrderId.hasOwnProperty(doc.orderId)) {\n                        latestDocKeyedByOrderId[doc.orderId] = doc.id;\n                        latestDoc.push(doc.id);\n                    }\n                });\n            });\n\n            this.latestDocuments = latestDocuments;\n        },\n\n        downloadDocument(documentType) {\n            const documentIds = this.latestDocuments[documentType];\n\n            if (!documentIds || documentIds.length === 0) {\n                this.createNotificationInfo({\n                    message: this.$tc('sw-bulk-edit.modal.success.messageNoDocumentsFound'),\n                });\n\n                return Promise.resolve();\n            }\n\n            this.$set(this.document[documentType], 'isDownloading', true);\n            return this.orderDocumentApiService.download(documentIds)\n                .then((response) => {\n                    if (!response.data) {\n                        return;\n                    }\n\n                    const filename = response.headers['content-disposition'].split('filename=')[1];\n                    const link = document.createElement('a');\n                    link.href = URL.createObjectURL(response.data);\n                    link.download = filename;\n                    link.dispatchEvent(new MouseEvent('click'));\n                    link.remove();\n                })\n                .catch((error) => {\n                    this.createNotificationError({\n                        message: error.message,\n                    });\n                })\n                .finally(() => {\n                    this.$set(this.document[documentType], 'isDownloading', false);\n                });\n        },\n    },\n};\n","export default \"\\n{% block sw_bulk_edit_save_modal_success %}\\n<div class=\\\"sw-bulk-edit-save-modal-success\\\">\\n    \\n    {% block sw_bulk_edit_save_modal_success_icon %}\\n    <sw-label\\n        class=\\\"sw-bulk-edit-save-modal__icon\\\"\\n        appearance=\\\"pill\\\"\\n        variant=\\\"success\\\"\\n    >\\n        <sw-icon\\n            name=\\\"regular-check-circle\\\"\\n            size=\\\"30px\\\"\\n        />\\n    </sw-label>\\n    {% endblock %}\\n\\n    \\n    {% block sw_bulk_edit_save_modal_error_content %}\\n    <p\\n        class=\\\"sw-bulk-edit-save-modal__help-text\\\"\\n        v-html=\\\"description\\\"\\n    >\\n    </p>\\n    {% endblock %}\\n\\n    \\n    {% block sw_bulk_edit_save_modal_success_download_document %}\\n    <ul\\n        v-if=\\\"selectedDocumentTypes.length > 0\\\"\\n        class=\\\"sw-bulk-edit-save-modal-success__download-document-container\\\"\\n    >\\n        <li\\n            v-for=\\\"selectedDocumentType in selectedDocumentTypes\\\"\\n            :key=\\\"selectedDocumentType.id\\\"\\n            class=\\\"sw-bulk-edit-save-modal-success__download-document\\\"\\n            :class=\\\"`is--${selectedDocumentType.technicalName}`\\\"\\n        >\\n            <span class=\\\"label\\\">\\n                {{ selectedDocumentType.translated.name }}\\n            </span>\\n            <sw-button\\n                class=\\\"action\\\"\\n                size=\\\"small\\\"\\n                :disabled=\\\"document[selectedDocumentType.technicalName].isDownloading\\\"\\n                @click=\\\"downloadDocument(selectedDocumentType.technicalName)\\\"\\n            >\\n                {{ $tc('sw-bulk-edit.modal.success.buttonDownload') }}\\n            </sw-button>\\n        </li>\\n    </ul>\\n    {% endblock %}\\n</div>\\n{% endblock %}\\n\";"],"sourceRoot":""}