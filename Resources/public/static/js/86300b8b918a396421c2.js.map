{"version":3,"sources":["webpack:///./src/module/sw-property/component/sw-property-option-list/sw-property-option-list.scss","webpack:///./src/module/sw-property/component/sw-property-option-list/sw-property-option-list.html.twig","webpack:///./src/module/sw-property/component/sw-property-option-list/index.js"],"names":["content","__esModule","default","module","i","locals","exports","add","State","Shopware","template","inject","props","propertyGroup","type","Object","required","optionRepository","data","isLoading","currentOption","term","naturalSorting","selection","deleteButtonDisabled","sortBy","sortDirection","showDeleteModal","limit","computed","isSystemLanguage","get","api","systemLanguageId","this","currentLanguage","languageId","allowInlineEdit","acl","can","tooltipAdd","message","$tc","disabled","disableAddButton","watch","refreshOptionList","methods","onSearch","options","criteria","setTerm","onGridSelectionChanged","selectionCount","onOptionDelete","option","isNew","remove","id","Promise","resolve","delete","onSingleOptionDelete","$refs","grid","deleteItem","onDeleteOptions","_this","allSettled","values","map","then","onAddOption","create","onCancelOption","load","onSaveOption","saveGroupLocal","saveGroupRemote","has","_this2","save","_this3","onOptionEdit","localCopy","_isNew","getGroupColumns","property","label","routerLink","inlineEdit","primary"],"mappings":"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","file":"static/js/86300b8b918a396421c2.js","sourcesContent":["// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../../../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--15-1!../../../../../node_modules/css-loader/dist/cjs.js??ref--15-2!../../../../../node_modules/sass-loader/dist/cjs.js??ref--15-3!./sw-property-option-list.scss\");\nif(content.__esModule) content = content.default;\nif(typeof content === 'string') content = [[module.id, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar add = require(\"!../../../../../node_modules/vue-style-loader/lib/addStylesClient.js\").default\nvar update = add(\"1533b936\", content, true, {});","export default \"\\n{% block sw_property_option_list %}\\n<sw-card\\n    :is-loading=\\\"isLoading\\\"\\n    class=\\\"sw-property-option-list\\\"\\n    position-identifier=\\\"sw-property-option-list\\\"\\n    :title=\\\"$tc('sw-property.detail.cardTitle')\\\"\\n>\\n\\n    \\n    {% block sw_property_option_list_toolbar %}\\n    <div class=\\\"sw-property-option-list__toolbar\\\">\\n\\n        \\n        {% block sw_property_option_list_toolbar_container %}\\n        <sw-container\\n            columns=\\\"1fr 32px minmax(100px, 200px)\\\"\\n            gap=\\\"0 10px\\\"\\n        >\\n\\n            \\n            {% block sw_property_option_list_toolbar_search %}\\n            <sw-simple-search-field\\n                v-model=\\\"term\\\"\\n                size=\\\"small\\\"\\n                variant=\\\"form\\\"\\n                @search-term-change=\\\"onSearch\\\"\\n            />\\n            {% endblock %}\\n\\n            \\n            {% block sw_property_option_list_toolbar_delete %}\\n            <sw-button\\n                v-tooltip=\\\"{\\n                    message: $tc('sw-privileges.tooltip.warning'),\\n                    disabled: acl.can('property.editor'),\\n                    showOnDisabledElements: true\\n                }\\\"\\n                :disabled=\\\"deleteButtonDisabled || !acl.can('property.editor')\\\"\\n                square\\n                size=\\\"small\\\"\\n                class=\\\"sw-property-option-list__delete-button\\\"\\n                @click=\\\"onDeleteOptions\\\"\\n            >\\n                <sw-icon\\n                    name=\\\"regular-trash\\\"\\n                    small\\n                />\\n            </sw-button>\\n            {% endblock %}\\n\\n            \\n            {% block sw_property_option_list_toolbar_add %}\\n            <sw-container v-tooltip=\\\"tooltipAdd\\\">\\n                <sw-button\\n                    v-tooltip=\\\"{\\n                        message: $tc('sw-privileges.tooltip.warning'),\\n                        disabled: acl.can('property.editor'),\\n                        showOnDisabledElements: true\\n                    }\\\"\\n                    :disabled=\\\"disableAddButton\\\"\\n                    size=\\\"small\\\"\\n                    class=\\\"sw-property-option-list__add-button\\\"\\n                    @click=\\\"onAddOption(propertyGroup)\\\"\\n                >\\n                    {{ $tc('sw-property.detail.addOption') }}\\n                </sw-button>\\n            </sw-container>\\n            {% endblock %}\\n        </sw-container>\\n        {% endblock %}\\n    </div>\\n    {% endblock %}\\n\\n    \\n    {% block sw_property_option_list_grid %}\\n    <template #grid>\\n        <sw-one-to-many-grid\\n            ref=\\\"grid\\\"\\n            :is-loading=\\\"isLoading\\\"\\n            :collection=\\\"propertyGroup.options\\\"\\n            :columns=\\\"getGroupColumns()\\\"\\n            :full-page=\\\"false\\\"\\n            :local-mode=\\\"propertyGroup.isNew()\\\"\\n            :allow-inline-edit=\\\"allowInlineEdit\\\"\\n            :sort-by=\\\"sortBy\\\"\\n            :sort-direction=\\\"sortDirection\\\"\\n            @selection-change=\\\"onGridSelectionChanged\\\"\\n        >\\n\\n            <template #column-name=\\\"{ item, isInlineEdit }\\\">\\n                <template v-if=\\\"isInlineEdit\\\">\\n                    <sw-text-field\\n                        {% if VUE3 %}\\n                        v-model:value=\\\"item.name\\\"\\n                        {% else %}\\n                        v-model=\\\"item.name\\\"\\n                        {% endif %}\\n                        size=\\\"small\\\"\\n                    />\\n                </template>\\n\\n                <a\\n                    v-else\\n                    class=\\\"sw-settings-option-detail__link\\\"\\n                    role=\\\"button\\\"\\n                    tabindex=\\\"0\\\"\\n                    @click=\\\"onOptionEdit(item)\\\"\\n                    @keydown.enter=\\\"onOptionEdit(item)\\\"\\n                >\\n                    {{ item.translated.name }}\\n                </a>\\n            </template>\\n\\n            \\n            {% block sw_settings_property_list_grid_columns_actions %}\\n            <template #more-actions=\\\"{ item }\\\">\\n                \\n                {% block sw_settings_property_list_grid_columns_actions_edit %}\\n                <sw-context-menu-item\\n                    class=\\\"sw-property-option-list__edit-action\\\"\\n                    :disabled=\\\"!acl.can('property.editor')\\\"\\n                    @click=\\\"onOptionEdit(item)\\\"\\n                >\\n                    {{ $tc('sw-property.list.contextMenuView') }}\\n                </sw-context-menu-item>\\n                {% endblock %}\\n            </template>\\n            {% endblock %}\\n\\n            \\n            {% block sw_property_list_grid_columns_actions_delete %}\\n            <template #delete-action=\\\"{ item }\\\">\\n                <sw-context-menu-item\\n                    variant=\\\"danger\\\"\\n                    :disabled=\\\"!acl.can('property.editor')\\\"\\n                    @click=\\\"onSingleOptionDelete(item.id)\\\"\\n                >\\n                    {{ $tc('sw-property.list.contextMenuDelete') }}\\n                </sw-context-menu-item>\\n            </template>\\n            {% endblock %}\\n        </sw-one-to-many-grid>\\n        {% endblock %}\\n    </template>\\n    \\n    {% block sw_property_option_list_detail %}\\n    <sw-property-option-detail\\n        v-if=\\\"currentOption\\\"\\n        :current-option=\\\"currentOption\\\"\\n        :allow-edit=\\\"acl.can('property.editor')\\\"\\n        @save-option-edit=\\\"onSaveOption\\\"\\n        @cancel-option-edit=\\\"onCancelOption\\\"\\n    />\\n    {% endblock %}\\n\\n    \\n    {% block sw_property_option_list_loader %}\\n    <sw-loader v-if=\\\"isLoading\\\" />\\n    {% endblock %}\\n</sw-card>\\n{% endblock %}\\n\";","/*\n * @package inventory\n */\n\nimport template from './sw-property-option-list.html.twig';\nimport './sw-property-option-list.scss';\n\nconst { State } = Shopware;\n\n// eslint-disable-next-line sw-deprecation-rules/private-feature-declarations\nexport default {\n    template,\n\n    inject: [\n        'repositoryFactory',\n        'acl',\n    ],\n\n    props: {\n        propertyGroup: {\n            type: Object,\n            required: true,\n        },\n        optionRepository: {\n            type: Object,\n            required: true,\n        },\n    },\n\n    data() {\n        return {\n            isLoading: false,\n            currentOption: null,\n            term: null,\n            naturalSorting: true,\n            selection: null,\n            deleteButtonDisabled: true,\n            sortBy: 'name',\n            sortDirection: 'ASC',\n            showDeleteModal: false,\n            limit: 10,\n        };\n    },\n\n    computed: {\n        isSystemLanguage() {\n            return State.get('context').api.systemLanguageId === this.currentLanguage;\n        },\n\n        currentLanguage() {\n            return State.get('context').api.languageId;\n        },\n\n        allowInlineEdit() {\n            return !!this.acl.can('property.editor');\n        },\n\n        tooltipAdd() {\n            return {\n                message: this.$tc('sw-property.detail.addOptionNotPossible'),\n                disabled: this.isSystemLanguage,\n            };\n        },\n\n        disableAddButton() {\n            return this.propertyGroup.isLoading || !this.isSystemLanguage || !this.acl.can('property.editor');\n        },\n    },\n\n    watch: {\n        currentLanguage() {\n            this.refreshOptionList();\n        },\n    },\n\n    methods: {\n        onSearch() {\n            this.propertyGroup.options.criteria.setTerm(this.term);\n            this.refreshOptionList();\n        },\n\n        onGridSelectionChanged(selection, selectionCount) {\n            this.selection = selection;\n            this.deleteButtonDisabled = selectionCount <= 0;\n        },\n\n        onOptionDelete(option) {\n            if (option.isNew()) {\n                this.propertyGroup.options.remove(option.id);\n                return Promise.resolve();\n            }\n\n            return this.optionRepository.delete(option.id);\n        },\n\n        onSingleOptionDelete(option) {\n            this.$refs.grid.deleteItem(option);\n        },\n\n        onDeleteOptions() {\n            if (!this.selection) {\n                return;\n            }\n\n            Promise.allSettled(Object.values(this.selection).map((option) => this.onOptionDelete(option))).then(() => {\n                this.refreshOptionList();\n            });\n        },\n\n        onAddOption() {\n            if (!this.isSystemLanguage) {\n                return false;\n            }\n\n            this.currentOption = this.optionRepository.create();\n\n            return true;\n        },\n\n        onCancelOption() {\n            // close modal\n            this.currentOption = null;\n\n            this.$refs.grid.load();\n        },\n\n        onSaveOption() {\n            if (this.propertyGroup.isNew()) {\n                return this.saveGroupLocal();\n            }\n\n            return this.saveGroupRemote();\n        },\n\n        saveGroupLocal() {\n            if (this.currentOption.isNew()) {\n                if (!this.propertyGroup.options.has(this.currentOption.id)) {\n                    this.propertyGroup.options.add(this.currentOption);\n                }\n\n                this.currentOption = null;\n            }\n\n            return Promise.resolve();\n        },\n\n        saveGroupRemote() {\n            return this.optionRepository.save(this.currentOption).then(() => {\n                // closing modal\n                this.currentOption = null;\n                this.$refs.grid.load();\n            });\n        },\n\n        refreshOptionList() {\n            this.isLoading = true;\n\n            this.$refs.grid.load().then(() => {\n                this.isLoading = false;\n            });\n        },\n\n        onOptionEdit(option) {\n            const localCopy = option;\n            localCopy._isNew = false;\n\n            this.currentOption = localCopy;\n        },\n\n        getGroupColumns() {\n            return [{\n                property: 'name',\n                label: this.$tc('sw-property.detail.labelOptionName'),\n                routerLink: 'sw.property.detail',\n                inlineEdit: 'string',\n                primary: true,\n            }, {\n                property: 'colorHexCode',\n                label: this.$tc('sw-property.detail.labelOptionColor'),\n            }, {\n                property: 'position',\n                label: this.$tc('sw-property.detail.labelOptionPosition'),\n                inlineEdit: 'number',\n            }];\n        },\n    },\n};\n"],"sourceRoot":""}