{"version":3,"sources":["webpack:///./src/module/sw-order/view/sw-order-create-details/index.ts","webpack:///./src/module/sw-order/view/sw-order-create-details/sw-order-create-details.html.twig"],"names":["_Shopware","Shopware","Component","Mixin","State","Criteria","Data","wrapComponentConfig","template","inject","mixins","getByName","data","showPromotionModal","promotionError","isLoading","context","currencyId","paymentMethodId","shippingMethodId","languageId","billingAddressId","shippingAddressId","computed","salesChannelId","_this$salesChannelCon","this","salesChannelContext","salesChannel","id","customer","get","cart","currency","email","_this$customer","phoneNumber","_this$customer2","_this$customer2$defau","defaultBillingAddress","cartDelivery","shippingCosts","_this$cartDelivery","totalPrice","set","value","modifyShippingCosts","deliveryDate","_this$cartDelivery2","earliest","shippingMethodCriteria","criteria","addFilter","equals","paymentMethodCriteria","languageCriteria","currencyCriteria","currencyRepository","repositoryFactory","create","isCartTokenAvailable","getters","hasLineItem","_this$cart","lineItems","filter","item","hasOwnProperty","length","promotionCodeLineItems","_this$cart2","_item$payload","type","LineItemType","PROMOTION","payload","code","disabledAutoPromotion","promotionCodeTags","promotionCodes","commit","watch","deep","handler","_this","updateContext","finally","immediate","created","createdComponent","methods","_this$salesChannelCon2","_this$salesChannelCon3","_this$salesChannelCon4","_this$salesChannelCon5","_this$salesChannelCon6","_this$salesChannelCon7","_this2","$nextTick","$router","push","name","_objectSpread","languageIdChain","shippingMethod","paymentMethod","activeBillingAddress","activeShippingAddress","_this$customer3","_this3","dispatch","contextToken","token","then","loadCart","_this$customer4","onRemoveExistingCode","isInvalid","tag","Promise","resolve","onRemoveItems","discountId","lineItemKeys","_this$customer5","_this4","forEach","key","removedTag","find","updatePromotionList","_this5","map","matchedItem","lineItem","_lineItem$payload","_lineItem$payload2","concat","_toConsumableArray","toggleAutomaticPromotions","visibility","_this6","cartStoreService","enableAutomaticPromotions","onClosePromotionModal","onSavePromotionModal","_this7","amount","_this8","positiveAmount","Math","abs","unitPrice","catch","error","$emit","handlePromotionCodeTags","newValue","oldValue","promotionCodeLength","latestTag","onSubmitCode","detail","$tc","_this$customer6","_this9"],"mappings":"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","file":"static/js/00f6b6297794cfe82d81.js","sourcesContent":["import type { Entity } from '@shopware-ag/admin-extension-sdk/es/data/_internals/Entity';\nimport template from './sw-order-create-details.html.twig';\n// eslint-disable-next-line max-len\nimport type {\n    Cart,\n    LineItem,\n    SalesChannelContext,\n    PromotionCodeTag,\n    ContextSwitchParameters, CartDelivery,\n} from '../../order.types';\nimport type CriteriaType from '../../../../core/data/criteria.data';\nimport { LineItemType } from '../../order.types';\nimport type Repository from '../../../../core/data/repository.data';\nimport { get } from '../../../../core/service/utils/object.utils';\n\n/**\n * @package checkout\n */\n\nconst { Component, Mixin, State } = Shopware;\nconst { Criteria } = Shopware.Data;\n\n// eslint-disable-next-line sw-deprecation-rules/private-feature-declarations\nexport default Component.wrapComponentConfig({\n    template,\n\n    inject: [\n        'repositoryFactory',\n        'cartStoreService',\n    ],\n\n    mixins: [\n        Mixin.getByName('notification'),\n        Mixin.getByName('cart-notification'),\n    ],\n\n    data(): {\n        isLoading: boolean,\n        showPromotionModal: boolean,\n        promotionError: ShopwareHttpError|null,\n        context: ContextSwitchParameters,\n        } {\n        return {\n            showPromotionModal: false,\n            promotionError: null,\n            isLoading: false,\n            context: {\n                currencyId: '',\n                paymentMethodId: '',\n                shippingMethodId: '',\n                languageId: '',\n                billingAddressId: '',\n                shippingAddressId: '',\n            },\n        };\n    },\n\n    computed: {\n        salesChannelId(): string {\n            return this.salesChannelContext?.salesChannel.id || '';\n        },\n\n        customer(): Entity<'customer'> | null {\n            return State.get('swOrder').customer;\n        },\n\n        cart(): Cart {\n            return State.get('swOrder').cart;\n        },\n\n        currency(): Entity<'currency'> {\n            return State.get('swOrder').context.currency;\n        },\n\n        salesChannelContext(): SalesChannelContext {\n            return State.get('swOrder').context;\n        },\n\n        email(): string {\n            return this.customer?.email || '';\n        },\n\n        phoneNumber(): string {\n            return this.customer?.defaultBillingAddress?.phoneNumber || '';\n        },\n\n        cartDelivery(): CartDelivery | null {\n            return get(this.cart, 'deliveries[0]', null);\n        },\n\n        shippingCosts: {\n            get(): number {\n                return this.cartDelivery?.shippingCosts.totalPrice || 0.0;\n            },\n            set(value: number): void {\n                this.modifyShippingCosts(value);\n            },\n        },\n\n        deliveryDate(): string {\n            return this.cartDelivery?.deliveryDate.earliest || '';\n        },\n\n        shippingMethodCriteria(): CriteriaType {\n            const criteria = new Criteria(1, 25);\n            criteria.addFilter(Criteria.equals('salesChannels.id', this.salesChannelId));\n\n            return criteria;\n        },\n\n        paymentMethodCriteria(): CriteriaType {\n            const criteria = new Criteria(1, 25);\n            criteria.addFilter(Criteria.equals('salesChannels.id', this.salesChannelId));\n\n            criteria.addFilter(Criteria.equals('active', 1));\n\n            return criteria;\n        },\n\n        languageCriteria(): CriteriaType {\n            const criteria = new Criteria(1, 25);\n            criteria.addFilter(Criteria.equals('salesChannels.id', this.salesChannelId));\n\n            return criteria;\n        },\n\n        currencyCriteria(): CriteriaType {\n            const criteria = new Criteria(1, 25);\n            criteria.addFilter(Criteria.equals('salesChannels.id', this.salesChannelId));\n\n            return criteria;\n        },\n\n        currencyRepository(): Repository<'currency'> {\n            return this.repositoryFactory.create('currency');\n        },\n\n        isCartTokenAvailable(): boolean {\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n            return State.getters['swOrder/isCartTokenAvailable'] as boolean;\n        },\n\n        hasLineItem(): boolean {\n            return this.cart?.lineItems.filter((item: LineItem) => item.hasOwnProperty('id')).length > 0;\n        },\n\n        promotionCodeLineItems(): LineItem[] {\n            return this.cart?.lineItems.filter((item: LineItem) => {\n                return item.type === LineItemType.PROMOTION && item?.payload?.code;\n            });\n        },\n\n        disabledAutoPromotion(): boolean {\n            return State.get('swOrder').disabledAutoPromotion;\n        },\n\n        promotionCodeTags: {\n            get(): PromotionCodeTag[] {\n                return State.get('swOrder').promotionCodes;\n            },\n\n            set(promotionCodeTags: PromotionCodeTag[]) {\n                State.commit('swOrder/setPromotionCodes', promotionCodeTags);\n            },\n        },\n    },\n\n    watch: {\n        context: {\n            deep: true,\n            handler(): void {\n                if (!this.customer || !this.isCartTokenAvailable) {\n                    return;\n                }\n\n                this.isLoading = true;\n                this.updateContext().finally(() => {\n                    this.isLoading = false;\n                });\n            },\n        },\n\n        cart: {\n            deep: true,\n            immediate: true,\n            handler: 'updatePromotionList',\n        },\n\n        promotionCodeTags: {\n            handler: 'handlePromotionCodeTags',\n        },\n    },\n\n    created() {\n        this.createdComponent();\n    },\n\n    methods: {\n        createdComponent(): void {\n            if (!this.customer) {\n                this.$nextTick(() => {\n                    void this.$router.push({ name: 'sw.order.create.initial' });\n                });\n            }\n\n            this.context = {\n                ...this.context,\n                currencyId: this.salesChannelContext.context.currencyId,\n                languageId: this.salesChannelContext.context.languageIdChain[0],\n                shippingMethodId: this.salesChannelContext.shippingMethod.id,\n                paymentMethodId: this.salesChannelContext.paymentMethod.id,\n                // eslint-disable-next-line max-len\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment,@typescript-eslint/no-unsafe-member-access\n                billingAddressId: this.salesChannelContext.customer?.activeBillingAddress?.id ?? '',\n                // eslint-disable-next-line max-len\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access,@typescript-eslint/no-unsafe-assignment\n                shippingAddressId: this.salesChannelContext.customer?.activeShippingAddress?.id ?? '',\n            };\n        },\n\n        updateContext(): Promise<void> {\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n            return State.dispatch('swOrder/updateOrderContext', {\n                context: this.context,\n                salesChannelId: this.customer?.salesChannelId,\n                contextToken: this.cart.token,\n            }).then(() => {\n                return this.loadCart();\n            });\n        },\n\n        loadCart() {\n            return State.dispatch('swOrder/getCart', {\n                salesChannelId: this.customer?.salesChannelId,\n                contextToken: this.cart.token,\n            });\n        },\n\n        onRemoveExistingCode(item: PromotionCodeTag) {\n            if (item.isInvalid) {\n                this.promotionCodeTags = this.promotionCodeTags.filter((tag: PromotionCodeTag) => tag.code !== item.code);\n\n                return Promise.resolve();\n            }\n\n            return this.onRemoveItems([item.discountId]);\n        },\n\n        onRemoveItems(lineItemKeys: string[]): Promise<void> {\n            this.isLoading = true;\n\n            return State.dispatch('swOrder/removeLineItems', {\n                salesChannelId: this.customer?.salesChannelId,\n                contextToken: this.cart.token,\n                lineItemKeys: lineItemKeys,\n            })\n                .then(() => {\n                    // Remove promotion code tag if corresponding line item removed\n                    lineItemKeys.forEach(key => {\n                        const removedTag = this.promotionCodeTags.find((tag: PromotionCodeTag) => tag.discountId === key);\n\n                        if (removedTag) {\n                            this.promotionCodeTags = this.promotionCodeTags.filter((item: PromotionCodeTag) => {\n                                return item.discountId !== removedTag.discountId;\n                            });\n                        }\n                    });\n                }).finally(() => {\n                    this.isLoading = false;\n                });\n        },\n\n        updatePromotionList() {\n            // Update data and isInvalid flag for each item in promotionCodeTags\n            this.promotionCodeTags = this.promotionCodeTags.map((tag: PromotionCodeTag): PromotionCodeTag => {\n                const matchedItem = this.promotionCodeLineItems\n                    .find((lineItem: LineItem): boolean => lineItem.payload?.code === tag.code);\n\n                if (matchedItem) {\n                    return { ...matchedItem.payload, isInvalid: false } as PromotionCodeTag;\n                }\n\n                return { ...tag, isInvalid: true } as PromotionCodeTag;\n            });\n\n            // Add new items from promotionCodeLineItems which promotionCodeTags doesn't contain\n            this.promotionCodeLineItems.forEach((lineItem: LineItem): void => {\n                const matchedItem = this.promotionCodeTags\n                    .find((tag: PromotionCodeTag): boolean => tag.code === lineItem.payload?.code);\n\n                if (!matchedItem) {\n                    this.promotionCodeTags = [\n                        ...this.promotionCodeTags,\n                        { ...lineItem.payload, isInvalid: false } as PromotionCodeTag,\n                    ];\n                }\n            });\n        },\n\n        toggleAutomaticPromotions(visibility: boolean): void {\n            this.showPromotionModal = visibility;\n            if (visibility) {\n                State.commit('swOrder/setDisabledAutoPromotion', true);\n                return;\n            }\n\n            this.isLoading = true;\n            void this.cartStoreService.enableAutomaticPromotions(\n                this.cart.token,\n                { salesChannelId: this.salesChannelId },\n            ).then(() => {\n                State.commit('swOrder/setDisabledAutoPromotion', false);\n\n                return this.loadCart();\n            }).finally(() => {\n                this.isLoading = false;\n            });\n        },\n\n        onClosePromotionModal() {\n            this.showPromotionModal = false;\n            State.commit('swOrder/setDisabledAutoPromotion', false);\n        },\n\n        onSavePromotionModal() {\n            this.showPromotionModal = false;\n            State.commit('swOrder/setDisabledAutoPromotion', true);\n\n            return this.loadCart().finally(() => {\n                this.isLoading = false;\n            });\n        },\n\n        modifyShippingCosts(amount: number) {\n            const positiveAmount = Math.abs(amount);\n            if (!this.cartDelivery) {\n                return;\n            }\n            this.cartDelivery.shippingCosts.unitPrice = positiveAmount;\n            this.cartDelivery.shippingCosts.totalPrice = positiveAmount;\n            this.isLoading = true;\n\n            State.dispatch('swOrder/modifyShippingCosts', {\n                salesChannelId: this.salesChannelId,\n                contextToken: this.cart.token,\n                shippingCosts: this.cartDelivery.shippingCosts,\n            }).catch((error) => {\n                this.$emit('error', error);\n            }).finally(() => {\n                this.isLoading = false;\n            });\n        },\n\n        handlePromotionCodeTags(newValue: PromotionCodeTag[], oldValue: PromotionCodeTag[]) {\n            this.promotionError = null;\n\n            if (newValue.length < oldValue.length) {\n                return;\n            }\n\n            const promotionCodeLength = this.promotionCodeTags.length;\n            const latestTag = this.promotionCodeTags[promotionCodeLength - 1];\n\n            if (newValue.length > oldValue.length) {\n                void this.onSubmitCode(latestTag.code);\n            }\n\n            if (promotionCodeLength > 0 && latestTag.isInvalid) {\n                this.promotionError = {\n                    detail: this.$tc('sw-order.createBase.textInvalidPromotionCode'),\n                } as ShopwareHttpError;\n            }\n        },\n\n        onSubmitCode(code: string): Promise<void> {\n            this.isLoading = true;\n\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n            return State.dispatch('swOrder/addPromotionCode', {\n                salesChannelId: this.customer?.salesChannelId,\n                contextToken: this.cart.token,\n                code,\n            }).finally(() => {\n                this.isLoading = false;\n            });\n        },\n    },\n});\n","export default \"\\n{% block sw_order_create_details %}\\n<div class=\\\"sw-order-create-details\\\">\\n    <sw-loader v-if=\\\"isLoading\\\" />\\n\\n    \\n    {% block sw_order_create_details_promotion_modal %}\\n    <sw-order-create-promotion-modal\\n        v-if=\\\"showPromotionModal\\\"\\n        :is-loading=\\\"isLoading\\\"\\n        :currency=\\\"currency\\\"\\n        :sales-channel-id=\\\"salesChannelId\\\"\\n        @close=\\\"onClosePromotionModal\\\"\\n        @save=\\\"onSavePromotionModal\\\"\\n    />\\n    {% endblock %}\\n\\n    \\n    {% block sw_order_create_details_payment %}\\n    <sw-card\\n        class=\\\"sw-order-create-details__payment\\\"\\n        position-identifier=\\\"sw-order-create-details-payment\\\"\\n        :title=\\\"$tc('sw-order.createBase.detailsTab.labelTransactionCard')\\\"\\n    >\\n        <sw-container\\n            class=\\\"sw_order_create-details__payment-container\\\"\\n            gap=\\\"0px 30px\\\"\\n            columns=\\\"1fr 1fr\\\"\\n        >\\n            <sw-order-customer-address-select\\n                {% if VUE3 %}\\n                v-model:value=\\\"context.billingAddressId\\\"\\n                {% else %}\\n                v-model=\\\"context.billingAddressId\\\"\\n                {% endif %}\\n                :label=\\\"$tc('sw-order.createBase.labelBillingAddress')\\\"\\n                :placeholder=\\\"$tc('sw-order.createBase.placeholderBillingAddress')\\\"\\n                :same-address-value=\\\"context.shippingAddressId\\\"\\n                :customer=\\\"customer\\\"\\n            />\\n\\n            <sw-entity-single-select\\n                {% if VUE3 %}\\n                v-model:value=\\\"context.paymentMethodId\\\"\\n                {% else %}\\n                v-model=\\\"context.paymentMethodId\\\"\\n                {% endif %}\\n                entity=\\\"payment_method\\\"\\n                label-property=\\\"distinguishableName\\\"\\n                class=\\\"sw_order_create-details__payment-method\\\"\\n                :criteria=\\\"paymentMethodCriteria\\\"\\n                :label=\\\"$tc('sw-order.createBase.labelPaymentMethod')\\\"\\n                :placeholder=\\\"$tc('sw-order.createBase.placeholderPaymentMethod')\\\"\\n                show-clearable-button\\n                required\\n            />\\n\\n            <sw-entity-single-select\\n                {% if VUE3 %}\\n                v-model:value=\\\"context.currencyId\\\"\\n                {% else %}\\n                v-model=\\\"context.currencyId\\\"\\n                {% endif %}\\n                class=\\\"sw_order_create-details__currency\\\"\\n                entity=\\\"currency\\\"\\n                :criteria=\\\"currencyCriteria\\\"\\n                :label=\\\"$tc('sw-order.createBase.labelCurrency')\\\"\\n                :placeholder=\\\"$tc('sw-order.createBase.placeholderCurrency')\\\"\\n                show-clearable-button\\n                required\\n            />\\n        </sw-container>\\n    </sw-card>\\n    {% endblock %}\\n\\n    \\n    {% block sw_order_create_details_shipping %}\\n    <sw-card\\n        class=\\\"sw-order-create-details__shipping\\\"\\n        position-identifier=\\\"sw-order-create-details-shipping\\\"\\n        :title=\\\"$tc('sw-order.createBase.detailsTab.labelDeliveryCard')\\\"\\n    >\\n        <sw-container\\n            class=\\\"sw_order_create_details__shipping-container\\\"\\n            gap=\\\"0px 30px\\\"\\n            columns=\\\"1fr 1fr\\\"\\n        >\\n            <sw-order-customer-address-select\\n                {% if VUE3 %}\\n                v-model:value=\\\"context.shippingAddressId\\\"\\n                {% else %}\\n                v-model=\\\"context.shippingAddressId\\\"\\n                {% endif %}\\n                :label=\\\"$tc('sw-order.createBase.labelShippingAddress')\\\"\\n                :placeholder=\\\"$tc('sw-order.createBase.placeholderShippingAddress')\\\"\\n                :same-address-label=\\\"$tc('sw-order.initialModal.options.textSameAsBillingAddress')\\\"\\n                :same-address-value=\\\"context.billingAddressId\\\"\\n                :customer=\\\"customer\\\"\\n            />\\n\\n            <sw-entity-single-select\\n                {% if VUE3 %}\\n                v-model:value=\\\"context.shippingMethodId\\\"\\n                {% else %}\\n                v-model=\\\"context.shippingMethodId\\\"\\n                {% endif %}\\n                show-clearable-button\\n                class=\\\"sw_order_create-details__shipping\\\"\\n                entity=\\\"shipping_method\\\"\\n                :criteria=\\\"shippingMethodCriteria\\\"\\n                :label=\\\"$tc('sw-order.createBase.labelShippingMethod')\\\"\\n                :placeholder=\\\"$tc('sw-order.createBase.placeholderShippingMethod')\\\"\\n                required\\n            />\\n\\n            <sw-number-field\\n                {% if VUE3 %}\\n                v-model:value=\\\"shippingCosts\\\"\\n                {% else %}\\n                v-model=\\\"shippingCosts\\\"\\n                {% endif %}\\n                :label=\\\"$tc('sw-order.createBase.labelShippingCosts')\\\"\\n                :min=\\\"0\\\"\\n                fill-digits\\n                required\\n            >\\n                <template #suffix>\\n                    {{ currency.symbol }}\\n                </template>\\n            </sw-number-field>\\n\\n            <sw-datepicker\\n                {% if VUE3 %}\\n                v-model:value=\\\"deliveryDate\\\"\\n                {% else %}\\n                v-model=\\\"deliveryDate\\\"\\n                {% endif %}\\n                disabled\\n                :label=\\\"$tc('sw-order.detailDeliveries.labelDeliveryDate')\\\"\\n            />\\n        </sw-container>\\n    </sw-card>\\n    {% endblock %}\\n\\n    \\n    {% block sw_order_create_details_order %}\\n    <sw-card\\n        class=\\\"sw-order-create-details__order\\\"\\n        position-identifier=\\\"sw-order-create-details-order\\\"\\n        :title=\\\"$tc('sw-order.createBase.detailsTab.labelOrderCard')\\\"\\n    >\\n        <sw-container\\n            class=\\\"sw_order_create_details__order-container\\\"\\n            gap=\\\"0px 30px\\\"\\n            columns=\\\"1fr 1fr\\\"\\n        >\\n            \\n            {% block sw_order_create_details_email %}\\n            <sw-text-field\\n                {% if VUE3 %}\\n                v-model:value=\\\"email\\\"\\n                {% else %}\\n                v-model=\\\"email\\\"\\n                {% endif %}\\n                disabled\\n                class=\\\"sw-order-create-details__email\\\"\\n                :label=\\\"$tc('sw-order.createBase.labelEmail')\\\"\\n                :placeholder=\\\"$tc('sw-order.createBase.placeholderEmail')\\\"\\n                required\\n            />\\n            {% endblock %}\\n\\n            \\n            {% block sw_order_create_details_phone_number %}\\n            <sw-text-field\\n                {% if VUE3 %}\\n                v-model:value=\\\"phoneNumber\\\"\\n                {% else %}\\n                v-model=\\\"phoneNumber\\\"\\n                {% endif %}\\n                disabled\\n                class=\\\"sw-order-create-details__phone-number\\\"\\n                :label=\\\"$tc('sw-order.createBase.labelPhoneNumber')\\\"\\n                :placeholder=\\\"$tc('sw-order.createBase.placeholderPhoneNumber')\\\"\\n                required\\n            />\\n            {% endblock %}\\n\\n            \\n            {% block sw_order_create_details__order_sales_channel %}\\n            <sw-entity-single-select\\n                {% if VUE3 %}\\n                v-model:value=\\\"salesChannelId\\\"\\n                {% else %}\\n                v-model=\\\"salesChannelId\\\"\\n                {% endif %}\\n                disabled\\n                entity=\\\"sales_channel\\\"\\n                class=\\\"sw-order-create-options__sales-channel\\\"\\n                :label=\\\"$tc('sw-order.createBase.labelSalesChannel')\\\"\\n                required\\n            />\\n            {% endblock %}\\n\\n            \\n            {% block sw_order_create_details_order_language %}\\n            <sw-entity-single-select\\n                {% if VUE3 %}\\n                v-model:value=\\\"context.languageId\\\"\\n                {% else %}\\n                v-model=\\\"context.languageId\\\"\\n                {% endif %}\\n                entity=\\\"language\\\"\\n                class=\\\"sw-order-create-options__order-language\\\"\\n                :criteria=\\\"languageCriteria\\\"\\n                :label=\\\"$tc('sw-order.createBase.labelOrderLanguage')\\\"\\n                :placeholder=\\\"$tc('sw-order.createBase.placeholderOrderLanguage')\\\"\\n                show-clearable-button\\n                required\\n            />\\n        {% endblock %}\\n        </sw-container>\\n\\n        \\n        {% block sw_order_create_details_voucher_field %}\\n        <sw-order-promotion-tag-field\\n            {% if VUE3 %}\\n            v-model:value=\\\"promotionCodeTags\\\"\\n            {% else %}\\n            v-model=\\\"promotionCodeTags\\\"\\n            {% endif %}\\n            :disabled=\\\"!hasLineItem\\\"\\n            :currency=\\\"currency\\\"\\n            :label=\\\"$tc('sw-order.createBase.labelAddPromotion')\\\"\\n            :placeholder=\\\"$tc('sw-order.createBase.placeholderAddPromotion')\\\"\\n            :error=\\\"promotionError\\\"\\n            @on-remove-code=\\\"onRemoveExistingCode\\\"\\n        />\\n        {% endblock %}\\n\\n        \\n        {% block sw_order_create_details_switch_disable_auto_promotion %}\\n        <sw-switch-field\\n            class=\\\"sw-order-create-details__disable-auto-promotion\\\"\\n            :value=\\\"disabledAutoPromotion\\\"\\n            :label=\\\"$tc('sw-order.createBase.labelToggleAutomaticPromotions')\\\"\\n            {% if VUE3 %}\\n            @update:value=\\\"toggleAutomaticPromotions\\\"\\n            {% else %}\\n            @change=\\\"toggleAutomaticPromotions\\\"\\n            {% endif %}\\n        />\\n        {% endblock %}\\n    </sw-card>\\n    {% endblock %}\\n</div>\\n{% endblock %}\\n\";"],"sourceRoot":""}