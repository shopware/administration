{"version":3,"sources":["webpack:///./src/module/sw-order/component/sw-order-customer-address-select/sw-order-customer-address-select.scss","webpack:///./src/module/sw-order/component/sw-order-customer-address-select/sw-order-customer-address-select.html.twig","webpack:///./src/module/sw-order/component/sw-order-customer-address-select/index.ts"],"names":["content","__esModule","default","module","i","locals","exports","add","Component","Shopware","Criteria","Data","wrapComponentConfig","template","inject","model","prop","event","props","customer","type","Object","required","value","String","sameAddressLabel","sameAddressValue","disabled","Boolean","data","customerAddresses","isLoading","addressSearchTerm","computed","addressId","get","this","set","newValue","feature","isActive","$emit","isSameAddress","addressRepository","_this$customer$addres","_this$customer$addres2","_this$customer$addres3","repositoryFactory","create","addresses","entity","source","addressCriteria","criteria","addAssociation","setTerm","created","createdComponent","methods","getCustomerAddresses","getSelectionLabel","item","getCustomerAddress","address","result","forEach","property","push","_address$property","_address$property$tra","name","translated","join","_this","search","then","finally","searchAddress","searchTerm","_this2","hidden","has","id"],"mappings":"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","file":"static/js/52bf6e800b4d5e7350e8.js","sourcesContent":["// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../../../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--15-1!../../../../../node_modules/css-loader/dist/cjs.js??ref--15-2!../../../../../node_modules/sass-loader/dist/cjs.js??ref--15-3!./sw-order-customer-address-select.scss\");\nif(content.__esModule) content = content.default;\nif(typeof content === 'string') content = [[module.id, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar add = require(\"!../../../../../node_modules/vue-style-loader/lib/addStylesClient.js\").default\nvar update = add(\"4a8d3ae9\", content, true, {});","export default \"<sw-single-select\\n    {% if VUE3 %}\\n    v-model:value=\\\"addressId\\\"\\n    {% else %}\\n    v-model=\\\"addressId\\\"\\n    {% endif %}\\n    v-bind=\\\"$attrs\\\"\\n    class=\\\"sw-order-customer-address-select\\\"\\n    value-property=\\\"id\\\"\\n    required\\n    disable-search-function\\n    :is-loading=\\\"isLoading\\\"\\n    :options=\\\"customerAddresses\\\"\\n    :disabled=\\\"disabled\\\"\\n    @search=\\\"searchAddress\\\"\\n>\\n    <template #selection-label-property=\\\"{ item }\\\">\\n        {{ getSelectionLabel(item) }}\\n    </template>\\n\\n    <template #result-item=\\\"{ item, index, searchTerm, highlightSearchTerm, isSelected, setValue, getKey }\\\">\\n        <sw-select-result\\n            :selected=\\\"isSelected(item)\\\"\\n            v-bind=\\\"{ item, index }\\\"\\n            @item-select=\\\"setValue\\\"\\n        >\\n            <sw-highlight-text\\n                v-if=\\\"highlightSearchTerm && !isSelected(item)\\\"\\n                :text=\\\"getCustomerAddress(item)\\\"\\n                :search-term=\\\"searchTerm\\\"\\n            />\\n\\n            <template v-else>\\n                {{ getCustomerAddress(item) }}\\n            </template>\\n        </sw-select-result>\\n    </template>\\n</sw-single-select>\\n\";","import type { Entity } from '@shopware-ag/admin-extension-sdk/es/data/_internals/Entity';\nimport type { PropType } from 'vue';\nimport type EntityCollection from '@shopware-ag/admin-extension-sdk/es/data/_internals/EntityCollection';\nimport template from './sw-order-customer-address-select.html.twig';\nimport './sw-order-customer-address-select.scss';\nimport type CriteriaType from '../../../../core/data/criteria.data';\nimport type Repository from '../../../../core/data/repository.data';\n\n/**\n * @package checkout\n */\n\nconst { Component } = Shopware;\nconst { Criteria } = Shopware.Data;\n\n// eslint-disable-next-line sw-deprecation-rules/private-feature-declarations\nexport default Component.wrapComponentConfig({\n    template,\n\n    inject: [\n        'repositoryFactory',\n        'feature',\n    ],\n\n    model: {\n        prop: 'value',\n        event: 'change',\n    },\n\n    props: {\n        customer: {\n            type: Object as PropType<Entity<'customer'>>,\n            required: true,\n        },\n\n        value: {\n            type: String as PropType<string>,\n            required: true,\n        },\n\n        sameAddressLabel: {\n            type: String as PropType<string>,\n            required: false,\n            default: '',\n        },\n\n        sameAddressValue: {\n            type: String as PropType<string>,\n            required: true,\n        },\n\n        disabled: {\n            type: Boolean,\n            required: false,\n            default: false,\n        },\n    },\n\n    data(): {\n        customerAddresses: EntityCollection<'customer_address'> | [];\n        isLoading: boolean;\n        addressSearchTerm: string;\n        } {\n        return {\n            customerAddresses: [],\n            isLoading: false,\n            addressSearchTerm: '',\n        };\n    },\n\n    computed: {\n        addressId: {\n            get(): string {\n                return this.value;\n            },\n            set(newValue: string | null): void {\n                if (newValue === null) {\n                    return;\n                }\n\n                if (this.feature.isActive('VUE3')) {\n                    this.$emit('update:value', newValue);\n\n                    return;\n                }\n\n                this.$emit('change', newValue);\n            },\n        },\n\n        isSameAddress(): boolean {\n            return this.value === this.sameAddressValue;\n        },\n\n        addressRepository(): Repository<'customer_address'> {\n            return this.repositoryFactory.create(\n                this.customer.addresses?.entity ?? 'customer_address',\n                this.customer.addresses?.source,\n            );\n        },\n\n        addressCriteria(): CriteriaType {\n            const criteria = new Criteria(1, 25);\n            criteria.addAssociation('salutation');\n            criteria.addAssociation('country');\n            criteria.addAssociation('countryState');\n\n            if (this.addressSearchTerm) {\n                criteria.setTerm(this.addressSearchTerm);\n            }\n\n            return criteria;\n        },\n    },\n\n    created() {\n        this.createdComponent();\n    },\n\n    methods: {\n        createdComponent(): void {\n            void this.getCustomerAddresses();\n        },\n\n        getSelectionLabel(item: Entity<'customer_address'>): string {\n            if (this.isSameAddress && this.sameAddressLabel) {\n                return this.sameAddressLabel;\n            }\n\n            return this.getCustomerAddress(item);\n        },\n\n        getCustomerAddress(address: Entity<'customer_address'>): string {\n            if (!address) return '';\n\n            const result: Array<string> = [];\n\n            const properties = [\n                'street',\n                'zipcode',\n                'city',\n                'countryState',\n                'country',\n            ] as const;\n\n            properties.forEach((property) => {\n                const adressProperty = address[property];\n\n                if (!adressProperty) {\n                    return;\n                }\n\n                if (property === 'countryState' || property === 'country') {\n                    const name = address[property]?.translated?.name;\n\n                    if (name) {\n                        result.push(name);\n                    }\n\n                    return;\n                }\n\n                result.push(<string>address[property]);\n            });\n\n            return result.join(', ');\n        },\n\n        getCustomerAddresses(): Promise<void> {\n            this.isLoading = true;\n\n            // Get the latest addresses from customer's db\n            return this.addressRepository\n                .search(this.addressCriteria)\n                .then(\n                    (addresses: EntityCollection<'customer_address'>): void => {\n                        this.customerAddresses = addresses;\n                    },\n                )\n                .finally(() => {\n                    this.isLoading = false;\n                });\n        },\n\n        searchAddress(searchTerm: string): Promise<void> {\n            this.isLoading = true;\n\n            this.addressSearchTerm = searchTerm;\n\n            return this.addressRepository\n                .search(this.addressCriteria)\n                .then((addresses) => {\n                    this.customerAddresses.forEach((address) => {\n                        // @ts-expect-error - hidden does not exist on address entity\n                        address.hidden = !addresses.has(address.id);\n                    });\n                })\n                .finally(() => {\n                    this.isLoading = false;\n                });\n        },\n    },\n});\n"],"sourceRoot":""}