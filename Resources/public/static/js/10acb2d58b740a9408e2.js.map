{"version":3,"sources":["webpack:///./src/module/sw-settings-search/component/sw-settings-search-searchable-content-customfields/sw-settings-search-searchable-content-customfields.html.twig","webpack:///./src/module/sw-settings-search/component/sw-settings-search-searchable-content-customfields/index.js"],"names":["Mixin","Shopware","Criteria","Data","template","inject","mixins","getByName","props","isEmpty","type","Boolean","required","columns","Array","repository","Object","searchConfigs","default","isLoading","data","customFields","currentCustomFieldId","addedCustomFieldIds","computed","customFieldRepository","this","repositoryFactory","create","customFieldFilteredCriteria","_this","criteria","addAssociation","forEach","item","customFieldId","push","length","addFilter","not","equalsAny","customFieldCriteria","assetFilter","Filter","watch","newData","_isNew","$refs","customGrid","enableInlineEdit","onDbClickCell","records","created","createdComponent","methods","_this2","search","then","items","catch","createNotificationError","message","$tc","showCustomFieldWithSet","field","setName","customFieldSet","getInlineSnippet","config","label","name","itemName","concat","getMatchingCustomFields","fieldName","replace","fieldItem","find","onSelectCustomField","currentField","currentCustomField","configItem","onAddField","$emit","onInlineEditSave","promise","_this3","createNotificationSuccess","finally","onInlineEditCancel","onResetRanking","currentItem","ranking","onRemove","id"],"mappings":"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","file":"static/js/10acb2d58b740a9408e2.js","sourcesContent":["export default \"\\n{% block sw_settings_search_searchable_content_customfields %}\\n<div class=\\\"sw-settings-search__searchable-content-customfields\\\">\\n    \\n    {% block sw_settings_search_searchable_content_customfields_empty_state %}\\n    <sw-empty-state\\n        v-if=\\\"isEmpty\\\"\\n        :title=\\\"$tc('sw-settings-search.generalTab.textEmptyStateSearchableContent')\\\"\\n        :show-description=\\\"false\\\"\\n        :has-action-slot=\\\"true\\\"\\n        :absolute=\\\"false\\\"\\n    >\\n        <template #icon>\\n            \\n            {% block sw_settings_search_searchable_content_customfields_state_image %}\\n            <img\\n                :src=\\\"assetFilter('administration/static/img/empty-states/settings-empty-state.svg')\\\"\\n                :alt=\\\"$tc('sw-settings-search.generalTab.textEmptyStateSearchableContent')\\\"\\n            >\\n            {% endblock %}\\n        </template>\\n\\n        <template #actions>\\n            \\n            {% block sw_settings_search_searchable_content_customfields_empty_state_action %}\\n            <sw-button\\n                variant=\\\"ghost\\\"\\n                size=\\\"small\\\"\\n                :disabled=\\\"!acl.can('product_search_config.creator')\\\"\\n                @click=\\\"onAddField\\\"\\n            >\\n                {{ $tc('sw-settings-search.generalTab.buttonAddContent') }}\\n            </sw-button>\\n            {% endblock %}\\n        </template>\\n    </sw-empty-state>\\n    {% endblock %}\\n\\n    \\n    {% block sw_settings_search_searchable_content_customfields_grid %}\\n    <sw-entity-listing\\n        v-if=\\\"!isEmpty\\\"\\n        ref=\\\"customGrid\\\"\\n        class=\\\"sw-settings-search__searchable-content-list\\\"\\n        :columns=\\\"columns\\\"\\n        :repository=\\\"repository\\\"\\n        :allow-column-edit=\\\"false\\\"\\n        :full-page=\\\"false\\\"\\n        :show-settings=\\\"false\\\"\\n        :show-selection=\\\"false\\\"\\n        :is-loading=\\\"isLoading\\\"\\n        :items=\\\"searchConfigs\\\"\\n        :allow-inline-edit=\\\"acl.can('product_search_config.editor')\\\"\\n        :allow-edit=\\\"acl.can('product_search_config.editor')\\\"\\n        :allow-delete=\\\"acl.can('product_search_config.deleter')\\\"\\n        @inline-edit-save=\\\"onInlineEditSave\\\"\\n        @inline-edit-cancel=\\\"onInlineEditCancel\\\"\\n    >\\n        \\n        {% block sw_settings_search_searchable_content_customfields_field %}\\n        <template #column-field=\\\"{ item, isInlineEdit }\\\">\\n            <template v-if=\\\"item._isNew && isInlineEdit\\\">\\n                \\n                {% block sw_settings_search_searchable_content_customfields_field_editor %}\\n                <sw-entity-single-select\\n                    {% if VUE3 %}\\n                    v-model:value=\\\"currentCustomFieldId\\\"\\n                    {% else %}\\n                    v-model=\\\"currentCustomFieldId\\\"\\n                    {% endif %}\\n                    class=\\\"sw-settings-search-custom-field-select\\\"\\n                    entity=\\\"custom_field\\\"\\n                    :criteria=\\\"customFieldFilteredCriteria\\\"\\n                    show-clearable-button\\n                    {% if VUE3 %}\\n                    @update:value=\\\"(id, customfield) => onSelectCustomField(customfield)\\\"\\n                    {% else %}\\n                    @change=\\\"(id, customfield) => onSelectCustomField(customfield)\\\"\\n                    {% endif %}\\n                >\\n\\n                    <template #selection-label-property=\\\"{ item }\\\">\\n                        {{ showCustomFieldWithSet(item) }}\\n                    </template>\\n\\n                    <template #result-label-property=\\\"{ item }\\\">\\n                        {{ showCustomFieldWithSet(item) }}\\n                    </template>\\n\\n                </sw-entity-single-select>\\n                {% endblock %}\\n            </template>\\n\\n            <template v-else>\\n                \\n                {% block sw_settings_search_searchable_content_customfields_field_label %}\\n                {{ getMatchingCustomFields(item.field) }}\\n                {% endblock %}\\n            </template>\\n        </template>\\n        {% endblock %}\\n\\n        \\n        {% block sw_settings_search_searchable_content_customfields_ranking %}\\n        <template #column-ranking=\\\"{ item, isInlineEdit }\\\">\\n            <template v-if=\\\"isInlineEdit\\\">\\n                \\n                {% block sw_settings_search_searchable_content_customfields_ranking_editor %}\\n                <sw-number-field\\n                    {% if VUE3 %}\\n                    v-model:value=\\\"item.ranking\\\"\\n                    {% else %}\\n                    v-model=\\\"item.ranking\\\"\\n                    {% endif %}\\n                    number-type=\\\"int\\\"\\n                    size=\\\"small\\\"\\n                />\\n                {% endblock %}\\n            </template>\\n        </template>\\n        {% endblock %}\\n\\n        \\n        {% block sw_settings_search_searchable_content_customfields_searchable %}\\n        <template #column-searchable=\\\"{ item, isInlineEdit }\\\">\\n            <template v-if=\\\"isInlineEdit\\\">\\n                \\n                {% block sw_settings_search_searchable_content_customfields_searchable_editor %}\\n                <sw-checkbox-field\\n                    {% if VUE3 %}\\n                    v-model:value=\\\"item.searchable\\\"\\n                    {% else %}\\n                    v-model=\\\"item.searchable\\\"\\n                    {% endif %}\\n                />\\n                {% endblock %}\\n            </template>\\n\\n            <template v-else>\\n                \\n                {% block sw_settings_search_searchable_content_customfields_searchable_label %}\\n                <sw-icon\\n                    v-if=\\\"item.searchable\\\"\\n                    class=\\\"is--active\\\"\\n                    name=\\\"regular-checkmark-xs\\\"\\n                    small\\n                />\\n                <sw-icon\\n                    v-else\\n                    class=\\\"is--inactive\\\"\\n                    name=\\\"regular-times-s\\\"\\n                    small\\n                />\\n                {% endblock %}\\n            </template>\\n        </template>\\n        {% endblock %}\\n\\n        \\n        {% block sw_settings_search_searchable_content_customfields_tokenize %}\\n        <template #column-tokenize=\\\"{ item, isInlineEdit }\\\">\\n            <template v-if=\\\"isInlineEdit\\\">\\n                \\n                {% block sw_settings_search_searchable_content_customfields_tokenize_editor %}\\n                <sw-checkbox-field\\n                    {% if VUE3 %}\\n                    v-model:value=\\\"item.tokenize\\\"\\n                    {% else %}\\n                    v-model=\\\"item.tokenize\\\"\\n                    {% endif %}\\n                />\\n                {% endblock %}\\n            </template>\\n\\n            <template v-else>\\n                \\n                {% block sw_settings_search_searchable_content_customfields_tokenize_label %}\\n                <sw-icon\\n                    v-if=\\\"item.tokenize\\\"\\n                    class=\\\"is--active\\\"\\n                    name=\\\"regular-checkmark-xs\\\"\\n                    small\\n                />\\n                <sw-icon\\n                    v-else\\n                    class=\\\"is--inactive\\\"\\n                    name=\\\"regular-times-s\\\"\\n                    small\\n                />\\n                {% endblock %}\\n            </template>\\n        </template>\\n        {% endblock %}\\n\\n        \\n        {% block sw_settings_search_searchable_content_customfields_columns_actions %}\\n        <template #actions=\\\"{ item }\\\">\\n            \\n            {% block sw_settings_search_searchable_content_customfields_columns_actions_edit %}\\n            <sw-context-menu-item\\n                class=\\\"sw-settings-search__searchable-content-list-action sw-settings-search__searchable-content-list-reset\\\"\\n                :disabled=\\\"!acl.can('product_search_config.editor')\\\"\\n                @click=\\\"onResetRanking(item)\\\"\\n            >\\n                {{ $tc('sw-settings-search.generalTab.list.textResetRanking') }}\\n            </sw-context-menu-item>\\n            {% endblock %}\\n\\n            \\n            {% block sw_settings_search_searchable_content_customfields_columns_actions_delete %}\\n            <sw-context-menu-item\\n                class=\\\"sw-settings-search__searchable-content-list-action sw-settings-search__searchable-content-list-remove\\\"\\n                :disabled=\\\"!acl.can('product_search_config.deleter')\\\"\\n                @click=\\\"onRemove(item)\\\"\\n            >\\n                {{ $tc('sw-settings-search.generalTab.list.textRemove') }}\\n            </sw-context-menu-item>\\n            {% endblock %}\\n        </template>\\n        {% endblock %}\\n    </sw-entity-listing>\\n    {% endblock %}\\n</div>\\n{% endblock %}\\n\";","/**\n * @package buyers-experience\n */\nimport template from './sw-settings-search-searchable-content-customfields.html.twig';\n\nconst { Mixin } = Shopware;\nconst { Criteria } = Shopware.Data;\n\n// eslint-disable-next-line sw-deprecation-rules/private-feature-declarations\nexport default {\n    template,\n\n    inject: [\n        'repositoryFactory',\n        'acl',\n    ],\n\n    mixins: [\n        Mixin.getByName('notification'),\n        Mixin.getByName('sw-inline-snippet'),\n    ],\n\n    props: {\n        isEmpty: {\n            type: Boolean,\n            required: true,\n        },\n\n        columns: {\n            type: Array,\n            required: true,\n        },\n\n        repository: {\n            type: Object,\n            required: true,\n        },\n\n        searchConfigs: {\n            type: Array,\n            required: false,\n            default() {\n                return null;\n            },\n        },\n\n        isLoading: {\n            type: Boolean,\n            required: false,\n            default: false,\n        },\n    },\n\n    data() {\n        return {\n            customFields: [],\n            currentCustomFieldId: null,\n            addedCustomFieldIds: [],\n        };\n    },\n\n    computed: {\n        customFieldRepository() {\n            return this.repositoryFactory.create('custom_field');\n        },\n\n        customFieldFilteredCriteria() {\n            const criteria = new Criteria(1, 25);\n            criteria.addAssociation('customFieldSet');\n\n            if (!this.searchConfigs) {\n                return criteria;\n            }\n\n            this.searchConfigs.forEach(item => {\n                if (item?.customFieldId) {\n                    this.addedCustomFieldIds.push(item.customFieldId);\n                }\n            });\n\n            if (this.addedCustomFieldIds.length === 0) {\n                return criteria;\n            }\n\n            criteria.addFilter(Criteria.not(\n                'AND',\n                [\n                    Criteria.equalsAny('id', this.addedCustomFieldIds),\n                ],\n            ));\n\n            return criteria;\n        },\n\n        customFieldCriteria() {\n            const criteria = new Criteria(1, 25);\n            criteria.addAssociation('customFieldSet');\n\n            return criteria;\n        },\n\n        assetFilter() {\n            return Shopware.Filter.getByName('asset');\n        },\n    },\n\n    watch: {\n        searchConfigs(newData) {\n            if (newData[0] && newData[0]._isNew) {\n                this.$refs.customGrid.enableInlineEdit();\n                this.$refs.customGrid.onDbClickCell(this.$refs.customGrid.records[0]);\n            }\n        },\n    },\n\n    created() {\n        this.createdComponent();\n    },\n\n    methods: {\n        createdComponent() {\n            this.customFieldRepository.search(this.customFieldCriteria)\n                .then(items => {\n                    this.customFields = items;\n                })\n                .catch(() => {\n                    this.createNotificationError({\n                        message: this.$tc('sw-settings-search.notification.loadError'),\n                    });\n                });\n        },\n\n        showCustomFieldWithSet(field) {\n            let setName = '';\n            if (field?.customFieldSet) {\n                setName = this.getInlineSnippet(field.customFieldSet.config.label) || field.customFieldSet.name;\n            }\n\n            const itemName = this.getInlineSnippet(field.config.label) || field.name;\n            return `${setName} - ${itemName}`;\n        },\n\n        getMatchingCustomFields(field) {\n            if (!field) { return ''; }\n\n            const fieldName = field.replace('customFields.', '');\n            const fieldItem = this.customFields.find(item => item.name === fieldName);\n\n            if (fieldItem) {\n                return this.showCustomFieldWithSet(fieldItem);\n            }\n            return fieldName;\n        },\n\n        onSelectCustomField(currentField) {\n            const currentCustomField = this.searchConfigs.find((configItem) => configItem._isNew);\n\n            currentCustomField.field = `customFields.${currentField.name}`;\n            currentCustomField.customFieldId = this.currentCustomFieldId;\n        },\n\n        onAddField() {\n            this.$emit('config-add');\n        },\n\n        onInlineEditSave(promise) {\n            promise\n                .then(() => {\n                    this.createNotificationSuccess({\n                        message: this.$tc('sw-settings-search.notification.saveSuccess'),\n                    });\n                })\n                .catch(() => {\n                    this.createNotificationError({\n                        message: this.$tc('sw-settings-search.notification.saveError'),\n                    });\n                })\n                .finally(() => {\n                    this.currentCustomFieldId = null;\n                    this.$emit('data-load');\n                });\n        },\n\n        onInlineEditCancel() {\n            this.currentCustomFieldId = null;\n            this.$emit('data-load');\n        },\n\n        onResetRanking(currentField) {\n            if (!currentField.field) {\n                this.createNotificationError({\n                    message: this.$tc('sw-settings-search.notification.saveError'),\n                });\n\n                this.$emit('data-load');\n                return;\n            }\n\n            const currentItem = this.searchConfigs.find((item) => item.field === currentField.field);\n            if (!currentItem) {\n                this.createNotificationError({\n                    message: this.$tc('sw-settings-search.notification.saveError'),\n                });\n\n                return;\n            }\n\n            currentItem.ranking = 0;\n            this.$emit('config-save');\n        },\n\n        onRemove(currentField) {\n            if (!currentField.field) {\n                this.$emit('data-load');\n                return;\n            }\n\n            this.$emit('config-delete', currentField.id);\n        },\n    },\n};\n"],"sourceRoot":""}