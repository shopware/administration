{"version":3,"sources":["webpack:///./src/module/sw-settings-listing/component/sw-settings-listing-option-criteria-grid/sw-settings-listing-option-criteria-grid.scss","webpack:///./src/module/sw-settings-listing/component/sw-settings-listing-option-criteria-grid/index.js","webpack:///./src/module/sw-settings-listing/component/sw-settings-listing-option-criteria-grid/sw-settings-listing-option-criteria-grid.html.twig"],"names":["content","__esModule","default","module","i","locals","exports","add","Mixin","Shopware","Criteria","Data","template","inject","mixins","getByName","props","productSortingEntity","type","Object","required","data","customFields","selectedCriteria","customFieldSetIDs","notSortableCustomFields","computed","customFieldRepository","this","repositoryFactory","create","customFieldSetRepository","customFieldSetRelationsRepository","customFieldCriteria","criteria","addFilter","not","equalsAny","getProductSortingFieldsByName","length","customFieldsRelationsCriteria","equals","sortedProductSortingFields","fields","sort","a","b","priority","productSortingEntityColumns","property","label","$tc","inlineEdit","criteriaOptions","value","localeCompare","orderOptions","assetFilter","Filter","watch","handler","forEach","field","deep","created","createdComponent","methods","_this","fetchCustomFieldSetIds","then","fetchCustomFields","_this2","search","response","map","currentField","customFieldSetId","_this3","isItemACustomField","fieldName","strippedFieldName","stripCustomFieldPath","some","currentCustomField","name","getCustomFieldByName","technicalName","find","onAddCriteria","_this4","criteriaIsAlreadyUsed","criteriaName","getCriteriaSnippetByFieldName","createNotificationError","message","$t","$emit","record","$nextTick","$refs","dataGrid","onDbClickCell","getOrderSnippet","order","onRemoveCriteria","item","getCriteriaTemplate","naturalSorting","onSaveInlineEdit","concat","filterEmptyCustomFields","onCancelInlineEdit","filter","replace","currentCriteria","getCustomFieldLabelByCriteriaName","customField","getInlineSnippet","config","getCustomFieldName","inlineSnippet","customFieldCriteriaSingleSelect","changeCustomField","key","_this5","_asyncToGenerator","_regeneratorRuntime","mark","_callee","wrap","_context","prev","next","stop","arguments","undefined","test"],"mappings":"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","file":"static/js/308aeff669ed14e20fb1.js","sourcesContent":["// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../../../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--15-1!../../../../../node_modules/css-loader/dist/cjs.js??ref--15-2!../../../../../node_modules/sass-loader/dist/cjs.js??ref--15-3!./sw-settings-listing-option-criteria-grid.scss\");\nif(content.__esModule) content = content.default;\nif(typeof content === 'string') content = [[module.id, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar add = require(\"!../../../../../node_modules/vue-style-loader/lib/addStylesClient.js\").default\nvar update = add(\"32e4f8c5\", content, true, {});","import template from './sw-settings-listing-option-criteria-grid.html.twig';\nimport './sw-settings-listing-option-criteria-grid.scss';\n\nconst { Mixin } = Shopware;\nconst { Criteria } = Shopware.Data;\n\n// eslint-disable-next-line sw-deprecation-rules/private-feature-declarations\nexport default {\n    template,\n\n    inject: ['repositoryFactory'],\n\n    mixins: [\n        Mixin.getByName('notification'),\n        Mixin.getByName('sw-inline-snippet'),\n    ],\n\n    props: {\n        productSortingEntity: {\n            type: Object,\n            required: true,\n        },\n    },\n\n    data() {\n        return {\n            customFields: [],\n            selectedCriteria: null,\n            customFieldSetIDs: null,\n            notSortableCustomFields: [\n                'price',\n                'json',\n                'text',\n                'html',\n            ],\n        };\n    },\n\n    computed: {\n        customFieldRepository() {\n            return this.repositoryFactory.create('custom_field');\n        },\n\n        customFieldSetRepository() {\n            return this.repositoryFactory.create('custom_field_set');\n        },\n\n        customFieldSetRelationsRepository() {\n            return this.repositoryFactory.create('custom_field_set_relation');\n        },\n\n        customFieldCriteria() {\n            const criteria = new Criteria(1, 25);\n\n            criteria.addFilter(Criteria.not(\n                'and',\n                [\n                    Criteria.equalsAny('type', this.notSortableCustomFields),\n\n                ],\n            ));\n\n            if (this.customFieldSetIDs) {\n                criteria.addFilter(\n                    Criteria.equalsAny('customFieldSetId', this.customFieldSetIDs),\n                );\n            }\n\n            if (this.getProductSortingFieldsByName().length) {\n                criteria.addFilter(\n                    Criteria.equalsAny('id', this.getProductSortingFieldsByName()),\n                );\n            }\n\n            return criteria;\n        },\n\n        customFieldsRelationsCriteria() {\n            const criteria = new Criteria(1, 25);\n\n            criteria.addFilter(Criteria.equals('entityName', 'product'));\n\n            return criteria;\n        },\n\n        /**\n         * Sorts custom fields by their priority in an ascending order.\n         * @returns {[]}\n         */\n        sortedProductSortingFields() {\n            // eslint-disable-next-line vue/no-side-effects-in-computed-properties\n            return this.productSortingEntity.fields.sort((a, b) => {\n                if (a.priority === b.priority) {\n                    return 0;\n                }\n\n                return a.priority < b.priority ? 1 : -1;\n            });\n        },\n\n        productSortingEntityColumns() {\n            return [\n                {\n                    property: 'field',\n                    label: this.$tc('sw-settings-listing.general.productSortingCriteriaGrid.header.name'),\n                    inlineEdit: 'string',\n                },\n                {\n                    property: 'order',\n                    label: this.$tc('sw-settings-listing.general.productSortingCriteriaGrid.header.order'),\n                    inlineEdit: 'string',\n                },\n                {\n                    property: 'priority',\n                    label: this.$tc('sw-settings-listing.general.productSortingCriteriaGrid.header.priority'),\n                    inlineEdit: 'number',\n                },\n            ];\n        },\n\n        criteriaOptions() {\n            const criteriaOptions = [\n                {\n                    value: 'product.name',\n                    label: this.$tc(\n                        'sw-settings-listing.general.productSortingCriteriaGrid.options.label.product.name',\n                    ),\n                },\n                {\n                    value: 'product.ratingAverage',\n                    label: this.$tc(\n                        'sw-settings-listing.general.productSortingCriteriaGrid.options.label.product.ratingAverage',\n                    ),\n                },\n                {\n                    value: 'product.productNumber',\n                    label: this.$tc(\n                        'sw-settings-listing.general.productSortingCriteriaGrid.options.label.product.productNumber',\n                    ),\n                },\n                {\n                    value: 'product.releaseDate',\n                    label: this.$tc(\n                        'sw-settings-listing.general.productSortingCriteriaGrid.options.label.product.releaseDate',\n                    ),\n                },\n                {\n                    value: 'product.stock',\n                    label: this.$tc(\n                        'sw-settings-listing.general.productSortingCriteriaGrid.options.label.product.stock',\n                    ),\n                },\n                {\n                    value: 'product.sales',\n                    label: this.$tc(\n                        'sw-settings-listing.general.productSortingCriteriaGrid.options.label.product.sales',\n                    ),\n                },\n                {\n                    value: 'customField',\n                    label: this.$tc('sw-settings-listing.general.productSortingCriteriaGrid.options.label.customField'),\n                },\n                {\n                    value: 'product.cheapestPrice',\n                    label: this.$tc(\n                        'sw-settings-listing.general.productSortingCriteriaGrid.options.label.product.cheapestPrice',\n                    ),\n                },\n                {\n                    value: 'product.price',\n                    label: this.$tc('sw-settings-listing.general.productSortingCriteriaGrid.options.label.product.price'),\n                },\n            ];\n\n            return criteriaOptions.sort((a, b) => {\n                return a.label.localeCompare(b.label);\n            });\n        },\n\n        orderOptions() {\n            return [\n                {\n                    label: this.$tc('global.default.ascending'),\n                    value: 'asc',\n                },\n                {\n                    label: this.$tc('global.default.descending'),\n                    value: 'desc',\n                },\n            ];\n        },\n\n        assetFilter() {\n            return Shopware.Filter.getByName('asset');\n        },\n    },\n\n    watch: {\n        productSortingEntity: {\n            handler() {\n                if (!this.productSortingEntity || !this.productSortingEntity.fields) {\n                    return;\n                }\n\n                this.productSortingEntity.fields.forEach(field => {\n                    if (field.field === null) {\n                        field.field = 'customField';\n                    }\n                });\n            },\n            deep: true,\n        },\n    },\n\n    created() {\n        this.createdComponent();\n    },\n\n    methods: {\n        createdComponent() {\n            this.fetchCustomFieldSetIds().then(() => {\n                this.fetchCustomFields();\n            });\n        },\n\n        fetchCustomFieldSetIds() {\n            return this.customFieldSetRelationsRepository.search(this.customFieldsRelationsCriteria).then(response => {\n                this.customFieldSetIDs = response.map(currentField => {\n                    return currentField.customFieldSetId;\n                });\n            });\n        },\n\n        fetchCustomFields() {\n            this.customFieldRepository.search(this.customFieldCriteria).then(response => {\n                this.customFields = response;\n            });\n        },\n\n        /**\n         * Checks if the given field is a custom field.\n         * @param {string} fieldName\n         * @returns {boolean}\n         */\n        isItemACustomField(fieldName) {\n            const strippedFieldName = this.stripCustomFieldPath(fieldName);\n\n            return this.customFields.some(currentCustomField => {\n                return currentCustomField.name === strippedFieldName;\n            });\n        },\n\n        getCustomFieldByName(technicalName) {\n            return this.customFields.find(currentCustomField => {\n                return currentCustomField.name === technicalName;\n            });\n        },\n\n        /**\n         * First checks if the newly added criteria is already used. If not it emits an 'criteria-add' event.\n         * Otherwise it creates an error notification.\n         * @param {string} fieldName\n         */\n        onAddCriteria(fieldName) {\n            if (!this.criteriaIsAlreadyUsed(fieldName)) {\n                this.$emit('criteria-add', fieldName);\n\n                const record = this.productSortingEntity.fields.find(field => field.field === fieldName);\n                this.$nextTick().then(() => {\n                    if (record && this.$refs.dataGrid) {\n                        this.$refs.dataGrid.onDbClickCell(record);\n                    }\n                });\n\n                return;\n            }\n\n            const criteriaName = this.getCriteriaSnippetByFieldName(fieldName);\n\n            this.createNotificationError({\n                message: this.$t(\n                    'sw-settings-listing.general.productSortingCriteriaGrid.options.criteriaAlreadyUsed',\n                    { criteriaName },\n                ),\n            });\n        },\n\n        getOrderSnippet(order) {\n            if (order === 'asc') {\n                return this.$tc('global.default.ascending');\n            }\n\n            return this.$tc('global.default.descending');\n        },\n\n        onRemoveCriteria(item) {\n            this.$emit('criteria-delete', item);\n        },\n\n        getCriteriaTemplate(fieldName) {\n            return { field: fieldName, order: 'asc', priority: 1, naturalSorting: 0 };\n        },\n\n        onSaveInlineEdit(item) {\n            if (item.field === null) {\n                this.createNotificationError({\n                    message: this.$t(\n                        'sw-settings-listing.general.productSortingCriteriaGrid.options.customFieldCriteriaNotNull',\n                    ),\n                });\n\n                return;\n            }\n\n            if (item.field === 'customFields') {\n                item.field = `customFields.${item.field}`;\n            }\n\n            if (item.field === 'customField') {\n                this.createNotificationError({\n                    message: this.$t(\n                        'sw-settings-listing.general.productSortingCriteriaGrid.options.customFieldCriteriaNotNull',\n                    ),\n                });\n\n                this.filterEmptyCustomFields(item);\n                return;\n            }\n\n            this.$emit('inline-edit-save');\n        },\n\n        onCancelInlineEdit(item) {\n            if (item && item.field === 'customField') {\n                this.filterEmptyCustomFields(item);\n            } else {\n                this.$emit('inline-edit-cancel', item);\n            }\n        },\n\n        filterEmptyCustomFields(item) {\n            this.productSortingEntity.fields = this.productSortingEntity.fields.filter(field => {\n                return field.field !== item.field;\n            });\n        },\n\n        /**\n         * removes the stripCustomFieldPath `customFields.` part of the string.\n         * @param {string} fieldName\n         * @returns {string}\n         */\n        stripCustomFieldPath(fieldName) {\n            return fieldName.replace(/customFields\\./, '');\n        },\n\n        /**\n         * Returns the snippet of the corresponding field.\n         * @param {string} fieldName\n         * @returns {string}\n         */\n        getCriteriaSnippetByFieldName(fieldName) {\n            return this.$tc(`sw-settings-listing.general.productSortingCriteriaGrid.options.label.${fieldName}`);\n        },\n\n        criteriaIsAlreadyUsed(criteriaName) {\n            return this.productSortingEntity.fields.some(currentCriteria => {\n                return currentCriteria.field === criteriaName;\n            });\n        },\n\n        getCustomFieldLabelByCriteriaName(criteriaName) {\n            const technicalName = this.stripCustomFieldPath(criteriaName);\n            const customField = this.getCustomFieldByName(technicalName);\n\n            return this.getInlineSnippet(customField.config.label) || technicalName;\n        },\n\n        getCustomFieldName(customField) {\n            const inlineSnippet = customField && this.getInlineSnippet(customField.config.label);\n\n            if (!inlineSnippet) {\n                return customField?.name;\n            }\n\n            return inlineSnippet;\n        },\n\n        customFieldCriteriaSingleSelect(customField) {\n            const criteria = new Criteria(1, 25);\n\n            criteria.addFilter(Criteria.not(\n                'and',\n                [\n                    Criteria.equalsAny('type', this.notSortableCustomFields),\n\n                ],\n            ));\n\n            if (this.customFieldSetIDs) {\n                criteria.addFilter(\n                    Criteria.equalsAny('customFieldSetId', this.customFieldSetIDs),\n                );\n            }\n\n            if (this.getProductSortingFieldsByName(customField).length) {\n                criteria.addFilter(Criteria.not(\n                    'AND',\n                    [\n                        Criteria.equalsAny('id', this.getProductSortingFieldsByName(customField)),\n                    ],\n                ));\n            }\n\n            return criteria;\n        },\n\n        async changeCustomField(key, field) {\n            const customField = this.sortedProductSortingFields.find((item) => {\n                return item.field === 'customField' || item.name === key;\n            });\n\n            customField.field = `customFields.${field.name}`;\n\n            await this.fetchCustomFields();\n\n            this.onSaveInlineEdit(customField.field);\n        },\n\n        getProductSortingFieldsByName(customField = null) {\n            return this.sortedProductSortingFields.filter((item) => {\n                if (customField) {\n                    return /^customFields\\./.test(item.field) && item.field !== customField.field;\n                }\n\n                return /^customFields\\./.test(item.field);\n            }).map(item => item.name) || {};\n        },\n    },\n};\n","export default \"\\n{% block sw_settings_listing_option_criteria_card %}\\n<sw-card\\n    class=\\\"sw-settings-listing-option-criteria-grid__criteria-card\\\"\\n    position-identifier=\\\"sw-settings-listing-option-criteria-grid\\\"\\n    :title=\\\"$tc('sw-settings-listing.base.criteria.title')\\\"\\n>\\n\\n    \\n    {% block sw_settings_listing_option_criteria_card_toolbar %}\\n    <template #toolbar>\\n\\n        \\n        {% block sw_settings_listing_option_criteria_card_toolbar_select %}\\n        <sw-single-select\\n            :value=\\\"selectedCriteria\\\"\\n            :options=\\\"criteriaOptions\\\"\\n            :placeholder=\\\"$tc('sw-settings-listing.base.criteria.selectPlaceholder')\\\"\\n            value-property=\\\"value\\\"\\n            label-property=\\\"label\\\"\\n            show-clearable-button\\n            {% if VUE3 %}\\n            @update:value=\\\"onAddCriteria\\\"\\n            {% else %}\\n            @change=\\\"onAddCriteria\\\"\\n            {% endif %}\\n        />\\n        {% endblock %}\\n    </template>\\n    {% endblock %}\\n\\n    \\n    {% block sw_settings_listing_option_criteria_card_grid %}\\n    <sw-data-grid\\n        v-if=\\\"productSortingEntity && productSortingEntity.fields.length > 0\\\"\\n        ref=\\\"dataGrid\\\"\\n        :columns=\\\"productSortingEntityColumns\\\"\\n        :data-source=\\\"sortedProductSortingFields\\\"\\n        :show-actions=\\\"true\\\"\\n        :allow-inline-edit=\\\"true\\\"\\n        :compact-mode=\\\"false\\\"\\n        :show-selection=\\\"false\\\"\\n        plain-appearance\\n        item-identifier-property=\\\"field\\\"\\n        @inline-edit-save=\\\"onSaveInlineEdit\\\"\\n        @inline-edit-cancel=\\\"onCancelInlineEdit\\\"\\n    >\\n\\n        \\n        {% block sw_settings_listing_option_criteria_card_grid_column_field %}\\n        <template #column-field=\\\"{item, isInlineEdit}\\\">\\n\\n            \\n            {% block sw_settings_listing_option_criteria_card_grid_column_field_select %}\\n            <sw-entity-single-select\\n                v-if=\\\"item.field === 'customField' || (isItemACustomField(item.field) && isInlineEdit)\\\"\\n                ref=\\\"customFieldSelection\\\"\\n                v-model=\\\"item.name\\\"\\n                :placeholder=\\\"$tc('global.sw-single-select.valuePlaceholder')\\\"\\n                :criteria=\\\"customFieldCriteriaSingleSelect(item)\\\"\\n                :label-callback=\\\"getCustomFieldName\\\"\\n                entity=\\\"custom_field\\\"\\n                show-clearable-button\\n                {% if VUE3 %}\\n                @update:value=\\\"changeCustomField\\\"\\n                {% else %}\\n                @change=\\\"changeCustomField\\\"\\n                {% endif %}\\n            />\\n            {% endblock %}\\n\\n            \\n            {% block sw_settings_listing_option_criteria_card_grid_column_field_custom_field %}\\n            <span v-else-if=\\\"isItemACustomField(item.field)\\\">\\n                {{ getCustomFieldLabelByCriteriaName(item.field) }}\\n            </span>\\n            {% endblock %}\\n\\n            \\n            {% block sw_settings_listing_option_criteria_card_grid_column_field_custom_criteria %}\\n            <span v-else>\\n                {{ getCriteriaSnippetByFieldName(item.field) }}\\n            </span>\\n            {% endblock %}\\n        </template>\\n        {% endblock %}\\n\\n        \\n        {% block sw_settings_listing_option_criteria_card_grid_column_order %}\\n        <template #column-order=\\\"{item, isInlineEdit}\\\">\\n\\n            \\n            {% block sw_settings_listing_option_criteria_card_grid_column_order_text %}\\n            <div v-if=\\\"!isInlineEdit\\\">\\n                {{ getOrderSnippet(item.order) }}\\n            </div>\\n            {% endblock %}\\n\\n            \\n            {% block sw_settings_listing_option_criteria_card_grid_column_order_select %}\\n            <sw-single-select\\n                v-else\\n                {% if VUE3 %}\\n                v-model:value=\\\"item.order\\\"\\n                {% else %}\\n                v-model=\\\"item.order\\\"\\n                {% endif %}\\n                :options=\\\"orderOptions\\\"\\n                value-property=\\\"value\\\"\\n                label-property=\\\"label\\\"\\n                show-clearable-button\\n                :placeholder=\\\"$tc('global.sw-single-select.valuePlaceholder')\\\"\\n            />\\n            {% endblock %}\\n        </template>\\n        {% endblock %}\\n\\n        \\n        {% block sw_settings_listing_option_criteria_card_grid_column_actions %}\\n        <template #actions=\\\"{item}\\\">\\n\\n            \\n            {% block sw_settings_listing_option_criteria_card_grid_column_actions_delete %}\\n            <sw-context-menu-item\\n                variant=\\\"danger\\\"\\n                @click=\\\"onRemoveCriteria(item)\\\"\\n            >\\n                {{ $tc('global.default.delete') }}\\n            </sw-context-menu-item>\\n            {% endblock %}\\n        </template>\\n        {% endblock %}\\n    </sw-data-grid>\\n    {% endblock %}\\n\\n    \\n    {% block sw_settings_listing_option_criteria_card_empty_state %}\\n    <sw-empty-state\\n        v-else\\n        class=\\\"sw-settings-listing-option-criteria-grid__criteria-empty-state\\\"\\n        title=\\\"\\\"\\n        :subline=\\\"$tc('sw-settings-listing.base.criteria.emptyStateSubline')\\\"\\n    >\\n\\n        \\n        {% block sw_settings_listing_option_criteria_card_empty_state_icon %}\\n        <template #icon>\\n            <img\\n                :src=\\\"assetFilter('administration/static/img/empty-states/settings-empty-state.svg')\\\"\\n                alt=\\\"\\\"\\n            >\\n        </template>\\n        {% endblock %}\\n\\n    </sw-empty-state>\\n    {% endblock %}\\n</sw-card>\\n{% endblock %}\\n\";"],"sourceRoot":""}