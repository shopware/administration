{"version":3,"sources":["webpack:///./src/module/sw-flow/component/sw-flow-trigger/index.js","webpack:///./src/module/sw-flow/component/sw-flow-trigger/sw-flow-trigger.html.twig","webpack:///./src/module/sw-flow/component/sw-flow-trigger/sw-flow-trigger.scss"],"names":["_Shopware","Shopware","Component","State","_Component$getCompone","getComponentHelper","mapPropertyErrors","mapState","mapGetters","utils","Utils","_Shopware$Utils$strin","string","camelCase","capitalizeString","isEmpty","types","template","inject","props","overlay","type","Boolean","required","default","disabled","eventName","String","isUnknownTrigger","data","events","isExpanded","isLoading","searchTerm","searchResult","searchResultFocusItem","selectedTreeItem","setInputFocusClass","removeInputFocusClass","showConfirmModal","triggerSelect","computed","_objectSpread","swFlowTriggerClasses","this","formatEventName","getEventName","showTreeView","eventTree","length","getEventTree","triggerEvents","isTemplate","_this$$route$query","$route","query","triggerNamePlaceholder","$tc","watch","immediate","handler","value","params","_this","keyWords","split","filter","event","name","toLowerCase","every","key","includes","newValue","_this2","id","debounce","offsetValue","foundTreeRoot","actualElement","findTreeItemVNodeById","$el","classList","contains","offsetTop","offsetParent","scrollTo","top","clientHeight","behavior","created","createdComponent","beforeDestroy","beforeDestroyComponent","methods","document","addEventListener","handleClickEvent","handleGeneralKeyEvents","dispatch","commit","getDataByEvent","removeEventListener","target","closest","closeDropdown","handleArrowKeyEvents","onClickSearchItem","_this$selectedTreeIte","childCount","changeTrigger","preventDefault","changeSearchSelection","actualSelection","_actualSelection$item","item","opened","newSelection","getFirstChildById","getSibling","getClosestSiblingAncestor","parentId","_actualSelection$item2","_parent$item","parent","children","getClosestSiblingDescendant","toggleSelectedTreeItem","_parent$item2","nextParent","foundItemNode","lastChildIndex","lastChild","itemId","arguments","undefined","$refs","flowTriggerTree","treeItems","foundItem","find","child","i","foundItemInChild","isNext","itemIndex","indexOf","typeValue","actualIndex","focusItem","shouldOpen","vnode","openTreeItem","_children$item","$children","found","Array","isArray","_child$item","foundInChildren","openDropdown","_ref","_this3","setFocusClass","removeFocusClass","$nextTick","currentEvent","isSequenceEmpty","$emit","flow","onConfirm","onCloseConfirm","getBusinessEvents","_this4","businessEventService","then","finally","getLastEventName","_ref2","_ref2$parentId","_ref3","reverse","_slicedToArray","getEventNameTranslated","hasOnlyStopFlow","aware","_this5","mappedObj","forEach","eventNameKeys","generateTreeData","currentIndex","result","currentKey","nextKey","concat","convertTreeToArray","nodes","output","node","Object","values","push","disabledToolTipText","getBreadcrumb","map","join","replace","_this6","isSearchResultInFocus","_this7","eventNameCamelCase","translatedEventName","$te","content","__esModule","module","locals","exports","add"],"mappings":"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","file":"static/js/bb7240c57dcfee047405.js","sourcesContent":["import template from './sw-flow-trigger.html.twig';\nimport './sw-flow-trigger.scss';\n\nconst { Component, State } = Shopware;\nconst { mapPropertyErrors, mapState, mapGetters } = Component.getComponentHelper();\nconst utils = Shopware.Utils;\nconst { camelCase, capitalizeString } = Shopware.Utils.string;\nconst { isEmpty } = utils.types;\n\n/**\n * @private\n * @package services-settings\n */\nexport default {\n    template,\n\n    inject: ['repositoryFactory', 'businessEventService'],\n\n    props: {\n        overlay: {\n            type: Boolean,\n            required: false,\n            // TODO: Boolean props should only be opt in and therefore default to false\n            // eslint-disable-next-line vue/no-boolean-default\n            default: true,\n        },\n        disabled: {\n            type: Boolean,\n            required: false,\n            default: false,\n        },\n        eventName: {\n            type: String,\n            required: true,\n        },\n        isUnknownTrigger: {\n            type: Boolean,\n            required: false,\n            default: false,\n        },\n    },\n\n    data() {\n        return {\n            /** @deprecated tag:v6.6.0 - events will be removed, use state triggerEvents instead. */\n            events: [],\n            isExpanded: false,\n            isLoading: false,\n            searchTerm: '',\n            searchResult: [],\n            searchResultFocusItem: {},\n            selectedTreeItem: {},\n            setInputFocusClass: null,\n            removeInputFocusClass: null,\n            showConfirmModal: false,\n            triggerSelect: {},\n        };\n    },\n\n    computed: {\n        swFlowTriggerClasses() {\n            return { overlay: this.overlay };\n        },\n\n        formatEventName() {\n            if (!this.eventName) {\n                return this.eventName;\n            }\n\n            return this.getEventName(this.eventName);\n        },\n\n        showTreeView() {\n            return this.eventTree.length >= 0\n                && (this.searchTerm.length <= 0 || this.searchTerm === this.formatEventName);\n        },\n\n        eventTree() {\n            return this.getEventTree(this.triggerEvents);\n        },\n\n        isTemplate() {\n            return this.$route.query?.type === 'template';\n        },\n\n        triggerNamePlaceholder() {\n            if (!this.isUnknownTrigger) {\n                return this.$tc('sw-flow.detail.trigger.placeholder');\n            }\n\n            return this.$tc('sw-flow.detail.trigger.unknownTriggerPlaceholder');\n        },\n\n        ...mapState('swFlowState', ['flow', 'triggerEvents']),\n        ...mapGetters('swFlowState', ['isSequenceEmpty']),\n        ...mapPropertyErrors('flow', ['eventName']),\n    },\n\n    watch: {\n        eventName: {\n            immediate: true,\n            handler(value) {\n                if (!value) {\n                    return;\n                }\n\n                this.$route.params.eventName = value;\n                this.searchTerm = this.getEventName(value);\n            },\n        },\n\n        searchTerm(value) {\n            if (!value || value === this.formatEventName) {\n                return;\n            }\n\n            const keyWords = value.split(/[\\W_]+/ig);\n\n            this.searchResult = this.triggerEvents.filter(event => {\n                const eventName = this.getEventName(event.name).toLowerCase();\n\n                return keyWords.every(key => eventName.includes(key.toLowerCase()));\n            });\n\n            // set first item as focus\n            if (this.searchResult.length > 0) {\n                this.searchResultFocusItem = this.searchResult[0];\n            }\n        },\n\n        selectedTreeItem(newValue) {\n            if (newValue?.id) {\n                utils.debounce(() => {\n                    const newElement = this.findTreeItemVNodeById(newValue.id).$el;\n\n                    let offsetValue = 0;\n                    let foundTreeRoot = false;\n                    let actualElement = newElement;\n\n                    while (!foundTreeRoot) {\n                        if (actualElement.classList.contains('sw-tree__content')) {\n                            foundTreeRoot = true;\n                        } else {\n                            offsetValue += actualElement.offsetTop;\n                            actualElement = actualElement.offsetParent;\n                        }\n                    }\n\n                    actualElement.scrollTo({\n                        top: offsetValue - (actualElement.clientHeight / 2) - 50,\n                        behavior: 'smooth',\n                    });\n                }, 50)();\n            }\n        },\n    },\n\n    created() {\n        this.createdComponent();\n    },\n\n    beforeDestroy() {\n        this.beforeDestroyComponent();\n    },\n\n    methods: {\n        createdComponent() {\n            document.addEventListener('click', this.handleClickEvent);\n            document.addEventListener('keydown', this.handleGeneralKeyEvents);\n\n            this.isLoading = true;\n            Shopware.State.dispatch('swFlowState/fetchTriggerActions');\n            State.commit('swFlowState/setTriggerEvent', this.getDataByEvent(this.eventName));\n            State.dispatch('swFlowState/setRestrictedRules', this.eventName);\n\n            this.isLoading = false;\n        },\n\n        beforeDestroyComponent() {\n            document.removeEventListener('click', this.handleClickEvent);\n            document.removeEventListener('keydown', this.handleGeneralKeyEvents);\n        },\n\n        handleClickEvent(event) {\n            const target = event.target;\n\n            if (target.closest('.sw-tree-item .is--no-children.is--disabled')) {\n                return;\n            }\n\n            if (target.closest('.sw-tree-item .is--no-children .sw-tree-item__content')\n            || target.closest('.sw-flow-trigger__search-result')) {\n                this.closeDropdown();\n                return;\n            }\n\n            if (target.closest('.sw-flow-trigger') === null) {\n                if (target.closest('svg')) {\n                    return;\n                }\n\n                this.closeDropdown();\n\n                if (this.searchTerm !== this.formatEventName) {\n                    this.searchTerm = this.formatEventName;\n                }\n            }\n        },\n\n        handleGeneralKeyEvents(event) {\n            if (event.type !== 'keydown' || !this.isExpanded) {\n                return;\n            }\n\n            const key = event.key.toLowerCase();\n\n            switch (key) {\n                case 'tab':\n                case 'escape': {\n                    this.closeDropdown();\n                    break;\n                }\n\n                case 'arrowdown':\n                case 'arrowleft':\n                case 'arrowright':\n                case 'arrowup': {\n                    this.handleArrowKeyEvents(event);\n                    break;\n                }\n\n                case 'enter': {\n                    // when user is searching\n                    if (this.searchTerm.length > 0 && this.searchTerm !== this.formatEventName) {\n                        this.onClickSearchItem(this.searchResultFocusItem);\n                        this.closeDropdown();\n                    } else {\n                        if (this.selectedTreeItem?.childCount > 0) {\n                            return;\n                        }\n\n                        this.changeTrigger(this.selectedTreeItem);\n                        this.closeDropdown();\n                    }\n\n                    break;\n                }\n\n                default: {\n                    break;\n                }\n            }\n        },\n\n        handleArrowKeyEvents(event) {\n            const key = event.key.toLowerCase();\n\n            // when user is searching\n            if (this.searchTerm.length > 0 && this.searchTerm !== this.formatEventName) {\n                switch (key) {\n                    case 'arrowdown': {\n                        event.preventDefault();\n                        this.changeSearchSelection('next');\n                        break;\n                    }\n\n                    case 'arrowup': {\n                        event.preventDefault();\n                        this.changeSearchSelection('previous');\n                        break;\n                    }\n\n                    default: {\n                        break;\n                    }\n                }\n                return;\n            }\n\n            // when user has tree open\n            const actualSelection = this.findTreeItemVNodeById();\n\n            switch (key) {\n                case 'arrowdown': {\n                    // check if actual selection was found\n                    if (actualSelection?.item?.id) {\n                        // when selection is open\n                        if (actualSelection.opened) {\n                            // get first item of child\n                            const newSelection = this.getFirstChildById(actualSelection.item.id);\n                            if (newSelection) {\n                                // update the selected item\n                                this.selectedTreeItem = newSelection;\n                            }\n                            break;\n                        }\n                        // when selection is not open then get the next sibling\n                        let newSelection = this.getSibling(true, actualSelection.item);\n                        // when next sibling exists\n                        if (newSelection) {\n                            // update the selected item\n                            this.selectedTreeItem = newSelection;\n                            break;\n                        }\n\n                        // Get the closest visible ancestor to actual section's position.\n                        newSelection = this.getClosestSiblingAncestor(actualSelection.item.parentId);\n                        // when next parent exists\n                        if (newSelection) {\n                            // update the selected item\n                            this.selectedTreeItem = newSelection;\n                            break;\n                        }\n                    }\n                    break;\n                }\n\n                case 'arrowup': {\n                    // check if actual selection was found\n                    if (actualSelection?.item?.id) {\n                        // when selection is first item in folder\n                        const parent = this.findTreeItemVNodeById(actualSelection.item.parentId);\n                        if (parent?.item?.children[0].id === actualSelection.item.id) {\n                            // then get the parent folder\n                            const newSelection = parent.item;\n                            if (newSelection) {\n                                // update the selected item\n                                this.selectedTreeItem = newSelection;\n                            }\n                            break;\n                        }\n\n                        // when selection is not first item then get the previous sibling\n                        const newSelection = this.getSibling(false, actualSelection.item);\n                        if (newSelection) {\n                            // Get the closest visible sibling's descendant to actual selection's position\n                            this.selectedTreeItem = this.getClosestSiblingDescendant(newSelection);\n                        }\n                    }\n                    break;\n                }\n\n                case 'arrowright': {\n                    this.toggleSelectedTreeItem(true);\n                    break;\n                }\n\n                case 'arrowleft': {\n                    const isClosed = !this.toggleSelectedTreeItem(false);\n\n                    // when selection is an item or a closed folder\n                    if (isClosed) {\n                        // change the selection to the parent\n                        const parentId = actualSelection.item.parentId;\n                        const parent = this.findTreeItemVNodeById(parentId);\n\n                        if (parent) {\n                            this.selectedTreeItem = parent.item;\n                        }\n                    }\n\n                    break;\n                }\n\n                default: {\n                    break;\n                }\n            }\n        },\n\n        getClosestSiblingAncestor(parentId) {\n            // when sibling does not exists, go to next parent sibling\n            const parent = this.findTreeItemVNodeById(parentId);\n            const nextParent = this.getSibling(true, parent.item);\n            if (nextParent) {\n                return nextParent;\n            }\n\n            if (!parent?.item?.parentId) {\n                return null;\n            }\n\n            return this.getClosestSiblingAncestor(parent.item.parentId);\n        },\n\n        getClosestSiblingDescendant(item) {\n            const foundItemNode = this.findTreeItemVNodeById(item.id);\n\n            if (foundItemNode.opened && foundItemNode.item.childCount > 0) {\n                const lastChildIndex = foundItemNode.item.children.length - 1;\n                const lastChild = foundItemNode.item.children[lastChildIndex];\n\n                if (lastChild.childCount === 0) {\n                    return lastChild;\n                }\n\n                return this.getClosestSiblingDescendant(lastChild);\n            }\n\n            return item;\n        },\n\n        getFirstChildById(itemId, children = this.$refs.flowTriggerTree.treeItems) {\n            const foundItem = children.find((child) => child.id === itemId);\n\n            if (foundItem) {\n                // return first child\n                return foundItem.children[0];\n            }\n\n            for (let i = 0; i < children.length; i += 1) {\n                const foundItemInChild = this.getFirstChildById(itemId, children[i].children);\n\n                if (foundItemInChild) {\n                    return foundItemInChild;\n                }\n            }\n\n            return null;\n        },\n\n        getSibling(isNext, item, children = this.$refs.flowTriggerTree.treeItems) {\n            // when no item exists\n            if (!item) {\n                return null;\n            }\n\n            let foundItem = null;\n            const itemIndex = children.indexOf(item);\n\n            if (itemIndex < 0) {\n                foundItem = null;\n            } else {\n                foundItem = isNext ? children[itemIndex + 1] : children[itemIndex - 1];\n            }\n\n            if (foundItem) {\n                return foundItem;\n            }\n\n            for (let i = 0; i < children.length; i += 1) {\n                const foundItemInChild = this.getSibling(isNext, item, children[i].children);\n\n                if (foundItemInChild) {\n                    return foundItemInChild;\n                }\n            }\n\n            return null;\n        },\n\n        changeSearchSelection(type = 'next') {\n            const typeValue = (type === 'previous') ? -1 : 1;\n\n            const actualIndex = this.searchResult.indexOf(this.searchResultFocusItem);\n            const focusItem = this.searchResult[actualIndex + typeValue];\n\n            if (typeof focusItem !== 'undefined') {\n                this.searchResultFocusItem = focusItem;\n            }\n        },\n\n        toggleSelectedTreeItem(shouldOpen) {\n            const vnode = this.findTreeItemVNodeById();\n\n            if (vnode?.openTreeItem && vnode.opened !== shouldOpen) {\n                vnode.openTreeItem();\n                return true;\n            }\n\n            return false;\n        },\n\n        findTreeItemVNodeById(itemId = this.selectedTreeItem.id, children = this.$refs.flowTriggerTree.$children) {\n            let found = false;\n\n            if (Array.isArray(children)) {\n                found = children.find((child) => {\n                    if (child?.item?.id) {\n                        return child.item.id === itemId;\n                    }\n\n                    return false;\n                });\n            } else if (children?.item?.id) {\n                found = children.item.id === itemId;\n            }\n\n            if (found) {\n                return found;\n            }\n\n            let foundInChildren = false;\n\n            // recursion to find vnode\n            for (let i = 0; i < children.length; i += 1) {\n                foundInChildren = this.findTreeItemVNodeById(itemId, children[i].$children);\n                // stop when found in children\n                if (foundInChildren) {\n                    break;\n                }\n            }\n\n            return foundInChildren;\n        },\n\n        openDropdown({ setFocusClass, removeFocusClass }) {\n            // make functions available\n            this.setInputFocusClass = setFocusClass;\n            this.removeInputFocusClass = removeFocusClass;\n\n            this.setInputFocusClass();\n            this.isExpanded = true;\n\n            if (this.isLoading) {\n                return;\n            }\n\n            // set first item or selected event as focus\n            this.$nextTick(() => {\n                if (this.searchTerm === this.formatEventName) {\n                    const currentEvent = this.eventTree.find(event => event.id === this.eventName);\n                    this.selectedTreeItem = currentEvent || this.$refs.flowTriggerTree.treeItems[0];\n                }\n            });\n        },\n\n        closeDropdown() {\n            if (this.removeInputFocusClass) {\n                this.removeInputFocusClass();\n            }\n\n            this.isExpanded = false;\n        },\n\n        changeTrigger(item) {\n            if (item?.disabled || item?.childCount > 0) {\n                return;\n            }\n\n            if (this.isSequenceEmpty) {\n                const { id } = item.data;\n\n                State.commit('swFlowState/setTriggerEvent', this.getDataByEvent(id));\n                State.dispatch('swFlowState/setRestrictedRules', id);\n                this.$emit('option-select', id);\n            } else {\n                this.showConfirmModal = this.flow.eventName !== item.id;\n                this.triggerSelect = this.getDataByEvent(item.id);\n            }\n        },\n\n        onConfirm() {\n            State.commit('swFlowState/setTriggerEvent', this.triggerSelect);\n            State.dispatch('swFlowState/setRestrictedRules', this.triggerSelect.name);\n            this.$emit('option-select', this.triggerSelect.name);\n        },\n\n        onCloseConfirm() {\n            this.showConfirmModal = false;\n            this.triggerSelect = {};\n        },\n\n        /*\n         * @deprecated tag:v6.6.0 - Will be removed\n         */\n        getBusinessEvents() {\n            this.isLoading = true;\n\n            return this.businessEventService.getBusinessEvents()\n                .then(events => {\n                    this.events = events;\n                    State.commit('swFlowState/setTriggerEvent', this.getDataByEvent(this.eventName));\n                    State.dispatch('swFlowState/setRestrictedRules', this.eventName);\n                }).finally(() => {\n                    this.isLoading = false;\n                });\n        },\n\n        getLastEventName({ parentId = null, id }) {\n            const [eventName] = parentId ? id.split('.').reverse() : [id];\n\n            return this.getEventNameTranslated(eventName);\n        },\n\n        getDataByEvent(event) {\n            return this.triggerEvents.find(item => item.name === event);\n        },\n\n        hasOnlyStopFlow(event) {\n            const eventAware = this.triggerEvents.find(item => item.name === event).aware || [];\n            return eventAware.length === 0;\n        },\n\n        // Generate tree data which is compatible with sw-tree from business events\n        getEventTree(events) {\n            const mappedObj = {};\n\n            events.forEach(event => {\n                // Split event name by '.'\n                const eventNameKeys = event.name.split('.');\n                if (eventNameKeys.length === 0) {\n                    return;\n                }\n\n                /*\n                 Group children to parent based on event names.\n                 For instance, if event name is 'checkout.customer.deleted',\n                 it's considered that customer is checkout's child and deleted is customer's child.\n                */\n                const generateTreeData = (currentIndex, keyWords, result) => {\n                    const currentKey = keyWords[currentIndex];\n\n                    // next key is child of current key\n                    const nextKey = keyWords[currentIndex + 1];\n\n                    result[currentKey] = result[currentKey] || {\n                        id: currentKey,\n                        parentId: null,\n                        children: {},\n                    };\n\n                    if (!nextKey) {\n                        return;\n                    }\n\n                    // Put next key into children of current key\n                    result[currentKey].children[nextKey] = result[currentKey].children[nextKey] || {\n                        id: `${result[currentKey].id}.${nextKey}`,\n                        parentId: result[currentKey].id,\n                        children: {},\n                    };\n\n                    generateTreeData(currentIndex + 1, keyWords, result[currentKey].children);\n                };\n\n                generateTreeData(0, eventNameKeys, mappedObj);\n            });\n\n            // Convert tree object to array to work with sw-tree\n            const convertTreeToArray = (nodes, output = []) => {\n                nodes.forEach(node => {\n                    const children = node.children ? Object.values(node.children) : [];\n                    output.push({\n                        id: node.id,\n                        name: this.getLastEventName(node),\n                        childCount: children.length,\n                        parentId: node.parentId,\n                        disabled: isEmpty(node.children) && this.hasOnlyStopFlow(node.id),\n                        disabledToolTipText: (isEmpty(node.children) && this.hasOnlyStopFlow(node.id))\n                            ? this.$tc('sw-flow.detail.trigger.textHint') : null,\n                    });\n\n                    if (children.length > 0) {\n                        output = convertTreeToArray(children, output);\n                    }\n                });\n                return output;\n            };\n\n            return convertTreeToArray(Object.values(mappedObj));\n        },\n\n        getBreadcrumb(eventName) {\n            if (!eventName) {\n                return '';\n            }\n\n            const keyWords = eventName.split('.');\n\n            return keyWords.map(key => {\n                return capitalizeString(key);\n            }).join(' / ').replace(/_|-/g, ' ');\n        },\n\n        onClickSearchItem(item) {\n            this.searchTerm = this.formatEventName;\n            this.searchResult = [];\n\n            if (this.isSequenceEmpty) {\n                this.$emit('option-select', item.name);\n                State.commit('swFlowState/setTriggerEvent', item);\n                State.dispatch('swFlowState/setRestrictedRules', item.name);\n            } else {\n                this.showConfirmModal = true;\n                this.triggerSelect = item;\n            }\n        },\n\n        getEventName(eventName) {\n            if (this.isUnknownTrigger) {\n                return '';\n            }\n\n            if (!eventName) {\n                return eventName;\n            }\n\n            const keyWords = eventName.split('.');\n\n            return keyWords.map(key => {\n                return this.getEventNameTranslated(key);\n            }).join(' / ');\n        },\n\n        isSearchResultInFocus(item) {\n            return item.name === this.searchResultFocusItem.name;\n        },\n\n        getEventNameTranslated(eventName) {\n            const eventNameCamelCase = camelCase(eventName);\n            const translatedEventName = [\n                `sw-flow-app.triggers-app.${eventNameCamelCase}`,\n                `sw-flow-custom-event.event-tree.${eventNameCamelCase}`,\n                `sw-flow.triggers.${eventNameCamelCase}`,\n            ].find(key => this.$te(key));\n\n            return translatedEventName ? this.$tc(translatedEventName) : eventName.replace(/_|-/g, ' ');\n        },\n    },\n};\n","export default \"\\n{% block sw_flow_trigger %}\\n<div\\n    class=\\\"sw-flow-trigger\\\"\\n    :class=\\\"swFlowTriggerClasses\\\"\\n>\\n    \\n    {% block sw_flow_trigger_select_field %}\\n    <div class=\\\"sw-flow-trigger__select-toolbar\\\">\\n        <sw-contextual-field\\n            v-tooltip=\\\"{\\n                message: getEventName(eventName),\\n                disabled: !eventName || isUnknownTrigger,\\n            }\\\"\\n            class=\\\"sw-flow-trigger__search-field\\\"\\n            :required=\\\"!isTemplate\\\"\\n            :label=\\\"$tc('sw-flow.detail.trigger.name')\\\"\\n            :disabled=\\\"disabled\\\"\\n            :error=\\\"flowEventNameError\\\"\\n        >\\n            <template #sw-field-input=\\\"{ identification, disabled, error, size, setFocusClass, removeFocusClass }\\\">\\n                \\n                {% block sw_flow_trigger_select_field_input %}\\n                \\n                <input\\n                    ref=\\\"searchInput\\\"\\n                    v-model=\\\"searchTerm\\\"\\n                    type=\\\"text\\\"\\n                    class=\\\"sw-flow-trigger__input-field\\\"\\n                    :placeholder=\\\"triggerNamePlaceholder\\\"\\n                    :disabled=\\\"disabled\\\"\\n                    @focus=\\\"openDropdown({ setFocusClass, removeFocusClass });\\\"\\n                >\\n                {% endblock %}\\n\\n                \\n                {% block sw_flow_trigger_loader %}\\n                <sw-loader\\n                    v-if=\\\"isLoading\\\"\\n                    class=\\\"sw-flow-trigger__loader\\\"\\n                    size=\\\"16px\\\"\\n                />\\n                {% endblock %}\\n\\n                \\n                {% block sw_flow_trigger_dropdown_icon %}\\n                <sw-icon\\n                    class=\\\"sw-flow-trigger__dropdown-icon\\\"\\n                    name=\\\"regular-chevron-down-xs\\\"\\n                    size=\\\"10px\\\"\\n                    @click=\\\"openDropdown({ setFocusClass, removeFocusClass });\\\"\\n                />\\n                {% endblock %}\\n            </template>\\n        </sw-contextual-field>\\n    </div>\\n    {% endblock %}\\n\\n    \\n    {% block sw_flow_trigger_select_transition %}\\n    <transition name=\\\"sw-flow-trigger__fade-down\\\">\\n        \\n        {% block sw_flow_trigger_event_selection %}\\n        <div\\n            v-if=\\\"isExpanded\\\"\\n            class=\\\"sw-flow-trigger__event-selection\\\"\\n        >\\n\\n            \\n            {% block sw_flow_trigger_container %}\\n            <sw-container class=\\\"sw-flow-trigger__event-container\\\">\\n\\n                \\n                {% block sw_flow_trigger_select_tree %}\\n                <sw-tree\\n                    v-if=\\\"showTreeView\\\"\\n                    ref=\\\"flowTriggerTree\\\"\\n                    :active-tree-item-id=\\\"eventName\\\"\\n                    route-params-active-element-id=\\\"eventName\\\"\\n                    :sortable=\\\"false\\\"\\n                    :items=\\\"eventTree\\\"\\n                    :searchable=\\\"false\\\"\\n                    :disable-context-menu=\\\"true\\\"\\n                    :on-change-route=\\\"changeTrigger\\\"\\n                    bind-items-to-folder\\n                >\\n\\n                    \\n                    {% block sw_flow_trigger_tree_headline %}\\n                    <template #headline>\\n                        <span></span>\\n                    </template>\\n                    {% endblock %}\\n\\n                    \\n                    {% block sw_flow_trigger_tree_search %}\\n                    <template #search>\\n                        <span></span>\\n                    </template>\\n                    {% endblock %}\\n\\n                    <template\\n                        #items=\\\"{\\n                            treeItems,\\n                            sortable,\\n                            disableContextMenu,\\n                            onChangeRoute,\\n                            newElementId,\\n                            checkItem\\n                        }\\\"\\n                    >\\n                        <sw-tree-item\\n                            v-for=\\\"item in treeItems\\\"\\n                            :key=\\\"item.id\\\"\\n                            should-focus\\n                            :active-focus-id=\\\"selectedTreeItem.id\\\"\\n                            :sortable=\\\"sortable\\\"\\n                            :item=\\\"item\\\"\\n                            :on-change-route=\\\"onChangeRoute\\\"\\n                            :display-checkbox=\\\"false\\\"\\n                            @check-item=\\\"checkItem\\\"\\n                        >\\n\\n                            \\n                            {% block sw_flow_trigger_tree_item_actions %}\\n                            <template #actions>\\n                                <span></span>\\n                            </template>\\n                            {% endblock %}\\n                        </sw-tree-item>\\n                    </template>\\n                </sw-tree>\\n                {% endblock %}\\n\\n                \\n                {% block sw_flow_trigger_search_list %}\\n                <ul\\n                    v-else-if=\\\"searchResult.length > 0 && searchTerm.length > 0\\\"\\n                    class=\\\"sw-flow-trigger__search-results\\\"\\n                >\\n                    \\n                    {% block sw_flow_trigger_search_list_item %}\\n                    <li\\n                        v-for=\\\"item in searchResult\\\"\\n                        :key=\\\"item.id\\\"\\n                        class=\\\"sw-flow-trigger__search-result\\\"\\n                        :class=\\\"{ 'is--focus': isSearchResultInFocus(item)}\\\"\\n                        role=\\\"button\\\"\\n                        tabindex=\\\"0\\\"\\n                        @click=\\\"onClickSearchItem(item)\\\"\\n                        @keydown.enter=\\\"onClickSearchItem(item)\\\"\\n                    >\\n                        \\n                        {% block sw_flow_trigger_search_list_item_icon %}\\n                        <div class=\\\"sw-flow-trigger__search-result-icon\\\">\\n                            <sw-icon\\n                                name=\\\"regular-circle-xxs\\\"\\n                                size=\\\"18\\\"\\n                            />\\n                        </div>\\n                        {% endblock %}\\n\\n                        \\n                        {% block sw_flow_trigger_search_list_item_name %}\\n                        <span class=\\\"sw-flow-trigger__search-result-name\\\">\\n                            \\n                            {% block sw_flow_trigger_search_list_item_name_highlight %}\\n                            <sw-highlight-text\\n                                :search-term=\\\"searchTerm\\\"\\n                                :text=\\\"getEventName(item.name)\\\"\\n                            />\\n                            {% endblock %}\\n                        </span>\\n                        {% endblock %}\\n                    </li>\\n                    {% endblock %}\\n                </ul>\\n                {% endblock %}\\n\\n                \\n                {% block sw_flow_trigger_search_empty %}\\n                <p\\n                    v-else\\n                    class=\\\"sw-flow-trigger__empty\\\"\\n                >\\n                    {{ $tc('sw-flow.detail.trigger.textNoEvent') }}\\n                </p>\\n                {% endblock %}\\n\\n            </sw-container>\\n        {% endblock %}\\n        </div>\\n        {% endblock %}\\n    </transition>\\n    {% endblock %}\\n\\n    \\n    {% block sw_flow_event_change_confirm_modal %}\\n    <sw-flow-event-change-confirm-modal\\n        v-if=\\\"showConfirmModal\\\"\\n        @modal-confirm=\\\"onConfirm\\\"\\n        @modal-close=\\\"onCloseConfirm\\\"\\n    />\\n    {% endblock %}\\n</div>\\n{% endblock %}\\n\";","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../../../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--15-1!../../../../../node_modules/css-loader/dist/cjs.js??ref--15-2!../../../../../node_modules/sass-loader/dist/cjs.js??ref--15-3!./sw-flow-trigger.scss\");\nif(content.__esModule) content = content.default;\nif(typeof content === 'string') content = [[module.id, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar add = require(\"!../../../../../node_modules/vue-style-loader/lib/addStylesClient.js\").default\nvar update = add(\"a75d698a\", content, true, {});"],"sourceRoot":""}