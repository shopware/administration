{"version":3,"sources":["webpack:///./src/module/sw-customer/page/sw-customer-list/sw-customer-list.scss","webpack:///./src/module/sw-customer/page/sw-customer-list/index.js","webpack:///./src/module/sw-customer/page/sw-customer-list/sw-customer-list.html.twig"],"names":["content","__esModule","default","module","i","locals","exports","add","Mixin","Shopware","Criteria","Data","template","inject","mixins","getByName","data","customers","sortBy","naturalSorting","sortDirection","isLoading","showDeleteModal","filterLoading","availableAffiliateCodes","availableCampaignCodes","filterCriteria","defaultFilters","storeKey","activeFilterNumber","searchConfigEntity","showBulkEditModal","metaInfo","title","this","$createTitle","computed","customerRepository","repositoryFactory","create","customerColumns","getCustomerColumns","defaultCriteria","_this","page","limit","setTerm","term","split","forEach","addSorting","sort","addAssociation","filter","addFilter","filterSelectCriteria","criteria","not","equals","addAggregation","terms","listFilterOptions","property","type","label","$tc","placeholder","valueProperty","labelProperty","options","optionHasCriteria","optionNoCriteria","listFilters","filterFactory","assetFilter","Filter","watch","handler","getList","deep","created","createdComponent","methods","loadFilterValues","onInlineEditSave","promise","customer","_this2","then","createNotificationSuccess","message","name","salutation","catch","createNotificationError","_this3","_asyncToGenerator","_regeneratorRuntime","mark","_callee","newCriteria","items","wrap","_context","prev","next","Service","mergeWithStoredFilters","sent","addQueryScores","filters","length","entitySearchable","total","abrupt","freshSearchTerm","resetSorting","search","selection","t0","stop","onDelete","id","onCloseDeleteModal","onConfirmDelete","_this4","delete","onChangeLanguage","_this5","_callee2","_context2","dataIndex","inlineEdit","routerLink","width","allowResize","primary","useCustomSort","align","visible","_this6","_ref","_aggregations$affilia","_aggregations$affilia2","_aggregations$campaig","_aggregations$campaig2","aggregations","affiliateCodes","buckets","campaignCodes","updateCriteria","onBulkEditItems","_this7","_callee3","_context3","$nextTick","$router","push","onBulkEditModalOpen","onBulkEditModalClose"],"mappings":"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","file":"static/js/b3238be4e7b5bc9b0a8f.js","sourcesContent":["// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../../../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--15-1!../../../../../node_modules/css-loader/dist/cjs.js??ref--15-2!../../../../../node_modules/sass-loader/dist/cjs.js??ref--15-3!./sw-customer-list.scss\");\nif(content.__esModule) content = content.default;\nif(typeof content === 'string') content = [[module.id, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar add = require(\"!../../../../../node_modules/vue-style-loader/lib/addStylesClient.js\").default\nvar update = add(\"64db9326\", content, true, {});","import template from './sw-customer-list.html.twig';\nimport './sw-customer-list.scss';\n\n/**\n * @package checkout\n */\n\nconst { Mixin } = Shopware;\nconst { Criteria } = Shopware.Data;\n\n// eslint-disable-next-line sw-deprecation-rules/private-feature-declarations\nexport default {\n    template,\n\n    inject: ['repositoryFactory', 'acl', 'filterFactory', 'feature'],\n\n    mixins: [\n        Mixin.getByName('notification'),\n        Mixin.getByName('salutation'),\n        Mixin.getByName('listing'),\n    ],\n\n    data() {\n        return {\n            customers: null,\n            sortBy: 'customerNumber',\n            naturalSorting: true,\n            sortDirection: 'DESC',\n            isLoading: false,\n            showDeleteModal: false,\n            filterLoading: false,\n            availableAffiliateCodes: [],\n            availableCampaignCodes: [],\n            filterCriteria: [],\n            defaultFilters: [\n                'affiliate-code-filter',\n                'campaign-code-filter',\n                'customer-group-request-filter',\n                'salutation-filter',\n                'account-status-filter',\n                'default-payment-method-filter',\n                'group-filter',\n                'billing-address-country-filter',\n                'shipping-address-country-filter',\n                'tags-filter',\n            ],\n            storeKey: 'grid.filter.customer',\n            activeFilterNumber: 0,\n            searchConfigEntity: 'customer',\n            showBulkEditModal: false,\n        };\n    },\n\n    metaInfo() {\n        return {\n            title: this.$createTitle(),\n        };\n    },\n\n    computed: {\n        customerRepository() {\n            return this.repositoryFactory.create('customer');\n        },\n\n        customerColumns() {\n            return this.getCustomerColumns();\n        },\n\n        defaultCriteria() {\n            const defaultCriteria = new Criteria(this.page, this.limit);\n            // eslint-disable-next-line vue/no-side-effects-in-computed-properties\n            this.naturalSorting = this.sortBy === 'customerNumber';\n\n            defaultCriteria.setTerm(this.term);\n\n            this.sortBy.split(',').forEach(sortBy => {\n                defaultCriteria.addSorting(Criteria.sort(sortBy, this.sortDirection, this.naturalSorting));\n            });\n\n            defaultCriteria\n                .addAssociation('defaultBillingAddress')\n                .addAssociation('group')\n                .addAssociation('requestedGroup')\n                .addAssociation('salesChannel');\n\n            this.filterCriteria.forEach(filter => {\n                defaultCriteria.addFilter(filter);\n            });\n\n            return defaultCriteria;\n        },\n\n        filterSelectCriteria() {\n            const criteria = new Criteria(1, 1);\n            criteria.addFilter(Criteria.not(\n                'AND',\n                [Criteria.equals('affiliateCode', null), Criteria.equals('campaignCode', null)],\n            ));\n            criteria.addAggregation(Criteria.terms('affiliateCodes', 'affiliateCode', null, null, null));\n            criteria.addAggregation(Criteria.terms('campaignCodes', 'campaignCode', null, null, null));\n\n            return criteria;\n        },\n\n        listFilterOptions() {\n            return {\n                'affiliate-code-filter': {\n                    property: 'affiliateCode',\n                    type: 'multi-select-filter',\n                    label: this.$tc('sw-customer.filter.affiliateCode.label'),\n                    placeholder: this.$tc('sw-customer.filter.affiliateCode.placeholder'),\n                    valueProperty: 'key',\n                    labelProperty: 'key',\n                    options: this.availableAffiliateCodes,\n                },\n                'campaign-code-filter': {\n                    property: 'campaignCode',\n                    type: 'multi-select-filter',\n                    label: this.$tc('sw-customer.filter.campaignCode.label'),\n                    placeholder: this.$tc('sw-customer.filter.campaignCode.placeholder'),\n                    valueProperty: 'key',\n                    labelProperty: 'key',\n                    options: this.availableCampaignCodes,\n                },\n                'customer-group-request-filter': {\n                    property: 'requestedGroupId',\n                    type: 'existence-filter',\n                    label: this.$tc('sw-customer.filter.customerGroupRequest.label'),\n                    placeholder: this.$tc('sw-customer.filter.customerGroupRequest.placeholder'),\n                    optionHasCriteria: this.$tc('sw-customer.filter.customerGroupRequest.textHasCriteria'),\n                    optionNoCriteria: this.$tc('sw-customer.filter.customerGroupRequest.textNoCriteria'),\n                },\n                'salutation-filter': {\n                    property: 'salutation',\n                    label: this.$tc('sw-customer.filter.salutation.label'),\n                    placeholder: this.$tc('sw-customer.filter.salutation.placeholder'),\n                    labelProperty: 'displayName',\n                },\n                'account-status-filter': {\n                    property: 'active',\n                    label: this.$tc('sw-customer.filter.status.label'),\n                    placeholder: this.$tc('sw-customer.filter.status.placeholder'),\n                },\n                'default-payment-method-filter': {\n                    property: 'defaultPaymentMethod',\n                    label: this.$tc('sw-customer.filter.defaultPaymentMethod.label'),\n                    placeholder: this.$tc('sw-customer.filter.defaultPaymentMethod.placeholder'),\n                },\n                'group-filter': {\n                    property: 'group',\n                    label: this.$tc('sw-customer.filter.customerGroup.label'),\n                    placeholder: this.$tc('sw-customer.filter.customerGroup.placeholder'),\n                },\n                'billing-address-country-filter': {\n                    property: 'defaultBillingAddress.country',\n                    label: this.$tc('sw-customer.filter.billingCountry.label'),\n                    placeholder: this.$tc('sw-customer.filter.billingCountry.placeholder'),\n                },\n                'shipping-address-country-filter': {\n                    property: 'defaultShippingAddress.country',\n                    label: this.$tc('sw-customer.filter.shippingCountry.label'),\n                    placeholder: this.$tc('sw-customer.filter.shippingCountry.placeholder'),\n                },\n                'tags-filter': {\n                    property: 'tags',\n                    label: this.$tc('sw-customer.filter.tags.label'),\n                    placeholder: this.$tc('sw-customer.filter.tags.placeholder'),\n                },\n            };\n        },\n\n        listFilters() {\n            return this.filterFactory.create('customer', this.listFilterOptions);\n        },\n\n        assetFilter() {\n            return Shopware.Filter.getByName('asset');\n        },\n    },\n\n    watch: {\n        defaultCriteria: {\n            handler() {\n                this.getList();\n            },\n            deep: true,\n        },\n    },\n\n    created() {\n        this.createdComponent();\n    },\n\n    methods: {\n        createdComponent() {\n            return this.loadFilterValues();\n        },\n\n        onInlineEditSave(promise, customer) {\n            promise.then(() => {\n                this.createNotificationSuccess({\n                    message: this.$tc('sw-customer.detail.messageSaveSuccess', 0, { name: this.salutation(customer) }),\n                });\n            }).catch(() => {\n                this.getList();\n                this.createNotificationError({\n                    message: this.$tc('sw-customer.detail.messageSaveError'),\n                });\n            });\n        },\n\n        async getList() {\n            this.isLoading = true;\n\n            const criteria = await Shopware.Service('filterService')\n                .mergeWithStoredFilters(this.storeKey, this.defaultCriteria);\n\n            const newCriteria = await this.addQueryScores(this.term, criteria);\n\n            this.activeFilterNumber = criteria.filters.length;\n\n            if (!this.entitySearchable) {\n                this.isLoading = false;\n                this.total = 0;\n\n                return;\n            }\n\n            if (this.freshSearchTerm) {\n                newCriteria.resetSorting();\n            }\n\n            try {\n                const items = await this.customerRepository.search(newCriteria);\n\n                this.total = items.total;\n                this.customers = items;\n                this.isLoading = false;\n                this.selection = {};\n            } catch {\n                this.isLoading = false;\n            }\n        },\n\n        onDelete(id) {\n            this.showDeleteModal = id;\n        },\n\n        onCloseDeleteModal() {\n            this.showDeleteModal = false;\n        },\n\n        onConfirmDelete(id) {\n            this.showDeleteModal = false;\n\n            return this.customerRepository.delete(id).then(() => {\n                this.getList();\n            });\n        },\n\n        async onChangeLanguage() {\n            await this.createdComponent();\n            await this.getList();\n        },\n\n        getCustomerColumns() {\n            const columns = [{\n                property: 'firstName',\n                dataIndex: 'lastName,firstName',\n                inlineEdit: 'string',\n                label: 'sw-customer.list.columnName',\n                routerLink: 'sw.customer.detail',\n                width: '250px',\n                allowResize: true,\n                primary: true,\n                useCustomSort: true,\n            }, {\n                property: 'defaultBillingAddress.street',\n                label: 'sw-customer.list.columnStreet',\n                allowResize: true,\n                useCustomSort: true,\n            }, {\n                property: 'defaultBillingAddress.zipcode',\n                label: 'sw-customer.list.columnZip',\n                align: 'right',\n                allowResize: true,\n                useCustomSort: true,\n            }, {\n                property: 'defaultBillingAddress.city',\n                label: 'sw-customer.list.columnCity',\n                allowResize: true,\n                useCustomSort: true,\n            }, {\n                property: 'customerNumber',\n                dataIndex: 'customerNumber',\n                naturalSorting: true,\n                label: 'sw-customer.list.columnCustomerNumber',\n                allowResize: true,\n                inlineEdit: 'string',\n                align: 'right',\n                useCustomSort: true,\n            }, {\n                property: 'group',\n                dataIndex: 'group',\n                naturalSorting: true,\n                label: 'sw-customer.list.columnGroup',\n                allowResize: true,\n                inlineEdit: 'string',\n                align: 'right',\n                useCustomSort: true,\n            }, {\n                property: 'email',\n                inlineEdit: 'string',\n                label: 'sw-customer.list.columnEmail',\n                allowResize: true,\n                useCustomSort: true,\n            }, {\n                property: 'affiliateCode',\n                inlineEdit: 'string',\n                label: 'sw-customer.list.columnAffiliateCode',\n                allowResize: true,\n                visible: false,\n                useCustomSort: true,\n            }, {\n                property: 'campaignCode',\n                inlineEdit: 'string',\n                label: 'sw-customer.list.columnCampaignCode',\n                allowResize: true,\n                visible: false,\n                useCustomSort: true,\n            }, {\n                property: 'boundSalesChannelId',\n                label: 'sw-customer.list.columnBoundSalesChannel',\n                allowResize: true,\n                visible: false,\n                useCustomSort: true,\n            }, {\n                property: 'active',\n                inlineEdit: 'boolean',\n                label: 'sw-customer.list.columnActive',\n                allowResize: true,\n                visible: false,\n                useCustomSort: true,\n            }];\n\n            return columns;\n        },\n\n        loadFilterValues() {\n            this.filterLoading = true;\n\n            return this.customerRepository.search(this.filterSelectCriteria)\n                .then(({ aggregations }) => {\n                    this.availableAffiliateCodes = aggregations?.affiliateCodes?.buckets ?? [];\n                    this.availableCampaignCodes = aggregations?.campaignCodes?.buckets ?? [];\n                    this.filterLoading = false;\n\n                    return aggregations;\n                }).catch(() => {\n                    this.filterLoading = false;\n                });\n        },\n\n        updateCriteria(criteria) {\n            this.page = 1;\n            this.filterCriteria = criteria;\n        },\n\n        async onBulkEditItems() {\n            await this.$nextTick();\n            this.$router.push({ name: 'sw.bulk.edit.customer' });\n        },\n\n        onBulkEditModalOpen() {\n            this.showBulkEditModal = true;\n        },\n\n        onBulkEditModalClose() {\n            this.showBulkEditModal = false;\n        },\n    },\n};\n","export default \"\\n{% block sw_customer_list %}\\n<sw-page class=\\\"sw-customer-list\\\">\\n\\n    \\n    {% block sw_customer_list_search_bar %}\\n    <template #search-bar>\\n        <sw-search-bar\\n            initial-search-type=\\\"customer\\\"\\n            :initial-search=\\\"term\\\"\\n            @search=\\\"onSearch\\\"\\n        />\\n    </template>\\n    {% endblock %}\\n\\n    \\n    {% block sw_customer_list_smart_bar_header %}\\n    <template #smart-bar-header>\\n        \\n        {% block sw_customer_list_smart_bar_header_title %}\\n        <h2>\\n            \\n            {% block sw_customer_list_smart_bar_header_title_text %}\\n            {{ $tc('sw-customer.list.textCustomers') }}\\n            {% endblock %}\\n\\n            \\n            {% block sw_customer_list_smart_bar_header_amount %}\\n            <span\\n                v-if=\\\"!isLoading\\\"\\n                class=\\\"sw-page__smart-bar-amount\\\"\\n            >\\n                ({{ total }})\\n            </span>\\n            {% endblock %}\\n        </h2>\\n        {% endblock %}\\n    </template>\\n    {% endblock %}\\n\\n    \\n    {% block sw_customer_list_smart_bar_actions %}\\n    <template #smart-bar-actions>\\n        \\n        {% block sw_customer_list_smart_bar_actions_add %}\\n        <sw-button\\n            v-tooltip=\\\"{\\n                message: $tc('sw-privileges.tooltip.warning'),\\n                disabled: acl.can('customer.creator'),\\n                showOnDisabledElements: true\\n            }\\\"\\n            class=\\\"sw-customer-list__button-create\\\"\\n            variant=\\\"primary\\\"\\n            :disabled=\\\"!acl.can('customer.creator')\\\"\\n            :router-link=\\\"{ name: 'sw.customer.create' }\\\"\\n        >\\n            {{ $tc('sw-customer.list.buttonAddCustomer') }}\\n        </sw-button>\\n        {% endblock %}\\n    </template>\\n    {% endblock %}\\n\\n    <template #language-switch>\\n        <sw-language-switch @on-change=\\\"onChangeLanguage\\\" />\\n    </template>\\n\\n    <template #content>\\n        \\n        {% block sw_customer_list_content %}\\n        <div class=\\\"sw-customer-list__content\\\">\\n            \\n            {% block sw_customer_list_grid %}\\n            <sw-entity-listing\\n                v-if=\\\"isLoading || (customers && entitySearchable)\\\"\\n                ref=\\\"swCustomerGrid\\\"\\n                class=\\\"sw-customer-list-grid\\\"\\n                identifier=\\\"sw-customer-list\\\"\\n                :items=\\\"customers\\\"\\n                :columns=\\\"customerColumns\\\"\\n                :repository=\\\"customerRepository\\\"\\n                :sort-by=\\\"currentSortBy\\\"\\n                :sort-direction=\\\"sortDirection\\\"\\n                detail-route=\\\"sw.customer.detail\\\"\\n                :show-selection=\\\"acl.can('customer.deleter')\\\"\\n                :allow-inline-edit=\\\"acl.can('customer.editor')\\\"\\n                :allow-bulk-edit=\\\"acl.can('customer.editor')\\\"\\n                :is-loading=\\\"isLoading\\\"\\n                :disable-data-fetching=\\\"true\\\"\\n                @selection-change=\\\"updateSelection\\\"\\n                @inline-edit-save=\\\"onInlineEditSave\\\"\\n                @page-change=\\\"onPageChange\\\"\\n                @column-sort=\\\"onSortColumn\\\"\\n                @bulk-edit-modal-open=\\\"onBulkEditModalOpen\\\"\\n            >\\n\\n                \\n                {% block sw_customer_list_grid_columns %}\\n\\n                \\n                {% block sw_product_list_grid_columns_name_preview %}\\n                <template #preview-firstName=\\\"{ item, compact }\\\">\\n                    <sw-avatar\\n                        :size=\\\"compact ? '32px' : '48px'\\\"\\n                        :source-context=\\\"item\\\"\\n                        :first-name=\\\"item.firstName\\\"\\n                        :last-name=\\\"item.lastName\\\"\\n                    />\\n                </template>\\n                {% endblock %}\\n\\n                \\n                {% block sw_customer_list_grid_columns_name %}\\n                <template #column-firstName=\\\"{ item, compact, isInlineEdit }\\\">\\n\\n                    \\n                    {% block sw_customer_list_grid_inline_edit_name %}\\n                    <template v-if=\\\"isInlineEdit\\\">\\n                        \\n                        {% block sw_customer_list_grid_inline_edit_first_name %}\\n                        <sw-text-field\\n                            {% if VUE3 %}\\n                            v-model:value=\\\"item.firstName\\\"\\n                            {% else %}\\n                            v-model=\\\"item.firstName\\\"\\n                            {% endif %}\\n                            class=\\\"sw-customer-list__inline-edit-first-name\\\"\\n                            :size=\\\"compact ? 'small' : 'default'\\\"\\n                        />\\n                        {% endblock %}\\n\\n                        \\n                        {% block sw_customer_list_grid_inline_edit_last_name %}\\n                        <sw-text-field\\n                            {% if VUE3 %}\\n                            v-model:value=\\\"item.lastName\\\"\\n                            {% else %}\\n                            v-model=\\\"item.lastName\\\"\\n                            {% endif %}\\n                            class=\\\"sw-customer-list__inline-edit-last-name\\\"\\n                            :size=\\\"compact ? 'small' : 'default'\\\"\\n                        />\\n                        {% endblock %}\\n                    </template>\\n                    {% endblock %}\\n\\n                    \\n                    {% block sw_customer_list_grid_columns_name_link %}\\n                    <router-link\\n                        v-else\\n                        :to=\\\"{ name: 'sw.customer.detail', params: { id: item.id }, query: { edit: false } }\\\"\\n                    >\\n                        {{ item.lastName }}, {{ item.firstName }}\\n                    </router-link>\\n                    {% endblock %}\\n\\n                    \\n                    {% block sw_customer_list_grid_columns_name_guest_label %}\\n                    <sw-label\\n                        v-if=\\\"!isInlineEdit && item.guest\\\"\\n                        appearance=\\\"pill\\\"\\n                        size=\\\"small\\\"\\n                        class=\\\"sw-customer-list__metadata-customer-guest-label\\\"\\n                    >\\n                        {{ $tc('sw-customer.list.columnNameGuestLabel') }}\\n                    </sw-label>\\n                    {% endblock %}\\n\\n                    <sw-label\\n                        v-if=\\\"item.createdById\\\"\\n                        appearance=\\\"pill\\\"\\n                        size=\\\"small\\\"\\n                        class=\\\"sw-customer-list__created-by-admin-label\\\"\\n                    >\\n                        {{ $tc('sw-customer.list.labelCreatedByAdmin') }}\\n                    </sw-label>\\n                </template>\\n                {% endblock %}\\n                {% endblock %}\\n\\n                \\n                {% block sw_customer_list_grid_columns_group %}\\n                <template #column-group=\\\"{ item, compact, isInlineEdit }\\\">\\n                    <sw-label\\n                        v-if=\\\"item.requestedGroup\\\"\\n                        class=\\\"sw-customer-list__requested-group-label\\\"\\n                        variant=\\\"warning\\\"\\n                        appearance=\\\"pill\\\"\\n                    >\\n                        {{ $tc('sw-customer.list.columnGroupRequested') }} {{ item.requestedGroup.translated.name }}\\n                    </sw-label>\\n                    <sw-label\\n                        v-else\\n                        size=\\\"default\\\"\\n                        appearance=\\\"pill\\\"\\n                    >\\n                        {{ item.group.translated.name }}\\n                    </sw-label>\\n                </template>\\n                {% endblock %}\\n\\n                \\n                {% block sw_customer_list_grid_columns_boundSalesChannel %}\\n                <template #column-boundSalesChannelId=\\\"{ item }\\\">\\n                    {{ item.boundSalesChannelId ? item.salesChannel.translated.name : $tc('sw-customer.list.emptyBoundSalesChannel') }}\\n                </template>\\n                {% endblock %}\\n\\n                \\n                {% block sw_customer_list_grid_columns_active %}\\n                <template #column-active=\\\"{ item, isInlineEdit }\\\">\\n                    \\n                    {% block sw_customer_list_grid_columns_active_inline_edit %}\\n                    <template v-if=\\\"isInlineEdit\\\">\\n                        <sw-checkbox-field\\n                            {% if VUE3 %}\\n                            v-model:value=\\\"item.active\\\"\\n                            {% else %}\\n                            v-model=\\\"item.active\\\"\\n                            {% endif %}\\n                        />\\n                    </template>\\n                    {% endblock %}\\n\\n                    \\n                    {% block sw_customer_list_grid_columns_active_content %}\\n                    <template v-else>\\n                        <sw-icon\\n                            v-if=\\\"item.active\\\"\\n                            name=\\\"regular-checkmark-xs\\\"\\n                            small\\n                            class=\\\"is--active\\\"\\n                        />\\n                        <sw-icon\\n                            v-else\\n                            name=\\\"regular-times-s\\\"\\n                            small\\n                            class=\\\"is--inactive\\\"\\n                        />\\n                    </template>\\n                    {% endblock %}\\n                </template>\\n                {% endblock %}\\n\\n                \\n                {% block sw_customer_list_grid_columns_actions %}\\n                <template #actions=\\\"{ item }\\\">\\n                    \\n                    {% block sw_customer_list_grid_columns_actions_view %}\\n                    <sw-context-menu-item\\n                        class=\\\"sw-customer-list__view-action\\\"\\n                        :router-link=\\\"{ name: 'sw.customer.detail', params: { id: item.id }, query: { edit: false } }\\\"\\n                    >\\n                        {{ $tc('sw-customer.list.contextMenuView') }}\\n                    </sw-context-menu-item>\\n                    {% endblock %}\\n\\n                    \\n                    {% block sw_customer_list_grid_columns_actions_edit %}\\n                    <sw-context-menu-item\\n                        class=\\\"sw-customer-list__edit-action\\\"\\n                        :disabled=\\\"!acl.can('customer.editor')\\\"\\n                        :router-link=\\\"{ name: 'sw.customer.detail.base', params: { id: item.id }, query: { edit: true } }\\\"\\n                    >\\n                        {{ $tc('sw-customer.list.contextMenuEdit') }}\\n                    </sw-context-menu-item>\\n                    {% endblock %}\\n\\n                    \\n                    {% block sw_customer_list_grid_columns_actions_delete %}\\n                    <sw-context-menu-item\\n                        class=\\\"sw-customer-list__delete-action\\\"\\n                        variant=\\\"danger\\\"\\n                        :disabled=\\\"!acl.can('customer.deleter')\\\"\\n                        @click=\\\"onDelete(item.id)\\\"\\n                    >\\n                        {{ $tc('sw-customer.list.contextMenuDelete') }}\\n                    </sw-context-menu-item>\\n                    {% endblock %}\\n                </template>\\n                {% endblock %}\\n\\n                \\n                {% block sw_customer_list_grid_action_modals %}\\n                <template #action-modals=\\\"{ item }\\\">\\n\\n                    \\n                    {% block sw_customer_list_delete_modal %}\\n                    <sw-modal\\n                        v-if=\\\"showDeleteModal === item.id\\\"\\n                        :title=\\\"$tc('global.default.warning')\\\"\\n                        variant=\\\"small\\\"\\n                        @modal-close=\\\"onCloseDeleteModal\\\"\\n                    >\\n\\n                        \\n                        {% block sw_customer_list_delete_modal_confirm_delete_text %}\\n                        <p class=\\\"sw-customer-list__confirm-delete-text\\\">\\n                            {{ $tc('sw-customer.list.textDeleteConfirm', 0, { name: `${item.firstName} ${item.lastName}` }) }}\\n                        </p>\\n                        {% endblock %}\\n\\n                        \\n                        {% block sw_customer_list_delete_modal_footer %}\\n                        <template #modal-footer>\\n\\n                            \\n                            {% block sw_customer_list_delete_modal_cancel %}\\n                            <sw-button\\n                                size=\\\"small\\\"\\n                                @click=\\\"onCloseDeleteModal\\\"\\n                            >\\n                                {{ $tc('sw-customer.list.buttonCancel') }}\\n                            </sw-button>\\n                            {% endblock %}\\n\\n                            \\n                            {% block sw_customer_list_delete_modal_confirm %}\\n                            <sw-button\\n                                variant=\\\"danger\\\"\\n                                size=\\\"small\\\"\\n                                @click=\\\"onConfirmDelete(item.id)\\\"\\n                            >\\n                                {{ $tc('sw-customer.list.buttonDelete') }}\\n                            </sw-button>\\n                            {% endblock %}\\n                        </template>\\n                        {% endblock %}\\n                    </sw-modal>\\n                    {% endblock %}\\n                </template>\\n                {% endblock %}\\n\\n                <template #pagination>\\n                    \\n                    {% block sw_order_list_grid_pagination %}\\n                    <sw-pagination\\n                        :page=\\\"page\\\"\\n                        :limit=\\\"limit\\\"\\n                        :total=\\\"total\\\"\\n                        :total-visible=\\\"7\\\"\\n                        @page-change=\\\"onPageChange\\\"\\n                    />\\n                    {% endblock %}\\n                </template>\\n\\n                \\n                {% block sw_customer_list_bulk_edit_modal %}\\n                <template\\n                    #bulk-edit-modal=\\\"{ selection }\\\"\\n                >\\n                    <sw-bulk-edit-modal\\n                        v-if=\\\"showBulkEditModal\\\"\\n                        ref=\\\"bulkEditModal\\\"\\n                        class=\\\"sw-customer-bulk-edit-modal\\\"\\n                        :selection=\\\"selection\\\"\\n                        :bulk-grid-edit-columns=\\\"customerColumns\\\"\\n                        @edit-items=\\\"onBulkEditItems\\\"\\n                        @modal-close=\\\"onBulkEditModalClose\\\"\\n                    >\\n                        \\n                        {% block sw_customer_list_bulk_edit_grid_columns_name %}\\n                        <template #column-firstName=\\\"{ item }\\\">\\n                            <router-link\\n                                :to=\\\"{ name: 'sw.customer.detail', params: { id: item.id } }\\\"\\n                                target=\\\"_blank\\\"\\n                                rel=\\\"noreferrer noopener\\\"\\n                            >\\n                                {{ item.lastName }}, {{ item.firstName }}\\n                            </router-link>\\n                        </template>\\n                        {% endblock %}\\n\\n                        \\n                        {% block sw_customer_list_bulk_edit_grid_columns_group %}\\n                        <template #column-group=\\\"{ item }\\\">\\n                            <sw-label\\n                                v-if=\\\"item.requestedGroup\\\"\\n                                class=\\\"sw-customer-list__requested-group-label\\\"\\n                                variant=\\\"warning\\\"\\n                                appearance=\\\"pill\\\"\\n                            >\\n                                {{ $tc('sw-customer.list.columnGroupRequested') }} {{ item.requestedGroup.translated.name }}\\n                            </sw-label>\\n                            <sw-label\\n                                v-else\\n                                size=\\\"default\\\"\\n                                appearance=\\\"pill\\\"\\n                            >\\n                                {{ item.group.translated.name }}\\n                            </sw-label>\\n                        </template>\\n                        {% endblock %}\\n                    </sw-bulk-edit-modal>\\n                </template>\\n                {% endblock %}\\n            </sw-entity-listing>\\n            {% endblock %}\\n\\n            \\n            {% block sw_customer_list_empty_state %}\\n            <template v-if=\\\"!isLoading && !total\\\">\\n                <sw-empty-state\\n                    v-if=\\\"filterCriteria.length || isValidTerm(term)\\\"\\n                    :title=\\\"$tc('sw-empty-state.messageNoResultTitle')\\\"\\n                >\\n                    <template #icon>\\n                        <img\\n                            :src=\\\"assetFilter('/administration/static/img/empty-states/customer-empty-state.svg')\\\"\\n                            :alt=\\\"$tc('sw-empty-state.messageNoResultTitle')\\\"\\n                        >\\n                    </template>\\n\\n                    <template #default>\\n                        {{ $tc('sw-empty-state.messageNoResultSublineBefore') }}\\n                        <router-link\\n                            class=\\\"sw-empty-state__description-link\\\"\\n                            :to=\\\"{ name: 'sw.profile.index.searchPreferences' }\\\"\\n                        >\\n                            {{ $tc('sw-empty-state.messageNoResultSublineLink') }}\\n                        </router-link>\\n                        {{ $tc('sw-empty-state.messageNoResultSublineAfter') }}\\n                    </template>\\n                </sw-empty-state>\\n                <sw-empty-state\\n                    v-else\\n                    :title=\\\"$tc('sw-customer.list.messageEmpty')\\\"\\n                >\\n                    <template #icon>\\n                        <img\\n                            :src=\\\"assetFilter('/administration/static/img/empty-states/customer-empty-state.svg')\\\"\\n                            :alt=\\\"$tc('sw-customer.list.messageEmpty')\\\"\\n                        >\\n                    </template>\\n                </sw-empty-state>\\n            </template>\\n            {% endblock %}\\n        </div>\\n        {% endblock %}\\n    </template>\\n\\n    \\n    {% block sw_customer_list_sidebar %}\\n    <template #sidebar>\\n        <sw-sidebar class=\\\"sw-customer-list__sidebar\\\">\\n            \\n            {% block sw_customer_list_sidebar_refresh %}\\n            <sw-sidebar-item\\n                icon=\\\"regular-undo\\\"\\n                :title=\\\"$tc('sw-customer.list.titleSidebarItemRefresh')\\\"\\n                @click=\\\"onRefresh\\\"\\n            />\\n            {% endblock %}\\n\\n            \\n            {% block sw_customer_list_sidebar_filter %}\\n            <sw-sidebar-filter-panel\\n                entity=\\\"customer\\\"\\n                :store-key=\\\"storeKey\\\"\\n                :filters=\\\"listFilters\\\"\\n                :defaults=\\\"defaultFilters\\\"\\n                :active-filter-number=\\\"activeFilterNumber\\\"\\n                @criteria-changed=\\\"updateCriteria\\\"\\n            />\\n            {% endblock %}\\n        </sw-sidebar>\\n    </template>\\n    {% endblock %}\\n</sw-page>\\n{% endblock %}\\n\";"],"sourceRoot":""}