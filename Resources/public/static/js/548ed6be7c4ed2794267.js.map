{"version":3,"sources":["webpack:///./src/module/sw-product-stream/component/sw-product-stream-filter/index.js","webpack:///./src/module/sw-product-stream/component/sw-product-stream-filter/sw-product-stream-filter.html.twig","webpack:///./src/module/sw-product-stream/component/sw-product-stream-filter/sw-product-stream-filter.scss"],"names":["EntityDefinition","Shopware","template","inject","computed","actualCondition","this","condition","type","queries","fields","get","field","conditionDataProviderService","allowedJsonAccessors","hasOwnProperty","isCustomField","split","set","concatenation","join","match","substring","length","fieldDefinitions","currentDefinition","forEach","fieldName","fieldDefinition","getField","entity","push","lastField","definition","methods","updateFields","_ref","index","slice","changeType","parameters","handleWrapForTypeNull","unwrapNot","isNegatedType","wrapInNot","changeBooleanValue","_ref2","value","changeEmptyValue","_ref3","_ref4","newType","negatedType","negateOperator","identifier","conditionData","copyParameters","_objectSpread","query","createCondition","id","insertNodeIntoTree","Object","assign","operator","innerCondition","removeNodeFromTree","_ref5","getNoPermissionsTooltip","role","showOnDisabledElements","arguments","undefined","showDelay","message","$tc","appearance","disabled","acl","can","strippedFieldName","replace","keys","productCustomFields","includes","content","__esModule","default","module","i","locals","exports","add"],"mappings":"guBAOA,IAAQA,EAAqBC,SAArBD,iBAKO,WACXE,SCbW,kzGDeXC,OAAQ,CACJ,kBACA,qBACA,qBACA,sBACA,MACA,gCAGJC,SAAU,CACNC,gBAAe,WACX,MAA4B,QAAxBC,KAAKC,UAAUC,KACRF,KAAKC,UAAUE,QAAQ,GAG3BH,KAAKC,WAGhBG,OAAQ,CACJC,IAAG,WACC,OAAKL,KAAKD,gBAAgBO,MAItBN,KAAKO,6BAA6BC,qBAAqBC,eAAeT,KAAKD,gBAAgBO,QAI3FN,KAAKU,cAAcV,KAAKD,gBAAgBO,OAHjC,CAACN,KAAKD,gBAAgBO,OAO1BN,KAAKD,gBAAgBO,MAAMK,MAAM,KAX7B,IAafC,IAAG,SAACR,GACA,IAAIS,EAAgBT,EAAOU,KAAK,KAE5BD,EAAcE,MAAM,QACpBF,EAAgBA,EAAcG,UAAU,EAAGH,EAAcI,SAQ7DjB,KAAKD,gBAAgBO,MALhBO,GAC4B,OAQzCK,iBAAgB,WACZ,IAAIC,EAAoBzB,EAAiBW,IAAI,WAEvCa,EAAmB,CAACC,GAc1B,OAbAnB,KAAKI,OAAOgB,SAAQ,SAACC,GACjB,IAAMC,EAAkBH,EAAkBI,SAASF,GAE9CC,GAIwB,gBAAzBA,EAAgBpB,OAChBiB,EAAoBzB,EAAiBW,IAAIiB,EAAgBE,QACzDN,EAAiBO,KAAKN,OAIvBD,GAGXQ,UAAS,WACL,OAAI1B,KAAKkB,iBAAiBD,OAASjB,KAAKI,OAAOa,OACpC,CACHI,UAAW,KACXM,WAAYjC,EAAiBW,IAAI,YAOlC,CACHgB,UAJcrB,KAAKI,OAAOJ,KAAKI,OAAOa,OAAS,GAK/CU,WAJe3B,KAAKkB,iBAAiBlB,KAAKkB,iBAAiBD,OAAS,MAShFW,QAAS,CACLC,aAAY,SAAAC,GAAoB,IAAjBxB,EAAKwB,EAALxB,MAAOyB,EAAKD,EAALC,MACZ3B,EAASJ,KAAKI,OAAO4B,MAAM,EAAGD,GAEhCzB,GACAF,EAAOqB,KAAKnB,GAGhBN,KAAKiC,WAAW,CAAE/B,KAAM,KAAMgC,WAAY,OAE1ClC,KAAKI,OAASA,GAGlB+B,sBAAqB,SAACjC,EAAMgC,GAOxB,OANa,OAAThC,GAC4B,QAAxBF,KAAKC,UAAUC,MACfF,KAAKoC,UAAUpC,KAAKC,UAAW,MAInCD,KAAKO,6BAA6B8B,cAAcnC,IACxB,QAAxBF,KAAKC,UAAUC,MAEfF,KAAKsC,UAAUtC,KAAKC,UAAWC,EAAMgC,IAC9B,GAGiB,QAAxBlC,KAAKC,UAAUC,MACdF,KAAKO,6BAA6B8B,cAAcnC,GAMzB,QAAxBF,KAAKC,UAAUC,MACfF,KAAKO,6BAA6B8B,cAAcnC,IAEhDF,KAAKoC,UAAUpC,KAAKC,UAAWC,EAAMgC,GACrClC,KAAKsC,UAAUtC,KAAKC,UAAWC,EAAMgC,IAC9B,IAGXlC,KAAKD,gBAAgBG,KAAOA,GAErB,IAdHF,KAAKoC,UAAUpC,KAAKC,UAAWC,EAAMgC,IAC9B,IAgBfK,mBAAkB,SAAAC,GAAmB,IAAhBtC,EAAIsC,EAAJtC,KAAMuC,EAAKD,EAALC,MACvBzC,KAAKmC,sBAAsBjC,GACC,QAAxBF,KAAKC,UAAUC,OACfF,KAAKC,UAAUE,QAAQ,GAAGsC,MAAQ,KAGtCzC,KAAKC,UAAUwC,MAAQA,GAG3BC,iBAAgB,SAAAC,GAAY,IAATzC,EAAIyC,EAAJzC,KACfF,KAAKmC,sBAAsBjC,GACC,QAAxBF,KAAKC,UAAUC,OACfF,KAAKC,UAAUE,QAAQ,GAAGsC,MAAQ,MAGtCzC,KAAKC,UAAUwC,MAAQ,MAG3BR,WAAU,SAAAW,GAAwB,IAArB1C,EAAI0C,EAAJ1C,KAAMgC,EAAUU,EAAVV,WACXlC,KAAKmC,sBAAsBjC,EAAMgC,KACjClC,KAAKD,gBAAgBmC,WAAaA,EAClClC,KAAKD,gBAAgB0C,MAAQ,OAIrCH,UAAS,SAACrC,EAAW4C,EAASX,GAC1B,IAAoBY,EAAgB9C,KAAKO,6BAA6BwC,eAAeF,GAA7EG,WACFC,EAAgBjD,KAAKkD,eAAcC,IAAC,GAAKlD,GAAS,IAAEiC,gBAC1De,EAAc/C,KAAO4C,EAErB,IAAMM,EAAQpD,KAAKqD,gBAAgBJ,EAAehD,EAAUqD,GAAI,GAChEtD,KAAKuD,mBAAmBvD,KAAKC,UAAWmD,GAExCI,OAAOC,OACHxD,EACA,CACIC,KAAM,MACNI,MAAO,KACPoD,SAAU,KACVjB,MAAO,KACPP,WAAY,QAKxBE,UAAS,SAACnC,EAAW4C,EAASX,GAC1B,IAAMyB,EAAiB1D,EAAUE,QAAQ,GACnC8C,EAAgBjD,KAAKkD,eAAcC,IAAC,GAAKQ,GAAc,IAAEzB,gBAE/De,EAAc/C,KAAO2C,EACrBW,OAAOC,OAAOxD,EAAWgD,GACzBjD,KAAK4D,mBAAmB5D,KAAKC,UAAW0D,IAG5CT,eAAc,SAAAW,GACV,MAAO,CAAEvD,MADSuD,EAALvD,MACGJ,KADQ2D,EAAJ3D,KACEwD,SADYG,EAARH,SACMxB,WADc2B,EAAV3B,WACQO,MADSoB,EAALpB,QAIpDqB,wBAAuB,SAACC,GAAsC,IAAhCC,IAAsBC,UAAAhD,OAAA,QAAAiD,IAAAD,UAAA,KAAAA,UAAA,GAChD,MAAO,CACHE,UAAW,IACXC,QAASpE,KAAKqE,IAAI,iCAClBC,WAAY,OACZN,yBACAO,SAAUvE,KAAKwE,IAAIC,IAAIV,KAI/BrD,cAAa,SAACW,GACV,IAAMqD,EAAoBrD,EAAUsD,QAAQ,iBAAkB,IAE9D,OAAOnB,OAAOoB,KAAK5E,KAAK6E,qBAAqBC,SAASJ,O,4CE1NlE,IAAIK,EAAU,EAAQ,QACnBA,EAAQC,aAAYD,EAAUA,EAAQE,SACnB,iBAAZF,IAAsBA,EAAU,CAAC,CAACG,EAAOC,EAAIJ,EAAS,MAC7DA,EAAQK,SAAQF,EAAOG,QAAUN,EAAQK,SAG/BE,EADH,EAAQ,QAAwEL,SACzE,WAAYF,GAAS,EAAM","file":"static/js/548ed6be7c4ed2794267.js","sourcesContent":["/*\n * @package business-ops\n */\n\nimport template from './sw-product-stream-filter.html.twig';\nimport './sw-product-stream-filter.scss';\n\nconst { EntityDefinition } = Shopware;\n\n/**\n * @private\n */\nexport default {\n    template,\n\n    inject: [\n        'createCondition',\n        'insertNodeIntoTree',\n        'removeNodeFromTree',\n        'productCustomFields',\n        'acl',\n        'conditionDataProviderService',\n    ],\n\n    computed: {\n        actualCondition() {\n            if (this.condition.type === 'not') {\n                return this.condition.queries[0];\n            }\n\n            return this.condition;\n        },\n\n        fields: {\n            get() {\n                if (!this.actualCondition.field) {\n                    return [];\n                }\n\n                if (this.conditionDataProviderService.allowedJsonAccessors.hasOwnProperty(this.actualCondition.field)) {\n                    return [this.actualCondition.field];\n                }\n\n                if (this.isCustomField(this.actualCondition.field)) {\n                    return [this.actualCondition.field];\n                }\n\n                return this.actualCondition.field.split('.');\n            },\n            set(fields) {\n                let concatenation = fields.join('.');\n\n                if (concatenation.match('\\.$')) {\n                    concatenation = concatenation.substring(0, concatenation.length);\n                }\n\n                if (!concatenation) {\n                    this.actualCondition.field = null;\n                    return;\n                }\n\n                this.actualCondition.field = concatenation;\n            },\n        },\n\n        fieldDefinitions() {\n            let currentDefinition = EntityDefinition.get('product');\n\n            const fieldDefinitions = [currentDefinition];\n            this.fields.forEach((fieldName) => {\n                const fieldDefinition = currentDefinition.getField(fieldName);\n\n                if (!fieldDefinition) {\n                    return;\n                }\n\n                if (fieldDefinition.type === 'association') {\n                    currentDefinition = EntityDefinition.get(fieldDefinition.entity);\n                    fieldDefinitions.push(currentDefinition);\n                }\n            });\n\n            return fieldDefinitions;\n        },\n\n        lastField() {\n            if (this.fieldDefinitions.length > this.fields.length) {\n                return {\n                    fieldName: null,\n                    definition: EntityDefinition.get('product'),\n                };\n            }\n\n            const fieldName = this.fields[this.fields.length - 1];\n            const definition = this.fieldDefinitions[this.fieldDefinitions.length - 1];\n\n            return {\n                fieldName,\n                definition,\n            };\n        },\n    },\n\n    methods: {\n        updateFields({ field, index }) {\n            const fields = this.fields.slice(0, index);\n\n            if (field) {\n                fields.push(field);\n            }\n\n            this.changeType({ type: null, parameters: null });\n\n            this.fields = fields;\n        },\n\n        handleWrapForTypeNull(type, parameters) {\n            if (type === null) {\n                if (this.condition.type === 'not') {\n                    this.unwrapNot(this.condition, null);\n                }\n            }\n\n            if (this.conditionDataProviderService.isNegatedType(type) &&\n                this.condition.type !== 'not'\n            ) {\n                this.wrapInNot(this.condition, type, parameters);\n                return false;\n            }\n\n            if (this.condition.type === 'not' &&\n                !this.conditionDataProviderService.isNegatedType(type)\n            ) {\n                this.unwrapNot(this.condition, type, parameters);\n                return false;\n            }\n\n            if (this.condition.type === 'not' &&\n                this.conditionDataProviderService.isNegatedType(type)\n            ) {\n                this.unwrapNot(this.condition, type, parameters);\n                this.wrapInNot(this.condition, type, parameters);\n                return false;\n            }\n\n            this.actualCondition.type = type;\n\n            return true;\n        },\n\n        changeBooleanValue({ type, value }) {\n            this.handleWrapForTypeNull(type);\n            if (this.condition.type === 'not') {\n                this.condition.queries[0].value = '1';\n            }\n\n            this.condition.value = value;\n        },\n\n        changeEmptyValue({ type }) {\n            this.handleWrapForTypeNull(type);\n            if (this.condition.type === 'not') {\n                this.condition.queries[0].value = null;\n            }\n\n            this.condition.value = null;\n        },\n\n        changeType({ type, parameters }) {\n            if (this.handleWrapForTypeNull(type, parameters)) {\n                this.actualCondition.parameters = parameters;\n                this.actualCondition.value = null;\n            }\n        },\n\n        wrapInNot(condition, newType, parameters) {\n            const { identifier: negatedType } = this.conditionDataProviderService.negateOperator(newType);\n            const conditionData = this.copyParameters({ ...condition, parameters });\n            conditionData.type = negatedType;\n\n            const query = this.createCondition(conditionData, condition.id, 0);\n            this.insertNodeIntoTree(this.condition, query);\n\n            Object.assign(\n                condition,\n                {\n                    type: 'not',\n                    field: null,\n                    operator: null,\n                    value: null,\n                    parameters: null,\n                },\n            );\n        },\n\n        unwrapNot(condition, newType, parameters) {\n            const innerCondition = condition.queries[0];\n            const conditionData = this.copyParameters({ ...innerCondition, parameters });\n\n            conditionData.type = newType;\n            Object.assign(condition, conditionData);\n            this.removeNodeFromTree(this.condition, innerCondition);\n        },\n\n        copyParameters({ field, type, operator, parameters, value }) {\n            return { field, type, operator, parameters, value };\n        },\n\n        getNoPermissionsTooltip(role, showOnDisabledElements = true) {\n            return {\n                showDelay: 300,\n                message: this.$tc('sw-privileges.tooltip.warning'),\n                appearance: 'dark',\n                showOnDisabledElements,\n                disabled: this.acl.can(role),\n            };\n        },\n\n        isCustomField(fieldName) {\n            const strippedFieldName = fieldName.replace(/customFields\\./, '');\n\n            return Object.keys(this.productCustomFields).includes(strippedFieldName);\n        },\n    },\n};\n","export default \"\\n{% block sw_condition_base %}\\n\\n{% block sw_product_stream_filter %}\\n<div\\n    class=\\\"sw-product-stream-filter\\\"\\n    :class=\\\"conditionClasses\\\"\\n>\\n    \\n    {% block sw_product_stream_filter_container %}\\n    <div class=\\\"sw-product-stream-filter__container\\\">\\n        \\n        {% block sw_product_stream_filter_selects %}\\n        <div class=\\\"sw-product-stream-filter__selects\\\">\\n            \\n            {% block sw_product_stream_filter_fields %}\\n            <template\\n                v-for=\\\"(definition, index) in fieldDefinitions\\\"\\n                {% if VUE3 %}\\n                :key=\\\"index\\\"\\n                {% endif %}\\n            >\\n                \\n                {% block sw_product_stream_filter_field_select %}\\n                <sw-product-stream-field-select\\n                    {% if VUE2 %}\\n                    :key=\\\"index\\\"\\n                    {% endif %}\\n                    v-bind=\\\"{ field: fields[index], definition, index }\\\"\\n                    :disabled=\\\"!acl.can('product_stream.editor')\\\"\\n                    :has-error=\\\"hasError\\\"\\n                    @field-changed=\\\"updateFields\\\"\\n                />\\n                {% endblock %}\\n            </template>\\n            {% endblock %}\\n\\n            \\n            {% block sw_product_stream_filter_value %}\\n            <sw-product-stream-value\\n                v-bind=\\\"{ condition, ...lastField }\\\"\\n                :disabled=\\\"!acl.can('product_stream.editor')\\\"\\n                @type-change=\\\"changeType\\\"\\n                @boolean-change=\\\"changeBooleanValue\\\"\\n                @empty-change=\\\"changeEmptyValue\\\"\\n            />\\n            {% endblock %}\\n        </div>\\n        {% endblock %}\\n\\n        \\n        {% block sw_product_stream_filter_field_actions %}\\n        <sw-context-button\\n            v-tooltip=\\\"getNoPermissionsTooltip('product_stream.editor', false)\\\"\\n            class=\\\"sw-product-stream-filter__context-button\\\"\\n            :disabled=\\\"!acl.can('product_stream.editor')\\\"\\n        >\\n            \\n            {% block sw_product_stream_filter_field_create_before_action %}\\n            <sw-context-menu-item\\n                class=\\\"sw-product-stream-filter__create-before-action\\\"\\n                @click=\\\"onCreateBefore\\\"\\n            >\\n                {{ $tc('global.sw-condition.condition.createBefore') }}\\n            </sw-context-menu-item>\\n            {% endblock %}\\n\\n            \\n            {% block sw_product_stream_filter_field_create_after_action %}\\n            <sw-context-menu-item\\n                class=\\\"sw-product-stream-filter__create-after-action\\\"\\n                @click=\\\"onCreateAfter\\\"\\n            >\\n                {{ $tc('global.sw-condition.condition.createAfter') }}\\n            </sw-context-menu-item>\\n            {% endblock %}\\n\\n            \\n            {% block sw_product_stream_filter_field_delete_action %}\\n            <sw-context-menu-item\\n                variant=\\\"danger\\\"\\n                @click=\\\"onDeleteCondition\\\"\\n            >\\n                {{ $tc('global.default.delete') }}\\n            </sw-context-menu-item>\\n            {% endblock %}\\n        </sw-context-button>\\n        {% endblock %}\\n    </div>\\n    {% endblock %}\\n\\n    \\n    {% block sw_product_stream_filter_error %}\\n    <sw-field-error :error=\\\"currentError\\\" />\\n    {% endblock %}\\n</div>\\n    {% endblock %}\\n{% endblock %}\\n\";","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../../../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--15-1!../../../../../node_modules/css-loader/dist/cjs.js??ref--15-2!../../../../../node_modules/sass-loader/dist/cjs.js??ref--15-3!./sw-product-stream-filter.scss\");\nif(content.__esModule) content = content.default;\nif(typeof content === 'string') content = [[module.id, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar add = require(\"!../../../../../node_modules/vue-style-loader/lib/addStylesClient.js\").default\nvar update = add(\"68bd8a69\", content, true, {});"],"sourceRoot":""}