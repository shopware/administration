(window.webpackJsonpAdministration=window.webpackJsonpAdministration||[]).push([[75504],{24271:function(){},75504:function(n,e,s){"use strict";s.r(e),s.d(e,{default:function(){return o}}),s(46943);let{Utils:i,Filter:t}=Shopware;var o={template:'\n{% block sw_extension_card_base %}\n<sw-meteor-card\n    class="sw-extension-card-base"\n    :class="extensionCardClasses"\n>\n    \n    {% block sw_extension_card_base_loader %}\n    <sw-loader v-if="isLoading" />\n    {% endblock %}\n\n    \n    {% block sw_extension_card_base_activation_switch %}\n    <div class="sw-extension-card-base__switch">\n        \n        {% block sw_extension_card_base_activation_switch_switch %}\n        <sw-switch-field\n            v-model:value="isActive"\n            v-tooltip="{\n                showDelay: 300,\n                message: $tc(\'sw-extension-store.component.sw-extension-card-base.allowDisableTooltip\'),\n                disabled: allowDisable\n            }"\n            :disabled="!isInstalled || (isActive && !allowDisable)"\n        />\n        {% endblock %}\n    </div>\n    {% endblock %}\n\n    \n    {% block sw_extension_card_base_icon %}\n    <sw-extension-icon :src="image" />\n    {% endblock %}\n\n    \n    {% block sw_extension_card_base_info %}\n    <div class="sw-extension-card-base__info">\n        \n        {% block sw_extension_card_base_info_content %}\n        \n        {% block sw_extension_card_base_info_head %}\n        <section>\n            \n            {% block sw_extension_card_base_info_name %}\n            <span class="sw-extension-card-base__info-name">\n                {{ extension.label }}\n            </span>\n            {% endblock %}\n\n            \n            {% block sw_extension_card_base_info_inactive_label %}\n            <span\n                v-if="isInstalled && !extension.active"\n                class="sw-extension-card-base__info-inactive"\n            >\n                {{ $tc(\'sw-extension-store.component.sw-extension-card-base.inactiveLabel\') }}\n            </span>\n            {% endblock %}\n        </section>\n        {% endblock %}\n        {% endblock %}\n    </div>\n    {% endblock %}\n\n    \n    {% block sw_extension_card_base_meta_info %}\n    <div class="sw-extension-card-base__meta-info">\n        \n        {% block sw_extension_card_base_meta_info_version %}\n        <section>\n            \n            {% block sw_extension_card_base_meta_info_version_label %}\n            <span\n                v-if="extension.version"\n                class="sw-extension-card-base__meta-info-version"\n            >\n                {{ $tc(\'sw-extension.my-extensions.listing.version\') }}: {{ extension.version }}\n            </span>\n            {% endblock %}\n\n            \n            {% block sw_extension_card_base_meta_info_version_update %}\n            <span v-if="isUpdateable">\n                <a\n                    href="#"\n                    @click.prevent="updateExtension(false)"\n                >\n                    {{ $tc(\'sw-extension.my-extensions.listing.update\') }}\n                </a>\n            </span>\n            {% endblock %}\n        </section>\n        {% endblock %}\n        {% endblock %}\n\n        \n        {% block sw_extension_card_base_meta_info_content %}\n        \n        {% block sw_extension_card_base_meta_date %}\n        <span v-if="isInstalled">\n            {{ $tc(\'sw-extension-store.component.sw-extension-card-base.installedLabel\') }}\n            {{ dateFilter(extension.installedAt.date, { month: \'numeric\', year: \'numeric\', hour: undefined, minute: undefined }) }}\n        </span>\n\n        <span v-else-if="extension.storeLicense">\n            {{ $tc(\'sw-extension-store.component.sw-extension-card-base.purchasedLabel\') }}\n            {{ dateFilter(extension.storeLicense.creationDate, { month: \'numeric\', year: \'numeric\', hour: undefined, minute: undefined }) }}\n        </span>\n        {% endblock %}\n    </div>\n    {% endblock %}\n\n    \n    {% block sw_extension_card_base_main_action %}\n    <div class="sw-extension-card-base__main-action">\n        \n        {% block sw_extension_card_base_main_action_content %}\n        <span\n            v-if="!isInstalled"\n            class="sw-extension-card-base__open-extension"\n            role="button"\n            tabindex="0"\n            @click="openPermissionsModalForInstall"\n            @keydown.enter="openPermissionsModalForInstall"\n        >\n            {{ $tc(\'sw-extension-store.component.sw-extension-card-base.installExtensionLabel\') }}\n        </span>\n        {% endblock %}\n    </div>\n    {% endblock %}\n\n    \n    {% block sw_extension_card_base_context_menu %}\n    <sw-context-button\n        class="sw-extension-card-base__context-menu"\n        :menu-width="180"\n    >\n        \n        {% block sw_extension_card_base_context_menu_actions %}\n        \n        {% block sw_extension_card_base_context_menu_settings %}\n        <sw-context-menu-item\n            v-if="isInstalled && extension.configurable"\n            :router-link="{ name: \'sw.extension.config\', params: { namespace: extension.name } }"\n        >\n            {{ $tc(\'sw-extension-store.component.sw-extension-card-base.contextMenu.config\') }}\n        </sw-context-menu-item>\n        {% endblock %}\n\n        \n        {% block sw_extension_card_base_context_menu_theme_settings %}\n        <sw-context-menu-item\n            v-if="openLinkExists && extension.active"\n            :disabled="!openLinkExists"\n            :router-link="link"\n        >\n            {{ $tc(\'sw-extension-store.component.sw-extension-card-base.contextMenu.openExtension\') }}\n        </sw-context-menu-item>\n        {% endblock %}\n\n        \n        {% block sw_extension_card_base_context_menu_privacy_safety %}\n        <sw-context-menu-item\n            v-if="privacyPolicyLink"\n            @click="openPrivacyAndSafety"\n        >\n            <span class="sw-extension-card-base__context-menu-privacy-link">\n                {{ $tc(\'sw-extension-store.component.sw-extension-card-base.contextMenu.privacyAndSafetyLabel\') }}\n                <sw-icon\n                    name="regular-external-link-s"\n                    size="10px"\n                />\n            </span>\n        </sw-context-menu-item>\n        {% endblock %}\n\n        \n        {% block sw_extension_card_base_context_menu_privacy_extensions %}\n        <sw-context-menu-item\n            v-if="isInstalled && extension.privacyPolicyExtension"\n            @click="openPrivacyModal"\n        >\n\n            {{ $tc(\'sw-extension-store.component.sw-extension-card-base.contextMenu.policyExtensions\') }}\n        </sw-context-menu-item>\n        {% endblock %}\n\n        \n        {% block sw_extension_card_base_context_menu_permissions %}\n        <sw-context-menu-item\n            v-if="isInstalled && permissions"\n            @click="openPermissionsModal"\n        >\n\n            {{ $tc(\'sw-extension-store.component.sw-extension-card-base.contextMenu.permissions\') }}\n        </sw-context-menu-item>\n        {% endblock %}\n\n        \n        {% block sw_extension_card_base_context_menu_lifecycle_actions %}\n        \n        {% block sw_extension_card_base_context_menu_remove_extension %}\n        <sw-context-menu-item\n            v-if="isUpdateable"\n            @click="updateExtension(false)"\n        >\n            {{ $tc(\'sw-extension-store.component.sw-extension-card-base.contextMenu.updateLabel\', 0, { version: extension.latestVersion }) }}\n        </sw-context-menu-item>\n\n        <sw-context-menu-item\n            v-if="extension.storeLicense && extension.storeLicense.variant === \'rent\' && extension.storeLicense.expirationDate === null"\n            class="sw-extension-card-base__cancel-and-remove-link"\n            variant="danger"\n            @click="openRemovalModal"\n        >\n            {{ $tc(\'sw-extension-store.component.sw-extension-card-base.contextMenu.cancelAndRemoveLabel\') }}\n        </sw-context-menu-item>\n\n        <sw-context-menu-item\n            v-else-if="isRemovable"\n            class="sw-extension-card-base__remove-link"\n            variant="danger"\n            @click="openRemovalModal"\n        >\n            {{ $tc(\'sw-extension-store.component.sw-extension-card-base.contextMenu.removeLabel\') }}\n        </sw-context-menu-item>\n\n        <sw-context-menu-item\n            v-if="isUninstallable"\n            variant="danger"\n            @click="openUninstallModal"\n        >\n            {{ $tc(\'sw-extension-store.component.sw-extension-card-base.contextMenu.uninstallLabel\') }}\n        </sw-context-menu-item>\n        {% endblock %}\n        {% endblock %}\n        {% endblock %}\n    </sw-context-button>\n    {% endblock %}\n\n    \n    {% block sw_extension_card_base_modals %}\n    \n    {% block sw_extension_card_base_uninstall_modal %}\n    <sw-extension-uninstall-modal\n        v-if="showUninstallModal"\n        :extension-name="extension.label"\n        :is-licensed="extension.storeLicense !== null"\n        :is-loading="isLoading"\n        @modal-close="closeUninstallModal"\n        @uninstall-extension="closeModalAndUninstallExtension"\n    />\n    {% endblock %}\n\n    \n    {% block sw_extension_card_base_removal_modal %}\n    <sw-extension-removal-modal\n        v-if="showRemovalModal"\n        :extension-name="extension.label"\n        :is-licensed="extension.storeLicense !== null && extension.storeLicense.variant === \'rent\'"\n        :is-loading="isLoading"\n        @modal-close="closeRemovalModal"\n        @remove-extension="closeModalAndRemoveExtension"\n    />\n    {% endblock %}\n\n    \n    {% block sw_extension_card_base_permissions_modal %}\n    <sw-extension-permissions-modal\n        v-if="showPermissionsModal"\n        :extension-label="extension.label"\n        :permissions="permissions"\n        :domains="extension.domains"\n        :action-label="permissionModalActionLabel"\n        @modal-close="closePermissionsModal"\n        @close-with-action="closePermissionsModalAndInstallExtension"\n    />\n    {% endblock %}\n\n    \n    {% block sw_extension_card_base_privacy_modal %}\n    <sw-extension-privacy-policy-extensions-modal\n        v-if="showPrivacyModal"\n        :extension-name="extension.label"\n        :privacy-policy-extension="extension.privacyPolicyExtension"\n        @modal-close="closePrivacyModal"\n    />\n    {% endblock %}\n    {% endblock %}\n\n    \n    {% block sw_extension_card_base_consent_affirmation_modal %}\n    <sw-extension-permissions-modal\n        v-if="showConsentAffirmationModal"\n        :title="consentAffirmationModalTitle"\n        :extension-label="extension.label"\n        :permissions="consentAffirmationDeltas.permissions"\n        :domains="consentAffirmationDeltas.domains"\n        :action-label="consentAffirmationModalActionLabel"\n        :close-label="consentAffirmationModalCloseLabel"\n        :description="consentAffirmationModalDescription"\n        @modal-close="closeConsentAffirmationModal"\n        @close-with-action="closeConsentAffirmationModalAndUpdateExtension"\n    />\n    {% endblock %}\n</sw-meteor-card>\n{% endblock %}\n',inheritAttrs:!1,inject:["shopwareExtensionService","extensionStoreActionService","cacheApiService"],mixins:["sw-extension-error"],props:{extension:{type:Object,required:!0}},data(){return{isLoading:!1,showUninstallModal:!1,showRemovalModal:!1,showPermissionsModal:!1,permissionsAccepted:!1,showPrivacyModal:!1,permissionModalActionLabel:null,openLink:null,showConsentAffirmationModal:!1,consentAffirmationDeltas:null}},computed:{dateFilter(){return Shopware.Filter.getByName("date")},defaultThemeAsset(){return this.assetFilter("administration/static/img/theme/default_theme_preview.jpg")},extensionCardClasses(){return{"is--deactivated":this.isInstalled&&!this.extension.active,"deactivate-prevented":this.isActive&&!this.allowDisable,"is--not-installed":!this.isInstalled}},licensedExtension(){return this.extension.storeLicense},image(){return this.extension.icon?this.extension.icon:this.extension.iconRaw?`data:image/png;base64, ${this.extension.iconRaw}`:this.defaultThemeAsset},isActive:{get(){return!!this.isInstalled&&this.extension.active},set(n){this.isInstalled&&(this.extension.active=n,this.$nextTick(()=>{this.changeExtensionStatus()},0))}},allowDisable(){return this.extension.allowDisable},isInstalled(){return null!==this.extension.installedAt},privacyPolicyLink(){return this.extension.privacyPolicyLink},permissions(){return Object.keys(this.extension.permissions).length?this.extension.permissions:null},assetFilter(){return t.getByName("asset")},isRemovable(){return null===this.extension.installedAt&&"local"===this.extension.source},isUninstallable(){return null!==this.extension.installedAt},isUpdateable(){return!!this.extension&&null!==this.extension.latestVersion&&this.extension.latestVersion!==this.extension.version},openLinkExists(){return!!this.link},extensionMainModule(){return Shopware.State.get("extensionMainModules").mainModules.find(n=>n.extensionName===this.extension.name)},link(){return this.openLink?this.openLink:this.extensionMainModule?{name:"sw.extension.sdk.index",params:{id:this.extensionMainModule.moduleId}}:null},consentAffirmationModalActionLabel(){return this.$tc("sw-extension-store.component.sw-extension-permissions-modal.acceptAndUpdate")},consentAffirmationModalCloseLabel(){return this.$tc("global.default.cancel")},consentAffirmationModalTitle(){return this.$tc("sw-extension-store.component.sw-extension-permissions-modal.titleNewPermissions",1,{extensionLabel:this.extension.label})},consentAffirmationModalDescription(){return this.$tc("sw-extension-store.component.sw-extension-permissions-modal.descriptionNewPermissions",1,{extensionLabel:this.extension.label})}},created(){this.createdComponent()},methods:{async createdComponent(){this.openLink=await this.shopwareExtensionService.getOpenLink(this.extension)},emitUpdateList(){this.$emit("update-list")},getHelp(){},openPrivacyAndSafety(){window.open(this.extension.privacyPolicyLink,"_blank")},openRemovalModal(){this.showRemovalModal=!0},openUninstallModal(){this.showUninstallModal=!0},closeRemovalModal(){this.showRemovalModal=!1},closeUninstallModal(){this.showUninstallModal=!1},async closeModalAndUninstallExtension(n){this.showUninstallModal=!1,this.isLoading=!0;try{await this.shopwareExtensionService.uninstallExtension(this.extension.name,this.extension.type,n),this.clearCacheAndReloadPage()}catch(n){this.showExtensionErrors(n)}finally{this.isLoading=!1}},async updateExtension(n=!1){this.isLoading=!0;try{"store"===this.extension.updateSource&&await this.extensionStoreActionService.downloadExtension(this.extension.name),this.extension.installedAt&&await this.shopwareExtensionService.updateExtension(this.extension.name,this.extension.type,n),this.clearCacheAndReloadPage()}catch(n){if(n.response?.data?.errors[0]?.code==="FRAMEWORK__EXTENSION_UPDATE_REQUIRES_CONSENT_AFFIRMATION"){this.consentAffirmationDeltas=n.response.data.errors[0].meta.parameters.deltas,this.openConsentAffirmationModal();return}this.showExtensionErrors(n)}finally{this.isLoading=!1}},async closeModalAndRemoveExtension(){if(null===this.extension.storeLicense||"rent"!==this.extension.storeLicense.variant){await this.removeExtension(),this.showRemovalModal=!1;return}await this.cancelAndRemoveExtension(),this.showRemovalModal=!1},openExtension(){this.link&&this.$router.push(this.link)},async openPermissionsModalForInstall(){if(!this.permissions){this.permissionsAccepted=!0,this.isLoading=!0,await this.installAndActivateExtension();return}this.permissionModalActionLabel=this.$tc("sw-extension-store.component.sw-extension-card-base.labelAcceptAndInstall"),this.showPermissionsModal=!0},openPermissionsModal(){this.permissionModalActionLabel=null,this.showPermissionsModal=!0},closePermissionsModal(){this.permissionModalActionLabel=null,this.showPermissionsModal=!1},async closePermissionsModalAndInstallExtension(){this.permissionsAccepted=!0,this.closePermissionsModal(),await this.installExtension()},async changeExtensionStatus(){i.debug.warn(this._name,"No implementation of changeExtensionStatus found")},installExtension(){i.debug.warn(this._name,"No implementation of installExtension found")},async installAndActivateExtension(){i.debug.warn(this._name,"No implementation of installAndActivateExtension found")},async removeExtension(){try{this.showRemovalModal=!1,this.isLoading=!0,await this.shopwareExtensionService.removeExtension(this.extension.name,this.extension.type),this.extension.active=!1}catch(n){this.showStoreError(n)}finally{this.isLoading=!1}},cancelAndRemoveExtension(){i.debug.warn(this._name,"No implementation of cancelAndRemoveExtension found")},openPrivacyModal(){this.showPrivacyModal=!0},closePrivacyModal(){this.showPrivacyModal=!1},clearCacheAndReloadPage(){return this.cacheApiService.clear().then(()=>{window.location.reload()})},openConsentAffirmationModal(){this.showConsentAffirmationModal=!0},closeConsentAffirmationModal(){this.showConsentAffirmationModal=!1},async closeConsentAffirmationModalAndUpdateExtension(){this.closeConsentAffirmationModal(),await this.updateExtension(!0)}}}},46943:function(n,e,s){var i=s(24271);i.__esModule&&(i=i.default),"string"==typeof i&&(i=[[n.id,i,""]]),i.locals&&(n.exports=i.locals),s(45346).Z("2e523ffd",i,!0,{})}}]);