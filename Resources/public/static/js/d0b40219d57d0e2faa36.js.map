{"version":3,"sources":["webpack:///./src/module/sw-settings-search/page/sw-settings-search/sw-settings-search.html.twig","webpack:///./src/module/sw-settings-search/page/sw-settings-search/index.js"],"names":["Mixin","Shopware","_Shopware$Data","Data","EntityCollection","Criteria","template","inject","mixins","getByName","shortcuts","active","this","allowSave","method","ESCAPE","data","productSearchConfigs","andLogic","minSearchLength","isLoading","currentSalesChannelId","searchTerms","searchResults","defaultConfig","isSaveSuccessful","nextRoute","isDisplayingLeavePageWarning","leaveConfirmation","isEditing","computed","productSearchRepository","repositoryFactory","create","productSearchFieldRepository","productSearchConfigsCriteria","criteria","addAssociation","addFilter","equals","Context","api","languageId","productDefaultConfigsCriteria","systemLanguageId","acl","can","tooltipSave","message","$tc","disabled","showOnDisabledElements","systemKey","$device","getSystemKey","concat","appearance","created","createdComponent","beforeRouteUpdate","to","from","next","unsavedDataLeaveHandler","beforeRouteLeave","methods","getDefaultSearchConfig","getProductSearchConfigs","_this","search","then","items","total","first","onSaveDefaultSearchConfig","catch","err","createNotificationError","finally","_this2","createDefaultSearchConfig","excludedTerms","createConfigFields","_this3","configFields","length","configFieldCollection","route","entityName","forEach","item","newConfigField","field","ranking","searchable","tokenize","customFieldId","searchConfigId","id","add","_this4","save","onChangeLanguage","onTabChange","onSaveSearchSettings","_this5","createNotificationSuccess","saveFinish","fetchSalesChannels","_this6","salesChannelRepository","response","salesChannels","onSalesChannelChanged","salesChannelId","onLiveSearchResultsChanged","_ref","onEditChanged","onConfirmLeave","_this7","$nextTick","$router","push","name","params","onCloseLeaveModal","onCancelLeaveModal"],"mappings":"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","file":"static/js/d0b40219d57d0e2faa36.js","sourcesContent":["export default \"\\n{% block sw_settings_search_index %}\\n<sw-page class=\\\"sw-settings-search\\\">\\n    \\n    {% block sw_settings_search_smart_bar_header %}\\n    <template #smart-bar-header>\\n        <h2>\\n            \\n            {% block sw_settings_search_smart_bar_header_title_text %}\\n            {{ $tc('sw-settings.index.title') }}\\n            <sw-icon\\n                name=\\\"regular-chevron-right-xs\\\"\\n                small\\n            />\\n            {{ $tc('sw-settings-search.general.mainMenuItemGeneral') }}\\n            {% endblock %}\\n        </h2>\\n    </template>\\n    {% endblock %}\\n\\n    \\n    {% block sw_settings_search_language_switch %}\\n    <template #language-switch>\\n        <sw-language-switch @on-change=\\\"onChangeLanguage\\\" />\\n    </template>\\n    {% endblock %}\\n\\n    \\n    {% block sw_settings_search_smart_bar_actions %}\\n    <template #smart-bar-actions>\\n        \\n        {% block sw_settings_search_smart_bar_actions_save %}\\n        <sw-button-process\\n            v-tooltip.bottom=\\\"tooltipSave\\\"\\n            class=\\\"sw-settings-search__button-save\\\"\\n            variant=\\\"primary\\\"\\n            :disabled=\\\"!allowSave\\\"\\n            :is-loading=\\\"isLoading\\\"\\n            :process-success=\\\"isSaveSuccessful\\\"\\n            {% if VUE3 %}\\n            @update:process-success=\\\"saveFinish\\\"\\n            {% else %}\\n            @process-finish=\\\"saveFinish\\\"\\n            {% endif %}\\n            @click.prevent=\\\"onSaveSearchSettings\\\"\\n        >\\n            {{ $tc('global.default.save') }}\\n        </sw-button-process>\\n        {% endblock %}\\n    </template>\\n    {% endblock %}\\n\\n    \\n    {% block sw_settings_search_content %}\\n    <template #content>\\n        <sw-card-view>\\n            \\n            {% block sw_settings_search_tabs_header %}\\n            <sw-tabs position-identifier=\\\"sw-settings-search-header\\\">\\n                \\n                {% block sw_setting_search_tabs_general %}\\n                <sw-tabs-item\\n                    v-bind=\\\"$props\\\"\\n                    class=\\\"sw-settings-search__general-tab\\\"\\n                    :route=\\\"{ name: 'sw.settings.search.index.general' }\\\"\\n                    @click=\\\"onTabChange\\\"\\n                >\\n                    {{ $tc('sw-settings-search.page.generalTab') }}\\n                </sw-tabs-item>\\n                {% endblock %}\\n\\n                \\n                {% block sw_setting_search_tabs_live_search %}\\n                <sw-tabs-item\\n                    v-bind=\\\"$props\\\"\\n                    class=\\\"sw-settings-search__live-search-tab\\\"\\n                    :route=\\\"{ name: 'sw.settings.search.index.liveSearch' }\\\"\\n                >\\n                    {{ $tc('sw-settings-search.page.liveSearchTab') }}\\n                </sw-tabs-item>\\n                {% endblock %}\\n            </sw-tabs>\\n            {% endblock %}\\n\\n            \\n            {% block sw_settings_search_tabs_content %}\\n            <template v-if=\\\"isLoading\\\">\\n                <sw-skeleton />\\n                <sw-skeleton />\\n            </template>\\n\\n            {# v-show is used here as underlying components influence the loading state and v-if would destroy this behaviour #}\\n            {% if VUE3 %}\\n            <router-view\\n                v-show=\\\"!isLoading\\\"\\n                v-slot=\\\"{ Component }\\\"\\n            >\\n                <component\\n                    :is=\\\"Component\\\"\\n                    :is-loading=\\\"isLoading\\\"\\n                    :product-search-configs=\\\"productSearchConfigs\\\"\\n                    :current-sales-channel-id=\\\"currentSalesChannelId\\\"\\n                    :search-terms=\\\"searchTerms\\\"\\n                    :search-results=\\\"searchResults\\\"\\n                    @edit-change=\\\"onEditChanged\\\"\\n                    @sales-channel-change=\\\"onSalesChannelChanged\\\"\\n                    @live-search-results-change=\\\"onLiveSearchResultsChanged\\\"\\n                    @excluded-search-terms-load=\\\"getProductSearchConfigs\\\"\\n                />\\n            </router-view>\\n            {% else %}\\n            <router-view\\n                v-show=\\\"!isLoading\\\"\\n                :is-loading=\\\"isLoading\\\"\\n                :product-search-configs=\\\"productSearchConfigs\\\"\\n                :current-sales-channel-id=\\\"currentSalesChannelId\\\"\\n                :search-terms=\\\"searchTerms\\\"\\n                :search-results=\\\"searchResults\\\"\\n                @edit-change=\\\"onEditChanged\\\"\\n                @sales-channel-change=\\\"onSalesChannelChanged\\\"\\n                @live-search-results-change=\\\"onLiveSearchResultsChanged\\\"\\n                @excluded-search-terms-load=\\\"getProductSearchConfigs\\\"\\n            />\\n            {% endif %}\\n            {% endblock %}\\n        </sw-card-view>\\n\\n        \\n        {% block sw_settings_search_discard_model %}\\n        <sw-confirm-modal\\n            v-if=\\\"isDisplayingLeavePageWarning\\\"\\n            class=\\\"sw_settings_search_leave_modal\\\"\\n            type=\\\"yesno\\\"\\n            :text=\\\"$tc('sw-settings-search.textLeaveConfirm')\\\"\\n            @confirm=\\\"onConfirmLeave\\\"\\n            @close=\\\"onCloseLeaveModal\\\"\\n            @cancel=\\\"onCancelLeaveModal\\\"\\n        />\\n        {% endblock %}\\n\\n    </template>\\n    {% endblock %}\\n</sw-page>\\n{% endblock %}\\n\";","/**\n * @package buyers-experience\n */\nimport template from './sw-settings-search.html.twig';\n\nconst { Mixin } = Shopware;\nconst { EntityCollection, Criteria } = Shopware.Data;\n\n// eslint-disable-next-line sw-deprecation-rules/private-feature-declarations\nexport default {\n    template,\n\n    inject: [\n        'repositoryFactory',\n        'acl',\n    ],\n\n    mixins: [Mixin.getByName('notification')],\n\n    shortcuts: {\n        'SYSTEMKEY+S': {\n            active() {\n                return this.allowSave;\n            },\n            method: 'onSaveSearchSettings',\n        },\n        ESCAPE: 'onCancel',\n    },\n\n    data: () => {\n        return {\n            productSearchConfigs: {\n                andLogic: true,\n                minSearchLength: 2,\n            },\n            isLoading: false,\n            currentSalesChannelId: null,\n            searchTerms: '',\n            searchResults: null,\n            defaultConfig: null,\n            isSaveSuccessful: false,\n            nextRoute: null,\n            isDisplayingLeavePageWarning: false,\n            leaveConfirmation: false,\n            isEditing: false,\n        };\n    },\n\n    computed: {\n        productSearchRepository() {\n            return this.repositoryFactory.create('product_search_config');\n        },\n\n        productSearchFieldRepository() {\n            return this.repositoryFactory.create('product_search_config_field');\n        },\n\n        productSearchConfigsCriteria() {\n            const criteria = new Criteria(1, 25);\n            criteria.addAssociation('configFields');\n            criteria.addFilter(Criteria.equals('languageId', Shopware.Context.api.languageId));\n            return criteria;\n        },\n\n        productDefaultConfigsCriteria() {\n            const criteria = new Criteria(1, 25);\n            criteria.addAssociation('configFields');\n            criteria.addFilter(Criteria.equals('languageId', Shopware.Context.api.systemLanguageId));\n            return criteria;\n        },\n\n        allowSave() {\n            return this.acl.can('product_search_config.editor') || this.acl.can('product_search_config.creator');\n        },\n\n        tooltipSave() {\n            if (!this.allowSave) {\n                return {\n                    message: this.$tc('sw-privileges.tooltip.warning'),\n                    disabled: this.allowSave,\n                    showOnDisabledElements: true,\n                };\n            }\n\n            const systemKey = this.$device.getSystemKey();\n\n            return {\n                message: `${systemKey} + S`,\n                appearance: 'light',\n            };\n        },\n    },\n\n    created() {\n        this.createdComponent();\n    },\n\n    beforeRouteUpdate(to, from, next) {\n        this.unsavedDataLeaveHandler(to, from, next);\n    },\n\n    beforeRouteLeave(to, from, next) {\n        this.unsavedDataLeaveHandler(to, from, next);\n    },\n\n    methods: {\n        createdComponent() {\n            this.getDefaultSearchConfig();\n            this.getProductSearchConfigs();\n        },\n\n        getProductSearchConfigs() {\n            this.isLoading = true;\n            this.productSearchRepository.search(this.productSearchConfigsCriteria)\n                .then((items) => {\n                    if (!items.total) {\n                        this.onSaveDefaultSearchConfig();\n                    } else {\n                        this.productSearchConfigs = items.first();\n                    }\n                })\n                .catch((err) => {\n                    this.createNotificationError({\n                        message: err.message,\n                    });\n                })\n                .finally(() => {\n                    this.isLoading = false;\n                });\n        },\n\n        getDefaultSearchConfig() {\n            this.productSearchRepository.search(this.productDefaultConfigsCriteria)\n                .then((items) => {\n                    this.defaultConfig = items.first();\n                })\n                .catch((err) => {\n                    this.createNotificationError({\n                        message: err.message,\n                    });\n                });\n        },\n\n        createDefaultSearchConfig() {\n            const defaultConfig = this.productSearchRepository.create();\n            defaultConfig.andLogic = this.defaultConfig.andLogic;\n            defaultConfig.minSearchLength = this.defaultConfig.minSearchLength;\n            defaultConfig.excludedTerms = [];\n            defaultConfig.languageId = Shopware.Context.api.languageId;\n            return defaultConfig;\n        },\n\n        createConfigFields() {\n            if (!this.defaultConfig || !this.defaultConfig.configFields.length) {\n                return null;\n            }\n\n            const configFieldCollection = new EntityCollection(\n                this.productSearchFieldRepository.route,\n                this.productSearchFieldRepository.entityName,\n                Shopware.Context.api,\n            );\n            this.defaultConfig.configFields.forEach(item => {\n                const newConfigField = this.productSearchFieldRepository.create();\n                newConfigField.field = item.field;\n                newConfigField.ranking = item.ranking;\n                newConfigField.searchable = item.searchable;\n                newConfigField.tokenize = item.tokenize;\n                newConfigField.customFieldId = null;\n                newConfigField.searchConfigId = this.productSearchConfigs.id;\n                configFieldCollection.add(newConfigField);\n            });\n            return configFieldCollection;\n        },\n\n        onSaveDefaultSearchConfig() {\n            this.productSearchConfigs = this.createDefaultSearchConfig();\n            this.productSearchConfigs.configFields = this.createConfigFields();\n            this.productSearchRepository.save(this.productSearchConfigs)\n                .then(() => {\n                    this.getProductSearchConfigs();\n                })\n                .catch(() => {\n                    this.createNotificationError({\n                        message: this.$tc('sw-settings-search.notification.saveError'),\n                    });\n                });\n        },\n\n        onChangeLanguage() {\n            this.getDefaultSearchConfig();\n            this.getProductSearchConfigs();\n        },\n\n        onTabChange() {\n            this.getProductSearchConfigs();\n        },\n\n        onSaveSearchSettings() {\n            this.isLoading = true;\n            this.productSearchRepository.save(this.productSearchConfigs)\n                .then(() => {\n                    this.createNotificationSuccess({\n                        message: this.$tc('sw-settings-search.notification.saveSuccess'),\n                    });\n                    this.getProductSearchConfigs();\n                    this.isSaveSuccessful = true;\n                })\n                .catch(() => {\n                    this.createNotificationError({\n                        message: this.$tc('sw-settings-search.notification.saveError'),\n                    });\n                })\n                .finally(() => {\n                    this.isLoading = false;\n                    this.isEditing = false;\n                });\n        },\n\n        saveFinish() {\n            this.isSaveSuccessful = false;\n        },\n\n        fetchSalesChannels() {\n            this.salesChannelRepository.search(new Criteria(1, 25)).then((response) => {\n                this.salesChannels = response;\n            });\n        },\n\n        unsavedDataLeaveHandler(to, from, next) {\n            if (this.leaveConfirmation) {\n                this.leaveConfirmation = false;\n                next();\n\n                return;\n            }\n\n            if (this.isEditing) {\n                this.isDisplayingLeavePageWarning = true;\n                this.nextRoute = to;\n                next(false);\n            } else {\n                next();\n            }\n        },\n\n        onSalesChannelChanged(salesChannelId) {\n            this.currentSalesChannelId = salesChannelId;\n        },\n\n        onLiveSearchResultsChanged({ searchTerms, searchResults }) {\n            this.searchTerms = searchTerms;\n            this.searchResults = searchResults;\n        },\n\n        onEditChanged(isEditing) {\n            this.isEditing = isEditing;\n        },\n\n        onConfirmLeave() {\n            this.leaveConfirmation = true;\n            this.isDisplayingLeavePageWarning = false;\n            this.isEditing = false;\n\n            this.$nextTick(() => {\n                this.$router.push({\n                    name: this.nextRoute.name,\n                    params: this.nextRoute.params,\n                });\n            });\n        },\n\n        onCloseLeaveModal() {\n            this.isDisplayingLeavePageWarning = false;\n        },\n\n        onCancelLeaveModal() {\n            this.isDisplayingLeavePageWarning = false;\n        },\n    },\n};\n"],"sourceRoot":""}