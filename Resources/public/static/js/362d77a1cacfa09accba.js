(window.webpackJsonpAdministration=window.webpackJsonpAdministration||[]).push([[88323],{832436:function(){},888323:function(e,t,i){"use strict";i.r(t),i.d(t,{default:function(){return d}}),i(940627);let{Mixin:n,Context:o}=Shopware;var d={template:'\n{% block sw_media_list_selection_v2 %}\n<div class="sw-media-list-selection-v2">\n\n    \n    {% block sw_media_list_selection_v2_upload %}\n    <sw-upload-listener\n        :upload-tag="uploadId"\n        @media-upload-add="onUploadsAdded"\n        @media-upload-finish="successfulUpload"\n        @media-upload-fail="onUploadFailed"\n    />\n\n    <sw-media-upload-v2\n        :upload-tag="uploadId"\n        variant="regular"\n        :default-folder="defaultFolderName"\n        @media-upload-sidebar-open="onMediaUploadButtonOpenSidebar"\n    />\n    {% endblock %}\n\n    \n    {% block sw_media_list_selection_v2_grid %}\n    <div\n        ref="grid"\n        class="sw-media-list-selection-v2__grid"\n        :style="gridAutoRows"\n    >\n        <sw-loader v-if="entity.isLoading" />\n        {%  block sw_media_list_selection_v2_grid_items %}\n        <sw-media-list-selection-item-v2\n            v-for="(mediaItem, i) in mediaItems"\n            :key="mediaItem?.url"\n            v-draggable="{ dragGroup: \'media-items\', data: mediaItem, onDragEnter: onDeboundDragDrop }"\n            v-droppable="{ dragGroup: \'media-items\', data: mediaItem }"\n            :item="mediaItem"\n            @item-remove="removeItem(mediaItem, i)"\n        />\n        {% endblock %}\n    </div>\n    {% endblock %}\n</div>\n{% endblock %}\n',inject:["repositoryFactory","mediaService"],mixins:[n.getByName("notification")],props:{entity:{type:Object,required:!0},entityMediaItems:{type:Array,required:!0},uploadTag:{type:String,required:!1,default:null},defaultFolderName:{type:String,required:!1,default:null}},data(){return{columnCount:8,columnWidth:"90px"}},computed:{mediaRepository(){return this.repositoryFactory.create("media")},currentCount(){return this.entityMediaItems.length},mediaItems(){let e=2*this.columnCount;if(this.currentCount>=e)return this.entityMediaItems;let t=[...this.entityMediaItems];return t.splice(this.currentCount,0,...this.createPlaceholders(e-this.currentCount)),t.forEach((e,t)=>{e.position=t}),t},gridAutoRows(){return`grid-auto-rows: ${this.columnWidth}`},uploadId(){return this.uploadTag||this.entity.id},defaultFolder(){return this.defaultFolderName||this.entity.getEntityName()}},mounted(){this.mountedComponent()},methods:{mountedComponent(){this.$device.onResize({listener:this.updateColumnCount,component:this}),this.updateColumnCount()},updateColumnCount(){this.$nextTick(()=>{let e=window.getComputedStyle(this.$refs.grid,null).getPropertyValue("grid-template-columns").split(" ");this.columnCount=e.length,this.columnWidth=e[0]})},createPlaceholders(e){return Array(e).fill({isPlaceholder:!0,media:{isPlaceholder:!0,name:""},mediaId:this.currentCount})},async onUploadsAdded({data:e}){0!==e.length&&(this.entity.isLoading=!0,await this.mediaService.runUploads(this.uploadId),this.entity.isLoading=!1)},onMediaUploadButtonOpenSidebar(){this.$emit("open-sidebar")},async successfulUpload({targetId:e}){let t=await this.mediaRepository.get(e,o.api);this.$forceUpdate(),this.$emit("upload-finish",t)},onUploadFailed(e){let t=this.mediaItems.find(t=>t.mediaId===e.targetId);t&&this.removeItem(t),this.entity.isLoading=!1},onMediaItemDragSort(e,t,i){!0!==i||t.position>this.currentCount||e.position>this.currentCount||this.$emit("item-sort",e,t)},onDeboundDragDrop:Shopware.Utils.debounce(function(e,t,i){this.onMediaItemDragSort(e,t,i)},500),removeItem(e,t){this.$emit("item-remove",e,t)}}}},940627:function(e,t,i){var n=i(832436);n.__esModule&&(n=n.default),"string"==typeof n&&(n=[[e.id,n,""]]),n.locals&&(e.exports=n.locals),i(745346).Z("aeee775e",n,!0,{})}}]);