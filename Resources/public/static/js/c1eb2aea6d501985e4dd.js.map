{"version":3,"sources":["webpack:///./src/module/sw-cms/component/sw-cms-mapping-field/index.js","webpack:///./src/module/sw-cms/component/sw-cms-mapping-field/sw-cms-mapping-field.html.twig","webpack:///./src/module/sw-cms/component/sw-cms-mapping-field/sw-cms-mapping-field.scss"],"names":["template","inject","model","prop","event","props","config","type","Object","required","default","source","value","valueTypes","String","Array","entity","label","data","cmsPageState","Shopware","State","get","mappingTypes","allowedMappingTypes","demoValue","computed","isMapped","this","hasPreview","$scopedSlots","preview","watch","deep","handler","updateMappingTypes","updateDemoValue","created","createdComponent","methods","currentMappingTypes","getAllowedMappingTypes","split","currentMappingEntity","onMappingRemove","getDemoValue","onMappingSelect","property","_this","types","keys","forEach","includes","concat","_toConsumableArray","sort","mappingPath","cmsService","getPropertyByMappingPath","currentDemoEntity","content","__esModule","module","i","locals","exports","add"],"mappings":"iKAOe,WACXA,SCRW,swHDUXC,OAAQ,CAAC,cAETC,MAAO,CACHC,KAAM,SACNC,MAAO,iBAGXC,MAAO,CACHC,OAAQ,CACJC,KAAMC,OACNC,UAAU,EACVC,QAAO,WACH,MAAO,CACHC,OAAQ,SACRC,MAAO,QAKnBC,WAAY,CACRN,KAAM,CAACO,OAAQC,OACfN,UAAU,EACVC,QAAS,UAGbM,OAAQ,CACJT,KAAMO,OACNL,UAAU,EACVC,QAAS,MAGbO,MAAO,CACHV,KAAMO,OACNL,UAAU,EACVC,QAAS,KAIjBQ,KAAI,WACA,MAAO,CACHC,aAAcC,SAASC,MAAMC,IAAI,gBACjCC,aAAc,GACdC,oBAAqB,GACrBC,UAAW,OAInBC,SAAU,CACNC,SAAQ,WACJ,MAA8B,WAAvBC,KAAKtB,OAAOK,QAGvBkB,WAAU,WACN,YAA4C,IAA9BD,KAAKE,aAAaC,UAIxCC,MAAO,CACHb,aAAc,CACVc,MAAM,EACNC,QAAO,WACHN,KAAKO,qBACLP,KAAKQ,qBAKjBC,QAAO,WACHT,KAAKU,oBAGTC,QAAS,CACLD,iBAAgB,WACZV,KAAKO,qBACLP,KAAKQ,mBAGTD,mBAAkB,YACdP,KAAKL,aAAeK,KAAKT,aAAaqB,oBACtCZ,KAAKa,yBAEsB,WAAvBb,KAAKtB,OAAOK,UACQiB,KAAKtB,OAAOM,MAAM8B,MAAM,KAE5B,KAAOd,KAAKT,aAAawB,sBACrCf,KAAKgB,oBAKjBR,gBAAe,WACgB,WAAvBR,KAAKtB,OAAOK,SACZiB,KAAKH,UAAYG,KAAKiB,aAAajB,KAAKtB,OAAOM,SAIvDkC,gBAAe,SAACC,GACZnB,KAAKtB,OAAOK,OAAS,SACrBiB,KAAKtB,OAAOM,MAAQmC,EACpBnB,KAAKH,UAAYG,KAAKiB,aAAaE,IAGvCH,gBAAe,WACXhB,KAAKtB,OAAOK,OAAS,SACrBiB,KAAKtB,OAAOM,MAAQgB,KAAKtB,OAAOC,OAASQ,MAAQ,GAAK,KACtDa,KAAKH,UAAY,MAGrBgB,uBAAsB,WAAI,IAADO,EAAA,KACjBC,EAAQ,GAEY,WAApBrB,KAAKf,WACe,OAAhBe,KAAKZ,QACLY,KAAKL,aAAaP,QAClBY,KAAKL,aAAaP,OAAOY,KAAKZ,UAC9BiC,EAAQrB,KAAKL,aAAaP,OAAOY,KAAKZ,SAG1CR,OAAO0C,KAAKtB,KAAKL,cAAc4B,SAAQ,SAAC5C,IAChCA,IAASyC,EAAKnC,YAAcmC,EAAKnC,WAAWuC,SAAS7C,MACrD0C,EAAK,GAAAI,OAAAC,IAAOL,GAAKK,IAAKN,EAAKzB,aAAahB,MAClCgD,UAKlB3B,KAAKJ,oBAAsByB,GAG/BJ,aAAY,SAACW,GACT,OAAO5B,KAAK6B,WAAWC,yBACnB9B,KAAKT,aAAawC,kBAClBH,O,qBE3IhB,IAAII,EAAU,EAAQ,QACnBA,EAAQC,aAAYD,EAAUA,EAAQlD,SACnB,iBAAZkD,IAAsBA,EAAU,CAAC,CAACE,EAAOC,EAAIH,EAAS,MAC7DA,EAAQI,SAAQF,EAAOG,QAAUL,EAAQI,SAG/BE,EADH,EAAQ,QAAwExD,SACzE,WAAYkD,GAAS,EAAM,K","file":"static/js/c1eb2aea6d501985e4dd.js","sourcesContent":["import template from './sw-cms-mapping-field.html.twig';\nimport './sw-cms-mapping-field.scss';\n\n/**\n * @private\n * @package buyers-experience\n */\nexport default {\n    template,\n\n    inject: ['cmsService'],\n\n    model: {\n        prop: 'config',\n        event: 'config-update',\n    },\n\n    props: {\n        config: {\n            type: Object,\n            required: true,\n            default() {\n                return {\n                    source: 'static',\n                    value: null,\n                };\n            },\n        },\n\n        valueTypes: {\n            type: [String, Array],\n            required: false,\n            default: 'string',\n        },\n\n        entity: {\n            type: String,\n            required: false,\n            default: null,\n        },\n\n        label: {\n            type: String,\n            required: false,\n            default: '',\n        },\n    },\n\n    data() {\n        return {\n            cmsPageState: Shopware.State.get('cmsPageState'),\n            mappingTypes: {},\n            allowedMappingTypes: [],\n            demoValue: null,\n        };\n    },\n\n    computed: {\n        isMapped() {\n            return this.config.source === 'mapped';\n        },\n\n        hasPreview() {\n            return typeof this.$scopedSlots.preview !== 'undefined';\n        },\n    },\n\n    watch: {\n        cmsPageState: {\n            deep: true,\n            handler() {\n                this.updateMappingTypes();\n                this.updateDemoValue();\n            },\n        },\n    },\n\n    created() {\n        this.createdComponent();\n    },\n\n    methods: {\n        createdComponent() {\n            this.updateMappingTypes();\n            this.updateDemoValue();\n        },\n\n        updateMappingTypes() {\n            this.mappingTypes = this.cmsPageState.currentMappingTypes;\n            this.getAllowedMappingTypes();\n\n            if (this.config.source === 'mapped') {\n                const mappingPath = this.config.value.split('.');\n\n                if (mappingPath[0] !== this.cmsPageState.currentMappingEntity) {\n                    this.onMappingRemove();\n                }\n            }\n        },\n\n        updateDemoValue() {\n            if (this.config.source === 'mapped') {\n                this.demoValue = this.getDemoValue(this.config.value);\n            }\n        },\n\n        onMappingSelect(property) {\n            this.config.source = 'mapped';\n            this.config.value = property;\n            this.demoValue = this.getDemoValue(property);\n        },\n\n        onMappingRemove() {\n            this.config.source = 'static';\n            this.config.value = this.config.type === Array ? [] : null;\n            this.demoValue = null;\n        },\n\n        getAllowedMappingTypes() {\n            let types = [];\n\n            if (this.valueTypes === 'entity') {\n                if (this.entity !== null &&\n                    this.mappingTypes.entity &&\n                    this.mappingTypes.entity[this.entity]) {\n                    types = this.mappingTypes.entity[this.entity];\n                }\n            } else {\n                Object.keys(this.mappingTypes).forEach((type) => {\n                    if (type === this.valueTypes || this.valueTypes.includes(type)) {\n                        types = [...types, ...this.mappingTypes[type]];\n                        types.sort();\n                    }\n                });\n            }\n\n            this.allowedMappingTypes = types;\n        },\n\n        getDemoValue(mappingPath) {\n            return this.cmsService.getPropertyByMappingPath(\n                this.cmsPageState.currentDemoEntity,\n                mappingPath,\n            );\n        },\n    },\n};\n","export default \"\\n{% block sw_cms_mapping_field %}\\n<div class=\\\"sw-cms-mapping-field\\\">\\n\\n    \\n    {% block sw_cms_mapping_field_info %}\\n    <div class=\\\"sw-cms-mapping-field__info\\\">\\n\\n        \\n        {% block sw_cms_mapping_field_label %}\\n        <div class=\\\"sw-cms-mapping-field__label\\\">\\n            {{ label }}\\n        </div>\\n        {% endblock %}\\n\\n        \\n        {% block sw_cms_mapping_field_mapping %}\\n        <template v-if=\\\"allowedMappingTypes.length\\\">\\n            \\n            {% block sw_cms_mapping_field_mapping_selection %}\\n            <sw-context-button\\n                v-if=\\\"!isMapped\\\"\\n                class=\\\"sw-cms-mapping-field__selection\\\"\\n                :menu-width=\\\"340\\\"\\n            >\\n                \\n                {% block sw_cms_mapping_field_mapping_selection_action %}\\n                <template #button>\\n                    <div class=\\\"sw-cms-mapping-field__action\\\">\\n                        <sw-icon\\n                            name=\\\"regular-external-link\\\"\\n                            size=\\\"16\\\"\\n                        />\\n                        <span class=\\\"sw-cms-mapping-field__action-label\\\">\\n                            {{ $tc('sw-cms.detail.label.buttonMappingAction') }}\\n                        </span>\\n                    </div>\\n                </template>\\n                {% endblock %}\\n\\n                \\n                {% block sw_cms_mapping_field_mapping_selection_options %}\\n                <div class=\\\"sw-cms-mapping-field__options\\\">\\n                    <sw-context-menu-item\\n                        v-for=\\\"(prop, index) in allowedMappingTypes\\\"\\n                        :key=\\\"index\\\"\\n                        @click=\\\"onMappingSelect(prop)\\\"\\n                    >\\n                        {{ prop }}\\n                    </sw-context-menu-item>\\n                </div>\\n                {% endblock %}\\n            </sw-context-button>\\n            {% endblock %}\\n\\n            \\n            {% block sw_cms_mapping_field_mapping_remove_action %}\\n            <div\\n                v-else\\n                class=\\\"sw-cms-mapping-field__action-remove\\\"\\n                role=\\\"button\\\"\\n                tabindex=\\\"0\\\"\\n                @click=\\\"onMappingRemove\\\"\\n                @keydown.enter=\\\"onMappingRemove\\\"\\n            >\\n                <sw-icon name=\\\"regular-times\\\" />\\n                <span class=\\\"sw-cms-mapping-field__action-label\\\">\\n                    {{ $tc('sw-cms.detail.label.buttonMappingRemoveAction') }}\\n                </span>\\n            </div>\\n            {% endblock %}\\n        </template>\\n        {% endblock %}\\n    </div>\\n    {% endblock %}\\n\\n    \\n    {% block sw_cms_mapping_field_content %}\\n    <div\\n        v-if=\\\"!isMapped\\\"\\n        class=\\\"sw-cms-mapping-field__form-field\\\"\\n    >\\n        <slot>\\n        {% block sw_cms_mapping_field_slot_default %}{% endblock %}</slot>\\n    </div>\\n    {% endblock %}\\n\\n    <template v-else>\\n        \\n        {% block sw_cms_mapping_field_mapping_value %}\\n        <div class=\\\"sw-cms-mapping-field__mapping-value\\\">\\n            {{ $tc('sw-cms.detail.label.mappingPreview') }} <b>{{ config.value }}</b>\\n        </div>\\n        {% endblock %}\\n\\n        \\n        {% block sw_cms_mapping_field_preview %}\\n        <div\\n            v-if=\\\"hasPreview\\\"\\n            class=\\\"sw-cms-mapping-field__preview\\\"\\n        >\\n            <slot\\n                v-if=\\\"demoValue !== null\\\"\\n                name=\\\"preview\\\"\\n                :demo-value=\\\"demoValue\\\"\\n            ></slot>\\n\\n            <sw-alert\\n                v-else\\n                variant=\\\"info\\\"\\n                class=\\\"sw-cms-mapping-field__empty-demo\\\"\\n            >\\n                {{ $tc('sw-cms.detail.label.mappingEmptyPreview') }}\\n            </sw-alert>\\n        </div>\\n        {% endblock %}\\n    </template>\\n</div>\\n{% endblock %}\\n\";","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../../../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--15-1!../../../../../node_modules/css-loader/dist/cjs.js??ref--15-2!../../../../../node_modules/sass-loader/dist/cjs.js??ref--15-3!./sw-cms-mapping-field.scss\");\nif(content.__esModule) content = content.default;\nif(typeof content === 'string') content = [[module.id, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar add = require(\"!../../../../../node_modules/vue-style-loader/lib/addStylesClient.js\").default\nvar update = add(\"4504e880\", content, true, {});"],"sourceRoot":""}