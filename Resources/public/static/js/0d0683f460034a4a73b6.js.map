{"version":3,"sources":["webpack:///./src/module/sw-settings-custom-field/component/sw-custom-field-list/index.js","webpack:///./src/module/sw-settings-custom-field/component/sw-custom-field-list/sw-custom-field-list.html.twig","webpack:///./src/module/sw-settings-custom-field/component/sw-custom-field-list/sw-custom-field-list.scss"],"names":["Criteria","Shopware","Data","Mixin","types","Utils","template","inject","provide","SwCustomFieldListIsCustomFieldNameUnique","this","isCustomFieldNameUnique","mixins","getByName","props","set","type","Object","required","data","term","isLoading","currentCustomField","deleteButtonDisabled","disableRouteParams","deleteCustomField","customFields","page","total","limit","computed","customFieldRepository","repositoryFactory","create","entity","source","globalCustomFieldRepository","watch","value","$emit","created","createdComponent","methods","onSearchTermChange","loadCustomFields","_this","criteria","addFilter","equals","id","addSorting","sort","setTerm","search","then","response","finally","selectionChanged","selection","keys","length","onCustomFieldDelete","customField","onDeleteCustomFields","Array","from","values","$refs","grid","getSelection","onAddCustomField","onCustomFieldEdit","onCancelCustomField","discard","onInlineEditFinish","item","onSaveCustomField","_this2","field","arguments","undefined","removeEmptyProperties","config","save","$nextTick","onInlineEditCancel","_this3","forEach","property","includes","_typeof","isObject","isArray","isEmpty","$delete","name","res","onPageChange","event","onCancelDeleteCustomField","onDeleteCustomField","_this4","toBeDeletedCustomFields","push","syncDeleted","Context","api","content","__esModule","default","module","i","locals","exports","add"],"mappings":"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","file":"static/js/0d0683f460034a4a73b6.js","sourcesContent":["/**\n * @package services-settings\n */\nimport template from './sw-custom-field-list.html.twig';\nimport './sw-custom-field-list.scss';\n\nconst { Criteria } = Shopware.Data;\nconst { Mixin } = Shopware;\nconst types = Shopware.Utils.types;\n\n// eslint-disable-next-line sw-deprecation-rules/private-feature-declarations\nexport default {\n    template,\n\n    inject: [\n        'repositoryFactory',\n        'acl',\n    ],\n\n    provide() {\n        return {\n            SwCustomFieldListIsCustomFieldNameUnique: this.isCustomFieldNameUnique,\n        };\n    },\n\n    mixins: [\n        Mixin.getByName('sw-inline-snippet'),\n        Mixin.getByName('notification'),\n    ],\n\n    props: {\n        set: {\n            type: Object,\n            required: true,\n        },\n    },\n\n    data() {\n        return {\n            term: '',\n            isLoading: false,\n            currentCustomField: null,\n            deleteButtonDisabled: true,\n            disableRouteParams: true,\n            deleteCustomField: null,\n            customFields: null,\n            page: 1,\n            total: 0,\n            limit: 10,\n        };\n    },\n\n    computed: {\n        customFieldRepository() {\n            return this.repositoryFactory.create(\n                this.set.customFields.entity,\n                this.set.customFields.source,\n            );\n        },\n\n        globalCustomFieldRepository() {\n            return this.repositoryFactory.create('custom_field');\n        },\n    },\n\n    watch: {\n        isLoading(value) {\n            this.$emit('loading-changed', value);\n        },\n    },\n\n    created() {\n        this.createdComponent();\n    },\n\n    methods: {\n        onSearchTermChange() {\n            this.loadCustomFields();\n        },\n\n        createdComponent() {\n            this.loadCustomFields();\n        },\n\n        loadCustomFields() {\n            this.isLoading = true;\n\n            const criteria = new Criteria(this.page, this.limit);\n\n            criteria.addFilter(Criteria.equals('customFieldSetId', this.set.id));\n            criteria.addSorting(Criteria.sort('config.customFieldPosition', 'ASC', true));\n\n            if (this.term) {\n                criteria.setTerm(this.term);\n            }\n\n            return this.customFieldRepository.search(criteria).then((response) => {\n                this.customFields = response;\n                this.total = response.total;\n\n                return response;\n            }).finally(() => {\n                this.isLoading = false;\n            });\n        },\n\n        selectionChanged(selection) {\n            this.deleteButtonDisabled = Object.keys(selection).length <= 0;\n        },\n\n        onCustomFieldDelete(customField) {\n            this.deleteCustomField = customField;\n        },\n\n        onDeleteCustomFields() {\n            this.deleteCustomField = Array.from(Object.values(this.$refs.grid.getSelection()));\n        },\n\n        onAddCustomField() {\n            const customField = this.customFieldRepository.create();\n            this.onCustomFieldEdit(customField);\n        },\n\n        onCancelCustomField() {\n            this.customFieldRepository.discard(this.currentCustomField);\n            this.currentCustomField = null;\n        },\n\n        onInlineEditFinish(item) {\n            this.onSaveCustomField(item);\n        },\n\n        onSaveCustomField(field = this.currentCustomField) {\n            this.removeEmptyProperties(field.config);\n\n            return this.customFieldRepository.save(field).finally(() => {\n                this.currentCustomField = null;\n\n                // Wait for modal to be closed\n                this.$nextTick(() => {\n                    this.loadCustomFields();\n                });\n            });\n        },\n\n        onInlineEditCancel(customField) {\n            this.customFieldRepository.discard(customField);\n        },\n\n        onCustomFieldEdit(customField) {\n            this.currentCustomField = customField;\n        },\n\n        removeEmptyProperties(config) {\n            Object.keys(config).forEach((property) => {\n                if (['number', 'boolean'].includes(typeof config[property])) {\n                    return;\n                }\n\n                if (types.isObject(config[property]) || types.isArray(config[property])) {\n                    this.removeEmptyProperties(config[property]);\n                }\n\n                if ((types.isEmpty(config[property]) || config[property] === undefined) && config[property !== null]) {\n                    this.$delete(config, property);\n                }\n            });\n        },\n\n        isCustomFieldNameUnique(customField) {\n            // Search the server for the customField name\n            const criteria = new Criteria(1, 25);\n            criteria.addFilter(Criteria.equals('name', customField.name));\n            return this.globalCustomFieldRepository.search(criteria).then((res) => {\n                return res.length === 0;\n            });\n        },\n\n        onPageChange(event) {\n            this.page = event.page;\n\n            this.loadCustomFields();\n        },\n\n        onCancelDeleteCustomField() {\n            this.deleteCustomField = null;\n        },\n\n        onDeleteCustomField() {\n            // contains an array with custom field id's\n            const toBeDeletedCustomFields = [];\n            const isArray = Array.isArray(this.deleteCustomField);\n\n            if (isArray) {\n                this.deleteCustomField.forEach(customField => toBeDeletedCustomFields.push(customField.id));\n            } else {\n                toBeDeletedCustomFields.push(this.deleteCustomField.id);\n            }\n\n            return this.globalCustomFieldRepository.syncDeleted(toBeDeletedCustomFields, Shopware.Context.api).then(() => {\n                this.deleteButtonDisabled = true;\n                this.deleteCustomField = null;\n\n                // Wait for modal to be closed\n                this.$nextTick(() => {\n                    this.loadCustomFields();\n                });\n            });\n        },\n    },\n};\n","export default \"\\n{% block sw_custom_field_list %}\\n<sw-card\\n    class=\\\"sw-custom-field-list\\\"\\n    position-identifier=\\\"sw-custom-field-list\\\"\\n>\\n    \\n    {% block sw_custom_field_list_toolbar %}\\n    <div class=\\\"sw-custom-field-list__toolbar\\\">\\n        <sw-container\\n            columns=\\\"1fr 32px minmax(100px, 200px)\\\"\\n            gap=\\\"0 10px\\\"\\n        >\\n            \\n            {% block sw_custom_field_list_toolbar_searchfield %}\\n            <sw-simple-search-field\\n                v-model=\\\"term\\\"\\n                size=\\\"small\\\"\\n                variant=\\\"form\\\"\\n                :delay=\\\"500\\\"\\n                @search-term-change=\\\"onSearchTermChange\\\"\\n            />\\n            {% endblock %}\\n\\n            \\n            {% block sw_custom_field_list_toolbar_delete %}\\n            <sw-button\\n                v-tooltip.bottom=\\\"{\\n                    message: $tc('sw-privileges.tooltip.warning'),\\n                    disabled: acl.can('custom_field.editor'),\\n                    showOnDisabledElements: true\\n                }\\\"\\n                :disabled=\\\"deleteButtonDisabled || !acl.can('custom_field.editor')\\\"\\n                square\\n                size=\\\"small\\\"\\n                class=\\\"sw-custom-field-list__delete-button\\\"\\n                @click=\\\"onDeleteCustomFields\\\"\\n            >\\n                <sw-icon\\n                    name=\\\"regular-trash\\\"\\n                    small\\n                />\\n            </sw-button>\\n            {% endblock %}\\n\\n            \\n            {% block sw_custom_field_list_toolbar_add %}\\n            <sw-button\\n                v-tooltip.bottom=\\\"{\\n                    message: $tc('sw-privileges.tooltip.warning'),\\n                    disabled: acl.can('custom_field.editor'),\\n                    showOnDisabledElements: true\\n                }\\\"\\n                :disabled=\\\"set.isLoading || !acl.can('custom_field.editor')\\\"\\n                size=\\\"small\\\"\\n                class=\\\"sw-custom-field-list__add-button\\\"\\n                @click=\\\"onAddCustomField(set)\\\"\\n            >\\n                {{ $tc('sw-settings-custom-field.set.detail.addCustomField') }}\\n            </sw-button>\\n            {% endblock %}\\n        </sw-container>\\n    </div>\\n    {% endblock %}\\n\\n    \\n    {% block sw_custom_field_list_grid %}\\n    <sw-grid\\n        v-if=\\\"(customFields && customFields.length > 0) || term\\\"\\n        ref=\\\"grid\\\"\\n        class=\\\"sw-custom-field-list__grid\\\"\\n        :items=\\\"customFields\\\"\\n        :is-fullpage=\\\"false\\\"\\n        table\\n        :selectable=\\\"acl.can('custom_field.editor')\\\"\\n        @inline-edit-finish=\\\"onInlineEditFinish\\\"\\n        @inline-edit-cancel=\\\"onInlineEditCancel\\\"\\n        @sw-grid-select-item=\\\"selectionChanged\\\"\\n        @sw-grid-select-all=\\\"selectionChanged\\\"\\n    >\\n        <template\\n            #columns=\\\"{ item }\\\"\\n        >\\n\\n            \\n            {% block sw_custom_field_list_grid_column_label %}\\n            <sw-grid-column\\n                data-index=\\\"label\\\"\\n                truncate\\n                flex=\\\"minmax(150px, 1fr)\\\"\\n                :label=\\\"$tc('sw-settings-custom-field.customField.list.labelCustomFieldLabel')\\\"\\n            >\\n                <span\\n                    class=\\\"sw-custom-field-list__custom-field-label\\\"\\n                    role=\\\"textbox\\\"\\n                    tabindex=\\\"0\\\"\\n                    @click=\\\"onCustomFieldEdit(item)\\\"\\n                    @keydown.enter=\\\"onCustomFieldEdit(item)\\\"\\n                >\\n                    {{ getInlineSnippet(item.config.label) || item.name }}\\n                </span>\\n\\n                <template #inline-edit>\\n                    <sw-text-field\\n                        :value=\\\"getInlineSnippet(item.config.label) || item.name\\\"\\n                        disabled\\n                    />\\n                </template>\\n            </sw-grid-column>\\n            {% endblock %}\\n\\n            \\n            {% block sw_custom_field_list_grid_column_type %}\\n            <sw-grid-column\\n                data-index=\\\"type\\\"\\n                truncate\\n                flex=\\\"minmax(150px, 200px)\\\"\\n                :label=\\\"$tc('sw-settings-custom-field.customField.list.labelCustomFieldType')\\\"\\n            >\\n                {{ $tc(`sw-settings-custom-field.types.${item.config.customFieldType || item.type}`) }}\\n\\n                <template #inline-edit>\\n                    <sw-text-field\\n                        :value=\\\"$tc(`sw-settings-custom-field.types.${item.config.customFieldType || item.type}`)\\\"\\n                        disabled\\n                    />\\n                </template>\\n            </sw-grid-column>\\n            {% endblock %}\\n\\n            \\n            {% block sw_custom_field_list_grid_column_custom_field_position %}\\n            <sw-grid-column\\n                data-index=\\\"position\\\"\\n                flex=\\\"minmax(50px, 100px)\\\"\\n                :editable=\\\"acl.can('custom_field.editor')\\\"\\n                :label=\\\"$tc('sw-settings-custom-field.customField.list.labelCustomFieldPosition')\\\"\\n            >\\n                {{ item.config.customFieldPosition }}\\n\\n                \\n                {% block sw_custom_field_list_grid_column_custom_field_position_edit %}\\n                <template #inline-edit>\\n                    <sw-number-field\\n                        {% if VUE3 %}\\n                        v-model:value=\\\"item.config.customFieldPosition\\\"\\n                        {% else %}\\n                        v-model=\\\"item.config.customFieldPosition\\\"\\n                        {% endif %}\\n                        number-type=\\\"int\\\"\\n                    />\\n                </template>\\n                {% endblock %}\\n            </sw-grid-column>\\n            {% endblock %}\\n\\n            \\n            {% block sw_custom_field_list_grid_column_actions %}\\n            <sw-grid-column\\n                flex=\\\"minmax(100px, 100px)\\\"\\n                align=\\\"center\\\"\\n            >\\n                <sw-context-button>\\n                    \\n                    {% block sw_custom_field_list_grid_column_actions_edit %}\\n                    <sw-context-menu-item\\n                        class=\\\"sw-custom-field-list__edit-action\\\"\\n                        :disabled=\\\"item.isDeleted || !acl.can('custom_field.editor')\\\"\\n                        @click=\\\"onCustomFieldEdit(item)\\\"\\n                    >\\n                        {{ $tc('sw-settings-custom-field.customField.list.contextMenuCustomFieldView') }}\\n                    </sw-context-menu-item>\\n                    {% endblock %}\\n\\n                    \\n                    {% block sw_custom_field_list_grid_column_actions_reset_delete %}\\n                    <sw-context-menu-item\\n                        v-if=\\\"item.isDeleted\\\"\\n                        variant=\\\"success\\\"\\n                        :disabled=\\\"!acl.can('custom_field.editor')\\\"\\n                    >\\n                        {{ $tc('sw-settings-custom-field.customField.list.contextMenuCustomFieldResetDelete') }}\\n                    </sw-context-menu-item>\\n                    {% endblock %}\\n\\n                    \\n                    {% block sw_custom_field_list_grid_column_actions_delete %}\\n                    <sw-context-menu-item\\n                        v-else\\n                        variant=\\\"danger\\\"\\n                        class=\\\"sw-custom-field-list__delete-action\\\"\\n                        :disabled=\\\"!acl.can('custom_field.editor')\\\"\\n                        @click=\\\"onCustomFieldDelete(item)\\\"\\n                    >\\n                        {{ $tc('sw-settings-custom-field.customField.list.contextMenuCustomFieldDelete') }}\\n                    </sw-context-menu-item>\\n                    {% endblock %}\\n                </sw-context-button>\\n            </sw-grid-column>\\n            {% endblock %}\\n        </template>\\n\\n        \\n        {% block sw_custom_field_list_grid_pagination %}\\n        <template #pagination>\\n            <sw-pagination\\n                :limit=\\\"limit\\\"\\n                :page=\\\"page\\\"\\n                :auto-hide=\\\"false\\\"\\n                :total=\\\"customFields.total\\\"\\n                :steps=\\\"[limit]\\\"\\n                @page-change=\\\"onPageChange\\\"\\n            />\\n        </template>\\n        {% endblock %}\\n    </sw-grid>\\n    {% endblock %}\\n\\n    \\n    {% block sw_custom_field_list_empty_state %}\\n    <sw-empty-state\\n        v-else-if=\\\"!set.isLoading\\\"\\n        :absolute=\\\"false\\\"\\n        :title=\\\"$tc('sw-settings-custom-field.set.detail.messageCustomFieldsEmpty')\\\"\\n    />\\n    {% endblock %}\\n\\n    \\n    {% block sw_custom_field_list_custom_field_detail %}\\n    <sw-custom-field-detail\\n        v-if=\\\"currentCustomField\\\"\\n        :set=\\\"set\\\"\\n        :current-custom-field=\\\"currentCustomField\\\"\\n        @custom-field-edit-save=\\\"onSaveCustomField\\\"\\n        @custom-field-edit-cancel=\\\"onCancelCustomField\\\"\\n    />\\n    {% endblock %}\\n\\n    \\n    {% block sw_custom_field_list_custom_field_delete %}\\n    <sw-modal\\n        v-if=\\\"deleteCustomField\\\"\\n        :title=\\\"$tc('sw-settings-custom-field.customField.list.titleDeleteAction', deleteCustomField.length)\\\"\\n        variant=\\\"small\\\"\\n        @modal-close=\\\"onCancelDeleteCustomField\\\"\\n    >\\n\\n        \\n        {% block sw_custom_field_list_custom_field_delete_text %}\\n        <p class=\\\"sw-custom-field-delete__description\\\">\\n            {{ $tc('sw-settings-custom-field.customField.list.textDeleteActionConfirmation', deleteCustomField.length, { count: deleteCustomField.length }) }}\\n        </p>\\n        {% endblock %}\\n\\n        \\n        {% block sw_custom_field_list_custom_field_delete_actions %}\\n        <template #modal-footer>\\n            \\n            {% block sw_custom_field_list_custom_field_delete_action_cancel %}\\n            <sw-button\\n                size=\\\"small\\\"\\n                @click=\\\"onCancelDeleteCustomField\\\"\\n            >\\n                {{ $tc('global.default.cancel') }}\\n            </sw-button>\\n            {% endblock %}\\n\\n            \\n            {% block sw_custom_field_list_custom_field_delete_action_confirm %}\\n            <sw-button\\n                variant=\\\"danger\\\"\\n                size=\\\"small\\\"\\n                @click=\\\"onDeleteCustomField\\\"\\n            >\\n                {{ $tc('global.default.delete') }}\\n            </sw-button>\\n            {% endblock %}\\n        </template>\\n        {% endblock %}\\n    </sw-modal>\\n    {% endblock %}\\n\\n    \\n    {% block sw_custom_field_list_loader %}\\n    <sw-loader v-if=\\\"isLoading\\\" />\\n    {% endblock %}\\n</sw-card>\\n{% endblock %}\\n\";","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../../../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--15-1!../../../../../node_modules/css-loader/dist/cjs.js??ref--15-2!../../../../../node_modules/sass-loader/dist/cjs.js??ref--15-3!./sw-custom-field-list.scss\");\nif(content.__esModule) content = content.default;\nif(typeof content === 'string') content = [[module.id, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar add = require(\"!../../../../../node_modules/vue-style-loader/lib/addStylesClient.js\").default\nvar update = add(\"613e2897\", content, true, {});"],"sourceRoot":""}