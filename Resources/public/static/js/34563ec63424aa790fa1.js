(window.webpackJsonpAdministration=window.webpackJsonpAdministration||[]).push([[73001],{11376:function(){},73001:function(e,n,t){"use strict";t.r(n),t.d(n,{default:function(){return o}});var a=t(43255);t(47360);let{Mixin:i}=Shopware,{object:s,string:{kebabCase:l}}=Shopware.Utils,{mapSystemConfigErrors:r}=Shopware.Component.getComponentHelper();var o={template:'\n{% block sw_system_config %}\n<div class="sw-system-config">\n    <div\n        v-if="salesChannelSwitchable && config.length > 1"\n        class="sw-system-config__global-sales-channel-switch"\n    >\n        <sw-sales-channel-switch\n            :label="$tc(\'sw-settings.system-config.labelSalesChannelSelect\')"\n            @change-sales-channel-id="onSalesChannelChanged"\n        />\n    </div>\n    \n    {% block sw_system_config_content_card %}\n    <sw-card\n        v-for="card, index in config"\n        :key="index"\n        position-identifier="sw-system-config-content"\n        :class="`sw-system-config__card--${index}`"\n        :is-loading="isLoading"\n        :title="getInlineSnippet(card.title)"\n        :ai-badge="card.aiBadge"\n    >\n        <slot\n            name="beforeElements"\n            v-bind="{ card, config: actualConfigData[currentSalesChannelId] }"\n        ></slot>\n        <template\n            v-if="salesChannelSwitchable && config.length === 1"\n            #toolbar\n        >\n            <sw-sales-channel-switch\n                :label="$tc(\'sw-settings.system-config.labelSalesChannelSelect\')"\n                @change-sales-channel-id="onSalesChannelChanged"\n            />\n        </template>\n        <template v-if="hasCssFields">\n            \n            {% block sw_system_config_content_compile_notice %}\n            <sw-alert variant="warning">\n                {{ $tc(\'sw-settings.system-config.compileNotice\') }}\n            </sw-alert>\n\n            {% endblock %}\n        </template>\n        <template v-if="!isLoading">\n            <template v-for="element in card.elements">\n                <slot\n                    name="card-element"\n                    v-bind="{ element: getElementBind(element), config: actualConfigData[currentSalesChannelId], card }"\n                >\n                    \n                    {% block sw_system_config_content_card_field %}\n                    <sw-inherit-wrapper\n                        v-model:value="actualConfigData[currentSalesChannelId][element.name]"\n                        v-bind="getInheritWrapperBind(element)"\n                        :has-parent="isNotDefaultSalesChannel"\n                        :inherited-value="getInheritedValue(element)"\n                        :class="\'sw-system-config--field-\' + kebabCase(getElementBind(element).name)"\n                    >\n                        <template #content="props">\n                            <sw-form-field-renderer\n                                v-bind="getElementBind(element, props)"\n                                :key="props.isInheritField + props.isInherited"\n                                :disabled="props.isInherited"\n                                :value="props.currentValue"\n                                :error="getFieldError(element.name)"\n                                @update:value="props.updateCurrentValue"\n                            />\n                        </template>\n                    </sw-inherit-wrapper>\n                    {% endblock %}\n                </slot>\n            </template>\n            <slot name="card-element-last"></slot>\n        </template>\n        <slot\n            name="afterElements"\n            v-bind="{ card, config: actualConfigData[currentSalesChannelId], index, isNotDefaultSalesChannel, inheritance: actualConfigData.null }"\n        >\n        </slot>\n    </sw-card>\n    {% endblock %}\n</div>\n{% endblock %}\n',inject:["systemConfigApiService"],mixins:[i.getByName("notification"),i.getByName("sw-inline-snippet")],props:{domain:{required:!0,type:String},salesChannelId:{required:!1,type:String,default:null},salesChannelSwitchable:{type:Boolean,required:!1,default:!1},inherit:{type:Boolean,required:!1,default:!0}},data(){return{currentSalesChannelId:this.salesChannelId,isLoading:!1,config:{},actualConfigData:{},salesChannelModel:null,hasCssFields:!1}},computed:{isNotDefaultSalesChannel(){return null!==this.currentSalesChannelId},typesWithMapInheritanceSupport(){return["text","textarea","url","password","int","float","bool","checkbox","colorpicker"]}},watch:{actualConfigData:{handler(){this.emitConfig()},deep:!0},isLoading(e){this.$emit("loading-changed",e)}},created(){this.createdComponent()},methods:{getFieldError(e){return r(a.Z.ENTITY_NAME,this.salesChannelId,e)},async createdComponent(){this.isLoading=!0;try{await this.readConfig(),await this.readAll()}catch(e){e?.response?.data?.errors&&this.createErrorNotification(e.response.data.errors)}finally{this.isLoading=!1}},async readConfig(){this.config=await this.systemConfigApiService.getConfig(this.domain),this.config.every(e=>e?.elements.every(e=>!e?.config?.css||(this.hasCssFields=!0,!1)))},readAll(){return(this.isLoading=!0,this.actualConfigData.hasOwnProperty(this.currentSalesChannelId))?(this.isLoading=!1,Promise.resolve()):this.loadCurrentSalesChannelConfig()},async loadCurrentSalesChannelConfig(){this.isLoading=!0;try{let e=await this.systemConfigApiService.getValues(this.domain,this.currentSalesChannelId);this.$set(this.actualConfigData,this.currentSalesChannelId,e)}finally{this.isLoading=!1}},saveAll(){return this.isLoading=!0,this.systemConfigApiService.batchSave(this.actualConfigData).finally(()=>{this.isLoading=!1})},createErrorNotification(e){let n=`<div>${this.$tc("sw-config-form-renderer.configLoadErrorMessage",e.length)}</div><ul>`;e.forEach(e=>{n=`${n}<li>${e.detail}</li>`}),n+="</ul>",this.createNotificationError({message:n,autoClose:!1})},onSalesChannelChanged(e){this.currentSalesChannelId=e,this.readAll()},hasMapInheritanceSupport(e){let n=e.config?e.config.componentName:void 0;return"sw-switch-field"===n||"sw-snippet-field"===n||this.typesWithMapInheritanceSupport.includes(e.type)},getElementBind(e,n){let t=s.deepCopyObject(e);return this.hasMapInheritanceSupport(e)?t.mapInheritance=n:(delete t.config.label,delete t.config.helpText),["single-select","multi-select"].includes(t.type)&&(t.config.labelProperty="name",t.config.valueProperty="id"),"text-editor"===e.type&&(t.config.componentName="sw-text-editor"),t.config.css&&void 0===t.config.helpText&&(t.config.helpText=this.$tc("sw-settings.system-config.scssHelpText")+e.config.css),t},getInheritWrapperBind(e){return this.hasMapInheritanceSupport(e)?{}:{label:this.getInlineSnippet(e.config.label),helpText:this.getInlineSnippet(e.config.helpText)}},getInheritedValue(e){let n=this.actualConfigData.null[e.name];if(n)return n;if(e.config?.componentName&&"sw-switch-field"===e.config.componentName)return!1;switch(e.type){case"date":case"datetime":case"single-select":case"colorpicker":case"password":case"url":case"text":case"textarea":case"text-editor":return"";case"multi-select":return[];case"checkbox":case"bool":return!1;case"float":case"int":return 0;default:return null}},emitConfig(){this.$emit("config-changed",this.actualConfigData[this.currentSalesChannelId])},kebabCase(e){return l(e)}}}},47360:function(e,n,t){var a=t(11376);a.__esModule&&(a=a.default),"string"==typeof a&&(a=[[e.id,a,""]]),a.locals&&(e.exports=a.locals),t(45346).Z("8c57677e",a,!0,{})}}]);