{"version":3,"sources":["webpack:///./src/module/sw-settings-payment/component/sw-settings-payment-sorting-modal/index.js","webpack:///./src/module/sw-settings-payment/component/sw-settings-payment-sorting-modal/sw-settings-payment-sorting-modal.html.twig","webpack:///./src/module/sw-settings-payment/component/sw-settings-payment-sorting-modal/sw-settings-payment-sorting-modal.scss"],"names":["Mixin","Shopware","template","inject","mixins","getByName","props","paymentMethods","type","Array","required","data","isSaving","originalPaymentMethods","_toConsumableArray","this","sortedPaymentMethods","scrollOnDragConf","speed","margin","accelerationMargin","computed","paymentMethodRepository","repositoryFactory","create","assetFilter","Filter","methods","closeModal","$emit","applyChanges","_this","map","paymentMethod","index","position","saveAll","Context","api","then","createNotificationSuccess","message","$tc","catch","createNotificationError","onSort","sortedItems","isShopwareDefaultPaymentMethod","includes","handlerIdentifier","content","__esModule","default","module","i","locals","exports","add"],"mappings":"qJAGQA,G,UAAUC,SAAVD,OAMO,WACXE,SCVW,4mIDYXC,OAAQ,CACJ,MACA,oBACA,WAGJC,OAAQ,CAACJ,EAAMK,UAAU,iBAEzBC,MAAO,CACHC,eAAgB,CACZC,KAAMC,MACNC,UAAU,IAIlBC,KAAI,WACA,MAAO,CACHC,UAAU,EACVC,uBAAsBC,IAAMC,KAAKR,gBACjCS,qBAAoBF,IAAMC,KAAKR,gBAC/BU,iBAAkB,CACdC,MAAO,GACPC,OAAQ,IACRC,oBAAqB,MAKjCC,SAAU,CACNC,wBAAuB,WACnB,OAAOP,KAAKQ,kBAAkBC,OAAO,mBAGzCC,YAAW,WACP,OAAOxB,SAASyB,OAAOrB,UAAU,WAIzCsB,QAAS,CACLC,WAAU,WACNb,KAAKc,MAAM,gBAGfC,aAAY,WAAI,IAADC,EAAA,KAQX,OAPAhB,KAAKH,UAAW,EAEhBG,KAAKC,qBAAqBgB,KAAI,SAACC,EAAeC,GAE1C,OADAD,EAAcE,SAAWD,EAAQ,EAC1BD,KAGJlB,KAAKO,wBAAwBc,QAAQrB,KAAKC,qBAAsBf,SAASoC,QAAQC,KACnFC,MAAK,WACFR,EAAKnB,UAAW,EAChBmB,EAAKF,MAAM,eACXE,EAAKF,MAAM,cAEXE,EAAKS,0BAA0B,CAC3BC,QAASV,EAAKW,IAAI,yDAGzBC,OAAM,WACHZ,EAAKa,wBAAwB,CACzBH,QAASV,EAAKW,IAAI,wDAKlCG,OAAM,SAACC,GACH/B,KAAKC,qBAAuB8B,GAGhCC,+BAA8B,SAACd,GAQ3B,MAP8B,CAC1B,wEACA,0EACA,uEACA,uEAGyBe,SAASf,EAAcgB,uB,qBEzFhE,IAAIC,EAAU,EAAQ,QACnBA,EAAQC,aAAYD,EAAUA,EAAQE,SACnB,iBAAZF,IAAsBA,EAAU,CAAC,CAACG,EAAOC,EAAIJ,EAAS,MAC7DA,EAAQK,SAAQF,EAAOG,QAAUN,EAAQK,SAG/BE,EADH,EAAQ,QAAwEL,SACzE,WAAYF,GAAS,EAAM,K","file":"static/js/ffe3a047fae5871dd243.js","sourcesContent":["import template from './sw-settings-payment-sorting-modal.html.twig';\nimport './sw-settings-payment-sorting-modal.scss';\n\nconst { Mixin } = Shopware;\n\n/**\n * @package checkout\n */\n// eslint-disable-next-line sw-deprecation-rules/private-feature-declarations\nexport default {\n    template,\n\n    inject: [\n        'acl',\n        'repositoryFactory',\n        'feature',\n    ],\n\n    mixins: [Mixin.getByName('notification')],\n\n    props: {\n        paymentMethods: {\n            type: Array,\n            required: true,\n        },\n    },\n\n    data() {\n        return {\n            isSaving: false,\n            originalPaymentMethods: [...this.paymentMethods],\n            sortedPaymentMethods: [...this.paymentMethods],\n            scrollOnDragConf: {\n                speed: 50,\n                margin: 130,\n                accelerationMargin: -10,\n            },\n        };\n    },\n\n    computed: {\n        paymentMethodRepository() {\n            return this.repositoryFactory.create('payment_method');\n        },\n\n        assetFilter() {\n            return Shopware.Filter.getByName('asset');\n        },\n    },\n\n    methods: {\n        closeModal() {\n            this.$emit('modal-close');\n        },\n\n        applyChanges() {\n            this.isSaving = true;\n\n            this.sortedPaymentMethods.map((paymentMethod, index) => {\n                paymentMethod.position = index + 1;\n                return paymentMethod;\n            });\n\n            return this.paymentMethodRepository.saveAll(this.sortedPaymentMethods, Shopware.Context.api)\n                .then(() => {\n                    this.isSaving = false;\n                    this.$emit('modal-close');\n                    this.$emit('modal-save');\n\n                    this.createNotificationSuccess({\n                        message: this.$tc('sw-settings-payment.sorting-modal.saveSuccessful'),\n                    });\n                })\n                .catch(() => {\n                    this.createNotificationError({\n                        message: this.$tc('sw-settings-payment.sorting-modal.errorMessage'),\n                    });\n                });\n        },\n\n        onSort(sortedItems) {\n            this.sortedPaymentMethods = sortedItems;\n        },\n\n        isShopwareDefaultPaymentMethod(paymentMethod) {\n            const defaultPaymentMethods = [\n                'Shopware\\\\Core\\\\Checkout\\\\Payment\\\\Cart\\\\PaymentHandler\\\\DebitPayment',\n                'Shopware\\\\Core\\\\Checkout\\\\Payment\\\\Cart\\\\PaymentHandler\\\\InvoicePayment',\n                'Shopware\\\\Core\\\\Checkout\\\\Payment\\\\Cart\\\\PaymentHandler\\\\CashPayment',\n                'Shopware\\\\Core\\\\Checkout\\\\Payment\\\\Cart\\\\PaymentHandler\\\\PrePayment',\n            ];\n\n            return defaultPaymentMethods.includes(paymentMethod.handlerIdentifier);\n        },\n    },\n};\n","export default \"\\n{% block sw_settings_payment_sorting_modal %}\\n<sw-modal\\n    class=\\\"sw-settings-payment-sorting-modal\\\"\\n    :title=\\\"$tc('sw-settings-payment.sorting-modal.modalTitle')\\\"\\n    @modal-close=\\\"closeModal\\\"\\n>\\n\\n    \\n    {% block sw_settings_payment_sorting_modal_content %}\\n    <template #body>\\n\\n        \\n        {% block sw_settings_payment_sorting_modal_content_subtitle %}\\n        <div class=\\\"sw-modal__body sw-settings-payment-sorting-modal__subtitle\\\">\\n            {{ $tc('sw-settings-payment.sorting-modal.subTitle') }}\\n        </div>\\n        {% endblock %}\\n\\n        \\n        {% block sw_settings_payment_sorting_modal_content_list %}\\n        <div class=\\\"sw-modal__body\\\">\\n            <sw-sortable-list\\n                class=\\\"sw-settings-payment-sorting-modal__payment-method-list\\\"\\n                :items=\\\"sortedPaymentMethods\\\"\\n                :scroll-on-drag=\\\"true\\\"\\n                :scroll-on-drag-conf=\\\"scrollOnDragConf\\\"\\n                @items-sorted=\\\"onSort\\\"\\n            >\\n                \\n                {% block sw_settings_payment_sorting_modal_content_payment_method %}\\n                <template #item=\\\"{ item: paymentMethod }\\\">\\n                    <div\\n                        class=\\\"sw-settings-payment-sorting-modal__payment-method-list-item\\\"\\n                        :class=\\\"!paymentMethod.active ? 'is--disabled' : ''\\\"\\n                    >\\n                        \\n                        {% block sw_settings_payment_sorting_modal_content_payment_method_action %}\\n                        <sw-icon\\n                            class=\\\"sw-settings-payment-sorting-modal__payment-method-list-item__action\\\"\\n                            name=\\\"regular-grip-vertical\\\"\\n                        />\\n                        {% endblock %}\\n                        \\n                        {% block sw_settings_payment_sorting_modal_content_payment_method_icon %}\\n                        <img\\n                            v-if=\\\"isShopwareDefaultPaymentMethod(paymentMethod)\\\"\\n                            class=\\\"sw-settings-payment-sorting-modal__payment-method-list-item__icon\\\"\\n                            :src=\\\"assetFilter('/administration/static/img/checkout/shopware_payment_method.svg')\\\"\\n                            alt=\\\"\\\"\\n                        >\\n                        <sw-media-preview-v2\\n                            v-else\\n                            class=\\\"sw-settings-payment-sorting-modal__payment-method-list-item__icon\\\"\\n                            :source=\\\"paymentMethod.media ? paymentMethod.media : null\\\"\\n                        />\\n                        {% endblock %}\\n                        \\n                        {% block sw_settings_payment_sorting_modal_content_payment_method_name %}\\n                        <div class=\\\"sw-settings-payment-sorting-modal__payment-method-list-item__name\\\">\\n                            {{ paymentMethod.translated.distinguishableName }}\\n                        </div>\\n                        {% endblock %}\\n                    </div>\\n                </template>\\n                {% endblock %}\\n            </sw-sortable-list>\\n        </div>\\n        {% endblock %}\\n\\n    </template>\\n    {% endblock %}\\n\\n    \\n    {% block sw_settings_payment_sorting_modal_footer %}\\n    <template #modal-footer>\\n\\n        \\n        {% block sw_settings_payment_sorting_modal_footer_cancel_button %}\\n        <sw-button\\n            class=\\\"sw-settings-payment-sorting-modal__cancel-button\\\"\\n            @click=\\\"closeModal\\\"\\n        >\\n            {{ $tc('global.default.cancel') }}\\n        </sw-button>\\n        {% endblock %}\\n\\n        \\n        {% block sw_settings_payment_sorting_modal_footer_save_button %}\\n        <sw-button-process\\n            class=\\\"sw-settings-payment-sorting-modal__save-button\\\"\\n            variant=\\\"primary\\\"\\n            :is-loading=\\\"isSaving\\\"\\n            :disabled=\\\"!acl.can('category.editor')\\\"\\n            :process-success=\\\"false\\\"\\n            @click=\\\"applyChanges\\\"\\n        >\\n            {{ $tc('global.default.save') }}\\n        </sw-button-process>\\n        {% endblock %}\\n\\n    </template>\\n    {% endblock %}\\n\\n</sw-modal>\\n{% endblock %}\\n\";","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../../../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--15-1!../../../../../node_modules/css-loader/dist/cjs.js??ref--15-2!../../../../../node_modules/sass-loader/dist/cjs.js??ref--15-3!./sw-settings-payment-sorting-modal.scss\");\nif(content.__esModule) content = content.default;\nif(typeof content === 'string') content = [[module.id, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar add = require(\"!../../../../../node_modules/vue-style-loader/lib/addStylesClient.js\").default\nvar update = add(\"6dbf64ff\", content, true, {});"],"sourceRoot":""}