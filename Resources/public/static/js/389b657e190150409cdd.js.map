{"version":3,"sources":["webpack:///./src/module/sw-customer/view/sw-customer-detail-addresses/index.js","webpack:///./src/module/sw-customer/view/sw-customer-detail-addresses/sw-customer-detail-addresses.html.twig","webpack:///./src/module/sw-customer/view/sw-customer-detail-addresses/sw-customer-detail-addresses.scss"],"names":["ShopwareError","Shopware","Classes","_Shopware","Mixin","EntityDefinition","Criteria","Data","template","inject","mixins","getByName","props","customer","type","Object","required","customerEditMode","Boolean","data","isLoading","activeCustomer","this","showAddAddressModal","showEditAddressModal","showDeleteAddressModal","addressSortProperty","addressSortDirection","currentAddress","customerAddressCustomFieldSets","computed","customerRepository","repositoryFactory","create","customFieldSetRepository","customerAddressRepository","addressColumns","getAddressColumns","addressRepository","addresses","entity","source","sortedAddresses","_this","sort","a","b","aValue","bValue","isBigger","toUpperCase","salutationRepository","salutationCriteria","criteria","addFilter","equals","created","createdComponent","methods","_this2","id","$route","params","customFieldSetCriteria","search","then","customFieldSets","$router","push","name","get","property","label","$tc","align","iconLabel","iconTooltip","setAddressSorting","column","direction","dataIndex","onCreateNewAddress","createNewCustomerAddress","_this3","_asyncToGenerator","_regeneratorRuntime","mark","_callee","defaultSalutationId","newAddress","wrap","_context","prev","next","getDefaultSalutation","sent","customerId","salutationId","stop","onSaveAddress","isValidAddress","address","Context","api","assign","has","remove","_this4","ignoreFields","requiredAddressFields","keys","getRequiredFields","isValid","forEach","field","indexOf","State","dispatch","expression","concat","error","code","onCloseAddressModal","defaultShippingAddressId","defaultBillingAddressId","query","detailId","onEditAddress","onDeleteAddress","isDefaultAddress","onConfirmDeleteAddress","_this5","onCloseDeleteAddressModal","delete","refreshList","addressId","onChangeDefaultBillingAddress","billingAddressId","onChangeDefaultShippingAddress","shippingAddressId","onDuplicateAddress","_this6","_callee2","_yield$_this6$custome","_context2","clone","onChangeDefaultAddress","value","preFix","createPrefix","onChange","term","setPage","setTerm","$refs","addressGrid","load","string","replace","charAt","slice","_this7","_callee3","_res$data","res","_context3","searchIds","abrupt","content","__esModule","default","module","i","locals","exports","add"],"mappings":"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","file":"static/js/389b657e190150409cdd.js","sourcesContent":["import { required } from 'src/core/service/validation.service';\nimport template from './sw-customer-detail-addresses.html.twig';\nimport './sw-customer-detail-addresses.scss';\n\n/**\n * @package checkout\n */\n\nconst { ShopwareError } = Shopware.Classes;\nconst { Mixin, EntityDefinition } = Shopware;\nconst { Criteria } = Shopware.Data;\n\n// eslint-disable-next-line sw-deprecation-rules/private-feature-declarations\nexport default {\n    template,\n\n    inject: ['repositoryFactory'],\n\n    mixins: [\n        Mixin.getByName('notification'),\n    ],\n\n    props: {\n        customer: {\n            type: Object,\n            required: true,\n        },\n        customerEditMode: {\n            type: Boolean,\n            required: true,\n        },\n    },\n\n    data() {\n        return {\n            isLoading: false,\n            activeCustomer: this.customer,\n            showAddAddressModal: false,\n            showEditAddressModal: false,\n            showDeleteAddressModal: false,\n            addressSortProperty: null,\n            addressSortDirection: '',\n            currentAddress: null,\n            customerAddressCustomFieldSets: null,\n        };\n    },\n\n    computed: {\n        customerRepository() {\n            return this.repositoryFactory.create('customer');\n        },\n\n        customFieldSetRepository() {\n            return this.repositoryFactory.create('custom_field_set');\n        },\n\n        customerAddressRepository() {\n            return this.repositoryFactory.create('customer_address');\n        },\n\n        addressColumns() {\n            return this.getAddressColumns();\n        },\n\n        addressRepository() {\n            return this.repositoryFactory.create(\n                this.activeCustomer.addresses.entity,\n                this.activeCustomer.addresses.source,\n            );\n        },\n\n        sortedAddresses() {\n            if (this.addressSortProperty) {\n                // eslint-disable-next-line vue/no-side-effects-in-computed-properties\n                return this.activeCustomer.addresses.sort((a, b) => {\n                    const aValue = a[this.addressSortProperty];\n                    const bValue = b[this.addressSortProperty];\n\n                    let isBigger = null;\n\n                    if (typeof aValue === 'string' && typeof bValue === 'string') {\n                        isBigger = aValue.toUpperCase() > bValue.toUpperCase();\n                    }\n\n                    if (typeof aValue === 'number' && typeof bValue === 'number') {\n                        isBigger = (aValue - bValue) > 0;\n                    }\n\n                    if (isBigger !== null) {\n                        if (this.addressSortDirection === 'DESC') {\n                            return isBigger ? -1 : 1;\n                        }\n\n                        return isBigger ? 1 : -1;\n                    }\n\n                    return 0;\n                });\n            }\n\n            return this.activeCustomer.addresses;\n        },\n\n        salutationRepository() {\n            return this.repositoryFactory.create('salutation');\n        },\n\n        salutationCriteria() {\n            const criteria = new Criteria(1, 1);\n\n            criteria.addFilter(Criteria.equals('salutationKey', 'not_specified'));\n\n            return criteria;\n        },\n    },\n\n    created() {\n        this.createdComponent();\n    },\n\n    methods: {\n        createdComponent() {\n            this.isLoading = true;\n\n            if (!this.activeCustomer.id && this.$route.params.id) {\n                this.customerRepository.get(this.$route.params.id).then((customer) => {\n                    this.activeCustomer = customer;\n                    this.isLoading = false;\n                });\n                return;\n            }\n\n            if (!this.activeCustomer.id) {\n                this.$router.push({ name: 'sw.customer.detail.base', params: { id: this.$route.params.id } });\n                return;\n            }\n\n            const customFieldSetCriteria = new Criteria(1, 25);\n            customFieldSetCriteria.addFilter(Criteria.equals('relations.entityName', 'customer_address'));\n\n            this.customFieldSetRepository.search(customFieldSetCriteria).then((customFieldSets) => {\n                this.customerAddressCustomFieldSets = customFieldSets;\n            });\n\n            this.isLoading = false;\n        },\n\n        getAddressColumns() {\n            return [{\n                property: 'defaultShippingAddress',\n                label: this.$tc('sw-customer.detailAddresses.columnDefaultShippingAddress'),\n                align: 'center',\n                iconLabel: 'regular-shopping-cart',\n                iconTooltip: this.$tc('sw-customer.detailAddresses.columnDefaultShippingAddress'),\n            }, {\n                property: 'defaultBillingAddress',\n                label: this.$tc('sw-customer.detailAddresses.columnDefaultBillingAddress'),\n                align: 'center',\n                iconLabel: 'regular-file-text',\n                iconTooltip: this.$tc('sw-customer.detailAddresses.columnDefaultBillingAddress'),\n            }, {\n                property: 'lastName',\n                label: this.$tc('sw-customer.detailAddresses.columnLastName'),\n            }, {\n                property: 'firstName',\n                label: this.$tc('sw-customer.detailAddresses.columnFirstName'),\n            }, {\n                property: 'company',\n                label: this.$tc('sw-customer.detailAddresses.columnCompany'),\n            }, {\n                property: 'street',\n                label: this.$tc('sw-customer.detailAddresses.columnStreet'),\n            }, {\n                property: 'zipcode',\n                label: this.$tc('sw-customer.detailAddresses.columnZipCode'),\n                align: 'right',\n            }, {\n                property: 'city',\n                label: this.$tc('sw-customer.detailAddresses.columnCity'),\n            }];\n        },\n\n        setAddressSorting(column) {\n            this.addressSortProperty = column.property;\n\n            let direction = 'ASC';\n            if (this.addressSortProperty === column.dataIndex) {\n                if (this.addressSortDirection === direction) {\n                    direction = 'DESC';\n                }\n            }\n            this.addressSortProperty = column.dataIndex;\n            this.addressSortDirection = direction;\n        },\n\n        onCreateNewAddress() {\n            this.showAddAddressModal = true;\n            this.createNewCustomerAddress();\n        },\n\n        async createNewCustomerAddress() {\n            const defaultSalutationId = await this.getDefaultSalutation();\n\n            const newAddress = this.addressRepository.create();\n            newAddress.customerId = this.activeCustomer.id;\n            newAddress.salutationId = defaultSalutationId;\n\n            this.currentAddress = newAddress;\n        },\n\n        onSaveAddress() {\n            if (this.currentAddress === null || !this.isValidAddress(this.currentAddress)) {\n                return;\n            }\n\n            let address = this.activeCustomer.addresses.get(this.currentAddress.id);\n\n            if (typeof address === 'undefined' || address === null) {\n                address = this.addressRepository.create(Shopware.Context.api, this.currentAddress.id);\n            }\n\n            Object.assign(address, this.currentAddress);\n\n            if (this.customer.addresses.has(address.id)) {\n                this.customer.addresses.remove(address.id);\n            }\n\n            this.customer.addresses.push(address);\n\n            this.currentAddress = null;\n        },\n\n        isValidAddress(address) {\n            const ignoreFields = ['createdAt'];\n            const requiredAddressFields = Object.keys(EntityDefinition.getRequiredFields('customer_address'));\n            let isValid = true;\n\n            requiredAddressFields.forEach(field => {\n                if ((ignoreFields.indexOf(field) !== -1) || required(address[field])) {\n                    return;\n                }\n\n                isValid = false;\n\n                Shopware.State.dispatch(\n                    'error/addApiError',\n                    {\n                        expression: `customer_address.${this.currentAddress.id}.${field}`,\n                        error: new ShopwareError(\n                            {\n                                code: 'c1051bb4-d103-4f74-8988-acbcafc7fdc3',\n                            },\n                        ),\n                    },\n                );\n            });\n\n            return isValid;\n        },\n\n        onCloseAddressModal() {\n            if (this.defaultShippingAddressId) {\n                this.activeCustomer.defaultShippingAddressId = this.defaultShippingAddressId;\n            }\n\n            if (this.defaultBillingAddressId) {\n                this.activeCustomer.defaultBillingAddressId = this.defaultBillingAddressId;\n            }\n\n            if (this.$route.query.detailId) {\n                this.$route.query.detailId = null;\n            }\n\n            this.currentAddress = null;\n        },\n\n        onEditAddress(id) {\n            const currentAddress = this.addressRepository.create(Shopware.Context.api, id);\n\n            // assign values and id to new address\n            Object.assign(currentAddress, this.activeCustomer.addresses.get(id));\n\n            this.currentAddress = currentAddress;\n            this.showEditAddressModal = id;\n        },\n\n        onDeleteAddress(id) {\n            if (this.isDefaultAddress(id)) {\n                return;\n            }\n            this.showDeleteAddressModal = id;\n        },\n\n        onConfirmDeleteAddress(id) {\n            this.onCloseDeleteAddressModal();\n\n            return this.customerAddressRepository.delete(id).then(() => {\n                this.refreshList();\n            });\n        },\n\n        onCloseDeleteAddressModal() {\n            this.showDeleteAddressModal = false;\n        },\n\n        isDefaultAddress(addressId) {\n            return this.activeCustomer.defaultBillingAddressId === addressId ||\n                this.activeCustomer.defaultShippingAddressId === addressId;\n        },\n\n        onChangeDefaultBillingAddress(billingAddressId) {\n            this.activeCustomer.defaultBillingAddressId = billingAddressId;\n            this.customer.defaultBillingAddressId = billingAddressId;\n        },\n\n        onChangeDefaultShippingAddress(shippingAddressId) {\n            this.activeCustomer.defaultShippingAddressId = shippingAddressId;\n            this.customer.defaultShippingAddressId = shippingAddressId;\n        },\n\n        async onDuplicateAddress(addressId) {\n            const { id } = await this.customerAddressRepository.clone(addressId);\n            const newAddress = await this.customerAddressRepository.get(id);\n\n            this.activeCustomer.addresses.push(newAddress);\n        },\n\n        onChangeDefaultAddress(data) {\n            if (!data.value) {\n                if (this.defaultShippingAddressId) {\n                    this.activeCustomer.defaultShippingAddressId = this.defaultShippingAddressId;\n                }\n\n                if (this.defaultBillingAddressId) {\n                    this.activeCustomer.defaultBillingAddressId = this.defaultBillingAddressId;\n                }\n                return;\n            }\n\n            const preFix = this.createPrefix(data.name, '-address');\n            const name = `default${preFix}AddressId`;\n\n            this[name] = this.activeCustomer[name];\n            this.activeCustomer[name] = data.id;\n            this.customer[name] = data.id;\n        },\n\n        onChange(term) {\n            this.activeCustomer.addresses.criteria.setPage(1);\n            this.activeCustomer.addresses.criteria.setTerm(term);\n\n            this.refreshList();\n        },\n\n        refreshList() {\n            this.$refs.addressGrid.load();\n        },\n\n        createPrefix(string, replace) {\n            const preFix = string.replace(replace, '');\n\n            return `${preFix.charAt(0).toUpperCase()}${preFix.slice(1)}`;\n        },\n\n        async getDefaultSalutation() {\n            const res = await this.salutationRepository.searchIds(this.salutationCriteria);\n\n            return res.data?.[0];\n        },\n    },\n};\n","export default \"\\n{% block sw_customer_detail_addresses %}\\n<div class=\\\"sw-customer-detail-addresses\\\">\\n\\n    \\n    {% block sw_customer_detail_addresses_card %}\\n    <sw-card\\n        position-identifier=\\\"sw-customer-detail-addresses\\\"\\n        :is-loading=\\\"isLoading\\\"\\n        :large=\\\"true\\\"\\n    >\\n        \\n        {% block sw_customer_detail_addresses_toolbar %}\\n        <template #toolbar>\\n            <sw-card-filter\\n                placeholder=\\\"\\\"\\n                @sw-card-filter-term-change=\\\"onChange\\\"\\n            >\\n                <template #filter>\\n                    \\n                    {% block sw_customer_detail_addresses_add_button %}\\n                    <sw-button\\n                        class=\\\"sw-customer-detail-addresses__add-address-action\\\"\\n                        :disabled=\\\"!customerEditMode\\\"\\n                        size=\\\"small\\\"\\n                        @click=\\\"onCreateNewAddress\\\"\\n                    >\\n                        <sw-icon\\n                            name=\\\"regular-plus-circle-s\\\"\\n                            small\\n                        />\\n                        {{ $tc('sw-customer.detailAddresses.buttonAddAddress') }}\\n                    </sw-button>\\n                    {% endblock %}\\n                </template>\\n            </sw-card-filter>\\n        </template>\\n        {% endblock %}\\n\\n        \\n        {% block sw_customer_detail_addresses_add_modal %}\\n        <sw-modal\\n            v-if=\\\"currentAddress\\\"\\n            :title=\\\"$tc('sw-customer.detailAddresses.modalTitleAddress')\\\"\\n            @modal-close=\\\"onCloseAddressModal\\\"\\n        >\\n\\n            \\n            {% block sw_customer_detail_addresses_add_modal_address_form %}\\n            <sw-customer-address-form\\n                :address=\\\"currentAddress\\\"\\n                :customer=\\\"activeCustomer\\\"\\n            >\\n\\n                <sw-customer-address-form-options\\n                    :address=\\\"currentAddress\\\"\\n                    :customer=\\\"activeCustomer\\\"\\n                    :custom-field-sets=\\\"customerAddressCustomFieldSets\\\"\\n                    @default-address-change=\\\"onChangeDefaultAddress\\\"\\n                />\\n\\n            </sw-customer-address-form>\\n            {% endblock %}\\n\\n            \\n            {% block sw_customer_detail_addresses_add_modal_footer %}\\n            <template #modal-footer>\\n                \\n                {% block sw_customer_detail_addresses_add_modal_cancel %}\\n                <sw-button\\n                    size=\\\"small\\\"\\n                    @click=\\\"onCloseAddressModal\\\"\\n                >\\n                    {{ $tc('sw-customer.detailAddresses.buttonCancel') }}\\n                </sw-button>\\n                {% endblock %}\\n\\n                \\n                {% block sw_customer_detail_addresses_add_modal_apply %}\\n                <sw-button\\n                    variant=\\\"primary\\\"\\n                    size=\\\"small\\\"\\n                    @click=\\\"onSaveAddress\\\"\\n                >\\n                    {{ $tc('sw-customer.detailAddresses.buttonApply') }}\\n                </sw-button>\\n                {% endblock %}\\n            </template>\\n            {% endblock %}\\n        </sw-modal>\\n        {% endblock %}\\n\\n        \\n        {% block sw_customer_detail_addresses_grid %}\\n        <template #grid>\\n            <sw-one-to-many-grid\\n                ref=\\\"addressGrid\\\"\\n                :collection=\\\"sortedAddresses\\\"\\n                :local-mode=\\\"false\\\"\\n                :columns=\\\"addressColumns\\\"\\n                :show-selection=\\\"false\\\"\\n                :sort-direction=\\\"addressSortDirection\\\"\\n                :sort-by=\\\"addressSortProperty\\\"\\n                :is-loading=\\\"isLoading\\\"\\n                @column-sort=\\\"setAddressSorting\\\"\\n            >\\n                \\n                {% block sw_customer_detail_addresses_grid_columns %}\\n                \\n                {% block sw_customer_detail_addresses_grid_columns_default_shipping_address %}\\n                <template #column-defaultShippingAddress=\\\"{ item }\\\">\\n                    <sw-radio-field\\n                        {% if VUE3 %}\\n                        v-model:value=\\\"activeCustomer.defaultShippingAddressId\\\"\\n                        {% else %}\\n                        v-model=\\\"activeCustomer.defaultShippingAddressId\\\"\\n                        {% endif %}\\n                        :disabled=\\\"!customerEditMode\\\"\\n                        name=\\\"defaultShippingAddress\\\"\\n                        :options=\\\"[{ value: item.id }]\\\"\\n                        {% if VUE3 %}\\n                        @update:value=\\\"onChangeDefaultShippingAddress\\\"\\n                        {% else %}\\n                        @change=\\\"onChangeDefaultShippingAddress\\\"\\n                        {% endif %}\\n                    />\\n                </template>\\n                {% endblock %}\\n\\n                \\n                {% block sw_customer_detail_addresses_grid_columns_default_billing_address %}\\n                <template #column-defaultBillingAddress=\\\"{ item }\\\">\\n                    <sw-radio-field\\n                        {% if VUE3 %}\\n                        v-model:value=\\\"activeCustomer.defaultBillingAddressId\\\"\\n                        {% else %}\\n                        v-model=\\\"activeCustomer.defaultBillingAddressId\\\"\\n                        {% endif %}\\n                        :disabled=\\\"!customerEditMode\\\"\\n                        name=\\\"defaultBillingAddress\\\"\\n                        :options=\\\"[{ value: item.id }]\\\"\\n                        {% if VUE3 %}\\n                        @update:value=\\\"onChangeDefaultBillingAddress\\\"\\n                        {% else %}\\n                        @change=\\\"onChangeDefaultBillingAddress\\\"\\n                        {% endif %}\\n                    />\\n                </template>\\n                {% endblock %}\\n\\n                \\n                {% block sw_customer_detail_addresses_grid_columns_last_name %}\\n                <template #column-lastName=\\\"{ item }\\\">\\n                    <a\\n                        v-if=\\\"customerEditMode\\\"\\n                        role=\\\"link\\\"\\n                        tabindex=\\\"0\\\"\\n                        @click=\\\"onEditAddress(item.id)\\\"\\n                        @keydown.enter=\\\"onEditAddress(item.id)\\\"\\n                    >\\n                        {{ item.lastName }}\\n                    </a>\\n\\n                    <template v-else>\\n                        {{ item.lastName }}\\n                    </template>\\n                </template>\\n                {% endblock %}\\n                {% endblock %}\\n\\n                \\n                {% block sw_customer_detail_addresses_grid_columns_actions %}\\n                <template #actions=\\\"{ item }\\\">\\n\\n                    \\n                    {% block sw_customer_detail_addresses_grid_columns_actions_edit %}\\n                    <sw-context-menu-item\\n                        :disabled=\\\"!customerEditMode\\\"\\n                        @click=\\\"onEditAddress(item.id)\\\"\\n                    >\\n                        {{ $tc('sw-customer.detailAddresses.contextMenuEdit') }}\\n                    </sw-context-menu-item>\\n                    {% endblock %}\\n\\n                    \\n                    {% block sw_customer_detail_addresses_grid_columns_actions_duplicate %}\\n                    <sw-context-menu-item\\n                        :disabled=\\\"!customerEditMode\\\"\\n                        @click=\\\"onDuplicateAddress(item.id)\\\"\\n                    >\\n                        {{ $tc('sw-customer.detailAddresses.contextMenuDuplicate') }}\\n                    </sw-context-menu-item>\\n                    {% endblock %}\\n\\n                    \\n                    {% block sw_customer_detail_addresses_grid_columns_actions_defaultShippingAddress %}\\n                    <sw-context-menu-item\\n                        :disabled=\\\"!customerEditMode\\\"\\n                        @click=\\\"onChangeDefaultShippingAddress(item.id)\\\"\\n                    >\\n                        {{ $tc('sw-customer.detailAddresses.contextMenuDefaultShippingAddress') }}\\n                    </sw-context-menu-item>\\n                    {% endblock %}\\n\\n                    \\n                    {% block sw_customer_detail_addresses_grid_columns_actions_defaultBillingAddress %}\\n                    <sw-context-menu-item\\n                        :disabled=\\\"!customerEditMode\\\"\\n                        @click=\\\"onChangeDefaultBillingAddress(item.id)\\\"\\n                    >\\n                        {{ $tc('sw-customer.detailAddresses.contextMenuDefaultBillingAddress') }}\\n                    </sw-context-menu-item>\\n                    {% endblock %}\\n\\n                    \\n                    {% block sw_customer_detail_addresses_grid_columns_actions_delete %}\\n                    <sw-context-menu-item\\n                        variant=\\\"danger\\\"\\n                        :disabled=\\\"!customerEditMode || isDefaultAddress(item.id)\\\"\\n                        @click=\\\"onDeleteAddress(item.id)\\\"\\n                    >\\n                        {{ $tc('sw-customer.detailAddresses.contextMenuDelete') }}\\n                    </sw-context-menu-item>\\n                    {% endblock %}\\n                </template>\\n                {% endblock %}\\n\\n                \\n                {% block sw_customer_detail_addresses_grid_columns_action_modals %}\\n                <template #action-modals=\\\"{ item }\\\">\\n                    \\n                    {% block sw_customer_detail_addresses_delete_modal %}\\n                    <sw-modal\\n                        v-if=\\\"showDeleteAddressModal === item.id\\\"\\n                        :title=\\\"$tc('global.default.warning')\\\"\\n                        variant=\\\"small\\\"\\n                        @modal-close=\\\"onCloseDeleteAddressModal\\\"\\n                    >\\n                        \\n                        {% block sw_customer_detail_addresses_delete_modal_confirm_delete_text %}\\n                        <p class=\\\"sw-customer-detail-addresses__confirm-delete-text\\\">\\n                            {{ $tc('sw-customer.detailAddresses.textDeleteAddressConfirm') }}\\n                        </p>\\n                        {% endblock %}\\n\\n                        \\n                        {% block sw_customer_detail_addresses_delete_modal_address_item %}\\n                        <sw-address\\n                            class=\\\"sw-customer-detail-addresses__confirm-delete-address\\\"\\n                            :address=\\\"item\\\"\\n                        />\\n                        {% endblock %}\\n\\n                        \\n                        {% block sw_customer_detail_addresses_delete_modal_footer %}\\n                        <template #modal-footer>\\n                            \\n                            {% block sw_customer_detail_addresses_delete_modal_cancel %}\\n                            <sw-button\\n                                size=\\\"small\\\"\\n                                @click=\\\"onCloseDeleteAddressModal\\\"\\n                            >\\n                                {{ $tc('sw-customer.detailAddresses.buttonCancel') }}\\n                            </sw-button>\\n                            {% endblock %}\\n\\n                            \\n                            {% block sw_customer_detail_addresses_delete_modal_confirm %}\\n                            <sw-button\\n                                variant=\\\"danger\\\"\\n                                size=\\\"small\\\"\\n                                @click=\\\"onConfirmDeleteAddress(item.id)\\\"\\n                            >\\n                                {{ $tc('sw-customer.detailAddresses.buttonDelete') }}\\n                            </sw-button>\\n                            {% endblock %}\\n                        </template>\\n                        {% endblock %}\\n                    </sw-modal>\\n                    {% endblock %}\\n                </template>\\n                {% endblock %}\\n            </sw-one-to-many-grid>\\n        </template>\\n        {% endblock %}\\n    </sw-card>\\n    {% endblock %}\\n</div>\\n{% endblock %}\\n\";","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../../../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--15-1!../../../../../node_modules/css-loader/dist/cjs.js??ref--15-2!../../../../../node_modules/sass-loader/dist/cjs.js??ref--15-3!./sw-customer-detail-addresses.scss\");\nif(content.__esModule) content = content.default;\nif(typeof content === 'string') content = [[module.id, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar add = require(\"!../../../../../node_modules/vue-style-loader/lib/addStylesClient.js\").default\nvar update = add(\"116f099f\", content, true, {});"],"sourceRoot":""}