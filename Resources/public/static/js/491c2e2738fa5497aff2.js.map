{"version":3,"sources":["webpack:///./src/module/sw-promotion-v2/component/sw-promotion-v2-sales-channel-select/sw-promotion-v2-sales-channel-select.html.twig","webpack:///./src/module/sw-promotion-v2/component/sw-promotion-v2-sales-channel-select/index.js"],"names":["Criteria","Shopware","Data","template","inject","props","promotion","type","Object","required","default","data","salesChannels","sortBy","computed","salesChannelRepository","this","repositoryFactory","create","promotionSalesChannelRepository","entity","source","salesChannelIds","get","map","promotionSalesChannels","salesChannelId","set","salesChannelsIds","_this$getChangeset","getChangeset","deleted","added","isNew","handleLocalMode","handleWithRepository","salesChannelCriteria","addSorting","sort","sortDirection","naturalSorting","created","createdComponent","methods","_this","search","then","searchresult","_this2","forEach","id","find","salesChannel","push","includes","getAssociationBySalesChannelId","association","_this3","deletedId","collectionEntry","remove","newId","newAssociation","context","promotionId","priority","add","_this4","associationEntry","addedId"],"mappings":"4HAAe,ICKPA,EAAaC,SAASC,KAAtBF,SAGO,WACXG,SDTW,4vBCWXC,OAAQ,CACJ,qBAGJC,MAAO,CACHC,UAAW,CACPC,KAAMC,OACNC,UAAU,EACVC,QAAS,OAIjBC,KAAI,WACA,MAAO,CACHC,cAAe,GACfC,OAAQ,SAIhBC,SAAU,CACNC,uBAAsB,WAClB,OAAOC,KAAKC,kBAAkBC,OAAO,kBAGzCC,gCAA+B,WAC3B,OAAIH,KAAKV,UACEU,KAAKC,kBAAkBC,OAC1BF,KAAKV,UAAUM,cAAcQ,OAC7BJ,KAAKV,UAAUM,cAAcS,QAI9B,MAGXC,gBAAiB,CACbC,IAAG,WACC,OAAKP,KAAKV,UAIHU,KAAKV,UAAUM,cAAcY,KAAI,SAACC,GACrC,OAAOA,EAAuBC,kBAJvB,IAQfC,IAAG,SAACC,GACAA,EAAmBA,GAAoB,GACvC,IAAAC,EAA2Bb,KAAKc,aAAaF,GAArCG,EAAOF,EAAPE,QAASC,EAAKH,EAALG,MAEbhB,KAAKV,UAAU2B,QACfjB,KAAKkB,gBAAgBH,EAASC,GAIlChB,KAAKmB,qBAAqBJ,EAASC,KAI3CI,qBAAoB,WAChB,IAAMA,EAAuB,IAAIpC,EAAS,EAAG,KAG7C,OAFAoC,EAAqBC,WAAWrC,EAASsC,KAAKtB,KAAKH,OAAQG,KAAKuB,cAAevB,KAAKwB,iBAE7EJ,IAIfK,QAAO,WACHzB,KAAK0B,oBAGTC,QAAS,CACLD,iBAAgB,WAAI,IAADE,EAAA,KACf5B,KAAKD,uBACA8B,OAAO7B,KAAKoB,sBACZU,MAAK,SAAAC,GACFH,EAAKhC,cAAgBmC,MAIjCjB,aAAY,SAACF,GAAmB,IAADoB,EAAA,KACrBjB,EAAU,GACVC,EAAQ,GAkBd,OAhBAJ,EAAiBqB,SAAQ,SAACC,GACIF,EAAK1C,UAAUM,cAAcuC,MAAK,SAACC,GACzD,OAAOA,EAAa1B,iBAAmBwB,MAIvClB,EAAMqB,KAAKH,MAInBlC,KAAKV,UAAUM,cAAcqC,SAAQ,SAACG,GAC7BxB,EAAiB0B,SAASF,EAAa1B,iBACxCK,EAAQsB,KAAKD,EAAa1B,mBAI3B,CAAEK,UAASC,UAGtBuB,+BAA8B,SAAC7B,GAC3B,OAAOV,KAAKV,UAAUM,cAAcuC,MAAK,SAACK,GACtC,OAAOA,EAAY9B,iBAAmBA,MAI9CQ,gBAAe,SAACH,EAASC,GAAQ,IAADyB,EAAA,KAC5B1B,EAAQkB,SAAQ,SAACS,GACb,IAAMC,EAAkBF,EAAKF,+BAA+BG,GAC5DD,EAAKnD,UAAUM,cAAcgD,OAAOD,EAAgBT,OAGxDlB,EAAMiB,SAAQ,SAACY,GACX,IAAMC,EAAiBL,EAAKtC,gCAAgCD,OAAOuC,EAAKnD,UAAUM,cAAcmD,SAEhGD,EAAepC,eAAiBmC,EAChCC,EAAeE,YAAcP,EAAKnD,UAAU4C,GAC5CY,EAAeG,SAAW,EAC1BR,EAAKnD,UAAUM,cAAcsD,IAAIJ,OAIzC3B,qBAAoB,SAACJ,EAASC,GAAQ,IAADmC,EAAA,KACjCpC,EAAQkB,SAAQ,SAACS,GACb,IAAMU,EAAmBD,EAAKZ,+BAA+BG,GAC7DS,EAAK7D,UAAUM,cAAcgD,OAAOQ,EAAiBlB,OAGzDlB,EAAMiB,SAAQ,SAACoB,GACX,IAAMP,EAAiBK,EAAKhD,gCAAgCD,OAAOiD,EAAK7D,UAAUM,cAAcmD,SAEhGD,EAAepC,eAAiB2C,EAChCP,EAAeE,YAAcG,EAAK7D,UAAU4C,GAC5CY,EAAeG,SAAW,EAC1BE,EAAK7D,UAAUM,cAAcsD,IAAIJ","file":"static/js/491c2e2738fa5497aff2.js","sourcesContent":["export default \"\\n{% block sw_promotion_v2_sales_channel_selection %}\\n<sw-multi-select\\n    {% if VUE3 %}\\n    v-model:value=\\\"salesChannelIds\\\"\\n    {% else %}\\n    v-model=\\\"salesChannelIds\\\"\\n    {% endif %}\\n    v-bind=\\\"$attrs\\\"\\n    :options=\\\"salesChannels\\\"\\n    value-property=\\\"id\\\"\\n    label-property=\\\"name\\\"\\n>\\n\\n    \\n    {% block sw_promotion_v2_sales_channel_selection_label %}\\n    <template #selection-label-property=\\\"{ item }\\\">\\n        {{ item.name || item.translated.name }}\\n    </template>\\n    {% endblock %}\\n\\n    \\n    {% block sw_promotion_v2_sales_channel_selection_result_label %}\\n    <template #result-label-property=\\\"{ item }\\\">\\n        {{ item.name || item.translated.name }}\\n    </template>\\n    {% endblock %}\\n\\n</sw-multi-select>\\n{% endblock %}\\n\";","/**\n * @package buyers-experience\n */\nimport template from './sw-promotion-v2-sales-channel-select.html.twig';\n\nconst { Criteria } = Shopware.Data;\n\n// eslint-disable-next-line sw-deprecation-rules/private-feature-declarations\nexport default {\n    template,\n\n    inject: [\n        'repositoryFactory',\n    ],\n\n    props: {\n        promotion: {\n            type: Object,\n            required: false,\n            default: null,\n        },\n    },\n\n    data() {\n        return {\n            salesChannels: [],\n            sortBy: 'name',\n        };\n    },\n\n    computed: {\n        salesChannelRepository() {\n            return this.repositoryFactory.create('sales_channel');\n        },\n\n        promotionSalesChannelRepository() {\n            if (this.promotion) {\n                return this.repositoryFactory.create(\n                    this.promotion.salesChannels.entity,\n                    this.promotion.salesChannels.source,\n                );\n            }\n\n            return null;\n        },\n\n        salesChannelIds: {\n            get() {\n                if (!this.promotion) {\n                    return [];\n                }\n\n                return this.promotion.salesChannels.map((promotionSalesChannels) => {\n                    return promotionSalesChannels.salesChannelId;\n                });\n            },\n\n            set(salesChannelsIds) {\n                salesChannelsIds = salesChannelsIds || [];\n                const { deleted, added } = this.getChangeset(salesChannelsIds);\n\n                if (this.promotion.isNew()) {\n                    this.handleLocalMode(deleted, added);\n                    return;\n                }\n\n                this.handleWithRepository(deleted, added);\n            },\n        },\n\n        salesChannelCriteria() {\n            const salesChannelCriteria = new Criteria(1, 500);\n            salesChannelCriteria.addSorting(Criteria.sort(this.sortBy, this.sortDirection, this.naturalSorting));\n\n            return salesChannelCriteria;\n        },\n    },\n\n    created() {\n        this.createdComponent();\n    },\n\n    methods: {\n        createdComponent() {\n            this.salesChannelRepository\n                .search(this.salesChannelCriteria)\n                .then(searchresult => {\n                    this.salesChannels = searchresult;\n                });\n        },\n\n        getChangeset(salesChannelsIds) {\n            const deleted = [];\n            const added = [];\n\n            salesChannelsIds.forEach((id) => {\n                const foundSalesChannel = this.promotion.salesChannels.find((salesChannel) => {\n                    return salesChannel.salesChannelId === id;\n                });\n\n                if (!foundSalesChannel) {\n                    added.push(id);\n                }\n            });\n\n            this.promotion.salesChannels.forEach((salesChannel) => {\n                if (!salesChannelsIds.includes(salesChannel.salesChannelId)) {\n                    deleted.push(salesChannel.salesChannelId);\n                }\n            });\n\n            return { deleted, added };\n        },\n\n        getAssociationBySalesChannelId(salesChannelId) {\n            return this.promotion.salesChannels.find((association) => {\n                return association.salesChannelId === salesChannelId;\n            });\n        },\n\n        handleLocalMode(deleted, added) {\n            deleted.forEach((deletedId) => {\n                const collectionEntry = this.getAssociationBySalesChannelId(deletedId);\n                this.promotion.salesChannels.remove(collectionEntry.id);\n            });\n\n            added.forEach((newId) => {\n                const newAssociation = this.promotionSalesChannelRepository.create(this.promotion.salesChannels.context);\n\n                newAssociation.salesChannelId = newId;\n                newAssociation.promotionId = this.promotion.id;\n                newAssociation.priority = 1;\n                this.promotion.salesChannels.add(newAssociation);\n            });\n        },\n\n        handleWithRepository(deleted, added) {\n            deleted.forEach((deletedId) => {\n                const associationEntry = this.getAssociationBySalesChannelId(deletedId);\n                this.promotion.salesChannels.remove(associationEntry.id);\n            });\n\n            added.forEach((addedId) => {\n                const newAssociation = this.promotionSalesChannelRepository.create(this.promotion.salesChannels.context);\n\n                newAssociation.salesChannelId = addedId;\n                newAssociation.promotionId = this.promotion.id;\n                newAssociation.priority = 1;\n                this.promotion.salesChannels.add(newAssociation);\n            });\n        },\n    },\n};\n"],"sourceRoot":""}