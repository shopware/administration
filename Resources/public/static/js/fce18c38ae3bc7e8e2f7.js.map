{"version":3,"sources":["webpack:///./src/module/sw-customer/page/sw-customer-create/index.js","webpack:///./src/module/sw-customer/page/sw-customer-create/sw-customer-create.html.twig","webpack:///./src/module/sw-customer/constant/sw-customer.constant.js"],"names":["mapPropertyErrors","Shopware","Component","getComponentHelper","ShopwareError","Classes","Mixin","Criteria","Data","template","inject","mixins","getByName","data","customer","address","customerNumberPreview","isSaveSuccessful","salesChannels","isLoading","errorEmailCustomer","defaultMinPasswordLength","computed","_objectSpread","customerRepository","this","repositoryFactory","create","validCompanyField","_this$address$company","accountType","CUSTOMER","ACCOUNT_TYPE_BUSINESS","company","trim","length","validPasswordField","_this$customer$passwo","password","languageRepository","languageCriteria","_this$customer","criteria","setLimit","salesChannelId","addFilter","equals","languageId","_this$customer2","loadLanguage","salutationRepository","salutationCriteria","salutationFilter","Filter","watch","_this","systemConfigApiService","getValues","then","response","boundSalesChannelId","value","addressCompanyError","State","dispatch","expression","concat","id","created","createdComponent","methods","_this2","_asyncToGenerator","_regeneratorRuntime","mark","_callee","defaultSalutationId","addressRepository","wrap","_context","prev","next","getDefaultSalutation","sent","commit","addresses","entity","source","ACCOUNT_TYPE_PRIVATE","add","defaultBillingAddressId","defaultShippingAddressId","vatIds","salutationId","stop","saveFinish","$router","push","name","params","validateEmail","_this3","_this$customer3","email","customerValidationService","checkCustomerEmail","emailIsValid","catch","exception","error","errors","Promise","resolve","isValid","onSave","_this4","_callee2","hasError","res","numberRangePromise","context","_context2","customerNumber","numberRangeService","reserve","number","createErrorMessageForCompanyField","createNotificationError","message","$tc","abrupt","Context","api","save","onChangeSalesChannel","_this5","code","getDefaultRegistrationConfig","_this6","_this7","_callee3","_context3","searchIds","_this8","_callee4","_res$data","_context4","Object","freeze"],"mappings":"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","file":"static/js/fce18c38ae3bc7e8e2f7.js","sourcesContent":["import template from './sw-customer-create.html.twig';\nimport CUSTOMER from '../../constant/sw-customer.constant';\n\n/**\n * @package checkout\n */\n\nconst { mapPropertyErrors } = Shopware.Component.getComponentHelper();\nconst { ShopwareError } = Shopware.Classes;\nconst { Mixin } = Shopware;\nconst { Criteria } = Shopware.Data;\n\n// eslint-disable-next-line sw-deprecation-rules/private-feature-declarations\nexport default {\n    template,\n\n    inject: [\n        'repositoryFactory',\n        'numberRangeService',\n        'systemConfigApiService',\n        'customerValidationService',\n    ],\n\n    mixins: [\n        Mixin.getByName('notification'),\n    ],\n\n    data() {\n        return {\n            customer: null,\n            address: null,\n            customerNumberPreview: '',\n            isSaveSuccessful: false,\n            /**\n             * @deprecated tag:v6.6.0 - salesChannels Will be removed due to unused\n             * */\n            salesChannels: null,\n            isLoading: false,\n            /**\n             * @deprecated tag:v6.6.0 - errorEmailCustomer Will be removed due to unused\n            * */\n            errorEmailCustomer: null,\n            /**\n             * @deprecated tag:v6.6.0 - defaultMinPasswordLength will be removed due to unused\n             * */\n            defaultMinPasswordLength: null,\n        };\n    },\n\n    computed: {\n        ...mapPropertyErrors('address', [\n            'company',\n        ]),\n\n        customerRepository() {\n            return this.repositoryFactory.create('customer');\n        },\n\n        validCompanyField() {\n            return this.customer.accountType === CUSTOMER.ACCOUNT_TYPE_BUSINESS ?\n                this.address.company?.trim().length : true;\n        },\n\n        /**\n         * @deprecated tag:v6.6.0 - validPasswordField will be removed due to unused\n         * */\n        validPasswordField() {\n            return this.customer.password?.trim().length >= this.defaultMinPasswordLength;\n        },\n\n        languageRepository() {\n            return this.repositoryFactory.create('language');\n        },\n\n        languageCriteria() {\n            const criteria = new Criteria();\n            criteria.setLimit(1);\n\n            if (this.customer?.salesChannelId) {\n                criteria.addFilter(\n                    Criteria.equals('salesChannelDefaultAssignments.id', this.customer.salesChannelId),\n                );\n            }\n\n            return criteria;\n        },\n\n        languageId() {\n            return this.loadLanguage(this.customer?.salesChannelId);\n        },\n\n        salutationRepository() {\n            return this.repositoryFactory.create('salutation');\n        },\n\n        salutationCriteria() {\n            const criteria = new Criteria(1, 1);\n\n            criteria.addFilter(Criteria.equals('salutationKey', 'not_specified'));\n\n            return criteria;\n        },\n\n        salutationFilter() {\n            return Shopware.Filter.getByName('salutation');\n        },\n    },\n\n    watch: {\n        'customer.salesChannelId'(salesChannelId) {\n            this.systemConfigApiService\n                .getValues('core.systemWideLoginRegistration').then(response => {\n                    if (response['core.systemWideLoginRegistration.isCustomerBoundToSalesChannel']) {\n                        this.customer.boundSalesChannelId = salesChannelId;\n                    }\n                });\n        },\n\n        'customer.accountType'(value) {\n            if (value === CUSTOMER.ACCOUNT_TYPE_BUSINESS || !this.addressCompanyError) {\n                return;\n            }\n\n            Shopware.State.dispatch(\n                'error/removeApiError',\n                {\n                    expression: `customer_address.${this.address.id}.company`,\n                },\n            );\n        },\n    },\n\n    created() {\n        this.createdComponent();\n    },\n\n    methods: {\n        async createdComponent() {\n            const defaultSalutationId = await this.getDefaultSalutation();\n\n            Shopware.State.commit('context/resetLanguageToDefault');\n            this.customer = this.customerRepository.create();\n\n            const addressRepository = this.repositoryFactory.create(\n                this.customer.addresses.entity,\n                this.customer.addresses.source,\n            );\n\n            this.customer.accountType = CUSTOMER.ACCOUNT_TYPE_PRIVATE;\n            this.address = addressRepository.create();\n\n            this.customer.addresses.add(this.address);\n            this.customer.defaultBillingAddressId = this.address.id;\n            this.customer.defaultShippingAddressId = this.address.id;\n            this.customer.password = '';\n            this.customer.vatIds = [];\n            this.customer.salutationId = defaultSalutationId;\n            this.address.salutationId = defaultSalutationId;\n        },\n\n        saveFinish() {\n            this.isSaveSuccessful = false;\n            this.$router.push({ name: 'sw.customer.detail', params: { id: this.customer.id } });\n        },\n\n        validateEmail() {\n            const { id, email, boundSalesChannelId } = this.customer;\n\n            if (!email) {\n                return Promise.resolve({ isValid: true });\n            }\n\n            return this.customerValidationService.checkCustomerEmail({\n                id,\n                email,\n                boundSalesChannelId,\n            }).then((emailIsValid) => {\n                return emailIsValid;\n            }).catch((exception) => {\n                Shopware.State.dispatch(\n                    'error/addApiError',\n                    {\n                        expression: `customer.${this.customer.id}.email`,\n                        error: new ShopwareError(exception.response.data.errors[0]),\n                    },\n                );\n            });\n        },\n\n        async onSave() {\n            this.isLoading = true;\n\n            let hasError = false;\n            const res = await this.validateEmail();\n            if (!res || !res.isValid) {\n                hasError = true;\n            }\n\n            this.isSaveSuccessful = false;\n            let numberRangePromise = Promise.resolve();\n            if (this.customerNumberPreview === this.customer.customerNumber) {\n                numberRangePromise = this.numberRangeService\n                    .reserve('customer', this.customer.salesChannelId).then((response) => {\n                        this.customerNumberPreview = 'reserved';\n                        this.customer.customerNumber = response.number;\n                    });\n            }\n\n            if (!this.validCompanyField) {\n                this.createErrorMessageForCompanyField();\n                hasError = true;\n            }\n\n            if (hasError) {\n                this.createNotificationError({\n                    message: this.$tc('sw-customer.detail.messageSaveError'),\n                });\n                this.isLoading = false;\n                return false;\n            }\n\n            const languageId = await this.languageId;\n            const context = { ...Shopware.Context.api, ...{ languageId } };\n\n            return numberRangePromise.then(() => {\n                return this.customerRepository.save(this.customer, context).then((response) => {\n                    this.isLoading = false;\n                    this.isSaveSuccessful = true;\n\n                    return response;\n                }).catch(() => {\n                    this.createNotificationError({\n                        message: this.$tc('sw-customer.detail.messageSaveError'),\n                    });\n                    this.isLoading = false;\n                });\n            });\n        },\n\n        onChangeSalesChannel(salesChannelId) {\n            this.customer.salesChannelId = salesChannelId;\n            this.numberRangeService.reserve('customer', salesChannelId, true).then((response) => {\n                this.customerNumberPreview = response.number;\n                this.customer.customerNumber = response.number;\n            });\n        },\n\n        createErrorMessageForCompanyField() {\n            this.isLoading = false;\n            Shopware.State.dispatch('error/addApiError', {\n                expression: `customer_address.${this.address.id}.company`,\n                error: new Shopware.Classes.ShopwareError(\n                    {\n                        code: 'c1051bb4-d103-4f74-8988-acbcafc7fdc3',\n                    },\n                ),\n            });\n\n            this.createNotificationError({\n                message: this.$tc('sw-customer.error.COMPANY_IS_REQUIRED'),\n            });\n        },\n\n        /**\n         * @deprecated tag:v6.6.0 - getDefaultRegistrationConfig will be removed due to unused\n         * */\n        getDefaultRegistrationConfig() {\n            this.systemConfigApiService.getValues('core.register').then((response) => {\n                this.defaultMinPasswordLength = response['core.register.minPasswordLength'];\n            });\n        },\n\n        async loadLanguage(salesChannelId) {\n            const languageId = Shopware.Context.api.languageId;\n\n            if (!salesChannelId) {\n                return languageId;\n            }\n\n            const res = await this.languageRepository.searchIds(this.languageCriteria);\n\n            if (!res?.data) {\n                return languageId;\n            }\n\n            return res.data[0];\n        },\n\n        async getDefaultSalutation() {\n            const res = await this.salutationRepository.searchIds(this.salutationCriteria);\n\n            return res.data?.[0];\n        },\n    },\n};\n","export default \"{%  block sw_customer_create %}\\n<sw-page class=\\\"sw-customer-create\\\">\\n\\n    \\n    {% block sw_customer_create_header %}\\n    <template #smart-bar-header>\\n        <h2>{{ salutationFilter(customer, $tc('sw-customer.general.newCustomer')) }}</h2>\\n    </template>\\n    {% endblock %}\\n\\n    \\n    {% block sw_customer_create_language_switch %}\\n    <template #language-switch>\\n        <sw-language-switch\\n            v-tooltip=\\\"{ message: $tc('sw-customer.general.tooltipLanguageSwitch') }\\\"\\n            disabled\\n        />\\n    </template>\\n    {% endblock %}\\n\\n    \\n    {% block sw_customer_create_actions %}\\n    <template #smart-bar-actions>\\n        <sw-button-process\\n            class=\\\"sw-customer-create__save-action\\\"\\n            :is-loading=\\\"isLoading\\\"\\n            :disabled=\\\"isLoading\\\"\\n            :process-success=\\\"isSaveSuccessful\\\"\\n            variant=\\\"primary\\\"\\n            {% if VUE3 %}\\n            @update:process-success=\\\"saveFinish\\\"\\n            {% else %}\\n            @process-finish=\\\"saveFinish\\\"\\n            {% endif %}\\n            @click.prevent=\\\"onSave\\\"\\n        >\\n            {{ $tc('sw-customer.detail.buttonSave') }}\\n        </sw-button-process>\\n    </template>\\n    {% endblock %}\\n\\n    \\n    {% block sw_customer_create_content %}\\n    <template #content>\\n        <sw-card-view>\\n            \\n            {% block sw_customer_create_base_form %}\\n            <sw-card\\n                :title=\\\"$tc('sw-customer.detailBase.labelAccountCard')\\\"\\n                position-identifier=\\\"sw-customer-create-base-form\\\"\\n            >\\n                <sw-customer-base-form\\n                    v-if=\\\"customer\\\"\\n                    :is-loading=\\\"isLoading\\\"\\n                    :customer=\\\"customer\\\"\\n                    @sales-channel-change=\\\"onChangeSalesChannel\\\"\\n                />\\n            </sw-card>\\n            {% endblock %}\\n\\n            \\n            {% block sw_customer_create_adress_form %}\\n            <sw-card\\n                :title=\\\"$tc('sw-customer.detailBase.labelAddressesCard')\\\"\\n                position-identifier=\\\"sw-customer-create-address-form\\\"\\n            >\\n                <sw-customer-address-form\\n                    v-if=\\\"customer\\\"\\n                    v-bind=\\\"{ customer, address }\\\"\\n                />\\n            </sw-card>\\n            {% endblock %}\\n        </sw-card-view>\\n    </template>\\n    {% endblock %}\\n</sw-page>\\n{% endblock %}\\n\";","/**\n * @package checkout\n */\n\nconst ACCOUNT_TYPE_PRIVATE = 'private';\nconst ACCOUNT_TYPE_BUSINESS = 'business';\n\n// eslint-disable-next-line sw-deprecation-rules/private-feature-declarations\nexport default Object.freeze({\n    ACCOUNT_TYPE_PRIVATE,\n    ACCOUNT_TYPE_BUSINESS,\n});\n"],"sourceRoot":""}