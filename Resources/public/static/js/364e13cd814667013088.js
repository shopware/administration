(window.webpackJsonpAdministration=window.webpackJsonpAdministration||[]).push([[13297],{103051:function(){},413297:function(s,e,i){"use strict";i.r(e),i.d(e,{default:function(){return r}}),i(820032);var r={template:'\n{% block sw_users_permissions_permissions_grid %}\n<sw-card\n    class="sw-users-permissions-permissions-grid"\n    position-identifier="sw-users-permissions-permissions-grid"\n    :title="$tc(\'sw-users-permissions.roles.grid.title\')"\n>\n    <div class="sw-users-permissions-permissions-grid__grid">\n        \n        {% block sw_users_permissions_permissions_grid_header %}\n        <div class="sw-users-permissions-permissions-grid__entry sw-users-permissions-permissions-grid__entry-header">\n            \n            {% block sw_users_permissions_permissions_grid_header_title %}\n            <div class="sw-users-permissions-permissions-grid__title">\n                \n                {% block sw_users_permissions_permissions_grid_header_title_content %}\n                {% endblock %}\n            </div>\n            {% endblock %}\n\n            \n            {% block sw_users_permissions_permissions_grid_header_roles %}\n            <div\n                v-for="role in roles"\n                :key="role"\n                class="sw-users-permissions-permissions-grid__checkbox-wrapper"\n            >\n                \n                {% block sw_users_permissions_permissions_grid_header_roles_name %}\n                {{ $tc(\'sw-privileges.roles.\' + role) }}\n                {% endblock %}\n            </div>\n            {% endblock %}\n\n            \n            {% block sw_users_permissions_permissions_grid_header_all_roles %}\n            <div class="sw-users-permissions-permissions-grid__all">\n                \n                {% block sw_users_permissions_permissions_grid_header_all_roles_name %}\n                {{ $tc(\'sw-privileges.roles.all\') }}\n                {% endblock %}\n            </div>\n            {% endblock %}\n        </div>\n        {% endblock %}\n\n        \n        {% block sw_users_permissions_permissions_grid_permissions %}\n        <template\n            v-for="permission in permissionsWithParents"\n            :key="permission.value"\n        >\n            <div\n                v-if="permission.type === \'parent\'"\n                :class="\'sw-users-permissions-permissions-grid__parent_\' + permission.value"\n                class="sw-users-permissions-permissions-grid__entry\n                                sw-users-permissions-permissions-grid__parent"\n            >\n                \n                {% block sw_users_permissions_permissions_grid_parent_title %}\n                <div class="sw-users-permissions-permissions-grid__title">\n                    \n                    {% block sw_users_permissions_permissions_grid_parent_title_content %}\n                    {{ $tc(\'sw-privileges.permissions.parents.\' + (permission.value || \'other\')) }}\n                    {% endblock %}\n                </div>\n                {% endblock %}\n\n                \n                {% block sw_users_permissions_permissions_grid_parent_roles %}\n                <div\n                    v-for="role in roles"\n                    :key="`${permission.value}-${role}`"\n                    :class="\'sw-users-permissions-permissions-grid__role_\' + role"\n                    class="sw-users-permissions-permissions-grid__checkbox-wrapper"\n                >\n                    \n                    {% block sw_users_permissions_permissions_grid_parent_roles_field %}\n                    <sw-checkbox-field\n                        v-if="parentRoleHasChildRoles(permission.value, role)"\n                        :value="areAllChildrenRolesSelected(permission.value, role)"\n                        :ghost-value="areSomeChildrenRolesSelected(permission.value, role)"\n                        :disabled="isParentRoleDisabled(permission.value, role) || disabled"\n                        @update:value="toggleAllChildrenWithRole(permission.value, role)"\n                    />\n                    {% endblock %}\n                </div>\n                {% endblock %}\n\n                \n                {% block sw_users_permissions_permissions_grid_parent_all_roles %}\n                <div class="sw-users-permissions-permissions-grid__all sw-users-permissions-permissions-grid__role_all">\n                    \n                    {% block sw_users_permissions_permissions_grid_parent_all_roles_field %}\n                    <sw-checkbox-field\n                        :value="areAllChildrenWithAllRolesSelected(permission.value)"\n                        :ghost-value="areSomeChildrenWithAllRolesSelected(permission.value)"\n                        :disabled="disabled"\n                        @update:value="toggleAllChildrenWithAllRoles(permission.value)"\n                    />\n                    {% endblock %}\n                </div>\n                {% endblock %}\n            </div>\n\n            <div\n                v-else\n                :key="`else-${permission.key}`"\n                :class="\'sw-users-permissions-permissions-grid__entry_\' + permission.key"\n                class="sw-users-permissions-permissions-grid__entry"\n            >\n                \n                {% block sw_users_permissions_permissions_grid_permissions_title %}\n                <div class="sw-users-permissions-permissions-grid__title">\n                    \n                    {% block sw_users_permissions_permissions_grid_permissions_title_content %}\n                    {{ $tc(\'sw-privileges.permissions.\' + permission.key + \'.label\') }}\n                    {% endblock %}\n                </div>\n                {% endblock %}\n\n                \n                {% block sw_users_permissions_permissions_grid_permissions_roles %}\n                <div\n                    v-for="role in roles"\n                    :key="`else-${permission.key}${role}`"\n                    :class="\'sw-users-permissions-permissions-grid__role_\' + role"\n                    class="sw-users-permissions-permissions-grid__checkbox-wrapper"\n                >\n                    \n                    {% block sw_users_permissions_permissions_grid_permissions_roles_field %}\n                    <sw-checkbox-field\n                        v-if="permission.roles[role]"\n                        v-tooltip="{\n                            message: $tc(\'sw-users-permissions.roles.grid.disabledCheckboxMessage\'),\n                            disabled: !isPermissionDisabled(permission.key, role) || disabled,\n                            showOnDisabledElements: false\n                        }"\n                        :value="isPermissionSelected(permission.key, role)"\n                        :disabled="isPermissionDisabled(permission.key, role) || disabled"\n                        @update:value="changePermission(permission.key, role)"\n                    />\n                    {% endblock %}\n                </div>\n                {% endblock %}\n\n                \n                {% block sw_users_permissions_permissions_grid_permissions_all_roles %}\n                <div class="sw-users-permissions-permissions-grid__all sw-users-permissions-permissions-grid__role_all">\n                    \n                    {% block sw_users_permissions_permissions_grid_permissions_all_roles_field %}\n                    <sw-checkbox-field\n                        v-if="Object.keys(permission.roles).length > 0"\n                        :value="allPermissionsForKeySelected(permission.key)"\n                        :disabled="disabled"\n                        @update:value="changeAllPermissionsForKey(permission.key)"\n                    />\n                    {% endblock %}\n                </div>\n                {% endblock %}\n            </div>\n        </template>\n        {% endblock %}\n    </div>\n</sw-card>\n{% endblock %}\n',compatConfig:Shopware.compatConfig,inject:["privileges"],props:{role:{type:Object,required:!0},disabled:{type:Boolean,required:!1,default:!1}},computed:{permissionsWithParents(){let s=[];return this.parents.forEach(e=>{s.push({type:"parent",value:e}),this.getPermissionsForParent(e).forEach(e=>{s.push(e)})}),s},permissions(){return this.privileges.getPrivilegesMappings().filter(s=>"permissions"===s.category).sort((s,e)=>{let i=this.$tc(`sw-privileges.permissions.${s.key}.label`),r=this.$tc(`sw-privileges.permissions.${e.key}.label`);return i.localeCompare(r)})},parents(){return this.permissions.reduce((s,e)=>s.includes(e.parent)?s:[...s,e.parent],[]).sort((s,e)=>{let i=this.$tc(`sw-privileges.permissions.parents.${s||"other"}`),r=this.$tc(`sw-privileges.permissions.parents.${e||"other"}`);return i.localeCompare(r)})},usedDependencies(){let s=new Set;return this.role.privileges.forEach(e=>{let i=this.privileges.getPrivilegeRole(e);i&&i.dependencies.forEach(e=>{s.add(e)})}),[...s]},roles(){return["viewer","editor","creator","deleter"]}},methods:{changePermission(s,e){let i=`${s}.${e}`;this.role.privileges.includes(i)?this.removePermission(i):this.addPermission(i)},addPermission(s){this.role.privileges.includes(s)||(this.role.privileges.push(s),this.addDependenciesForRole(s))},addDependenciesForRole(s){let e=this.privileges.getPrivilegeRole(s);e&&e.dependencies.forEach(s=>{this.addPermission(s)})},removePermission(s){this.role.privileges=this.role.privileges.filter(e=>e!==s)},isPermissionSelected(s,e){return this.role.privileges.some(i=>i===`${s}.${e}`)},isPermissionDisabled(s,e){return this.usedDependencies.includes(`${s}.${e}`)},changeAllPermissionsForKey(s){let e=this.allPermissionsForKeySelected(s);this.roles.forEach(i=>{let r=`${s}.${i}`;this.privileges.existsPrivilege(r)&&(e?this.removePermission(r):this.addPermission(r))})},allPermissionsForKeySelected(s){return!this.roles.some(e=>!!this.privileges.existsPrivilege(`${s}.${e}`)&&!this.isPermissionSelected(s,e))},getPermissionsForParent(s){return this.permissions.filter(e=>e.parent===s)},areAllChildrenRolesSelected(s,e){return!this.getPermissionsForParent(s).some(s=>void 0!==s.roles[e]&&!this.isPermissionSelected(s.key,e))},areAllChildrenWithAllRolesSelected(s){return this.roles.every(e=>this.areAllChildrenRolesSelected(s,e))},areSomeChildrenRolesSelected(s,e,i=!0){return this.getPermissionsForParent(s).some(s=>!(i||this.privileges.existsPrivilege(`${s.key}.${e}`))||this.isPermissionSelected(s.key,e))},areSomeChildrenWithAllRolesSelected(s){return this.roles.every(e=>this.areSomeChildrenRolesSelected(s,e,!1))},isParentRoleDisabled(s,e){return this.getPermissionsForParent(s).every(s=>this.isPermissionDisabled(s.key,e))},toggleAllChildrenWithRole(s,e){let i=this.getPermissionsForParent(s),r=this.areAllChildrenRolesSelected(s,e);i.forEach(s=>{if(!s.roles[e])return;let i=`${s.key}.${e}`;this.isPermissionDisabled(s.key,e)||(r?this.removePermission(i):this.addPermission(i))})},toggleAllChildrenWithAllRoles(s){let e=this.getPermissionsForParent(s),i=this.areAllChildrenWithAllRolesSelected(s);return this.roles.forEach(s=>{e.forEach(e=>{let r=`${e.key}.${s}`;i?this.removePermission(r):this.addPermission(r)})})},parentRoleHasChildRoles(s,e){return this.getPermissionsForParent(s).some(s=>void 0!==s.roles[e])}}}},820032:function(s,e,i){var r=i(103051);r.__esModule&&(r=r.default),"string"==typeof r&&(r=[[s.id,r,""]]),r.locals&&(s.exports=r.locals),i(745346).Z("4d81d9af",r,!0,{})}}]);