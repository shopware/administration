{"version":3,"sources":["webpack:///./src/module/sw-settings-rule/component/sw-settings-rule-add-assignment-modal/index.js","webpack:///./src/module/sw-settings-rule/component/sw-settings-rule-add-assignment-modal/sw-settings-rule-add-assignment-modal.html.twig","webpack:///./src/module/sw-settings-rule/component/sw-settings-rule-add-assignment-modal/sw-settings-rule-assignment-modal.scss"],"names":["Context","Shopware","Criteria","Data","template","inject","props","rule","type","Object","required","entityContext","data","repository","entities","isLoading","selection","criteriaLimit","currentLanguageId","api","languageId","computed","modalSize","this","entityName","created","createdComponent","methods","EntityCollection","loadEntities","_this","criteria","search","then","result","onCloseAddModal","$emit","onAdd","addContext","insertEntities","updateEntities","_this2","repositoryFactory","create","entity","values","forEach","item","column","id","sync","_this3","inserts","ruleId","push","onSelect","content","__esModule","default","module","i","locals","exports","add"],"mappings":"8IAIQA,G,UAAYC,SAAZD,SACAE,EAAaD,SAASE,KAAtBD,SAMO,WACXE,SCZW,2oDDcXC,OAAQ,CACJ,qBAGJC,MAAO,CACHC,KAAM,CACFC,KAAMC,OACNC,UAAU,GAEdC,cAAe,CACXH,KAAMC,OACNC,UAAU,IAIlBE,KAAI,WACA,MAAO,CACHC,WAAY,KACZC,SAAU,KACVC,WAAW,EACXC,UAAW,GACXC,cAAe,GACfC,kBAAmBjB,SAASD,QAAQmB,IAAIC,aAIhDC,SAAU,CACNC,UAAS,WACL,MAAyC,aAAlCC,KAAKZ,cAAca,WAA4B,UAAY,UAI1EC,QAAO,WACHF,KAAKG,oBAGTC,QAAS,CACLD,iBAAgB,WAC0B,aAAlCH,KAAKZ,cAAca,WACnBD,KAAKT,SAAW,IAAIc,IAAiB,YAAa,WAAY5B,EAAQmB,MAEtEI,KAAKV,WAAaU,KAAKZ,cAAcE,WACrCU,KAAKM,iBAIbA,aAAY,WAAI,IAADC,EAAA,KACLX,EAAMI,KAAKZ,cAAcQ,IAAMI,KAAKZ,cAAcQ,MAAQnB,EAAQmB,IAClEY,EAAW,IAAI7B,EAAS,EAAGqB,KAAKN,eAEtCM,KAAKV,WAAWmB,OAAOD,EAAUZ,GAAKc,MAAK,SAACC,GACxCJ,EAAKhB,SAAWoB,EAChBJ,EAAKf,WAAY,MAIzBoB,gBAAe,WACXZ,KAAKa,MAAM,oBAGfC,MAAK,WAC0C,gBAAvCd,KAAKZ,cAAc2B,WAAW9B,KAKlCe,KAAKgB,iBAJDhB,KAAKiB,kBAObA,eAAc,WAAI,IAADC,EAAA,KACPtB,EAAMI,KAAKZ,cAAcQ,IAAMI,KAAKZ,cAAcQ,MAAQnB,EAAQmB,IAClEN,EAAaU,KAAKmB,kBAAkBC,OAAOpB,KAAKZ,cAAc2B,WAAWM,QAM/E,OAJAnC,OAAOoC,OAAOtB,KAAKP,WAAW8B,SAAQ,SAAAC,GAClCA,EAAKN,EAAK9B,cAAc2B,WAAWU,QAAUP,EAAKlC,KAAK0C,MAGpDpC,EAAWqC,KAAKzC,OAAOoC,OAAOtB,KAAKP,WAAYG,GAAKc,MAAK,kBAAMQ,EAAKL,MAAM,sBAGrFG,eAAc,WAAI,IAADY,EAAA,KACPhC,EAAMI,KAAKZ,cAAcQ,IAAMI,KAAKZ,cAAcQ,MAAQnB,EAAQmB,IAClEN,EAAaU,KAAKmB,kBAAkBC,OAAOpB,KAAKZ,cAAc2B,WAAWM,QAEzEQ,EAAU,GAQhB,OAPA3C,OAAOoC,OAAOtB,KAAKP,WAAW8B,SAAQ,SAAAC,GAClC,IAAMH,EAAS/B,EAAW8B,OAAOxB,GACjCyB,EAAOS,OAASF,EAAK5C,KAAK0C,GAC1BL,EAAOO,EAAKxC,cAAc2B,WAAWU,QAAUD,EAAKE,GACpDG,EAAQE,KAAKV,MAGV/B,EAAWqC,KAAKE,EAASjC,GAAKc,MAAK,kBAAMkB,EAAKf,MAAM,sBAG/DmB,SAAQ,SAACvC,GACLO,KAAKP,UAAYA,M,qBE3G7B,IAAIwC,EAAU,EAAQ,QACnBA,EAAQC,aAAYD,EAAUA,EAAQE,SACnB,iBAAZF,IAAsBA,EAAU,CAAC,CAACG,EAAOC,EAAIJ,EAAS,MAC7DA,EAAQK,SAAQF,EAAOG,QAAUN,EAAQK,SAG/BE,EADH,EAAQ,QAAwEL,SACzE,WAAYF,GAAS,EAAM,K","file":"static/js/4230305ed2405487d6e5.js","sourcesContent":["import EntityCollection from 'src/core/data/entity-collection.data';\nimport template from './sw-settings-rule-add-assignment-modal.html.twig';\nimport './sw-settings-rule-assignment-modal.scss';\n\nconst { Context } = Shopware;\nconst { Criteria } = Shopware.Data;\n\n/**\n * @private\n * @package services-settings\n */\nexport default {\n    template,\n\n    inject: [\n        'repositoryFactory',\n    ],\n\n    props: {\n        rule: {\n            type: Object,\n            required: true,\n        },\n        entityContext: {\n            type: Object,\n            required: true,\n        },\n    },\n\n    data() {\n        return {\n            repository: null,\n            entities: null,\n            isLoading: true,\n            selection: {},\n            criteriaLimit: 10,\n            currentLanguageId: Shopware.Context.api.languageId,\n        };\n    },\n\n    computed: {\n        modalSize() {\n            return this.entityContext.entityName === 'category' ? 'default' : 'large';\n        },\n    },\n\n    created() {\n        this.createdComponent();\n    },\n\n    methods: {\n        createdComponent() {\n            if (this.entityContext.entityName === 'category') {\n                this.entities = new EntityCollection('/category', 'category', Context.api);\n            } else {\n                this.repository = this.entityContext.repository;\n                this.loadEntities();\n            }\n        },\n\n        loadEntities() {\n            const api = this.entityContext.api ? this.entityContext.api() : Context.api;\n            const criteria = new Criteria(1, this.criteriaLimit);\n\n            this.repository.search(criteria, api).then((result) => {\n                this.entities = result;\n                this.isLoading = false;\n            });\n        },\n\n        onCloseAddModal() {\n            this.$emit('close-add-modal');\n        },\n\n        onAdd() {\n            if (this.entityContext.addContext.type === 'one-to-many') {\n                this.updateEntities();\n                return;\n            }\n\n            this.insertEntities();\n        },\n\n        updateEntities() {\n            const api = this.entityContext.api ? this.entityContext.api() : Context.api;\n            const repository = this.repositoryFactory.create(this.entityContext.addContext.entity);\n\n            Object.values(this.selection).forEach(item => {\n                item[this.entityContext.addContext.column] = this.rule.id;\n            });\n\n            return repository.sync(Object.values(this.selection), api).then(() => this.$emit('entities-saved'));\n        },\n\n        insertEntities() {\n            const api = this.entityContext.api ? this.entityContext.api() : Context.api;\n            const repository = this.repositoryFactory.create(this.entityContext.addContext.entity);\n\n            const inserts = [];\n            Object.values(this.selection).forEach(item => {\n                const entity = repository.create(api);\n                entity.ruleId = this.rule.id;\n                entity[this.entityContext.addContext.column] = item.id;\n                inserts.push(entity);\n            });\n\n            return repository.sync(inserts, api).then(() => this.$emit('entities-saved'));\n        },\n\n        onSelect(selection) {\n            this.selection = selection;\n        },\n    },\n};\n","export default \"\\n{% block sw_settings_rule_add_assignment_modal %}\\n<sw-modal\\n    class=\\\"sw-settings-rule-add-assignment-modal\\\"\\n    :title=\\\"$tc(entityContext.label)\\\"\\n    :variant=\\\"modalSize\\\"\\n    @modal-close=\\\"onCloseAddModal\\\"\\n>\\n\\n    \\n    {% block sw_settings_rule_add_assignment_modal_listing %}\\n    <sw-settings-rule-add-assignment-listing\\n        v-if=\\\"entityContext.entityName !== 'category'\\\"\\n        class=\\\"sw-settings-rule-detail-assignments__entity-listing\\\"\\n        :entity-context=\\\"entityContext\\\"\\n        :rule-id=\\\"rule.id\\\"\\n        @select-item=\\\"onSelect\\\"\\n    />\\n    {% endblock %}\\n\\n    \\n    {% block sw_settings_rule_add_assignment_modal_category_tree %}\\n    <sw-settings-rule-category-tree\\n        v-else\\n        :rule=\\\"rule\\\"\\n        :association=\\\"entityContext.addContext.association\\\"\\n        :categories-collection=\\\"entities\\\"\\n        placeholder=\\\"Add categories\\\"\\n        @on-selection=\\\"onSelect\\\"\\n    />\\n    {% endblock %}\\n\\n    \\n    {% block sw_settings_rule_add_assignment_modal_footer %}\\n    <template #modal-footer>\\n\\n        \\n        {% block sw_settings_rule_add_assignment_modal_cancel %}\\n        <sw-button\\n            size=\\\"small\\\"\\n            @click=\\\"onCloseAddModal\\\"\\n        >\\n            {{ $tc('global.default.cancel') }}\\n        </sw-button>\\n        {% endblock %}\\n\\n        \\n        {% block sw_settings_rule_add_assignment_modal_confirm %}\\n        <sw-button\\n            size=\\\"small\\\"\\n            variant=\\\"primary\\\"\\n            @click=\\\"onAdd\\\"\\n        >\\n            {{ $tc('global.default.add') }}\\n        </sw-button>\\n        {% endblock %}\\n    </template>\\n    {% endblock %}\\n</sw-modal>\\n{% endblock %}\\n\";","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../../../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--15-1!../../../../../node_modules/css-loader/dist/cjs.js??ref--15-2!../../../../../node_modules/sass-loader/dist/cjs.js??ref--15-3!./sw-settings-rule-assignment-modal.scss\");\nif(content.__esModule) content = content.default;\nif(typeof content === 'string') content = [[module.id, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar add = require(\"!../../../../../node_modules/vue-style-loader/lib/addStylesClient.js\").default\nvar update = add(\"eb7a73c4\", content, true, {});"],"sourceRoot":""}