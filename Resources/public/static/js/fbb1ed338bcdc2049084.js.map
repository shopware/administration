{"version":3,"sources":["webpack:///./src/module/sw-custom-entity/page/sw-generic-custom-entity-list/index.ts","webpack:///./src/module/sw-custom-entity/page/sw-generic-custom-entity-list/sw-generic-custom-entity-list.html.twig"],"names":["Criteria","Shopware","Data","types","Utils","Component","wrapComponentConfig","template","inject","data","customEntityInstances","page","limit","total","term","sortBy","sortDirection","naturalSorting","isLoading","created","this","createdComponent","computed","customEntityName","_this$customEntityDef","entityName","$route","params","customEntityDefinition","customEntityDefinitionService","getDefinitionByName","entity","_this$customEntityDef2","customEntityRepository","repositoryFactory","create","adminConfig","_this$customEntityDef3","flags","entityAccentColor","_this$adminConfig","color","columnConfig","_this","listing","columns","map","column","snippetKey","concat","ref","label","$tc","property","routerLink","visible","hidden","customEntityCriteria","criteria","setTerm","addSorting","field","order","emptyStateTitle","dynamicSnippetKey","$te","emptyStateSubline","assetFilter","Filter","getByName","watch","isEmpty","query","updateRoute","parseRoute","getList","methods","_this$adminConfig$lis","_this$adminConfig2","_this$adminConfig2$li","_this$adminConfig2$li2","_this$adminConfig2$li3","_this$adminConfig3","meta","$module","icon","_this2","_asyncToGenerator","_regeneratorRuntime","mark","_callee","_customEntityInstance","wrap","_context","prev","next","abrupt","search","sent","stop","onChangeLanguage","languageId","State","commit","parseSortDirection","direction","routeData","parseInt","updates","$router","replace","toString","onSearch","onColumnSort","_ref","dataIndex","onPageChange","_ref2","onUpdateRecords","entities","_entities$total"],"mappings":"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","file":"static/js/fbb1ed338bcdc2049084.js","sourcesContent":["import type { AdminUiDefinition, CustomEntityDefinition } from 'src/app/service/custom-entity-definition.service';\nimport type EntityCollection from 'src/core/data/entity-collection.data';\nimport type CriteriaType from 'src/core/data/criteria.data';\nimport type Repository from 'src/core/data/repository.data';\n\nimport template from './sw-generic-custom-entity-list.html.twig';\n\nconst { Criteria } = Shopware.Data;\nconst types = Shopware.Utils.types;\n\ninterface EntityListingColumnConfig {\n    label: string,\n    property: string,\n    routerLink: string,\n    visible: boolean,\n}\n\ninterface ColumnSortEvent {\n    dataIndex: string,\n    naturalSorting: boolean\n}\n\ninterface RouteUpdateOptions {\n    limit?: number,\n    page?: number,\n    term?: string,\n    sortBy?: string,\n    sortDirection?: string,\n    naturalSorting?: boolean\n}\n\ntype SortDirectionOptions = 'ASC' | 'DESC'\n\ninterface RouteParseOptions {\n    limit?: string,\n    page?: string,\n    term?: string,\n    sortBy?: string,\n    sortDirection?: SortDirectionOptions,\n    naturalSorting?: string\n}\n\n/**\n * @private\n * @package content\n */\nexport default Shopware.Component.wrapComponentConfig({\n    template,\n\n    inject: [\n        'customEntityDefinitionService',\n        'repositoryFactory',\n        'acl',\n    ],\n\n    data() {\n        return {\n            customEntityInstances: null as EntityCollection<'generic_custom_entity'>|null,\n            page: 1,\n            limit: 25,\n            total: 0,\n            term: '',\n            sortBy: '',\n            sortDirection: 'ASC' as SortDirectionOptions,\n            naturalSorting: false,\n            isLoading: false,\n        };\n    },\n\n    created() {\n        this.createdComponent();\n    },\n\n    computed: {\n        customEntityName(): string {\n            const entityName = this.$route.params.entityName;\n\n            const customEntityDefinition = this.customEntityDefinitionService.getDefinitionByName(entityName) ?? null;\n\n            if (!customEntityDefinition) {\n                return '';\n            }\n\n            return customEntityDefinition.entity;\n        },\n\n        customEntityDefinition(): Readonly<CustomEntityDefinition | null> {\n            return this.customEntityDefinitionService.getDefinitionByName(this.customEntityName) ?? null;\n        },\n\n        customEntityRepository(): Repository<'generic_custom_entity'> | null {\n            if (this.customEntityDefinition === null) {\n                return null;\n            }\n\n            return this.repositoryFactory\n                .create(this.customEntityDefinition.entity as 'generic_custom_entity');\n        },\n\n        adminConfig(): AdminUiDefinition | undefined {\n            return this.customEntityDefinition?.flags['admin-ui'];\n        },\n\n        entityAccentColor(): string | undefined {\n            return this.adminConfig?.color;\n        },\n\n        columnConfig(): EntityListingColumnConfig[] | [] {\n            if (!this.customEntityDefinition) {\n                return [];\n            }\n\n            const columns = this.customEntityDefinition.flags['admin-ui'].listing.columns;\n\n            return columns.map((column) => {\n                const snippetKey = `${this.customEntityName}.list.${column.ref}`;\n                return {\n                    label: this.$tc(snippetKey),\n                    property: column.ref,\n                    routerLink: 'sw.custom.entity.detail',\n                    visible: !column.hidden,\n                };\n            });\n        },\n\n        customEntityCriteria(): CriteriaType {\n            const criteria = new Criteria(this.page, this.limit);\n\n            criteria.setTerm(this.term);\n\n            criteria.addSorting({\n                field: this.sortBy,\n                naturalSorting: this.naturalSorting,\n                order: this.sortDirection,\n            });\n\n            return criteria;\n        },\n\n        emptyStateTitle(): string {\n            const dynamicSnippetKey = `${this.customEntityName}.list.emptyState`;\n            const fallbackSnippetKey = 'sw-custom-entity.general.emptyState';\n\n            return this.$te(dynamicSnippetKey) ? this.$tc(dynamicSnippetKey) : this.$tc(fallbackSnippetKey);\n        },\n\n        emptyStateSubline(): string {\n            const dynamicSnippetKey = `${this.customEntityName}.list.emptyStateSubline`;\n            const fallbackSnippetKey = 'sw-custom-entity.general.emptyStateSubline';\n\n            return this.$te(dynamicSnippetKey) ? this.$tc(dynamicSnippetKey) : this.$tc(fallbackSnippetKey);\n        },\n\n        assetFilter() {\n            return Shopware.Filter.getByName('asset');\n        },\n    },\n\n    watch: {\n        '$route'() {\n            if (types.isEmpty(this.$route.query)) {\n                this.updateRoute({});\n            }\n\n            this.parseRoute();\n\n            void this.getList();\n        },\n    },\n\n    methods: {\n        createdComponent(): void {\n            if (this.adminConfig !== null) {\n                this.sortBy = this.adminConfig?.listing?.columns?.[0]?.ref ?? '';\n                // eslint-disable-next-line max-len\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access,@typescript-eslint/no-non-null-assertion\n                this.$route.meta!.$module.icon = this.adminConfig?.icon;\n            }\n\n            this.parseRoute();\n            void this.getList();\n        },\n\n        async getList(): Promise<void> {\n            if (!this.customEntityRepository) {\n                return;\n            }\n\n            this.isLoading = true;\n            const customEntityInstances = await this.customEntityRepository.search(this.customEntityCriteria);\n            this.customEntityInstances = customEntityInstances;\n            this.total = customEntityInstances.total ?? 0;\n\n            this.isLoading = false;\n        },\n\n        onChangeLanguage(languageId: string): void {\n            Shopware.State.commit('context/setApiLanguageId', languageId);\n            void this.getList();\n        },\n\n        parseSortDirection(direction?: string): SortDirectionOptions {\n            if (direction === 'ASC' || direction === 'DESC') {\n                return direction;\n            }\n\n            return this.sortDirection;\n        },\n\n        parseRoute(): void {\n            const routeData = this.$route.query as RouteParseOptions;\n            this.page = routeData.page ? parseInt(routeData.page, 10) : this.page;\n            this.limit = routeData.limit ? parseInt(routeData.limit, 10) : this.limit;\n            this.term = routeData.term || this.term;\n            this.sortBy = routeData.sortBy || this.sortBy;\n            this.sortDirection = this.parseSortDirection(routeData.sortDirection);\n            this.naturalSorting = routeData.naturalSorting ? routeData.naturalSorting === 'true' : this.naturalSorting;\n        },\n\n        updateRoute(updates: RouteUpdateOptions): void {\n            void this.$router.replace({\n                query: {\n                    limit: (updates.limit || this.limit).toString(),\n                    page: (updates.page || this.page).toString(),\n                    term: updates.term || this.term,\n                    sortBy: updates.sortBy || this.sortBy,\n                    sortDirection: updates.sortDirection || this.sortDirection,\n                    naturalSorting: (updates.naturalSorting || this.naturalSorting) ? 'true' : 'false',\n                },\n            });\n        },\n\n        onSearch(term: string): void {\n            this.updateRoute({ term });\n        },\n\n        onColumnSort({ dataIndex, naturalSorting }: ColumnSortEvent): void {\n            if (this.sortBy === dataIndex) {\n                this.updateRoute({\n                    sortDirection: this.sortDirection === 'ASC' ? 'DESC' : 'ASC',\n                });\n            } else {\n                this.updateRoute({\n                    sortBy: dataIndex,\n                    sortDirection: 'ASC',\n                    naturalSorting: naturalSorting,\n                });\n            }\n        },\n\n        onPageChange({ page, limit }: { page: number, limit: number }): void {\n            this.updateRoute({ page, limit });\n        },\n\n        onUpdateRecords(entities: EntityCollection<'generic_custom_entity'>): void {\n            this.customEntityInstances = entities;\n            this.total = entities.total ?? 0;\n        },\n    },\n});\n","export default \"<sw-page\\n    :header-border-color=\\\"entityAccentColor\\\"\\n    class=\\\"sw-generic-custom-entity-list\\\"\\n>\\n    <template #search-bar>\\n        <sw-search-bar\\n            :key=\\\"customEntityName\\\"\\n            :initial-search-type=\\\"customEntityName\\\"\\n            :initial-search=\\\"term\\\"\\n            :entity-search-color=\\\"entityAccentColor\\\"\\n            @search=\\\"onSearch\\\"\\n        />\\n    </template>\\n\\n    <template #smart-bar-header>\\n        <h2 class=\\\"sw-generic-custom-entity-list__title\\\">\\n            {{ $tc(`${customEntityName}.moduleTitle`) }}\\n\\n            <span v-if=\\\"!isLoading\\\">\\n                ({{ total }})\\n            </span>\\n        </h2>\\n    </template>\\n\\n    <template #smart-bar-actions>\\n        <sw-button\\n            class=\\\"sw-generic-custom-entity-list__button-add\\\"\\n            :router-link=\\\"{ name: 'sw.custom.entity.create' }\\\"\\n            variant=\\\"primary\\\"\\n        >\\n            {{ $tc('global.default.add') }}\\n        </sw-button>\\n    </template>\\n\\n    <template #language-switch>\\n        <sw-language-switch @on-change=\\\"onChangeLanguage\\\" />\\n    </template>\\n\\n    <template #content>\\n        <div class=\\\"sw-generic-custom-entity-list__content\\\">\\n            <sw-entity-listing\\n                v-if=\\\"!isLoading && customEntityDefinition && customEntityInstances.length > 0\\\"\\n                class=\\\"sw-generic-custom-entity-list__content-list\\\"\\n                :repository=\\\"customEntityRepository\\\"\\n                :items=\\\"customEntityInstances\\\"\\n                :allow-inline-edit=\\\"false\\\"\\n                :allow-column-edit=\\\"false\\\"\\n                :columns=\\\"columnConfig\\\"\\n                :sort-by=\\\"sortBy\\\"\\n                :sort-direction=\\\"sortDirection\\\"\\n                :natural-sorting=\\\"naturalSorting\\\"\\n                :criteria-limit=\\\"limit\\\"\\n                :disable-data-fetching=\\\"true\\\"\\n                :is-loading=\\\"isLoading\\\"\\n                @column-sort=\\\"onColumnSort\\\"\\n                @page-change=\\\"onPageChange\\\"\\n                @update-records=\\\"onUpdateRecords\\\"\\n            />\\n\\n            <sw-empty-state\\n                v-else\\n                class=\\\"sw-generic-custom-entity-list__content-empty-state\\\"\\n                :title=\\\"emptyStateTitle\\\"\\n                :subline=\\\"emptyStateSubline\\\"\\n            >\\n                <template #icon>\\n                    <img\\n                        :src=\\\"assetFilter('/administration/static/img/empty-states/custom-entity-empty-state.svg')\\\"\\n                        :alt=\\\"emptyStateTitle\\\"\\n                    >\\n                </template>\\n            </sw-empty-state>\\n        </div>\\n    </template>\\n</sw-page>\\n\";"],"sourceRoot":""}