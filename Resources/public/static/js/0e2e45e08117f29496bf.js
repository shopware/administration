(window.webpackJsonpAdministration=window.webpackJsonpAdministration||[]).push([[81453],{876977:function(){},281453:function(t,e,s){"use strict";s.r(e),s.d(e,{default:function(){return d}}),s(188522);let{Component:n,State:r,Mixin:o,Context:i}=Shopware,{Criteria:a}=Shopware.Data;var d=n.wrapComponentConfig({template:'\n{% block sw_order_customer_grid %}\n<sw-card\n    class="sw-order-customer-grid"\n    position-identifier="sw-order-customer-grid"\n    :is-loading="isSwitchingCustomer"\n>\n    <template #toolbar>\n        \n        {% block sw_order_customer_grid_toolbar %}\n        <div class="sw-order-customer-grid__toolbar">\n            \n            {% block sw_order_customer_grid_search_input %}\n            <sw-card-filter\n                ref="customerFilter"\n                @sw-card-filter-term-change="onSearch"\n            />\n            {% endblock %}\n\n            \n            {% block sw_order_customer_grid_add_new_customer %}\n            <sw-button\n                class="sw-order-customer-grid__add-customer"\n                variant="ghost"\n                size="small"\n                @click="onShowNewCustomerModal"\n            >\n                {{ $tc(\'sw-order.initialModal.customerGrid.buttonAddNewCustomer\') }}\n            </sw-button>\n            {% endblock %}\n        </div>\n        {% endblock %}\n    </template>\n\n    <template #grid>\n        <div\n            class="sw-order-customer-grid__container"\n        >\n            \n            {% block sw_order_customer_grid_content %}\n            <sw-entity-listing\n                class="sw-order-customer-grid__content"\n                :show-selection="false"\n                :show-settings="false"\n                :items="customers"\n                :columns="customerColumns"\n                :repository="customerRepository"\n                :is-loading="isLoading"\n            >\n                \n                {% block sw_order_customer_grid_content_column_select %}\n                <template #column-select="{ item }">\n                    <div class="sw-field__radio-input">\n                        \n                        <input\n                            type="radio"\n                            :checked="isChecked(item)"\n                            @change="onCheckCustomer(item)"\n                        >\n                        <div class="sw-field__radio-state"></div>\n                    </div>\n                </template>\n                {% endblock %}\n\n                \n                {% block sw_order_customer_grid_content_grid_column_name %}\n                <template #column-firstName="{ item }">\n                    <router-link :to="{ name: \'sw.customer.detail\', params: { id: item.id } }">\n                        {{ item.firstName }} {{ item.lastName }}\n                    </router-link>\n                </template>\n                {% endblock %}\n\n                <template #column-salesChannel="{ item }">\n                    {{ item.salesChannel.translated.name }}\n                </template>\n\n                \n                {% block sw_settings_product_feature_set_list_grid_columns_actions %}\n                <template #actions="{ item }">\n                    <sw-context-menu-item\n                        target="_blank"\n                        rel="noopener"\n                        :router-link="{ name: \'sw.customer.detail\', params: { id: item.id } }"\n                    >\n                        {{ $tc(\'sw-order.initialModal.customerGrid.contextOpenButton\') }}\n                    </sw-context-menu-item>\n                </template>\n                {% endblock %}\n            </sw-entity-listing>\n            {% endblock %}\n\n            \n            {% block sw_order_customer_grid_empty_state %}\n            <sw-empty-state\n                v-if="showEmptyState"\n                class="sw-order-customer-grid__empty-state"\n                :show-description="false"\n                :title="emptyTitle"\n            >\n                \n                {% block sw_order_customer_grid_empty_state_icon %}\n                <template #icon>\n                    <img\n                        :src="assetFilter(\'/administration/static/img/empty-states/customer-empty-state.svg\')"\n                        :alt="$tc(\'sw-customer.list.messageEmpty\')"\n                    >\n                </template>\n                {% endblock %}\n            </sw-empty-state>\n            {% endblock %}\n        </div>\n\n        \n        {% block sw_order_customer_grid_new_customer_modal %}\n        <sw-order-new-customer-modal\n            v-if="showNewCustomerModal"\n            @on-select-existing-customer="onAddNewCustomer"\n            @close="showNewCustomerModal = false"\n        />\n        {% endblock %}\n    </template>\n</sw-card>\n{% endblock %}\n',inject:["repositoryFactory"],mixins:[o.getByName("listing"),o.getByName("notification")],data(){return{customers:null,isLoading:!1,isSwitchingCustomer:!1,showNewCustomerModal:!1,customer:null,disableRouteParams:!0}},computed:{customerData(){return r.get("swOrder").customer},customerRepository(){return this.repositoryFactory.create("customer")},customerCriteria(){let t=new a(this.page,this.limit);return t.addAssociation("salesChannel"),t.addSorting(a.sort("createdAt","DESC")),this.term&&t.setTerm(this.term),t},customerCriterion(){let t=new a(1,25);return t.addAssociation("addresses").addAssociation("group").addAssociation("salutation").addAssociation("salesChannel").addAssociation("defaultPaymentMethod").addAssociation("lastPaymentMethod").addAssociation("defaultBillingAddress.country").addAssociation("defaultBillingAddress.countryState").addAssociation("defaultBillingAddress.salutation").addAssociation("defaultShippingAddress.country").addAssociation("defaultShippingAddress.countryState").addAssociation("defaultShippingAddress.salutation").addAssociation("tags"),t},customerColumns(){return[{property:"select",label:""},{property:"firstName",dataIndex:"lastName,firstName",label:this.$tc("sw-order.initialModal.customerGrid.columnCustomerName"),primary:!0},{property:"customerNumber",label:this.$tc("sw-order.initialModal.customerGrid.columnCustomerNumber")},{property:"salesChannel",label:this.$tc("sw-order.initialModal.customerGrid.columnSalesChannel")},{property:"email",label:this.$tc("sw-order.initialModal.customerGrid.columnEmailAddress")}]},showEmptyState(){return!this.total&&!this.isLoading},emptyTitle(){return this.term?this.$tc("sw-order.initialModal.customerGrid.textEmptySearch",0,{name:this.term}):this.$tc("sw-customer.list.messageEmpty")},cart(){return r.get("swOrder").cart},assetFilter(){return Shopware.Filter.getByName("asset")}},mounted(){this.mountedComponent()},methods:{mountedComponent(){this.customerData&&(this.$refs.customerFilter.term=this.customerData?.customerNumber,this.onCheckCustomer(this.customerData))},getList(){return this.isLoading=!0,this.customerRepository.search(this.customerCriteria).then(t=>{this.customers=t,this.total=t.total}).finally(()=>{this.isLoading=!1})},onShowNewCustomerModal(){this.showNewCustomerModal=!0},isChecked(t){return t.id===this.customer?.id},onCheckCustomer(t){this.customer=t,this.handleSelectCustomer(t.id)},createCart(t){return r.dispatch("swOrder/createCart",{salesChannelId:t})},setCustomer(t){r.dispatch("swOrder/selectExistingCustomer",{customer:t})},async handleSelectCustomer(t){this.isSwitchingCustomer=!0;try{let e=await this.customerRepository.get(t,i.api,this.customerCriterion);this.cart.token||await this.createCart(e?.salesChannelId??""),this.customer=e,this.setCustomer(e),await this.updateCustomerContext()}catch{this.createNotificationError({message:this.$tc("sw-order.create.messageSwitchCustomerError")})}finally{this.isSwitchingCustomer=!1}},onAddNewCustomer(t){t&&(this.getList(),this.page=1,this.term="")},updateCustomerContext(){return r.dispatch("swOrder/updateCustomerContext",{customerId:this.customer?.id,salesChannelId:this.customer?.salesChannelId,contextToken:this.cart.token}).then(t=>{200===t.status&&this.getCart()})},getCart(){return r.dispatch("swOrder/getCart",{salesChannelId:this.customer?.salesChannelId,contextToken:this.cart.token})}}})},188522:function(t,e,s){var n=s(876977);n.__esModule&&(n=n.default),"string"==typeof n&&(n=[[t.id,n,""]]),n.locals&&(t.exports=n.locals),s(745346).Z("3a394944",n,!0,{})}}]);