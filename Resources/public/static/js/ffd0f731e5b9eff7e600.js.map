{"version":3,"sources":["webpack:///./src/module/sw-product/component/sw-product-media-form/index.js","webpack:///./src/module/sw-product/component/sw-product-media-form/sw-product-media-form.html.twig","webpack:///./src/module/sw-product/component/sw-product-media-form/sw-product-media-form.scss"],"names":["_Shopware","Shopware","Component","Mixin","mapGetters","getComponentHelper","template","inject","mixins","getByName","props","disabled","type","Boolean","required","default","isInherited","data","showCoverLabel","isMediaLoading","columnCount","columnWidth","computed","_objectSpread","product","state","State","get","this","parentProduct","mediaItems","productMedia","slice","placeholderCount","getPlaceholderCount","i","push","createPlaceholderMedia","cover","coverId","mediaId","media","find","id","isStoreLoading","isLoading","productMediaRepository","repositoryFactory","create","productMediaStore","getAssociation","gridAutoRows","concat","currentCoverID","_this","coverMedium","methods","onOpenMedia","$emit","updateColumnCount","_this2","$nextTick","cssColumns","window","getComputedStyle","$refs","grid","getPropertyValue","split","length","isPlaceholder","isCover","name","toString","buildProductMedia","position","successfulUpload","_ref","targetId","createMediaAssociation","add","productId","onUploadFailed","uploadTask","toRemove","remove","removeCover","removeFile","first","markMediaAsCover","moveItem","updateMediaItemPositions","onDropMedia","dragData","mediaItem","onMediaItemDragSort","dropData","validDrop","forEach","medium","index","content","__esModule","module","locals","exports"],"mappings":"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","file":"static/js/ffd0f731e5b9eff7e600.js","sourcesContent":["/*\n * @package inventory\n */\n\nimport template from './sw-product-media-form.html.twig';\nimport './sw-product-media-form.scss';\n\nconst { Component, Mixin } = Shopware;\nconst { mapGetters } = Component.getComponentHelper();\n\n// eslint-disable-next-line sw-deprecation-rules/private-feature-declarations\nexport default {\n    template,\n\n    inject: ['repositoryFactory', 'acl'],\n\n    mixins: [\n        Mixin.getByName('notification'),\n    ],\n\n    props: {\n        disabled: {\n            type: Boolean,\n            required: false,\n            default: false,\n        },\n\n        isInherited: {\n            type: Boolean,\n            required: false,\n            default: false,\n        },\n    },\n\n    data() {\n        return {\n            showCoverLabel: true,\n            isMediaLoading: false,\n            columnCount: 5,\n            columnWidth: 90,\n        };\n    },\n\n    computed: {\n        product() {\n            const state = Shopware.State.get('swProductDetail');\n\n            if (this.isInherited) {\n                return state.parentProduct;\n            }\n\n            return state.product;\n        },\n\n        mediaItems() {\n            const mediaItems = this.productMedia.slice();\n            const placeholderCount = this.getPlaceholderCount(this.columnCount);\n\n            if (placeholderCount === 0) {\n                return mediaItems;\n            }\n\n            for (let i = 0; i < placeholderCount; i += 1) {\n                mediaItems.push(this.createPlaceholderMedia(mediaItems));\n            }\n            return mediaItems;\n        },\n\n        cover() {\n            if (!this.product) {\n                return null;\n            }\n            const coverId = this.product.cover ? this.product.cover.mediaId : this.product.coverId;\n            return this.product.media.find(media => media.id === coverId);\n        },\n\n        ...mapGetters('swProductDetail', {\n            isStoreLoading: 'isLoading',\n        }),\n\n        isLoading() {\n            return this.isMediaLoading || this.isStoreLoading;\n        },\n\n        productMediaRepository() {\n            return this.repositoryFactory.create('product_media');\n        },\n\n        productMedia() {\n            if (!this.product) {\n                return [];\n            }\n            return this.product.media;\n        },\n\n        productMediaStore() {\n            return this.product.getAssociation('media');\n        },\n\n        gridAutoRows() {\n            return `grid-auto-rows: ${this.columnWidth}`;\n        },\n\n        currentCoverID() {\n            const coverMediaItem = this.productMedia.find(coverMedium => coverMedium.media.id === this.product.coverId);\n\n            return coverMediaItem.id;\n        },\n    },\n\n    methods: {\n        onOpenMedia() {\n            this.$emit('media-open');\n        },\n\n        updateColumnCount() {\n            this.$nextTick(() => {\n                if (this.isLoading) {\n                    return false;\n                }\n\n                const cssColumns = window.getComputedStyle(this.$refs.grid, null)\n                    .getPropertyValue('grid-template-columns')\n                    .split(' ');\n                this.columnCount = cssColumns.length;\n                this.columnWidth = cssColumns[0];\n\n                return true;\n            });\n        },\n\n        getPlaceholderCount(columnCount) {\n            if (this.productMedia.length + 3 < columnCount * 2) {\n                columnCount *= 2;\n            }\n\n            let placeholderCount = columnCount;\n\n            if (this.productMedia.length !== 0) {\n                placeholderCount = columnCount - ((this.productMedia.length) % columnCount);\n                if (placeholderCount === columnCount) {\n                    return 0;\n                }\n            }\n\n            return placeholderCount;\n        },\n\n        createPlaceholderMedia(mediaItems) {\n            return {\n                isPlaceholder: true,\n                isCover: mediaItems.length === 0,\n                media: {\n                    isPlaceholder: true,\n                    name: '',\n                },\n                mediaId: mediaItems.length.toString(),\n            };\n        },\n\n        buildProductMedia(mediaId) {\n            this.isLoading = true;\n\n            const productMedia = this.productMediaStore.create();\n            productMedia.mediaId = mediaId;\n\n            if (this.productMedia.length === 0) {\n                productMedia.position = 0;\n                this.product.cover = productMedia;\n                this.product.coverId = productMedia.id;\n            } else {\n                productMedia.position = this.productMedia.length + 1;\n            }\n            this.isLoading = false;\n\n            return productMedia;\n        },\n\n        successfulUpload({ targetId }) {\n            // on replace\n            if (this.product.media.find((productMedia) => productMedia.mediaId === targetId)) {\n                return;\n            }\n\n            const productMedia = this.createMediaAssociation(targetId);\n            this.product.media.add(productMedia);\n        },\n\n        createMediaAssociation(targetId) {\n            const productMedia = this.productMediaRepository.create();\n\n            productMedia.productId = this.product.id;\n            productMedia.mediaId = targetId;\n\n            if (this.product.media.length <= 0) {\n                productMedia.position = 0;\n                this.product.coverId = productMedia.id;\n            } else {\n                productMedia.position = this.product.media.length;\n            }\n            return productMedia;\n        },\n\n        onUploadFailed(uploadTask) {\n            const toRemove = this.product.media.find((productMedia) => {\n                return productMedia.mediaId === uploadTask.targetId;\n            });\n            if (toRemove) {\n                if (this.product.coverId === toRemove.id) {\n                    this.product.coverId = null;\n                }\n                this.product.media.remove(toRemove.id);\n            }\n            this.product.isLoading = false;\n        },\n\n        removeCover() {\n            this.product.cover = null;\n            this.product.coverId = null;\n        },\n\n        isCover(productMedia) {\n            const coverId = this.product.cover ? this.product.cover.id : this.product.coverId;\n\n            if (this.product.media.length === 0 || productMedia.isPlaceholder) {\n                return false;\n            }\n\n            return productMedia.id === coverId;\n        },\n\n        removeFile(productMedia) {\n            // remove cover id if mediaId matches\n            if (this.product.coverId === productMedia.id) {\n                this.product.cover = null;\n                this.product.coverId = null;\n            }\n\n            if (this.product.coverId === null && this.product.media.length > 0) {\n                this.product.coverId = this.product.media.first().id;\n            }\n\n            this.product.media.remove(productMedia.id);\n        },\n\n        markMediaAsCover(productMedia) {\n            this.product.cover = productMedia;\n            this.product.coverId = productMedia.id;\n\n            this.product.media.moveItem(productMedia.position, 0);\n            this.updateMediaItemPositions();\n        },\n\n        onDropMedia(dragData) {\n            if (this.product.media.find((productMedia) => productMedia.mediaId === dragData.id)) {\n                return;\n            }\n\n            const productMedia = this.createMediaAssociation(dragData.mediaItem.id);\n            if (this.product.media.length === 0) {\n                // set media item as cover\n                productMedia.position = 0;\n                this.product.cover = productMedia;\n                this.product.coverId = productMedia.id;\n            }\n\n            this.product.media.add(productMedia);\n        },\n\n        onMediaItemDragSort(dragData, dropData, validDrop) {\n            if (validDrop !== true\n                || (dragData.id === this.product.coverId && dragData.position === 0)\n                || (dropData.id === this.product.coverId && dropData.position === 0)) {\n                return;\n            }\n\n            this.product.media.moveItem(dragData.position, dropData.position);\n\n            this.updateMediaItemPositions();\n        },\n\n        updateMediaItemPositions() {\n            this.productMedia.forEach((medium, index) => {\n                medium.position = index;\n            });\n        },\n    },\n};\n","export default \"\\n{% block sw_product_media_form %}\\n<div\\n    class=\\\"sw-product-media-form\\\"\\n    :class=\\\"{ 'is--disabled': disabled }\\\"\\n>\\n    \\n    {% block sw_product_media_form_upload %}\\n    <sw-upload-listener\\n        v-if=\\\"!isLoading\\\"\\n        :upload-tag=\\\"product.id\\\"\\n        auto-upload\\n        @media-upload-finish=\\\"successfulUpload\\\"\\n        @media-upload-fail=\\\"onUploadFailed\\\"\\n    />\\n\\n    <sw-media-upload-v2\\n        v-if=\\\"!isLoading && acl.can('product.editor')\\\"\\n        variant=\\\"regular\\\"\\n        :upload-tag=\\\"product.id\\\"\\n        :scroll-target=\\\"$parent.$el\\\"\\n        :default-folder=\\\"product.getEntityName()\\\"\\n        @media-upload-sidebar-open=\\\"onOpenMedia\\\"\\n    />\\n    {% endblock %}\\n\\n    \\n    {% block sw_product_media_form_grid %}\\n    <div class=\\\"sw-product-media-form__previews\\\">\\n        <div class=\\\"sw-product-media-form__cover-container sw-product-media-form__column\\\">\\n            \\n            {% block sw_product_media_form_cover_preview %}\\n            <div\\n                v-if=\\\"product.cover || cover\\\"\\n                class=\\\"sw-product-media-form__preview-cover\\\"\\n            >\\n                <div class=\\\"preview-cover\\\">\\n                    \\n                    {% block sw_product_media_form_cover_image %}\\n                    <sw-media-preview-v2\\n                        class=\\\"sw-product-media-form__cover-image\\\"\\n                        :source=\\\"cover ? cover.mediaId : product.cover.mediaId\\\"\\n                    />\\n                    {% endblock %}\\n                    <span>{{ $tc('sw-product.mediaForm.coverSubline') }}</span>\\n                </div>\\n            </div>\\n            <div\\n                v-else\\n                class=\\\"sw-product-media-form__cover-image is--placeholder\\\"\\n            >\\n                {{ $tc('sw-product.mediaForm.coverSubline') }}\\n            </div>\\n            {% endblock %}\\n        </div>\\n\\n        <div\\n            v-if=\\\"!isLoading\\\"\\n            class=\\\"sw-product-media-form__grid sw-product-media-form__column\\\"\\n            :style=\\\"gridAutoRows\\\"\\n        >\\n            {%  block sw_product_media_form_grid_items %}\\n            <sw-product-image\\n                v-for=\\\"mediaItem in mediaItems\\\"\\n                :key=\\\"mediaItem.id\\\"\\n                v-draggable=\\\"{ dragGroup: 'product-media', data: mediaItem, onDragEnter: onMediaItemDragSort }\\\"\\n                v-droppable=\\\"{ dragGroup: 'product-media', data: mediaItem }\\\"\\n                :is-cover=\\\"isCover(mediaItem)\\\"\\n                :is-placeholder=\\\"mediaItem.isPlaceholder\\\"\\n                :media-id=\\\"mediaItem.mediaId\\\"\\n                :show-cover-label=\\\"showCoverLabel\\\"\\n                @sw-product-image-delete=\\\"removeFile(mediaItem)\\\"\\n                @sw-product-image-cover=\\\"markMediaAsCover(mediaItem)\\\"\\n            />\\n            {% endblock %}\\n        </div>\\n        <sw-loader v-else />\\n    </div>\\n    {% endblock %}\\n</div>\\n{% endblock %}\\n\";","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../../../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--15-1!../../../../../node_modules/css-loader/dist/cjs.js??ref--15-2!../../../../../node_modules/sass-loader/dist/cjs.js??ref--15-3!./sw-product-media-form.scss\");\nif(content.__esModule) content = content.default;\nif(typeof content === 'string') content = [[module.id, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar add = require(\"!../../../../../node_modules/vue-style-loader/lib/addStylesClient.js\").default\nvar update = add(\"1c4d2c2a\", content, true, {});"],"sourceRoot":""}