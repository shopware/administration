{"version":3,"sources":["webpack:///./src/module/sw-flow/component/modals/sw-flow-set-entity-custom-field-modal/index.js","webpack:///./src/module/sw-flow/component/modals/sw-flow-set-entity-custom-field-modal/sw-flow-set-entity-custom-field-modal.html.twig","webpack:///./src/module/sw-flow/component/modals/sw-flow-set-entity-custom-field-modal/sw-flow-set-entity-custom-field-modal.scss"],"names":["_Shopware","Shopware","Component","Mixin","Service","Criteria","Data","mapState","getComponentHelper","ShopwareError","Classes","template","inject","mixins","getByName","props","sequence","type","Object","required","action","String","default","data","customFieldSetId","customFieldId","customFieldValue","customFieldSetError","customFieldError","config","renderedFieldConfig","fieldOptions","fieldOptionSelected","customField","label","entity","entityError","entityOptions","computed","_objectSpread","customFieldRepository","this","repositoryFactory","create","customFieldCriteria","criteria","addFilter","equals","customFieldSetCriteria","convertToEntityTechnicalName","showFieldValue","defaultFieldOptions","value","concat","$tc","multipleFieldOptions","_toConsumableArray","labelProperty","State","get","currentLocale","watch","customFieldType","zIndex","getFieldOptions","created","createdComponent","methods","getEntityOptions","customFieldSetLabel","customFieldLabel","getCustomFieldRendered","_this","then","validateOptionSelectFieldLabel","catch","createNotificationError","message","finally","option","onEntityChange","onCustomFieldSetChange","id","customFieldSet","commit","customFieldSets","onCustomFieldChange","customFields","componentName","_this2","options","forEach","getInlineSnippet","onClose","$emit","onAddAction","_this$fieldOptions$fi","_this3","fieldError","optionLabel","find","field","length","code","fieldConfig","_this$triggerEvent$aw","triggerEvent","allowedAware","aware","getAvailableEntities","triggerActions","camelCaseText","replace","letter","toLowerCase","content","__esModule","module","i","locals","exports","add"],"mappings":"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","file":"static/js/2884645d329a3b87fcf0.js","sourcesContent":["import template from './sw-flow-set-entity-custom-field-modal.html.twig';\nimport './sw-flow-set-entity-custom-field-modal.scss';\n\nconst { Component, Mixin, Service } = Shopware;\nconst { Criteria } = Shopware.Data;\nconst { mapState } = Component.getComponentHelper();\nconst { ShopwareError } = Shopware.Classes;\n\n/**\n * @private\n * @package services-settings\n */\nexport default {\n    template,\n\n    inject: ['repositoryFactory'],\n\n    mixins: [\n        Mixin.getByName('sw-inline-snippet'),\n        Mixin.getByName('notification'),\n    ],\n\n    props: {\n        sequence: {\n            type: Object,\n            required: true,\n        },\n        action: {\n            type: String,\n            required: false,\n            default: null,\n        },\n    },\n\n    data() {\n        return {\n            customFieldSetId: null,\n            customFieldId: null,\n            customFieldValue: null,\n            customFieldSetError: null,\n            customFieldError: null,\n            config: {},\n            renderedFieldConfig: {},\n            fieldOptions: [],\n            fieldOptionSelected: 'upsert',\n            customField: {\n                config: {\n                    label: '',\n                },\n            },\n            entity: null,\n            entityError: null,\n            entityOptions: [],\n        };\n    },\n\n    computed: {\n        customFieldRepository() {\n            return this.repositoryFactory.create('custom_field');\n        },\n\n        customFieldCriteria() {\n            const criteria = new Criteria(1, 25);\n            criteria.addFilter(\n                Criteria.equals('customFieldSetId', this.customFieldSetId),\n            );\n\n            return criteria;\n        },\n\n        customFieldSetCriteria() {\n            if (!this.entity) {\n                return null;\n            }\n\n            const criteria = new Criteria(1, 25);\n            criteria.addFilter(\n                Criteria.equals('relations.entityName', this.convertToEntityTechnicalName(this.entity)),\n            );\n\n            return criteria;\n        },\n\n        showFieldValue() {\n            return this.customFieldId && this.fieldOptionSelected !== 'clear';\n        },\n\n        defaultFieldOptions() {\n            return [\n                {\n                    value: 'upsert',\n                    label: `${this.$tc('sw-flow.modals.setEntityCustomField.options.overwrite')}`,\n                },\n                {\n                    value: 'create',\n                    label: `${this.$tc('sw-flow.modals.setEntityCustomField.options.notOverwrite')}`,\n                },\n                {\n                    value: 'clear',\n                    label: `${this.$tc('sw-flow.modals.setEntityCustomField.options.clear')}`,\n                },\n            ];\n        },\n\n        multipleFieldOptions() {\n            return [\n                ...this.defaultFieldOptions,\n                {\n                    value: 'add',\n                    label: `${this.$tc('global.default.add')}`,\n                },\n                {\n                    value: 'remove',\n                    label: `${this.$tc('global.default.remove')}`,\n                },\n            ];\n        },\n\n        labelProperty() {\n            return `config.label.${Shopware.State.get('session').currentLocale}`;\n        },\n\n        ...mapState('swFlowState', ['triggerEvent', 'customFieldSets', 'customFields', 'triggerActions']),\n    },\n\n    watch: {\n        entity(value) {\n            if (value && this.entityError) {\n                this.entityError = null;\n            }\n        },\n\n        renderedFieldConfig(value) {\n            if (value.customFieldType === 'colorpicker' && !this.renderedFieldConfig.zIndex) {\n                this.renderedFieldConfig = {\n                    ...this.renderedFieldConfig,\n                    zIndex: 1001,\n                };\n            }\n            this.fieldOptions = this.getFieldOptions(this.renderedFieldConfig);\n        },\n\n        customFieldSetId(value) {\n            if (value && this.customFieldSetError) {\n                this.customFieldSetError = null;\n            }\n        },\n\n        customFieldId(value) {\n            if (value && this.customFieldError) {\n                this.customFieldError = null;\n            }\n        },\n    },\n\n    created() {\n        this.createdComponent();\n    },\n\n    methods: {\n        createdComponent() {\n            this.getEntityOptions();\n            if (!this.sequence.config) {\n                return;\n            }\n\n            this.entity = this.sequence.config.entity;\n            this.customFieldSetId = this.sequence.config.customFieldSetId;\n            this.customFieldSetLabel = this.sequence.config.customFieldSetLabel;\n            this.customFieldId = this.sequence.config.customFieldId;\n            this.customFieldLabel = this.sequence.config.customFieldLabel;\n            this.customFieldValue = this.sequence.config.customFieldValue;\n\n            this.getCustomFieldRendered();\n        },\n\n        getCustomFieldRendered() {\n            this.customFieldRepository.get(this.customFieldId).then((customField) => {\n                this.customField = customField;\n                this.renderedFieldConfig = this.validateOptionSelectFieldLabel(customField.config);\n            }).catch(() => {\n                this.createNotificationError({\n                    message: this.$tc('global.notification.unspecifiedSaveErrorMessage'),\n                });\n            }).finally(() => {\n                this.fieldOptionSelected = this.sequence.config.option;\n            });\n        },\n\n        onEntityChange() {\n            this.customFieldSetId = null;\n        },\n\n        onCustomFieldSetChange(id, customFieldSet) {\n            if (!customFieldSet) {\n                return;\n            }\n            Shopware.State.commit('swFlowState/setCustomFieldSets', [...this.customFieldSets, customFieldSet]);\n            this.customFieldId = null;\n            this.customFieldValue = null;\n            this.renderedFieldConfig = {};\n        },\n\n        onCustomFieldChange(id, customField) {\n            if (!customField) {\n                return;\n            }\n            this.customField = customField;\n\n            Shopware.State.commit('swFlowState/setCustomFields', [...this.customFields, customField]);\n            this.customFieldValue = null;\n            this.renderedFieldConfig = this.validateOptionSelectFieldLabel(customField.config);\n            if (this.renderedFieldConfig.componentName === 'sw-entity-multi-id-select') {\n                this.customFieldValue = [];\n            }\n        },\n\n        validateOptionSelectFieldLabel(config) {\n            if (!config.options) {\n                return config;\n            }\n\n            config.options.forEach((option) => {\n                option.label = this.getInlineSnippet(option.label) || option.value;\n            });\n\n            return config;\n        },\n\n        onClose() {\n            this.customFieldSetError = null;\n            this.customFieldError = null;\n            this.$emit('modal-close');\n        },\n\n        onAddAction() {\n            this.entityError = this.fieldError(this.entity);\n            this.customFieldSetError = this.entity ? this.fieldError(this.customFieldSetId) : null;\n            this.customFieldError = this.customFieldSetId ? this.fieldError(this.customFieldId) : null;\n            if (this.customFieldSetError || this.customFieldError || this.entityError) {\n                return;\n            }\n\n            const sequence = {\n                ...this.sequence,\n                config: {\n                    entity: this.entity,\n                    customFieldSetId: this.customFieldSetId,\n                    customFieldId: this.customFieldId,\n                    customFieldValue: this.customFieldValue,\n                    option: this.fieldOptionSelected,\n                    optionLabel: this.fieldOptions.find((option) => {\n                        return option.value === this.fieldOptionSelected;\n                    })?.label,\n                },\n            };\n\n            this.$emit('process-finish', sequence);\n        },\n\n        fieldError(field) {\n            if (!field || !field.length) {\n                return new ShopwareError({\n                    code: 'c1051bb4-d103-4f74-8988-acbcafc7fdc3',\n                });\n            }\n\n            return null;\n        },\n\n        getFieldOptions(fieldConfig) {\n            switch (fieldConfig.componentName) {\n                case 'sw-entity-multi-id-select':\n                case 'sw-multi-select':\n                    return this.multipleFieldOptions;\n                default:\n                    return this.defaultFieldOptions;\n            }\n        },\n\n        getEntityOptions() {\n            if (!this.triggerEvent) {\n                this.entityOptions = [];\n                return;\n            }\n\n            const allowedAware = this.triggerEvent.aware ?? [];\n            // eslint-disable-next-line max-len\n            const options = Service('flowBuilderService').getAvailableEntities(this.action, this.triggerActions, allowedAware, ['customFields']);\n\n            if (options.length) {\n                this.entity = options[0].value;\n            }\n\n            this.entityOptions = options;\n        },\n\n        convertToEntityTechnicalName(camelCaseText) {\n            return camelCaseText.replace(/[A-Z]/g, letter => `_${letter.toLowerCase()}`);\n        },\n    },\n};\n","export default \"\\n{% block sw_flow_set_entity_custom_field_modal %}\\n<sw-modal\\n    class=\\\"sw-flow-set-entity-custom-field-modal\\\"\\n    :title=\\\"$tc('sw-flow.modals.setEntityCustomField.title')\\\"\\n    :closable=\\\"false\\\"\\n    @modal-close=\\\"onClose\\\"\\n>\\n    \\n    {% block sw_flow_set_entity_custom_field_modal_content %}\\n    <div class=\\\"sw-flow-set-entity-custom-field-modal__content\\\">\\n        \\n        {% block sw_flow_tag_modal_to_field %}\\n        <sw-single-select\\n            {% if VUE3 %}\\n            v-model:value=\\\"entity\\\"\\n            {% else %}\\n            v-model=\\\"entity\\\"\\n            {% endif %}\\n            class=\\\"sw-flow-set-entity-custom-field-modal__entity-field\\\"\\n            required\\n            show-clearable-button\\n            :label=\\\"$tc('sw-flow.modals.setEntityCustomField.labelToField')\\\"\\n            :placeholder=\\\"$tc('sw-flow.modals.setEntityCustomField.placeholderToField')\\\"\\n            :error=\\\"entityError\\\"\\n            :options=\\\"entityOptions\\\"\\n            {% if VUE3 %}\\n            @update:value=\\\"onEntityChange()\\\"\\n            {% else %}\\n            @change=\\\"onEntityChange()\\\"\\n            {% endif %}\\n        />\\n        {% endblock %}\\n\\n        \\n        {% block sw_flow_set_entity_custom_field_modal_category %}\\n        <sw-entity-single-select\\n            {% if VUE3 %}\\n            v-model:value=\\\"customFieldSetId\\\"\\n            {% else %}\\n            v-model=\\\"customFieldSetId\\\"\\n            {% endif %}\\n            class=\\\"sw-flow-set-entity-custom-field-modal__custom-field-set\\\"\\n            entity=\\\"custom_field_set\\\"\\n            required\\n            :label-property=\\\"labelProperty\\\"\\n            :disabled=\\\"!entity\\\"\\n            :criteria=\\\"customFieldSetCriteria\\\"\\n            :label=\\\"$tc('sw-flow.modals.setEntityCustomField.customFieldSet')\\\"\\n            :placeholder=\\\"$tc('sw-flow.modals.setEntityCustomField.customFieldSetPlaceHolder')\\\"\\n            :error=\\\"customFieldSetError\\\"\\n            {% if VUE3 %}\\n            @update:value=\\\"(id, customFieldSet) => onCustomFieldSetChange(id, customFieldSet)\\\"\\n            {% else %}\\n            @change=\\\"(id, customFieldSet) => onCustomFieldSetChange(id, customFieldSet)\\\"\\n            {% endif %}\\n        >\\n            <template #selection-label-property=\\\"{ item }\\\">\\n                {{ getInlineSnippet(item.config.label) || item.name }}\\n            </template>\\n\\n            <template #result-label-property=\\\"{ item }\\\">\\n                {{ getInlineSnippet(item.config.label) || item.name }}\\n            </template>\\n        </sw-entity-single-select>\\n        {% endblock %}\\n\\n        \\n        {% block sw_flow_set_entity_custom_field_modal_field_name %}\\n        <sw-entity-single-select\\n            {% if VUE3 %}\\n            v-model:value=\\\"customFieldId\\\"\\n            {% else %}\\n            v-model=\\\"customFieldId\\\"\\n            {% endif %}\\n            class=\\\"sw-flow-set-entity-custom-field-modal__custom-field\\\"\\n            entity=\\\"custom_field\\\"\\n            required\\n            :label-property=\\\"labelProperty\\\"\\n            :label=\\\"$tc('sw-flow.modals.setEntityCustomField.customField')\\\"\\n            :disabled=\\\"!customFieldSetId\\\"\\n            :criteria=\\\"customFieldCriteria\\\"\\n            :placeholder=\\\"$tc('sw-flow.modals.setEntityCustomField.customFieldPlaceHolder')\\\"\\n            :error=\\\"customFieldError\\\"\\n            {% if VUE3 %}\\n            @update:value=\\\"(id, customField) => onCustomFieldChange(id, customField)\\\"\\n            {% else %}\\n            @change=\\\"(id, customField) => onCustomFieldChange(id, customField)\\\"\\n            {% endif %}\\n        >\\n            <template #selection-label-property=\\\"{ item }\\\">\\n                {{ getInlineSnippet(item.config.label) || item.name }}\\n            </template>\\n\\n            <template #result-label-property=\\\"{ item }\\\">\\n                {{ getInlineSnippet(item.config.label) || item.name }}\\n            </template>\\n        </sw-entity-single-select>\\n        {% endblock %}\\n\\n        \\n        {% block sw_flow_set_entity_custom_field_modal_field_value_options %}\\n        <sw-single-select\\n            v-if=\\\"customFieldId\\\"\\n            {% if VUE3 %}\\n            v-model:value=\\\"fieldOptionSelected\\\"\\n            {% else %}\\n            v-model=\\\"fieldOptionSelected\\\"\\n            {% endif %}\\n            class=\\\"sw-flow-set-entity-custom-field-modal__custom-field-value-options\\\"\\n            :options=\\\"fieldOptions\\\"\\n            :label=\\\"$tc('sw-flow.modals.setEntityCustomField.customFieldOption')\\\"\\n            :highlight-search-term=\\\"false\\\"\\n        />\\n        {% endblock %}\\n\\n        \\n        {% block sw_flow_set_entity_custom_field_modal_field_value %}\\n        <sw-form-field-renderer\\n            v-if=\\\"showFieldValue\\\"\\n            v-model=\\\"customFieldValue\\\"\\n            class=\\\"sw-flow-set-entity-custom-field-modal__custom-field-value\\\"\\n            :config=\\\"renderedFieldConfig\\\"\\n            bordered\\n        >\\n            <template #label>\\n                {{ $tc('sw-flow.modals.setEntityCustomField.prefixFieldName') }}\\n                {{ getInlineSnippet(customField.config.label) || customField.name }}\\n            </template>\\n        </sw-form-field-renderer>\\n        {% endblock %}\\n\\n    </div>\\n    {% endblock %}\\n\\n    \\n    {% block sw_flow_set_entity_custom_field_modal_custom %}\\n    {% endblock %}\\n\\n    \\n    {% block sw_flow_set_entity_custom_field_modal_footer %}\\n    <template #modal-footer>\\n        \\n        {% block sw_flow_set_entity_custom_field_modal_footer_cancel_button %}\\n        <sw-button\\n            class=\\\"sw-flow-set-entity-custom-field-modal__cancel-button\\\"\\n            @click=\\\"onClose\\\"\\n        >\\n            {{ $tc('global.default.cancel') }}\\n        </sw-button>\\n        {% endblock %}\\n\\n        \\n        {% block sw_flow_set_entity_custom_field_modal_footer_save_button %}\\n        <sw-button\\n            class=\\\"sw-flow-set-entity-custom-field-modal__save-button\\\"\\n            variant=\\\"primary\\\"\\n            @click=\\\"onAddAction\\\"\\n        >\\n            {{ sequence.id ? $tc('sw-flow.modals.buttonSaveAction') : $tc('sw-flow.modals.buttonAddAction') }}\\n        </sw-button>\\n        {% endblock %}\\n    </template>\\n    {% endblock %}\\n</sw-modal>\\n{% endblock %}\\n\";","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../../../../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--15-1!../../../../../../node_modules/css-loader/dist/cjs.js??ref--15-2!../../../../../../node_modules/sass-loader/dist/cjs.js??ref--15-3!./sw-flow-set-entity-custom-field-modal.scss\");\nif(content.__esModule) content = content.default;\nif(typeof content === 'string') content = [[module.id, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar add = require(\"!../../../../../../node_modules/vue-style-loader/lib/addStylesClient.js\").default\nvar update = add(\"4f776bb8\", content, true, {});"],"sourceRoot":""}