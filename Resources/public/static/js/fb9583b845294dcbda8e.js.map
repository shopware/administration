{"version":3,"sources":["webpack:///./src/module/sw-settings-snippet/page/sw-settings-snippet-list/index.js","webpack:///./src/module/sw-settings-snippet/page/sw-settings-snippet-list/sw-settings-snippet-list.html.twig","webpack:///./src/module/sw-settings-snippet/page/sw-settings-snippet-list/sw-settings-snippet-list.scss"],"names":["_Shopware","Shopware","Mixin","Criteria","Data","template","inject","mixins","getByName","data","entityName","sortBy","sortDirection","metaId","currentAuthor","snippetSets","hasResetableItems","showOnlyEdited","showOnlyAdded","emptySnippets","grid","resetItems","filterItems","authorFilters","appliedFilter","appliedAuthors","emptyIcon","this","$route","meta","$module","icon","skeletonItemAmount","filterSettings","metaInfo","title","$createTitle","identifier","computed","$tc","length","setName","metaName","columns","getColumns","snippetRepository","repositoryFactory","create","snippetSetRepository","queryIds","Array","isArray","query","ids","snippetSetCriteria","criteria","addFilter","equalsAny","addSorting","sort","term","setTerm","queryIdCount","_this$snippetSets$","name","filter","edited","added","empty","namespace","author","contextMenuEditSnippet","acl","can","hasActiveFilters","Object","values","some","value","activeFilters","_this","editedSnippets","_objectSpread","addedSnippets","forEach","item","push","created","createdComponent","beforeDestroy","beforeDestroyComponent","methods","_this2","_asyncToGenerator","_regeneratorRuntime","mark","_callee","wrap","_context","prev","next","addEventListeners","search","then","sets","userService","getUser","response","concat","username","snippetService","getFilter","sent","snippetSetService","getAuthors","getFilterSettings","initializeSnippetSet","stop","saveUserConfig","removeEventListeners","_this3","window","addEventListener","event","beforeUnloadListener","_this4","removeEventListener","_this5","_callee2","userConfig","_context2","getUserConfig","createFilterSettings","userConfigService","upsert","reduce","acc","_defineProperty","moreFilters","getList","property","label","inlineEdit","allowResize","rawData","primary","id","_this6","arguments","undefined","isLoading","getCustomList","page","limit","total","prepareGrid","backRoutingError","accumulator","items","content","resetTo","setId","isCustomSnippet","includes","translationKey","prepareContent","onEdit","snippet","$router","params","onInlineEditSave","result","_this7","responses","key","Sanitizer","sanitize","origin","hasOwnProperty","snippetEntity","_isNew","save","startsWith","delete","Promise","all","inlineSaveSuccessMessage","catch","inlineSaveErrorMessage","onInlineEditCancel","rowItems","keys","itemKey","_typeof","onEmptyClick","onSearch","updateRoute","createNotificationError","message","titleSaveSuccess","messageSaveSuccess","createNotificationSuccess","titleSaveError","messageSaveError","onReset","_this8","currentItem","index","find","getName","isFileSnippet","a","b","showDeleteModal","finally","list","onSelectionChanged","selection","snippetSelection","onConfirmReset","fullSelection","_this9","promises","$nextTick","createSuccessMessage","createResetErrorNote","onChange","field","$set","group","selector","indexOf","splice","onSidebarClose","onSortColumn","column","dataIndex","onPageChange","_ref","getNoPermissionsTooltip","role","showOnDisabledElements","showDelay","appearance","disabled","onResetAll","_this10","__esModule","default","module","i","locals","exports","add"],"mappings":"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","file":"static/js/fb9583b845294dcbda8e.js","sourcesContent":["/**\n * @package services-settings\n */\nimport Sanitizer from 'src/core/helper/sanitizer.helper';\nimport template from './sw-settings-snippet-list.html.twig';\nimport './sw-settings-snippet-list.scss';\n\nconst { Mixin, Data: { Criteria } } = Shopware;\n\n// eslint-disable-next-line sw-deprecation-rules/private-feature-declarations\nexport default {\n    template,\n\n    inject: [\n        'snippetSetService',\n        'snippetService',\n        'userService',\n        'repositoryFactory',\n        'acl',\n        'userConfigService',\n    ],\n\n    mixins: [\n        Mixin.getByName('sw-settings-list'),\n    ],\n\n    data() {\n        return {\n            entityName: 'snippet',\n            sortBy: 'id',\n            sortDirection: 'ASC',\n            metaId: '',\n            currentAuthor: '',\n            snippetSets: null,\n            hasResetableItems: true,\n            showOnlyEdited: false,\n            showOnlyAdded: false,\n            emptySnippets: false,\n            grid: [],\n            resetItems: [],\n            filterItems: [],\n            authorFilters: [],\n            appliedFilter: [],\n            appliedAuthors: [],\n            emptyIcon: this.$route.meta.$module.icon,\n            skeletonItemAmount: 25,\n            filterSettings: null,\n        };\n    },\n\n    metaInfo() {\n        return {\n            title: this.$createTitle(this.identifier),\n        };\n    },\n\n    computed: {\n        identifier() {\n            return this.snippetSets ? this.$tc(\n                'sw-settings-snippet.list.identifier',\n                this.snippetSets.length,\n                {\n                    setName: this.metaName,\n                },\n            ) : '';\n        },\n\n        columns() {\n            return this.getColumns();\n        },\n\n        snippetRepository() {\n            return this.repositoryFactory.create('snippet');\n        },\n\n        snippetSetRepository() {\n            return this.repositoryFactory.create('snippet_set');\n        },\n\n        queryIds() {\n            return Array.isArray(this.$route.query.ids) ? this.$route.query.ids : [this.$route.query.ids];\n        },\n\n        snippetSetCriteria() {\n            const criteria = new Criteria(1, 25);\n\n            criteria.addFilter(Criteria.equalsAny('id', this.queryIds));\n            criteria.addSorting(\n                Criteria.sort('name', 'ASC'),\n            );\n\n            if (this.term) {\n                criteria.setTerm(this.term);\n            }\n\n            return criteria;\n        },\n\n        queryIdCount() {\n            return this.queryIds.length;\n        },\n\n        metaName() {\n            return this.snippetSets[0]?.name;\n        },\n\n        filter() {\n            const filter = {};\n            if (this.showOnlyEdited) {\n                filter.edited = true;\n            }\n            if (this.showOnlyAdded) {\n                filter.added = true;\n            }\n            if (this.emptySnippets) {\n                filter.empty = true;\n            }\n            if (this.term) {\n                filter.term = this.term;\n            }\n            if (this.appliedFilter.length > 0) {\n                filter.namespace = this.appliedFilter;\n            }\n            if (this.appliedAuthors.length > 0) {\n                filter.author = this.appliedAuthors;\n            }\n\n            return filter;\n        },\n\n        contextMenuEditSnippet() {\n            return this.acl.can('snippet.editor') ?\n                this.$tc('global.default.edit') :\n                this.$tc('global.default.view');\n        },\n\n        hasActiveFilters() {\n            if (!this.filterSettings) {\n                return false;\n            }\n\n            return Object.values(this.filterSettings).some((value) => value === true);\n        },\n\n        activeFilters() {\n            let filter = {};\n\n            if (!this.hasActiveFilters) {\n                return filter;\n            }\n\n            if (this.filterSettings.editedSnippets) {\n                filter = { ...filter, edited: true };\n            }\n            if (this.filterSettings.addedSnippets) {\n                filter = { ...filter, added: true };\n            }\n            if (this.filterSettings.emptySnippets) {\n                filter = { ...filter, empty: true };\n            }\n\n            filter = { ...filter, author: [] };\n            this.authorFilters.forEach((item) => {\n                if (this.filterSettings[item] === true) {\n                    filter.author.push(item);\n                }\n            });\n\n            filter = { ...filter, namespace: [] };\n            this.filterItems.forEach((item) => {\n                if (this.filterSettings[item] === true) {\n                    filter.namespace.push(item);\n                }\n            });\n\n            return filter;\n        },\n    },\n\n    created() {\n        this.createdComponent();\n    },\n\n    beforeDestroy() {\n        this.beforeDestroyComponent();\n    },\n\n    methods: {\n        async createdComponent() {\n            this.addEventListeners();\n\n            this.snippetSetRepository.search(this.snippetSetCriteria)\n                .then((sets) => {\n                    this.snippetSets = sets;\n                });\n\n            this.userService.getUser().then((response) => {\n                this.currentAuthor = `user/${response.data.username}`;\n            });\n\n            const filterItems = await this.snippetService.getFilter();\n            this.filterItems = filterItems.data;\n\n            const authorFilters = await this.snippetSetService.getAuthors();\n            this.authorFilters = authorFilters.data;\n\n            await this.getFilterSettings();\n\n            if (this.hasActiveFilters) {\n                this.initializeSnippetSet(this.activeFilters);\n            }\n        },\n\n        beforeDestroyComponent() {\n            this.saveUserConfig();\n            this.removeEventListeners();\n        },\n\n        addEventListeners() {\n            window.addEventListener('beforeunload', (event) => this.beforeUnloadListener(event));\n        },\n\n        removeEventListeners() {\n            window.removeEventListener('beforeunload', (event) => this.beforeUnloadListener(event));\n        },\n\n        // eslint-disable-next-line no-unused-vars\n        beforeUnloadListener(event) {\n            this.saveUserConfig();\n        },\n\n        async getFilterSettings() {\n            const userConfig = await this.getUserConfig();\n\n            this.filterSettings = userConfig.data['grid.filter.setting-snippet-list']\n                ? userConfig.data['grid.filter.setting-snippet-list']\n                : this.createFilterSettings();\n        },\n\n        getUserConfig() {\n            return this.userConfigService.search(['grid.filter.setting-snippet-list']);\n        },\n\n        saveUserConfig() {\n            return this.userConfigService.upsert({\n                'grid.filter.setting-snippet-list': this.filterSettings,\n            });\n        },\n\n        createFilterSettings() {\n            const authorFilters = this.authorFilters.reduce((acc, item) => ({ ...acc, [item]: false }), {});\n            const moreFilters = this.filterItems.reduce((acc, item) => ({ ...acc, [item]: false }), {});\n\n            return {\n                emptySnippets: false,\n                editedSnippets: false,\n                addedSnippets: false,\n                ...authorFilters,\n                ...moreFilters,\n            };\n        },\n\n        getList() {\n            if (this.hasActiveFilters) {\n                this.initializeSnippetSet(this.activeFilters);\n            } else {\n                this.initializeSnippetSet();\n            }\n        },\n\n        getColumns() {\n            const columns = [{\n                property: 'id',\n                label: 'sw-settings-snippet.list.columnKey',\n                inlineEdit: true,\n                allowResize: true,\n                rawData: true,\n                primary: true,\n            }];\n\n            if (this.snippetSets) {\n                this.snippetSets.forEach((item) => {\n                    columns.push({\n                        property: item.id,\n                        label: item.name,\n                        allowResize: true,\n                        inlineEdit: 'string',\n                        rawData: true,\n                    });\n                });\n            }\n            return columns;\n        },\n\n        initializeSnippetSet(filter = this.filter) {\n            if (!this.$route.query.ids) {\n                this.backRoutingError();\n                return;\n            }\n\n            this.isLoading = true;\n\n            const sort = {\n                sortBy: this.sortBy,\n                sortDirection: this.sortDirection,\n            };\n\n            this.snippetSetService.getCustomList(this.page, this.limit, filter, sort).then((response) => {\n                this.metaId = this.queryIds[0];\n                this.total = response.total;\n                this.grid = this.prepareGrid(response.data);\n                this.isLoading = false;\n            });\n        },\n\n        prepareGrid(grid) {\n            function prepareContent(items) {\n                const content = items.reduce((acc, item) => {\n                    item.resetTo = item.value;\n                    acc[item.setId] = item;\n                    acc.isCustomSnippet = item.author.includes('user/');\n                    return acc;\n                }, {});\n                content.id = items[0].translationKey;\n\n                return content;\n            }\n\n            return Object.values(grid).reduce((accumulator, items) => {\n                accumulator.push(prepareContent(items));\n                return accumulator;\n            }, []);\n        },\n\n        onEdit(snippet) {\n            if (snippet?.id) {\n                this.$router.push({\n                    name: 'sw.settings.snippet.detail',\n                    params: {\n                        id: snippet.id,\n                    },\n                });\n            }\n        },\n\n        onInlineEditSave(result) {\n            const responses = [];\n            const key = result[this.metaId].translationKey;\n\n            this.snippetSets.forEach((item) => {\n                const snippet = result[item.id];\n                snippet.value = Sanitizer.sanitize(snippet.value);\n\n                if (!snippet.value && typeof snippet.value !== 'string') {\n                    snippet.value = snippet.origin;\n                }\n\n                if (!snippet.hasOwnProperty('author') || snippet.author === '') {\n                    snippet.author = this.currentAuthor;\n                }\n\n                if (snippet.origin !== snippet.value) {\n                    const snippetEntity = this.snippetRepository.create();\n\n                    if (snippet.id) {\n                        snippetEntity._isNew = false;\n                    }\n\n                    snippetEntity.author = snippet.author;\n                    snippetEntity.id = snippet.id;\n                    snippetEntity.value = snippet.value;\n                    snippetEntity.origin = snippet.origin;\n                    snippetEntity.translationKey = snippet.translationKey;\n                    snippetEntity.setId = snippet.setId;\n\n                    responses.push(\n                        this.snippetRepository.save(snippetEntity),\n                    );\n                } else if (snippet.id !== null && !snippet.author.startsWith('user/')) {\n                    responses.push(\n                        this.snippetRepository.delete(snippet.id),\n                    );\n                }\n            });\n\n            Promise.all(responses).then(() => {\n                this.inlineSaveSuccessMessage(key);\n                this.getList();\n            }).catch(() => {\n                this.inlineSaveErrorMessage(key);\n                this.getList();\n            });\n        },\n\n        onInlineEditCancel(rowItems) {\n            Object.keys(rowItems).forEach((itemKey) => {\n                const item = rowItems[itemKey];\n                if (typeof item !== 'object' || item.value === undefined) {\n                    return;\n                }\n\n                item.value = item.resetTo;\n            });\n        },\n\n        onEmptyClick() {\n            this.showOnlyEdited = false;\n            this.getList();\n        },\n\n\n        onSearch(term) {\n            this.term = term;\n            this.page = 1;\n\n            this.updateRoute({\n                term: term,\n                page: 1,\n            }, {\n                ids: this.queryIds,\n            });\n        },\n\n        backRoutingError() {\n            this.$router.push({ name: 'sw.settings.snippet.index' });\n\n            this.createNotificationError({\n                message: this.$tc('sw-settings-snippet.general.errorBackRoutingMessage'),\n            });\n        },\n\n        inlineSaveSuccessMessage(key) {\n            const titleSaveSuccess = this.$tc('global.default.success');\n            const messageSaveSuccess = this.$tc(\n                'sw-settings-snippet.list.messageSaveSuccess',\n                this.queryIdCount,\n                { key },\n            );\n\n            this.createNotificationSuccess({\n                title: titleSaveSuccess,\n                message: messageSaveSuccess,\n            });\n        },\n\n        inlineSaveErrorMessage(key) {\n            const titleSaveError = this.$tc('global.default.error');\n            const messageSaveError = this.$tc(\n                'sw-settings-snippet.list.messageSaveError',\n                this.queryIdCount,\n                { key },\n            );\n\n            this.createNotificationError({\n                title: titleSaveError,\n                message: messageSaveError,\n            });\n        },\n\n        onReset(item) {\n            this.isLoading = true;\n\n            this.snippetSetRepository.search(this.snippetSetCriteria)\n                .then((response) => {\n                    const resetItems = [];\n                    const ids = Array.isArray(this.$route.query.ids) ? this.$route.query.ids : [this.$route.query.ids];\n\n                    Object.values(item).forEach((currentItem, index) => {\n                        if (!(currentItem instanceof Object) || !ids.find(id => id === currentItem.setId)) {\n                            return;\n                        }\n\n                        currentItem.setName = this.getName(response, currentItem.setId);\n                        if (currentItem.id === null) {\n                            currentItem.id = index;\n                            currentItem.isFileSnippet = true;\n                        }\n\n                        resetItems.push(currentItem);\n                    });\n\n                    this.resetItems = resetItems.sort((a, b) => {\n                        return a.setName <= b.setName ? -1 : 1;\n                    });\n                    this.showDeleteModal = item;\n                })\n                .finally(() => {\n                    this.isLoading = false;\n                });\n        },\n\n        getName(list, id) {\n            let name = '';\n            list.forEach((item) => {\n                if (item.id === id) {\n                    name = item.name;\n                }\n            });\n\n            return name;\n        },\n\n        onSelectionChanged(selection) {\n            this.snippetSelection = selection;\n            this.hasResetableItems = Object.keys(selection).length === 0;\n        },\n\n        onConfirmReset(fullSelection) {\n            let items;\n            const promises = [];\n\n            if (this.showOnlyEdited) {\n                items = Object.values(fullSelection).filter(item => typeof item !== 'string');\n            } else if (this.snippetSelection !== undefined) {\n                items = Object.values(this.snippetSelection);\n            } else {\n                items = Object.values(this.resetItems);\n            }\n\n            this.showDeleteModal = false;\n\n            this.$nextTick(() => {\n                items.forEach((item) => {\n                    if (item.hasOwnProperty('isFileSnippet') || item.id === null) {\n                        return;\n                    }\n                    item.isCustomSnippet = fullSelection.isCustomSnippet;\n                    this.isLoading = true;\n\n                    promises.push(\n                        this.snippetRepository.delete(item.id).then(() => {\n                            this.createSuccessMessage(item);\n                        }).catch(() => {\n                            this.createResetErrorNote(item);\n                        }),\n                    );\n                });\n                Promise.all(promises).then(() => {\n                    this.isLoading = false;\n                    this.getList();\n                }).catch(() => {\n                    this.isLoading = false;\n                    this.getList();\n                });\n            });\n        },\n\n        createSuccessMessage(item) {\n            const title = this.$tc('global.default.success');\n            const message = this.$tc(\n                'sw-settings-snippet.list.resetSuccessMessage',\n                !item.isCustomSnippet,\n                {\n                    key: item.value,\n                },\n            );\n\n            this.createNotificationSuccess({\n                title,\n                message,\n            });\n        },\n\n        createResetErrorNote(item) {\n            const title = this.$tc('global.default.error');\n            const message = this.$tc(\n                'sw-settings-snippet.list.resetErrorMessage',\n                item.isCustomSnippet ? 2 : 0,\n                { key: item.value },\n            );\n\n            this.createNotificationError({\n                title,\n                message,\n            });\n        },\n\n        onChange(field) {\n            this.$set(this.filterSettings, [field.name], field.value);\n\n            this.page = 1;\n            if (field.group === 'editedSnippets') {\n                this.showOnlyEdited = field.value;\n                this.initializeSnippetSet();\n                return;\n            }\n\n            if (field.group === 'addedSnippets') {\n                this.showOnlyAdded = field.value;\n                this.initializeSnippetSet();\n                return;\n            }\n\n            if (field.group === 'emptySnippets') {\n                this.emptySnippets = field.value;\n                this.initializeSnippetSet();\n                return;\n            }\n\n            let selector = 'appliedFilter';\n            if (field.group === 'authorFilter') {\n                selector = 'appliedAuthors';\n            }\n\n            if (field.value) {\n                if (this[selector].indexOf(field.name) !== -1) {\n                    return;\n                }\n\n                this[selector].push(field.name);\n                this.initializeSnippetSet();\n                return;\n            }\n\n            this[selector].splice(this[selector].indexOf(field.name), 1);\n            this.initializeSnippetSet();\n        },\n\n        onSidebarClose() {\n            this.showOnlyEdited = false;\n            this.emptySnippets = false;\n            this.appliedAuthors = [];\n            this.appliedFilter = [];\n            this.initializeSnippetSet();\n        },\n\n        onSortColumn(column) {\n            if (this.sortDirection === 'ASC' && column.dataIndex === this.sortBy) {\n                this.sortDirection = 'DESC';\n            } else {\n                this.sortDirection = 'ASC';\n            }\n            this.updateRoute({\n                sortDirection: this.sortDirection,\n                sortBy: column.dataIndex,\n            }, {\n                ids: this.queryIds,\n            });\n        },\n\n        onPageChange({ page, limit }) {\n            this.updateRoute({ page, limit }, {\n                ids: this.queryIds,\n            });\n        },\n\n        getNoPermissionsTooltip(role, showOnDisabledElements = true) {\n            return {\n                showDelay: 300,\n                appearance: 'dark',\n                showOnDisabledElements,\n                disabled: this.acl.can(role),\n                message: this.$tc('sw-privileges.tooltip.warning'),\n            };\n        },\n\n        onResetAll() {\n            this.showOnlyEdited = false;\n            this.showOnlyAdded = false;\n            this.emptySnippets = false;\n            this.appliedFilter = [];\n            this.appliedAuthors = [];\n\n            Object.keys(this.filterSettings).forEach((key) => {\n                this.$set(this.filterSettings, key, false);\n            });\n\n            this.initializeSnippetSet({});\n        },\n    },\n};\n","export default \"\\n{% block sw_settings_snippet_list %}\\n<sw-page class=\\\"sw-settings-snippet-list\\\">\\n\\n    \\n    {% block sw_settings_snippet_set_list_search_bar %}\\n    <template #search-bar>\\n        <sw-search-bar\\n            initial-search-type=\\\"snippet\\\"\\n            :placeholder=\\\"$tc('sw-settings-snippet.general.placeholderSearchBarSnippets')\\\"\\n            :initial-search=\\\"term\\\"\\n            @search=\\\"onSearch\\\"\\n        />\\n    </template>\\n    {% endblock %}\\n\\n    \\n    {% block sw_settings_snippet_list_smart_bar_header %}\\n    <template #smart-bar-header>\\n        {# Hack for fixing this problem: https://github.com/vuejs/core/issues/9308 #}\\n        <div style=\\\"display: none;\\\"></div>\\n        \\n        {% block sw_settings_snippet_list_smart_bar_header_title %}\\n        <h2\\n            v-if=\\\"!isLoading && snippetSets\\\"\\n            class=\\\"sw-settings-snippet-list__smart_bar_header\\\"\\n        >\\n            \\n            {% block sw_settings_snippet_list_smart_bar_header_title_text %}\\n            <span class=\\\"sw-settings_snippet_list__smart-bar-title-text\\\">\\n                {{ $tc('sw-settings-snippet.list.textSnippetList', snippetSets.length, { setName: metaName }) }}\\n            </span>\\n            {% endblock %}\\n\\n            \\n            {% block sw_settings_snippet_list_smart_bar_header_amount %}\\n            <span class=\\\"sw-page__smart-bar-amount\\\">\\n                ({{ total }})\\n            </span>\\n            {% endblock %}\\n        </h2>\\n        {% endblock %}\\n    </template>\\n    {% endblock %}\\n\\n    \\n    {% block sw_settings_snippet_list_smart_bar_actions %}\\n    <template #smart-bar-actions>\\n        \\n        {% block sw_settings_snippet_list_smart_bar_actions_add %}\\n        <sw-button\\n            v-tooltip.bottom=\\\"getNoPermissionsTooltip('snippet.creator')\\\"\\n            :router-link=\\\"{ name: 'sw.settings.snippet.create', query: { ids: queryIds, limit, page } }\\\"\\n            :disabled=\\\"isLoading || !acl.can('snippet.creator')\\\"\\n            variant=\\\"primary\\\"\\n        >\\n            {{ $tc('sw-settings-snippet.list.buttonAdd') }}\\n        </sw-button>\\n        {% endblock %}\\n    </template>\\n    {% endblock %}\\n\\n    \\n    {% block sw_settings_snippet_list_content %}\\n    <template #content>\\n        <div class=\\\"sw-settings-snippet-list__content\\\">\\n\\n            \\n            {% block sw_settings_snippet_list_grid %}\\n            <sw-data-grid\\n                :is-loading=\\\"isLoading || !snippetSets\\\"\\n                :data-source=\\\"grid\\\"\\n                :columns=\\\"columns\\\"\\n                class=\\\"sw-settings-snippet-list__grid\\\"\\n                :full-page=\\\"true\\\"\\n                :skeleton-item-amount=\\\"skeletonItemAmount\\\"\\n                :sort-by=\\\"sortBy\\\"\\n                :sort-direction=\\\"sortDirection\\\"\\n                :allow-inline-edit=\\\"acl.can('snippet.editor')\\\"\\n                :allow-column-edit=\\\"true\\\"\\n                :show-settings=\\\"true\\\"\\n                :show-selection=\\\"false\\\"\\n                @column-sort=\\\"onSortColumn\\\"\\n                @page-change=\\\"onPageChange\\\"\\n                @inline-edit-cancel=\\\"onInlineEditCancel\\\"\\n                @inline-edit-save=\\\"onInlineEditSave\\\"\\n            >\\n\\n                \\n                {% block sw_settings_salutations_list_columns %}\\n                \\n                {% block sw_settings_snippet_list_column_id %}\\n                <template\\n                    #column-id=\\\"{ item, isInlineEdit }\\\"\\n                >\\n                    \\n                    {% block sw_settings_snippet_list_column_id_inline_edit %}\\n                    <template v-if=\\\"isInlineEdit\\\">\\n                        {{ item.id }}\\n                    </template>\\n                    {% endblock %}\\n\\n                    \\n                    {% block sw_settings_snippet_list_column_id_content %}\\n                    <template v-else>\\n                        <router-link\\n                            :to=\\\"{\\n                                name: 'sw.settings.snippet.detail',\\n                                params: { key: item[metaId].translationKey, origin: item[metaId].translationKey },\\n                                query: { ids: queryIds, limit, page }\\n                            }\\\"\\n                        >\\n                            {{ item.id }}\\n                        </router-link>\\n                    </template>\\n                    {% endblock %}\\n                </template>\\n                {% endblock %}\\n\\n                \\n                {% block sw_settings_snippet_list_column_value %}\\n                <template\\n                    v-for=\\\"set in snippetSets\\\"\\n                    {% if VUE3 %}\\n                    :key=\\\"set.id\\\"\\n                    {% endif %}\\n                    #[`column-${set.id}`]=\\\"{ item, compact, isInlineEdit }\\\"\\n                >\\n                    \\n                    {% block sw_settings_snippet_list_column_value_inline_edit %}\\n                    <template v-if=\\\"isInlineEdit\\\">\\n                        <sw-text-field\\n                            {% if VUE2 %}\\n                            :key=\\\"set.id\\\"\\n                            {% endif %}\\n                            {% if VUE3 %}\\n                            v-model:value=\\\"item[set.id].value\\\"\\n                            {% else %}\\n                            v-model=\\\"item[set.id].value\\\"\\n                            {% endif %}\\n                            :placeholder=\\\"item[set.id].origin || $tc('sw-settings-snippet.general.placeholderValue')\\\"\\n                            :size=\\\"compact ? 'small' : 'default'\\\"\\n                        />\\n                    </template>\\n                    {% endblock %}\\n\\n                    \\n                    {% block sw_settings_snippet_list_column_value_content %}\\n                    <template v-else>\\n                        {{ item[set.id].value }}\\n                    </template>\\n                    {% endblock %}\\n                </template>\\n                {% endblock %}\\n\\n                \\n                {% block sw_settings_snippet_list_grid_column_actions %}\\n                <template #actions=\\\"{ item }\\\">\\n                    \\n                    {% block sw_settings_snippet_list_grid_column_actions_edit %}\\n                    <sw-context-menu-item\\n                        class=\\\"sw-settings-snippet-list__edit-action\\\"\\n                        :router-link=\\\"{\\n                            name: 'sw.settings.snippet.detail',\\n                            params: { key: item[metaId].translationKey, origin: item[metaId].translationKey },\\n                            query: { ids: queryIds, limit, page }\\n                        }\\\"\\n                    >\\n                        {{ contextMenuEditSnippet }}\\n                    </sw-context-menu-item>\\n                    {% endblock %}\\n\\n                    \\n                    {% block sw_settings_snippet_list_grid_column_actions_delete %}\\n                    <sw-context-menu-item\\n                        v-tooltip.left=\\\"getNoPermissionsTooltip('snippet.deleter')\\\"\\n                        class=\\\"sw-settings-snippet-list__delete-action\\\"\\n                        variant=\\\"danger\\\"\\n                        :disabled=\\\"!acl.can('snippet.deleter')\\\"\\n                        @click=\\\"onReset(item)\\\"\\n                    >\\n                        {{ $tc('sw-settings-snippet.list.contextMenuDelete', item.isCustomSnippet) }}\\n                    </sw-context-menu-item>\\n                    {% endblock %}\\n                </template>\\n                {% endblock %}\\n\\n                \\n                {% block sw_settings_salutation_list_action_modals %}\\n                \\n                {% block sw_settings_snippet_list_delete_modal %}\\n                <template\\n                    #action-modals=\\\"{ item }\\\"\\n                >\\n                    <sw-modal\\n                        v-if=\\\"showDeleteModal === item\\\"\\n                        class=\\\"sw-settings-snippet-list__delete-modal\\\"\\n                        :title=\\\"$tc('global.default.warning')\\\"\\n                        variant=\\\"large\\\"\\n                        @modal-close=\\\"onCloseDeleteModal\\\"\\n                    >\\n                        \\n                        {% block sw_settings_snippet_list_delete_modal_text %}\\n                        \\n                        {% block sw_settings_snippet_list_delete_modal_text_reset %}\\n                        <span\\n                            v-if=\\\"!item.isCustomSnippet\\\"\\n                            class=\\\"sw-settings-snippet-list__delete-modal-confirm-reset-text\\\"\\n                        >\\n                            {{ $tc('sw-settings-snippet.list.textResetConfirm', queryIdCount, { key: item[metaId].translationKey }) }}\\n                        </span>\\n                        {% endblock %}\\n\\n                        \\n                        {% block sw_settings_snippet_list_delete_modal_text_delete %}\\n                        <span\\n                            v-else\\n                            class=\\\"sw-settings-snippet-list__delete-modal-confirm-delete-text\\\"\\n                        >\\n                            {{ $tc('sw-settings-snippet.list.textDeleteConfirm', 0, { key: item[metaId].translationKey }) }}\\n                        </span>\\n                        {% endblock %}\\n\\n                        \\n                        {% block sw_settings_snippet_list_delete_modal_grid %}\\n                        <sw-grid\\n                            v-if=\\\"!item.isCustomSnippet && resetItems.length > 1\\\"\\n                            class=\\\"sw-settings-snippet-list__delete-modal-grid\\\"\\n                            :items=\\\"resetItems\\\"\\n                            table\\n                            @sw-grid-select-item=\\\"onSelectionChanged\\\"\\n                            @sw-grid-select-all=\\\"onSelectionChanged\\\"\\n                        >\\n                            \\n                            {% block sw_settings_snippet_list_delete_modal_grid_template %}\\n                            <template\\n                                #columns=\\\"{ item }\\\"\\n                            >\\n                                \\n                                {% block sw_settings_snippet_list_delete_modal_grid_name %}\\n                                <sw-grid-column\\n                                    :label=\\\"$tc('sw-settings-snippet.list.columnHeaderGridColumnTitleSet')\\\"\\n                                    flex=\\\"minmax(150px, 1fr)\\\"\\n                                >\\n                                    {{ item.setName }}\\n                                </sw-grid-column>\\n                                {% endblock %}\\n\\n                                \\n                                {% block sw_settings_snippet_list_delete_modal_grid_value %}\\n                                <sw-grid-column\\n                                    :label=\\\"$tc('sw-settings-snippet.list.columnValue')\\\"\\n                                    flex=\\\"minmax(50px,1fr)\\\"\\n                                >\\n                                    {{ item.value }}\\n                                </sw-grid-column>\\n                                {% endblock %}\\n\\n                                \\n                                {% block sw_settings_snippet_list_delete_modal_grid_origin %}\\n                                <sw-grid-column\\n                                    :label=\\\"$tc('sw-settings-snippet.list.columnHeaderResetTo')\\\"\\n                                    flex=\\\"minmax(50px,1fr)\\\"\\n                                >\\n                                    {{ item.origin }}\\n                                </sw-grid-column>\\n                                {% endblock %}\\n                            </template>\\n                            {% endblock %}\\n                        </sw-grid>\\n                        {% endblock %}\\n                        {% endblock %}\\n\\n                        \\n                        {% block sw_settings_snippet_list_delete_modal_footer %}\\n                        <template #modal-footer>\\n                            \\n                            {% block sw_settings_snippet_list_delete_modal_cancel %}\\n                            <sw-button\\n                                size=\\\"small\\\"\\n                                @click=\\\"onCloseDeleteModal\\\"\\n                            >\\n                                {{ $tc('sw-settings-snippet.list.buttonCancel', item.isCustomSnippet) }}\\n                            </sw-button>\\n                            {% endblock %}\\n\\n                            \\n                            {% block sw_settings_snippet_list_delete_modal_confirm %}\\n                            <sw-button\\n                                :disabled=\\\"hasResetableItems && !item.isCustomSnippet && resetItems.length !== 1\\\"\\n                                variant=\\\"danger\\\"\\n                                size=\\\"small\\\"\\n                                @click=\\\"onConfirmReset(item)\\\"\\n                            >\\n                                {{ $tc('sw-settings-snippet.list.contextMenuDelete', item.isCustomSnippet) }}\\n                            </sw-button>\\n                            {% endblock %}\\n                        </template>\\n                        {% endblock %}\\n                    </sw-modal>\\n                </template>\\n                {% endblock %}\\n                {% endblock %}\\n                {% endblock %}\\n\\n                \\n                {% block sw_settings_snippet_list_grid_pagination %}\\n                <template #pagination>\\n                    <sw-pagination\\n                        :page=\\\"page\\\"\\n                        :limit=\\\"limit\\\"\\n                        :total=\\\"total\\\"\\n                        :total-visible=\\\"7\\\"\\n                        :steps=\\\"steps\\\"\\n                        @page-change=\\\"onPageChange\\\"\\n                    />\\n                </template>\\n                {% endblock %}\\n\\n            </sw-data-grid>\\n            {% endblock %}\\n        </div>\\n    </template>\\n\\n    <template #sidebar>\\n        \\n        {% block sw_settings_snippet_list_grid_sidebar %}\\n        <sw-settings-snippet-sidebar\\n            class=\\\"sw-settings-snippet-list__grid-sidebar\\\"\\n            :filter-items=\\\"filterItems\\\"\\n            :author-filters=\\\"authorFilters\\\"\\n            :filter-settings=\\\"filterSettings\\\"\\n            @sidebar-reset-all=\\\"onResetAll\\\"\\n            @change=\\\"onChange\\\"\\n            @sw-sidebar-collaps-refresh-grid=\\\"getList\\\"\\n            @sw-sidebar-close=\\\"onSidebarClose\\\"\\n        />\\n        {% endblock %}\\n    </template>\\n\\n    {% endblock %}\\n\\n</sw-page>\\n{% endblock %}\\n\";","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../../../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--15-1!../../../../../node_modules/css-loader/dist/cjs.js??ref--15-2!../../../../../node_modules/sass-loader/dist/cjs.js??ref--15-3!./sw-settings-snippet-list.scss\");\nif(content.__esModule) content = content.default;\nif(typeof content === 'string') content = [[module.id, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar add = require(\"!../../../../../node_modules/vue-style-loader/lib/addStylesClient.js\").default\nvar update = add(\"6c428b26\", content, true, {});"],"sourceRoot":""}