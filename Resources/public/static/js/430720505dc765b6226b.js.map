{"version":3,"sources":["webpack:///./src/module/sw-extension/component/sw-extension-file-upload/sw-extension-file-upload.scss","webpack:///./src/module/sw-extension/component/sw-extension-file-upload/index.js","webpack:///./src/module/sw-extension/component/sw-extension-file-upload/sw-extension-file-upload.html.twig"],"names":["content","__esModule","default","module","i","locals","exports","add","Mixin","Shopware","Criteria","Data","USER_CONFIG_KEY","template","inject","mixins","getByName","data","isLoading","confirmModalVisible","shouldHideConfirmModal","pluginUploadUserConfig","computed","userConfigRepository","this","repositoryFactory","create","currentUser","State","get","userConfigCriteria","_this$currentUser","criteria","addFilter","equals","id","created","createdComponent","methods","_this","_asyncToGenerator","_regeneratorRuntime","mark","_callee","wrap","_context","prev","next","getUserConfig","stop","onClickUpload","$refs","fileInput","click","onFileInputChange","newFiles","Array","from","files","handleUpload","fileForm","reset","_this2","formData","FormData","append","extensionStoreActionService","upload","then","Service","updateExtensionData","createNotificationSuccess","message","$tc","catch","exception","pluginErrorHandler","mapErrors","response","errors","forEach","error","parameters","showStoreError","createNotificationError","finally","saveConfig","docLink","concat","autoClose","showConfirmModal","value","hide_upload_warning","closeConfirmModal","_this3","search","Context","api","_this3$currentUser","length","first","key","userId","_this4","save"],"mappings":"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","file":"static/js/430720505dc765b6226b.js","sourcesContent":["// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../../../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--15-1!../../../../../node_modules/css-loader/dist/cjs.js??ref--15-2!../../../../../node_modules/sass-loader/dist/cjs.js??ref--15-3!./sw-extension-file-upload.scss\");\nif(content.__esModule) content = content.default;\nif(typeof content === 'string') content = [[module.id, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar add = require(\"!../../../../../node_modules/vue-style-loader/lib/addStylesClient.js\").default\nvar update = add(\"4b2f2bd7\", content, true, {});","import template from './sw-extension-file-upload.html.twig';\nimport './sw-extension-file-upload.scss';\nimport pluginErrorHandler from '../../service/extension-error-handler.service';\n\nconst { Mixin } = Shopware;\nconst { Criteria } = Shopware.Data;\n\nconst USER_CONFIG_KEY = 'extension.plugin_upload';\n\n/**\n * @package services-settings\n * @private\n */\nexport default {\n    template,\n\n    inject: ['extensionStoreActionService', 'repositoryFactory'],\n\n    mixins: [\n        Mixin.getByName('notification'),\n    ],\n\n    data() {\n        return {\n            isLoading: true,\n            confirmModalVisible: false,\n            shouldHideConfirmModal: false,\n            pluginUploadUserConfig: null,\n        };\n    },\n\n    computed: {\n        userConfigRepository() {\n            return this.repositoryFactory.create('user_config');\n        },\n\n        currentUser() {\n            return Shopware.State.get('session').currentUser;\n        },\n\n        userConfigCriteria() {\n            const criteria = new Criteria(1, 25);\n\n            criteria.addFilter(Criteria.equals('key', USER_CONFIG_KEY));\n            criteria.addFilter(Criteria.equals('userId', this.currentUser?.id));\n\n            return criteria;\n        },\n    },\n\n    created() {\n        this.createdComponent();\n    },\n\n    methods: {\n        async createdComponent() {\n            await this.getUserConfig();\n            this.isLoading = false;\n        },\n\n        onClickUpload() {\n            this.$refs.fileInput.click();\n        },\n\n        onFileInputChange() {\n            const newFiles = Array.from(this.$refs.fileInput.files);\n            this.handleUpload(newFiles);\n            this.$refs.fileForm.reset();\n        },\n\n        handleUpload(files) {\n            this.isLoading = true;\n            const formData = new FormData();\n            formData.append('file', files[0]);\n\n            return this.extensionStoreActionService.upload(formData).then(() => {\n                Shopware.Service('shopwareExtensionService').updateExtensionData().then(() => {\n                    return this.createNotificationSuccess({\n                        message: this.$tc('sw-extension.my-extensions.fileUpload.messageUploadSuccess'),\n                    });\n                });\n            }).catch((exception) => {\n                const mappedErrors = pluginErrorHandler.mapErrors(exception.response.data.errors);\n                mappedErrors.forEach((error) => {\n                    if (error.parameters) {\n                        this.showStoreError(error);\n                        return;\n                    }\n\n                    this.createNotificationError({\n                        message: this.$tc(error.message),\n                    });\n                });\n            }).finally(() => {\n                this.isLoading = false;\n                this.confirmModalVisible = false;\n\n                if (this.shouldHideConfirmModal === true) {\n                    this.saveConfig(true);\n                }\n            });\n        },\n\n        showStoreError(error) {\n            const docLink = this.$tc('sw-extension.errors.messageToTheShopwareDocumentation', 0, error.parameters);\n            this.createNotificationError({\n                message: `${error.message} ${docLink}`,\n                autoClose: false,\n            });\n        },\n\n        showConfirmModal() {\n            if (this.pluginUploadUserConfig.value.hide_upload_warning === true) {\n                this.onClickUpload();\n                return;\n            }\n\n            this.confirmModalVisible = true;\n        },\n\n        closeConfirmModal() {\n            this.confirmModalVisible = false;\n        },\n\n        getUserConfig() {\n            return this.userConfigRepository.search(this.userConfigCriteria, Shopware.Context.api).then(response => {\n                if (response.length) {\n                    this.pluginUploadUserConfig = response.first();\n                } else {\n                    this.pluginUploadUserConfig = this.userConfigRepository.create(Shopware.Context.api);\n                    this.pluginUploadUserConfig.key = USER_CONFIG_KEY;\n                    this.pluginUploadUserConfig.userId = this.currentUser?.id;\n                    this.pluginUploadUserConfig.value = {\n                        hide_upload_warning: false,\n                    };\n                }\n            });\n        },\n\n        saveConfig(value) {\n            this.pluginUploadUserConfig.value = {\n                hide_upload_warning: value,\n            };\n\n            this.userConfigRepository.save(this.pluginUploadUserConfig, Shopware.Context.api).then(() => {\n                this.getUserConfig();\n            });\n        },\n    },\n};\n","export default \"\\n{% block sw_extension_file_upload %}\\n<div class=\\\"sw-extension-file-upload\\\">\\n    \\n    {% block sw_extension_file_upload_content %}\\n    <div class=\\\"sw-extension-file-upload__content\\\">\\n        \\n        {% block sw_extension_file_upload_button %}\\n        <sw-button\\n            class=\\\"sw-extension-file-upload__button\\\"\\n            :is-loading=\\\"isLoading\\\"\\n            variant=\\\"primary\\\"\\n            @click=\\\"showConfirmModal\\\"\\n        >\\n            {{ $tc('sw-extension.my-extensions.fileUpload.buttonFileUpload') }}\\n        </sw-button>\\n        {% endblock %}\\n        \\n        {% block sw_extension_file_upload_form %}\\n        <form\\n            ref=\\\"fileForm\\\"\\n            class=\\\"sw-extension-file-upload__form\\\"\\n        >\\n            \\n            <input\\n                id=\\\"files\\\"\\n                ref=\\\"fileInput\\\"\\n                class=\\\"sw-extension-file-upload__file-input\\\"\\n                type=\\\"file\\\"\\n                @change=\\\"onFileInputChange\\\"\\n            >\\n        </form>\\n        {% endblock %}\\n    </div>\\n    {% endblock %}\\n\\n    \\n    {% block sw_extension_file_upload_confirm_modal %}\\n    <sw-modal\\n        v-if=\\\"confirmModalVisible\\\"\\n        class=\\\"sw-extension-file-upload-confirm-modal\\\"\\n        :title=\\\"$tc('sw-extension.my-extensions.fileUpload.titleWarningModal')\\\"\\n        variant=\\\"small\\\"\\n        @modal-close=\\\"closeConfirmModal\\\"\\n    >\\n        \\n        {% block sw_extension_file_upload_confirm_modal_content %}\\n        <template #default>\\n            \\n            {% block sw_extension_file_upload_confirm_modal_body %}\\n            <p>\\n                {{ $tc('sw-extension.my-extensions.fileUpload.descriptionWarningModal') }}\\n            </p>\\n            {% endblock %}\\n        </template>\\n        <template #modal-footer>\\n            \\n            {% block sw_extension_file_upload_confirm_modal_footer %}\\n            \\n            {% block sw_extension_file_upload_confirm_modal_footer_checkbox %}\\n            <sw-checkbox-field\\n                {% if VUE3 %}\\n                v-model:value=\\\"shouldHideConfirmModal\\\"\\n                {% else %}\\n                v-model=\\\"shouldHideConfirmModal\\\"\\n                {% endif %}\\n            >\\n                \\n                {% block sw_extension_file_upload_confirm_modal_footer_checkbox_label %}\\n                <template #label>\\n                    {{ $tc('sw-extension.my-extensions.fileUpload.textHideWarning') }}\\n                </template>\\n                {% endblock %}\\n            </sw-checkbox-field>\\n            {% endblock %}\\n\\n            \\n            {% block sw_extension_file_upload_confirm_modal_footer_buttons %}\\n            <div>\\n                \\n                {% block sw_extension_file_upload_confirm_modal_footer_cancel %}\\n                <sw-button\\n                    size=\\\"small\\\"\\n                    :disabled=\\\"isLoading\\\"\\n                    @click=\\\"closeConfirmModal\\\"\\n                >\\n                    {{ $tc('global.default.cancel') }}\\n                </sw-button>\\n                {% endblock %}\\n\\n                \\n                {% block sw_extension_file_upload_confirm_modal_footer_continue %}\\n                <sw-button\\n                    variant=\\\"primary\\\"\\n                    size=\\\"small\\\"\\n                    :is-loading=\\\"isLoading\\\"\\n                    @click=\\\"onClickUpload\\\"\\n                >\\n                    {{ $tc('global.default.confirm') }}\\n                </sw-button>\\n                {% endblock %}\\n            </div>\\n            {% endblock %}\\n            {% endblock %}\\n        </template>\\n        {% endblock %}\\n    </sw-modal>\\n    {% endblock %}\\n</div>\\n{% endblock %}\\n\";"],"sourceRoot":""}