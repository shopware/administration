{"version":3,"sources":["webpack:///./src/app/asyncComponent/media/sw-media-modal-move/index.js","webpack:///./src/app/asyncComponent/media/sw-media-modal-move/sw-media-modal-move.html.twig","webpack:///./src/app/asyncComponent/media/sw-media-modal-move/sw-media-modal-move.scss"],"names":["_Shopware","Shopware","Mixin","Context","template","inject","provide","filterItems","this","isNotPartOfItemsToMove","mixins","getByName","props","itemsToMove","required","type","Array","validator","value","length","data","targetFolder","parentFolder","displayFolder","displayFolderId","computed","mediaRepository","repositoryFactory","create","mediaFolderRepository","mediaNameFilter","media","getEntityName","concat","fileName","fileExtension","name","targetFolderId","id","rootFolderName","$tc","isMoveDisabled","startFolderId","firstItem","mediaFolderId","parentId","assetFilter","Filter","watch","newFolder","updateParentFolder","mounted","mountedComponent","methods","_this","_asyncToGenerator","_regeneratorRuntime","mark","_callee","folder","wrap","_context","prev","next","get","api","sent","stop","closeMoveModal","$emit","item","some","i","child","_this2","_callee2","_context2","onSelection","children","filter","childCount","_moveSelection","_this3","_callee3","_context3","isLoading","save","createNotificationSuccess","title","$root","message","mediaName","abrupt","t0","createNotificationError","finish","moveSelection","_this4","_callee6","movedIds","folders","_context6","Promise","all","map","_ref","_callee4","_context4","_x","apply","arguments","_ref2","_callee5","mediaItem","_context5","t1","push","call","_x2","content","__esModule","default","module","locals","exports","add"],"mappings":"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","file":"static/js/ebf148cab7e898bfa40a.js","sourcesContent":["import template from './sw-media-modal-move.html.twig';\nimport './sw-media-modal-move.scss';\n\nconst { Mixin, Context } = Shopware;\n\n/**\n * @status ready\n * @description The <u>sw-media-modal-move</u> component is used to validate the move action.\n * @package content\n * @example-type code-only\n * @component-example\n * <sw-media-modal-move :items-to-move=\"[items]\"></sw-media-modal-move>\n */\n// eslint-disable-next-line sw-deprecation-rules/private-feature-declarations\nexport default {\n    template,\n\n    inject: ['repositoryFactory'],\n\n    provide() {\n        return {\n            filterItems: this.isNotPartOfItemsToMove,\n        };\n    },\n\n    mixins: [\n        Mixin.getByName('notification'),\n    ],\n\n    props: {\n        itemsToMove: {\n            required: true,\n            type: Array,\n            validator(value) {\n                return (value.length > 0);\n            },\n        },\n    },\n\n    data() {\n        return {\n            targetFolder: null,\n            parentFolder: null,\n            displayFolder: null,\n            displayFolderId: null,\n        };\n    },\n\n    computed: {\n        mediaRepository() {\n            return this.repositoryFactory.create('media');\n        },\n\n        mediaFolderRepository() {\n            return this.repositoryFactory.create('media_folder');\n        },\n\n        mediaNameFilter() {\n            return (media) => {\n                return media.getEntityName() === 'media' ?\n                    `${media.fileName}.${media.fileExtension}` :\n                    media.name;\n            };\n        },\n\n        targetFolderId() {\n            return this.targetFolder ? this.targetFolder.id : null;\n        },\n\n        rootFolderName() {\n            return this.$tc('sw-media.index.rootFolderName');\n        },\n\n        isMoveDisabled() {\n            return this.startFolderId === this.targetFolderId;\n        },\n\n        startFolderId() {\n            const firstItem = this.itemsToMove[0];\n            if (firstItem.getEntityName() === 'media') {\n                return firstItem.mediaFolderId;\n            }\n\n            return firstItem.parentId;\n        },\n\n        assetFilter() {\n            return Shopware.Filter.getByName('asset');\n        },\n    },\n\n    watch: {\n        displayFolder(newFolder) {\n            this.displayFolderId = newFolder.id;\n            this.updateParentFolder(newFolder);\n        },\n    },\n\n    mounted() {\n        this.mountedComponent();\n    },\n\n    methods: {\n        async mountedComponent() {\n            this.displayFolder = { id: null, name: this.rootFolderName };\n            this.targetFolder = { id: null, name: this.rootFolderName };\n\n            if (this.startFolderId) {\n                const folder = await this.mediaFolderRepository.get(this.startFolderId, Context.api);\n                this.displayFolder = folder;\n                this.targetFolder = folder;\n            }\n        },\n\n        closeMoveModal() {\n            this.$emit('media-move-modal-close');\n        },\n\n        isNotPartOfItemsToMove(item) {\n            return !this.itemsToMove.some((i) => {\n                return i.id === item.id;\n            });\n        },\n\n        async updateParentFolder(child) {\n            if (child.id === null) {\n                this.parentFolder = null;\n            } else if (child.parentId === null) {\n                this.parentFolder = { id: null, name: this.rootFolderName };\n            } else {\n                this.parentFolder = await this.mediaFolderRepository.get(child.parentId, Context.api);\n            }\n        },\n\n        onSelection(folder) {\n            this.targetFolder = folder;\n            // the children aren't always loaded\n            if (folder.children) {\n                if (folder.children.filter(this.isNotPartOfItemsToMove).length > 0) {\n                    this.displayFolder = folder;\n                }\n                return;\n            }\n\n            if (folder.id === null || folder.childCount > 0) {\n                this.displayFolder = folder;\n            }\n        },\n\n        async _moveSelection(item) {\n            item.isLoading = true;\n            item.parentId = this.targetFolder.id || null;\n\n            try {\n                await this.mediaFolderRepository.save(item, Context.api);\n\n                this.createNotificationSuccess({\n                    title: this.$root.$tc('global.default.success'),\n                    message: this.$root.$tc(\n                        'global.sw-media-modal-move.notification.successSingle.message',\n                        1,\n                        { mediaName: this.mediaNameFilter(item) },\n                    ),\n                });\n\n                return item.id;\n            } catch {\n                this.createNotificationError({\n                    title: this.$root.$tc('global.default.error'),\n                    message: this.$root.$tc(\n                        'global.sw-media-modal-move.notification.errorSingle.message',\n                        1,\n                        { mediaName: this.mediaNameFilter(item) },\n                    ),\n                });\n\n                return null;\n            } finally {\n                item.isLoading = false;\n            }\n        },\n\n        async moveSelection() {\n            const movedIds = [];\n\n            try {\n                const folders = this.itemsToMove.filter((item) => {\n                    return item.getEntityName() === 'media_folder';\n                });\n\n                const media = this.itemsToMove.filter((item) => {\n                    return item.getEntityName() === 'media';\n                });\n\n                await Promise.all(folders.map(async (folder) => {\n                    await this._moveSelection(folder);\n                }));\n\n                await Promise.all(media.map(async (mediaItem) => {\n                    const item = mediaItem;\n                    item.mediaFolderId = this.targetFolder.id || null;\n                    movedIds.push(await this.mediaRepository.save(item, Context.api));\n                }));\n\n                this.createNotificationSuccess({\n                    title: this.$root.$tc('global.default.success'),\n                    message: this.$root.$tc('global.sw-media-modal-move.notification.successOverall.message'),\n                });\n\n                this.$emit(\n                    'media-move-modal-items-move',\n                    movedIds,\n                );\n            } catch {\n                this.createNotificationError({\n                    title: this.$root.$tc('global.default.error'),\n                    message: this.$root.$tc('global.sw-media-modal-move.notification.errorOverall.message'),\n                });\n            }\n        },\n    },\n};\n","export default \"\\n{% block sw_media_modal_move %}\\n<sw-modal\\n    variant=\\\"default\\\"\\n    class=\\\"sw-media-modal-move\\\"\\n    :title=\\\"$tc('global.sw-media-modal-move.titleModal', itemsToMove.length, { mediaName: mediaNameFilter(itemsToMove[0]), count: itemsToMove.length }) \\\"\\n    @modal-close=\\\"closeMoveModal\\\"\\n>\\n\\n    \\n    {% block sw_media_modal_body %}\\n    \\n    {% block sw_media_modal_move_breadcrumbs %}\\n    <div class=\\\"sw-media-modal-move-folder-breadcrumbs\\\">\\n        <img\\n            :src=\\\"assetFilter('/administration/static/img/media/multicolor-folder-thumbnail.svg')\\\"\\n            class=\\\"sw-media-modal-move__folder-icon\\\"\\n            alt=\\\"Folder thumbnail\\\"\\n        >\\n\\n        <button\\n            v-if=\\\"parentFolder && parentFolder.id !== targetFolder.id\\\"\\n            class=\\\"sw-media-modal-move__breadcrumb-btn --parent\\\"\\n            @click=\\\"onSelection(parentFolder)\\\"\\n        >\\n            <sw-icon\\n                class=\\\"sw-media-folder-content__switch-button\\\"\\n                name=\\\"regular-chevron-right-xs\\\"\\n                size=\\\"10px\\\"\\n            />\\n            {{ parentFolder.name }}\\n        </button>\\n\\n        <button\\n            v-if=\\\"displayFolder && displayFolder.id !== targetFolder.id\\\"\\n            class=\\\"sw-media-modal-move__breadcrumb-btn\\\"\\n            @click=\\\"onSelection(displayFolder)\\\"\\n        >\\n            <sw-icon\\n                class=\\\"sw-media-folder-content__switch-button\\\"\\n                name=\\\"regular-chevron-right-xs\\\"\\n                size=\\\"10px\\\"\\n            />\\n            {{ displayFolder.name }}\\n        </button>\\n\\n        <button\\n            v-if=\\\"targetFolder\\\"\\n            class=\\\"sw-media-modal-move__breadcrumb-btn --target\\\"\\n            @click=\\\"onSelection(targetFolder)\\\"\\n        >\\n            <sw-icon\\n                class=\\\"sw-media-folder-content__switch-button\\\"\\n                name=\\\"regular-chevron-right-xs\\\"\\n                size=\\\"10px\\\"\\n            />\\n            {{ targetFolder.name }}\\n        </button>\\n    </div>\\n    {% endblock %}\\n    <sw-media-folder-content\\n        :start-folder-id=\\\"displayFolderId\\\"\\n        :selected-id=\\\"targetFolderId\\\"\\n        @selected=\\\"onSelection\\\"\\n    />\\n    {% endblock %}\\n\\n    \\n    {% block sw_media_modal_footer %}\\n    <template #modal-footer>\\n        \\n        {% block sw_media_modal_move_cancel_button %}\\n        <sw-button\\n            size=\\\"small\\\"\\n            @click=\\\"closeMoveModal\\\"\\n        >\\n            {{ $tc('global.default.cancel') }}\\n        </sw-button>\\n        {% endblock %}\\n\\n        \\n        {% block sw_media_modal_move_confirm_button %}\\n        <sw-button\\n            class=\\\"sw-media-modal-move__confirm\\\"\\n            size=\\\"small\\\"\\n            variant=\\\"primary\\\"\\n            :disabled=\\\"isMoveDisabled\\\"\\n            @click=\\\"moveSelection\\\"\\n        >\\n            {{ $tc('global.sw-media-modal-move.buttonMove') }}\\n        </sw-button>\\n        {% endblock %}\\n    </template>\\n    {% endblock %}\\n</sw-modal>\\n{% endblock %}\\n\";","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../../../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--15-1!../../../../../node_modules/css-loader/dist/cjs.js??ref--15-2!../../../../../node_modules/sass-loader/dist/cjs.js??ref--15-3!./sw-media-modal-move.scss\");\nif(content.__esModule) content = content.default;\nif(typeof content === 'string') content = [[module.id, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar add = require(\"!../../../../../node_modules/vue-style-loader/lib/addStylesClient.js\").default\nvar update = add(\"3cd29b56\", content, true, {});"],"sourceRoot":""}