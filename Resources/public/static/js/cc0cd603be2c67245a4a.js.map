{"version":3,"sources":["webpack:///./src/module/sw-order/component/sw-order-create-address-modal/index.js","webpack:///./src/module/sw-order/component/sw-order-create-address-modal/sw-order-create-address-modal.html.twig","webpack:///./src/module/sw-order/component/sw-order-create-address-modal/sw-order-create-address-modal.scss"],"names":["_Shopware","Shopware","Mixin","State","Service","Criteria","Data","template","mixins","getByName","props","customer","type","Object","required","address","addAddressModalTitle","String","editAddressModalTitle","cart","data","addresses","selectedAddressId","activeCustomer","this","isLoading","term","showAddressFormModal","defaultAddressIdMapping","currentAddress","computed","addressCriteria","criteria","addAssociation","setTerm","customerRepository","create","addressRepository","entity","source","isValidCompanyField","_this$currentAddress$","company","trim","length","created","createdComponent","methods","_this","_asyncToGenerator","_regeneratorRuntime","mark","_callee","wrap","_context","prev","next","getCustomerAddresses","stop","_this2","_callee2","_context2","search","sent","contextId","contextDataDefaultId","dispatch","t0","createNotificationError","message","$tc","finish","onNewActiveItem","isCurrentSelected","addressId","onSearchAddress","_this3","_callee3","_context3","onSelectExistingAddress","_this4","_callee4","_context4","id","onSave","findSelectedAddress","_this5","find","updateOrderContext","_this6","_callee5","_context5","context","_context6","_defineProperty","contextDataKey","salesChannelId","contextToken","token","$emit","saveCurrentCustomer","_this7","_callee6","_context7","hasOwnProperty","defaultShippingAddressId","defaultBillingAddressId","abrupt","save","saveCurrentAddress","_this8","_callee7","companyError","_context8","isNew","push","Classes","ShopwareError","code","expression","concat","error","Promise","reject","closeModal","onCancel","_this9","_callee8","_context9","onCloseAddressModal","onAddNewAddress","createNewCustomerAddress","onEditAddress","onChangeDefaultAddress","value","name","onSubmitAddressForm","_this10","_callee9","_context10","getAddressFormModalTitle","newAddress","customerId","content","__esModule","default","module","i","locals","exports","add"],"mappings":"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","file":"static/js/cc0cd603be2c67245a4a.js","sourcesContent":["import template from './sw-order-create-address-modal.html.twig';\nimport './sw-order-create-address-modal.scss';\n\n/**\n * @package checkout\n */\n\nconst { Mixin, State, Service } = Shopware;\nconst { Criteria } = Shopware.Data;\n\n// eslint-disable-next-line sw-deprecation-rules/private-feature-declarations\nexport default {\n    template,\n\n    mixins: [\n        Mixin.getByName('notification'),\n        Mixin.getByName('placeholder'),\n    ],\n\n    props: {\n        customer: {\n            type: Object,\n            required: true,\n        },\n        address: {\n            type: Object,\n            required: true,\n        },\n        addAddressModalTitle: {\n            type: String,\n            required: true,\n        },\n        editAddressModalTitle: {\n            type: String,\n            required: true,\n        },\n        cart: {\n            type: Object,\n            required: true,\n        },\n    },\n\n    data() {\n        return {\n            addresses: [],\n            selectedAddressId: null,\n            activeCustomer: this.customer,\n            isLoading: false,\n            term: null,\n            showAddressFormModal: false,\n            defaultAddressIdMapping: {\n                'billing-address': 'defaultBillingAddressId',\n                'shipping-address': 'defaultShippingAddressId',\n            },\n            currentAddress: null,\n        };\n    },\n\n    computed: {\n        addressCriteria() {\n            const criteria = new Criteria(1, 25);\n            criteria.addAssociation('salutation');\n            criteria.addAssociation('country');\n            criteria.addAssociation('countryState');\n\n            if (this.term) {\n                criteria.setTerm(this.term);\n            }\n\n            return criteria;\n        },\n\n        customerRepository() {\n            return Service('repositoryFactory').create('customer');\n        },\n\n        addressRepository() {\n            return Service('repositoryFactory').create(\n                this.activeCustomer.addresses.entity,\n                this.activeCustomer.addresses.source,\n            );\n        },\n\n        isValidCompanyField() {\n            return this.customer.company !== null && !!this.currentAddress.company?.trim().length;\n        },\n    },\n\n    created() {\n        this.createdComponent();\n    },\n\n    methods: {\n        async createdComponent() {\n            await this.getCustomerAddresses();\n        },\n\n        async getCustomerAddresses() {\n            this.isLoading = true;\n\n            // Get the latest addresses from customer's db\n            try {\n                this.addresses = await this.addressRepository.search(this.addressCriteria);\n\n                this.selectedAddressId = this.activeCustomer[this.address.contextId]\n                    || this.activeCustomer[this.address.contextDataDefaultId];\n\n                await Shopware.State.dispatch('error/resetApiErrors');\n            } catch {\n                this.createNotificationError({\n                    message: this.$tc('sw-order.create.messageFetchCustomerAddressesError'),\n                });\n            } finally {\n                this.isLoading = false;\n            }\n        },\n\n        onNewActiveItem() {\n            this.selectedAddressId = null;\n        },\n\n        isCurrentSelected(addressId) {\n            return this.selectedAddressId === addressId;\n        },\n\n        async onSearchAddress(term) {\n            this.term = term;\n            await this.getCustomerAddresses();\n        },\n\n        async onSelectExistingAddress(address) {\n            this.selectedAddressId = address.id;\n            await this.onSave();\n        },\n\n        findSelectedAddress() {\n            return this.addresses.find(address => address.id === this.selectedAddressId);\n        },\n\n        async updateOrderContext() {\n            const address = this.findSelectedAddress();\n\n            const context = {\n                [this.address.contextId]: address.id,\n                [this.address.contextDataKey]: address,\n                [this.address.contextDataDefaultId]: address[this.address.contextDataDefaultId],\n            };\n\n            await State\n                .dispatch('swOrder/updateOrderContext', {\n                    context,\n                    salesChannelId: this.activeCustomer.salesChannelId,\n                    contextToken: this.cart.token,\n                });\n\n            this.$emit('set-customer-address', {\n                contextId: this.address.contextId,\n                contextDataKey: this.address.contextDataKey,\n                data: address,\n            });\n        },\n\n        async saveCurrentCustomer() {\n            if (this.hasOwnProperty('defaultShippingAddressId')) {\n                this.activeCustomer.defaultShippingAddressId = this.defaultShippingAddressId;\n            }\n\n            if (this.hasOwnProperty('defaultBillingAddressId')) {\n                this.activeCustomer.defaultBillingAddressId = this.defaultBillingAddressId;\n            }\n\n            return this.customerRepository.save(this.activeCustomer);\n        },\n\n        async saveCurrentAddress() {\n            this.selectedAddressId = this.currentAddress.id;\n\n            if (this.currentAddress.isNew()) {\n                this.addresses.push(this.currentAddress);\n            }\n\n            if (!this.isValidCompanyField) {\n                const companyError = new Shopware.Classes.ShopwareError({\n                    code: 'c1051bb4-d103-4f74-8988-acbcafc7fdc3',\n                });\n\n                await Shopware.State.dispatch('error/addApiError', {\n                    expression: `customer_address.${this.currentAddress.id}.company`,\n                    error: companyError,\n                });\n\n                return Promise.reject(companyError);\n            }\n\n            return this.addressRepository.save(this.currentAddress);\n        },\n\n        closeModal() {\n            this.$emit('close-modal');\n        },\n\n        onCancel() {\n            this.closeModal();\n        },\n\n        async onSave() {\n            this.isLoading = true;\n\n            try {\n                await this.updateOrderContext();\n                this.closeModal();\n            } catch {\n                this.createNotificationError({\n                    message: this.$tc('sw-order.detail.messageSaveError'),\n                });\n            } finally {\n                this.isLoading = false;\n            }\n        },\n\n        onCloseAddressModal() {\n            this.showAddressFormModal = false;\n        },\n\n        onAddNewAddress() {\n            this.createNewCustomerAddress();\n            this.showAddressFormModal = true;\n        },\n\n        onEditAddress(address) {\n            this.currentAddress = address;\n            this.showAddressFormModal = true;\n        },\n\n        onChangeDefaultAddress(data) {\n            if (!data.value) {\n                return;\n            }\n\n            const name = this.defaultAddressIdMapping[data.name];\n\n            this[name] = data.id;\n        },\n\n        async onSubmitAddressForm() {\n            try {\n                this.isLoading = true;\n\n                if (this.currentAddress === null) {\n                    return;\n                }\n\n                await this.saveCurrentAddress();\n                await this.saveCurrentCustomer();\n                await this.updateOrderContext();\n                await this.getCustomerAddresses();\n\n                this.currentAddress = null;\n                this.showAddressFormModal = false;\n            } catch {\n                this.createNotificationError({\n                    message: this.$tc('sw-order.detail.messageSaveError'),\n                });\n            } finally {\n                this.isLoading = false;\n            }\n        },\n\n        getAddressFormModalTitle() {\n            return !this.currentAddress || this.currentAddress.isNew()\n                ? this.addAddressModalTitle\n                : this.editAddressModalTitle;\n        },\n\n        createNewCustomerAddress() {\n            const newAddress = this.addressRepository.create();\n            newAddress.customerId = this.activeCustomer.id;\n\n            this.currentAddress = newAddress;\n        },\n    },\n};\n","export default \"\\n{% block sw_order_create_address_modal %}\\n<sw-modal\\n    :title=\\\"editAddressModalTitle\\\"\\n    class=\\\"sw-order-create-address-modal\\\"\\n    @modal-close=\\\"onCancel\\\"\\n>\\n    \\n    {% block sw_order_create_address_modal_content %}\\n    \\n    {% block sw_order_create_address_form_modal %}\\n    <sw-modal\\n        v-if=\\\"showAddressFormModal\\\"\\n        :title=\\\"getAddressFormModalTitle()\\\"\\n        @modal-close=\\\"onCloseAddressModal\\\"\\n    >\\n        \\n        {% block sw_order_create_address_form_modal_content %}\\n        <sw-customer-address-form\\n            :address=\\\"currentAddress\\\"\\n            :customer=\\\"activeCustomer\\\"\\n            :disabled=\\\"isLoading\\\"\\n        >\\n            <sw-customer-address-form-options\\n                :address=\\\"currentAddress\\\"\\n                :customer=\\\"activeCustomer\\\"\\n                :custom-field-sets=\\\"[]\\\"\\n                @default-address-change=\\\"onChangeDefaultAddress\\\"\\n            />\\n        </sw-customer-address-form>\\n        {% endblock %}\\n\\n        \\n        {% block sw_order_create_address_form_modal_footer %}\\n        <template #modal-footer>\\n            \\n            {% block sw_order_create_address_form_modal_cancel_button %}\\n            <sw-button\\n                size=\\\"small\\\"\\n                @click=\\\"onCloseAddressModal\\\"\\n            >\\n                {{ $tc('sw-customer.detailAddresses.buttonCancel') }}\\n            </sw-button>\\n            {% endblock %}\\n\\n            \\n            {% block sw_order_create_address_form_modal_apply_button %}\\n            <sw-button\\n                :is-loading=\\\"isLoading\\\"\\n                variant=\\\"primary\\\"\\n                size=\\\"small\\\"\\n                @click=\\\"onSubmitAddressForm\\\"\\n            >\\n                {{ $tc('sw-customer.detailAddresses.buttonSaveAndSelect') }}\\n            </sw-button>\\n            {% endblock %}\\n        </template>\\n        {% endblock %}\\n    </sw-modal>\\n    {% endblock %}\\n    <sw-card\\n        :is-loading=\\\"isLoading\\\"\\n        :large=\\\"true\\\"\\n        position-identifier=\\\"sw-order-create-address-modal\\\"\\n        class=\\\"sw-order-create-address-modal__card-filter\\\"\\n    >\\n        \\n        {% block sw_order_create_address_modal_toolbar %}\\n        <template #toolbar>\\n            <sw-card-filter\\n                :placeholder=\\\"$tc('sw-order.addressSelection.searchAddressToolbarPlaceholder')\\\"\\n                @sw-card-filter-term-change=\\\"onSearchAddress\\\"\\n            >\\n                \\n                {% block sw_order_create_address_modal_add_button %}\\n                <template #filter>\\n                    <sw-button\\n                        class=\\\"sw-order-create-address-modal__add-btn\\\"\\n                        size=\\\"small\\\"\\n                        @click=\\\"onAddNewAddress\\\"\\n                    >\\n                        <sw-icon\\n                            name=\\\"regular-plus-circle-s\\\"\\n                            small\\n                        />\\n                        {{ $tc('sw-customer.detailAddresses.buttonAddAddress') }}\\n                    </sw-button>\\n                </template>\\n                {% endblock %}\\n            </sw-card-filter>\\n        </template>\\n        {% endblock %}\\n        \\n        {% block sw_order_create_address_modal_empty_state %}\\n        <template #grid>\\n            <div\\n                v-if=\\\"!isLoading && !addresses.length\\\"\\n                class=\\\"sw-order-create-address-modal__card is--empty\\\"\\n            >\\n                <sw-empty-state\\n                    :title=\\\"$tc('sw-order.addressSelection.emptySearchResults')\\\"\\n                    :icon=\\\"'regular-book-user'\\\"\\n                >\\n                    \\n                    {% block sw_order_create_address_modal_empty_state_content %}\\n                    <span></span>\\n                    {% endblock %}\\n                </sw-empty-state>\\n            </div>\\n            <div\\n                v-for=\\\"(address, index) in addresses\\\"\\n                :key=\\\"address.id\\\"\\n                :class=\\\"{ 'is--selected': isCurrentSelected(address.id)}\\\"\\n                class=\\\"sw-order-create-address-modal__card\\\"\\n            >\\n                <div class=\\\"sw-order-create-address-modal__card-body\\\">\\n                    <span\\n                        v-if=\\\"isCurrentSelected(address.id)\\\"\\n                        class=\\\"sw-order-create-address-modal__card-label\\\"\\n                    >\\n                        {{ $tc('sw-order.addressSelection.currentlySelected') }}<br><br>\\n                    </span>\\n                    <sw-address :address=\\\"address\\\" />\\n                    <a\\n                        class=\\\"sw-order-create-address-modal__edit-btn\\\"\\n                        role=\\\"button\\\"\\n                        tabindex=\\\"0\\\"\\n                        @click=\\\"onEditAddress(address)\\\"\\n                        @keydown.enter=\\\"onEditAddress(address)\\\"\\n                    >\\n                        {{ $tc('sw-customer.detailBase.buttonTitleEditAddress') }}\\n                    </a>\\n                </div>\\n                <div class=\\\"sw-order-create-address-modal__select-btn\\\">\\n                    <sw-button\\n                        v-if=\\\"!isCurrentSelected(address.id)\\\"\\n                        @click=\\\"onSelectExistingAddress(address)\\\"\\n                    >\\n                        {{ $tc('sw-customer.detailAddresses.buttonSelect') }}\\n                    </sw-button>\\n                </div>\\n            </div>\\n        </template>\\n        {% endblock %}\\n    </sw-card>\\n    {% endblock %}\\n\\n    \\n    {% block sw_order_create_address_modal_actions %}\\n    <template #modal-footer>\\n        \\n        {% block sw_order_create_address_modal_cancel_button %}\\n        <sw-button\\n            size=\\\"small\\\"\\n            @click=\\\"onCancel\\\"\\n        >\\n            {{ $tc('sw-customer.detailAddresses.buttonClose') }}\\n        </sw-button>\\n        {% endblock %}\\n    </template>\\n    {% endblock %}\\n</sw-modal>\\n{% endblock %}\\n\";","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../../../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--15-1!../../../../../node_modules/css-loader/dist/cjs.js??ref--15-2!../../../../../node_modules/sass-loader/dist/cjs.js??ref--15-3!./sw-order-create-address-modal.scss\");\nif(content.__esModule) content = content.default;\nif(typeof content === 'string') content = [[module.id, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar add = require(\"!../../../../../node_modules/vue-style-loader/lib/addStylesClient.js\").default\nvar update = add(\"66a34c74\", content, true, {});"],"sourceRoot":""}