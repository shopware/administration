{"version":3,"sources":["webpack:///./src/module/sw-flow/page/sw-flow-detail/sw-flow-detail.scss","webpack:///./src/module/sw-flow/page/sw-flow-detail/index.js","webpack:///./src/module/sw-flow/page/sw-flow-detail/sw-flow-detail.html.twig"],"names":["content","__esModule","default","module","i","locals","exports","add","_Shopware","Shopware","Component","Mixin","Context","State","Utils","Service","_Shopware$Data","Data","Criteria","EntityCollection","cloneDeep","object","_Component$getCompone","getComponentHelper","mapState","mapGetters","mapPropertyErrors","template","inject","mixins","getByName","props","flowId","type","String","required","data","isLoading","isSaveSuccessful","showLeavePageWarningModal","nextRoute","metaInfo","title","this","$createTitle","identifier","computed","_objectSpread","_this$flow","flow","name","flowRepository","repositoryFactory","create","flowTemplateRepository","flowSequenceRepository","appFlowActionRepository","isNewFlow","flowCriteria","criteria","addAssociation","getAssociation","addSorting","sort","flowTemplateCriteria","documentTypeRepository","documentTypeCriteria","mailTemplateRepository","customFieldSetRepository","customFieldRepository","mailTemplateIdsCriteria","addFilter","equalsAny","mailTemplateIds","customerGroupRepository","customerGroupCriteria","appFlowActionCriteria","stateMachineStateRepository","stateMachineStateCriteria","field","order","customFieldSetCriteria","customFieldSetIds","customFieldCriteria","customFieldIds","ruleRepository","isTemplate","_this$$route$query","$route","query","isUnknownTrigger","_this","triggerEvents","some","event","eventName","watch","params","flowTemplateId","getDetailFlow","created","createdComponent","beforeRouteLeave","to","from","next","_isNew","hasFlowChanged","beforeDestroy","beforeDestroyComponent","methods","addLabels","entity","tagIds","ExtensionAPI","publishData","id","path","scope","getAppFlowAction","getDetailFlowTemplate","createNewFlow","dispatch","routeDetailTab","tabName","concat","createFromFlowTemplate","createId","priority","commit","_this2","get","api","then","getDataForActionDescription","catch","createNotificationError","message","$tc","finally","search","response","_this3","getRuleDataForFlowTemplate","onSave","_this4","_asyncToGenerator","_regeneratorRuntime","mark","_callee","wrap","_context","prev","removeAllSelectors","validateEmptySequence","length","createNotificationWarning","abrupt","isNew","updateSequences","save","createNotificationSuccess","$router","push","handleFieldValiationError","stop","_this5","_callee2","sequences","deletedSequenceIds","updateFlow","_context2","map","item","sync","getDeletedSequenceIds","syncDeleted","sent","Object","keys","forEach","key","sequenceIds","sequence","getOrigin","filter","includes","flowNameError","flowEventNameError","currentRouteName","history","current","hasErrorTabFlow","hasErrorTabGeneral","saveFinish","onLeaveModalClose","onLeaveModalConfirm","_this6","$nextTick","newSequences","ruleId","actionName","invalidSequences","reduce","result","_this7","promises","flowBuilderService","getActionName","customFieldActionConstants","Promise","all","_this8","_data$config","_data$config2","_data$config$sequence","_data$config3","config","description","buildSequencesFromConfig","createSequenceEntity","flowSequence","Boolean","_this9","parentIds","parentId","rearrangeArrayObjects","source","entityName","_this10","ruleIds","rules","sequencesWithRules","rule","find"],"mappings":"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","file":"static/js/487e04669c1244caeaf3.js","sourcesContent":["// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../../../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--15-1!../../../../../node_modules/css-loader/dist/cjs.js??ref--15-2!../../../../../node_modules/sass-loader/dist/cjs.js??ref--15-3!./sw-flow-detail.scss\");\nif(content.__esModule) content = content.default;\nif(typeof content === 'string') content = [[module.id, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar add = require(\"!../../../../../node_modules/vue-style-loader/lib/addStylesClient.js\").default\nvar update = add(\"f22f8900\", content, true, {});","import template from './sw-flow-detail.html.twig';\nimport './sw-flow-detail.scss';\n\nconst { Component, Mixin, Context, State, Utils, Service } = Shopware;\nconst { Criteria, EntityCollection } = Shopware.Data;\nconst { cloneDeep } = Shopware.Utils.object;\nconst { mapState, mapGetters, mapPropertyErrors } = Component.getComponentHelper();\n\n/**\n * @private\n * @package services-settings\n */\nexport default {\n    template,\n\n    inject: [\n        'acl',\n        'repositoryFactory',\n        'feature',\n        'flowBuilderService',\n    ],\n\n    mixins: [\n        Mixin.getByName('placeholder'),\n        Mixin.getByName('notification'),\n    ],\n\n    props: {\n        flowId: {\n            type: String,\n            required: false,\n            default: null,\n        },\n    },\n\n    data() {\n        return {\n            isLoading: false,\n            isSaveSuccessful: false,\n            showLeavePageWarningModal: false,\n            nextRoute: null,\n        };\n    },\n\n    metaInfo() {\n        return {\n            title: this.$createTitle(this.identifier),\n        };\n    },\n\n    computed: {\n        identifier() {\n            return this.flow?.name;\n        },\n\n        flowRepository() {\n            return this.repositoryFactory.create('flow');\n        },\n\n        flowTemplateRepository() {\n            return this.repositoryFactory.create('flow_template');\n        },\n\n        flowSequenceRepository() {\n            return this.repositoryFactory.create('flow_sequence');\n        },\n\n        appFlowActionRepository() {\n            return this.repositoryFactory.create('app_flow_action');\n        },\n\n        isNewFlow() {\n            return !this.flowId;\n        },\n\n        flowCriteria() {\n            const criteria = new Criteria(1, 25);\n\n            criteria.addAssociation('sequences.rule');\n            criteria.getAssociation('sequences')\n                .addSorting(Criteria.sort('displayGroup', 'ASC'))\n                .addSorting(Criteria.sort('parentId', 'ASC'))\n                .addSorting(Criteria.sort('trueCase', 'ASC'))\n                .addSorting(Criteria.sort('position', 'ASC'));\n\n            return criteria;\n        },\n\n        flowTemplateCriteria() {\n            return new Criteria(1, 25);\n        },\n\n        documentTypeRepository() {\n            return this.repositoryFactory.create('document_type');\n        },\n\n        documentTypeCriteria() {\n            const criteria = new Criteria(1, 100);\n            criteria.addSorting(Criteria.sort('name', 'ASC'));\n            return criteria;\n        },\n\n        mailTemplateRepository() {\n            return this.repositoryFactory.create('mail_template');\n        },\n\n        customFieldSetRepository() {\n            return this.repositoryFactory.create('custom_field_set');\n        },\n\n        customFieldRepository() {\n            return this.repositoryFactory.create('custom_field');\n        },\n\n        mailTemplateIdsCriteria() {\n            const criteria = new Criteria(1, 25);\n            criteria.addAssociation('mailTemplateType');\n            criteria.addFilter(Criteria.equalsAny('id', this.mailTemplateIds));\n            return criteria;\n        },\n\n        customerGroupRepository() {\n            return this.repositoryFactory.create('customer_group');\n        },\n\n        customerGroupCriteria() {\n            const criteria = new Criteria(1, 100);\n            criteria.addSorting(Criteria.sort('name', 'ASC'));\n            return criteria;\n        },\n\n        appFlowActionCriteria() {\n            const criteria = new Criteria(1, 25);\n            criteria.addAssociation('app');\n            return criteria;\n        },\n\n        stateMachineStateRepository() {\n            return this.repositoryFactory.create('state_machine_state');\n        },\n\n        stateMachineStateCriteria() {\n            const criteria = new Criteria(1, null);\n            criteria.addSorting({ field: 'name', order: 'ASC' });\n            criteria.addAssociation('stateMachine');\n            criteria.addFilter(\n                Criteria.equalsAny(\n                    'state_machine_state.stateMachine.technicalName',\n                    ['order.state', 'order_transaction.state', 'order_delivery.state'],\n                ),\n            );\n\n            return criteria;\n        },\n\n        customFieldSetCriteria() {\n            const criteria = new Criteria(1, 25);\n            criteria.addFilter(Criteria.equalsAny('id', this.customFieldSetIds));\n            return criteria;\n        },\n\n        customFieldCriteria() {\n            const criteria = new Criteria(1, 25);\n            criteria.addFilter(Criteria.equalsAny('id', this.customFieldIds));\n            return criteria;\n        },\n\n        ruleRepository() {\n            return this.repositoryFactory.create('rule');\n        },\n\n        isTemplate() {\n            return this.$route.query?.type === 'template';\n        },\n\n        isUnknownTrigger() {\n            if (!this.flowId || this.isLoading) {\n                return false;\n            }\n\n            return !this.triggerEvents.some((event) => {\n                return event.name === this.flow.eventName;\n            });\n        },\n\n        ...mapState('swFlowState', ['flow', 'triggerEvents']),\n        ...mapGetters('swFlowState', [\n            'sequences',\n            'mailTemplateIds',\n            'customFieldSetIds',\n            'customFieldIds',\n            'hasFlowChanged',\n        ]),\n        ...mapPropertyErrors('flow', ['name', 'eventName']),\n    },\n\n    watch: {\n        flowId() {\n            if (!this.$route.params.flowTemplateId) {\n                this.getDetailFlow();\n            }\n        },\n    },\n\n    created() {\n        this.createdComponent();\n    },\n\n    beforeRouteLeave(to, from, next) {\n        if (this.flow._isNew) {\n            next();\n            return;\n        }\n\n        if (this.hasFlowChanged) {\n            this.nextRoute = next;\n            this.showLeavePageWarningModal = true;\n        } else {\n            next();\n        }\n    },\n\n    beforeDestroy() {\n        this.beforeDestroyComponent();\n    },\n\n    methods: {\n        createdComponent() {\n            Service('flowBuilderService').addLabels({\n                entity: 'sw-flow.labelDescription.labelEntity',\n                tagIds: 'sw-flow.labelDescription.labelTag',\n            });\n\n            Shopware.ExtensionAPI.publishData({\n                id: 'sw-flow-detail__flow',\n                path: 'flow',\n                scope: this,\n            });\n\n            this.getAppFlowAction();\n\n            if (this.isTemplate) {\n                this.getDetailFlowTemplate();\n                return;\n            }\n\n            if (this.flowId) {\n                this.getDetailFlow();\n                return;\n            }\n\n            this.createNewFlow();\n        },\n\n        beforeDestroyComponent() {\n            State.dispatch('swFlowState/resetFlowState');\n        },\n\n        routeDetailTab(tabName) {\n            if (!tabName) return {};\n\n            if (this.isNewFlow) {\n                return { name: `sw.flow.create.${tabName}` };\n            }\n\n            if (this.isTemplate) {\n                return { name: `sw.flow.detail.${tabName}`, query: { type: 'template' } };\n            }\n\n            return { name: `sw.flow.detail.${tabName}` };\n        },\n\n        createNewFlow() {\n            if (this.$route.params.flowTemplateId) {\n                return this.createFromFlowTemplate();\n            }\n\n            const flow = this.flowRepository.create();\n            flow.id = Utils.createId();\n            flow.priority = 0;\n            flow.eventName = '';\n\n            return State.commit('swFlowState/setFlow', flow);\n        },\n\n        getDetailFlow() {\n            this.isLoading = true;\n            Shopware.State.dispatch('swFlowState/fetchTriggerActions');\n\n            return this.flowRepository.get(this.flowId, Context.api, this.flowCriteria)\n                .then((data) => {\n                    State.commit('swFlowState/setFlow', data);\n                    State.commit('swFlowState/setOriginFlow', cloneDeep(data));\n                    this.getDataForActionDescription();\n                })\n                .catch(() => {\n                    this.createNotificationError({\n                        message: this.$tc('sw-flow.flowNotification.messageError'),\n                    });\n                })\n                .finally(() => {\n                    this.isLoading = false;\n                });\n        },\n\n        getAppFlowAction() {\n            return this.appFlowActionRepository.search(this.appFlowActionCriteria, Shopware.Context.api)\n                .then((response) => {\n                    State.commit('swFlowState/setAppActions', response);\n                });\n        },\n\n        getDetailFlowTemplate() {\n            this.isLoading = true;\n\n            return this.flowTemplateRepository.get(this.flowId, Context.api, this.flowTemplateCriteria)\n                .then((data) => {\n                    State.commit('swFlowState/setFlow', data);\n                    State.commit('swFlowState/setOriginFlow', cloneDeep(data));\n                    this.getDataForActionDescription();\n                    this.getRuleDataForFlowTemplate();\n                })\n                .catch(() => {\n                    this.createNotificationError({\n                        message: this.$tc('sw-flow.flowNotification.messageError'),\n                    });\n                })\n                .finally(() => {\n                    this.isLoading = false;\n                });\n        },\n\n        async onSave() {\n            // Remove selector sequence type before saving\n            this.removeAllSelectors();\n\n            // Validate condition sequence which has empty rule or action sequence has empty action name\n            const invalidSequences = this.validateEmptySequence();\n\n            if (invalidSequences.length) {\n                this.createNotificationWarning({\n                    message: this.$tc('sw-flow.flowNotification.messageRequiredEmptyFields'),\n                });\n\n                return;\n            }\n\n            this.isSaveSuccessful = false;\n            this.isLoading = true;\n\n            if (this.isTemplate) {\n                this.createNotificationError({\n                    message: this.$tc('sw-flow.flowNotification.messageWarningSave'),\n                });\n\n                this.isLoading = false;\n\n                return;\n            }\n\n            if (!(typeof this.flow.isNew === 'function' && this.flow.isNew()) && !this.isTemplate) {\n                await this.updateSequences();\n            }\n\n            this.flowRepository.save(this.flow)\n                .then(() => {\n                    if ((typeof this.flow.isNew === 'function' && this.flow.isNew()) || this.$route.params.flowTemplateId) {\n                        this.createNotificationSuccess({\n                            message: this.$tc('sw-flow.flowNotification.messageCreateSuccess'),\n                        });\n\n                        this.$router.push({\n                            name: 'sw.flow.detail',\n                            params: { id: this.flow.id },\n                        });\n                    } else {\n                        this.getDetailFlow();\n                    }\n\n                    this.isSaveSuccessful = true;\n                })\n                .catch(() => {\n                    this.createNotificationError({\n                        message: this.$tc('sw-flow.flowNotification.messageSaveError'),\n                    });\n\n                    this.handleFieldValiationError();\n                })\n                .finally(() => {\n                    this.isLoading = false;\n                });\n        },\n\n        async updateSequences() {\n            const sequences = this.sequences.map(item => {\n                item.flowId = this.flow.id;\n                return item;\n            });\n\n            await this.flowSequenceRepository.sync(sequences);\n\n            const deletedSequenceIds = this.getDeletedSequenceIds();\n\n            if (deletedSequenceIds.length > 0) {\n                await this.flowSequenceRepository.syncDeleted(deletedSequenceIds);\n            }\n\n            const updateFlow = await this.flowRepository.get(this.flowId, Context.api);\n\n            Object.keys(updateFlow).forEach((key) => {\n                if (key !== 'sequences') {\n                    updateFlow[key] = this.flow[key];\n                }\n            });\n\n            State.commit('swFlowState/setFlow', updateFlow);\n        },\n\n        getDeletedSequenceIds() {\n            const sequenceIds = this.sequences.map(sequence => sequence.id);\n            const deletedSequences = this.flow.getOrigin().sequences.filter(sequence => !sequenceIds.includes(sequence.id));\n\n            return deletedSequences.map(sequence => sequence.id);\n        },\n\n        handleFieldValiationError() {\n            if (!this.flowNameError && !this.flowEventNameError) {\n                return;\n            }\n\n            const currentRouteName = this.$router.history.current.name;\n\n            const hasErrorTabFlow = (currentRouteName === 'sw.flow.create.flow'\n               || currentRouteName === 'sw.flow.detail.flow')\n               && this.flowEventNameError;\n\n            const hasErrorTabGeneral = (currentRouteName === 'sw.flow.create.general'\n                || currentRouteName === 'sw.flow.detail.general')\n                && this.flowNameError;\n\n            if (hasErrorTabFlow || hasErrorTabGeneral) {\n                return;\n            }\n\n            // Navigate to another tab which contains field errors\n            if (this.flowId) {\n                this.$router.push({\n                    name: this.flowNameError\n                        ? 'sw.flow.detail.general'\n                        : 'sw.flow.detail.flow',\n                    params: { flowId: this.flowId },\n                });\n\n                return;\n            }\n\n            this.$router.push({\n                name: this.flowNameError\n                    ? 'sw.flow.create.general'\n                    : 'sw.flow.create.flow',\n            });\n        },\n\n        saveFinish() {\n            this.isLoading = false;\n            this.isSaveSuccessful = false;\n        },\n\n        onLeaveModalClose() {\n            this.nextRoute(false);\n            this.nextRoute = null;\n            this.showLeavePageWarningModal = false;\n        },\n\n        onLeaveModalConfirm() {\n            this.showLeavePageWarningModal = false;\n\n            this.$nextTick(() => {\n                this.nextRoute();\n            });\n        },\n\n        removeAllSelectors() {\n            const newSequences = this.sequences.filter(sequence => {\n                return sequence.ruleId !== null || sequence.actionName !== null;\n            });\n\n            State.commit('swFlowState/setSequences', newSequences);\n        },\n\n        validateEmptySequence() {\n            const invalidSequences = this.sequences.reduce((result, sequence) => {\n                if (sequence.ruleId === '' || sequence.actionName === '') {\n                    result.push(sequence.id);\n                }\n\n                return result;\n            }, []);\n\n            State.commit('swFlowState/setInvalidSequences', invalidSequences);\n\n            return invalidSequences;\n        },\n\n        getDataForActionDescription() {\n            if (!this.sequences) {\n                return null;\n            }\n\n            const promises = [];\n            // eslint-disable-next-line max-len\n            const hasSetOrderStateAction = this.sequences.some(sequence => sequence.actionName === this.flowBuilderService.getActionName('SET_ORDER_STATE'));\n\n            if (hasSetOrderStateAction) {\n                // get support information for set order state action.\n                promises.push(this.stateMachineStateRepository.search(this.stateMachineStateCriteria)\n                    .then(data => {\n                        State.commit('swFlowState/setStateMachineState', data);\n                    }));\n            }\n\n            // eslint-disable-next-line max-len\n            const hasDocumentAction = this.sequences.some(sequence => sequence.actionName === this.flowBuilderService.getActionName('GENERATE_DOCUMENT'));\n\n            if (hasDocumentAction) {\n                // get support information for generate document action.\n                promises.push(this.documentTypeRepository.search(this.documentTypeCriteria).then((data) => {\n                    Shopware.State.commit('swFlowState/setDocumentTypes', data);\n                }));\n            }\n\n            // eslint-disable-next-line max-len\n            const hasMailSendAction = this.sequences.some(sequence => sequence.actionName === this.flowBuilderService.getActionName('MAIL_SEND'));\n\n            if (hasMailSendAction) {\n                // get support information for mail send action.\n                promises.push(this.mailTemplateRepository.search(this.mailTemplateIdsCriteria).then((data) => {\n                    Shopware.State.commit('swFlowState/setMailTemplates', data);\n                }));\n            }\n\n            // eslint-disable-next-line max-len\n            const hasChangeCustomerGroup = this.sequences.some(sequence => sequence.actionName === this.flowBuilderService.getActionName('CHANGE_CUSTOMER_GROUP'));\n\n            if (hasChangeCustomerGroup) {\n                // get support information for change customer group action.\n                promises.push(this.customerGroupRepository.search(this.customerGroupCriteria).then((data) => {\n                    Shopware.State.commit('swFlowState/setCustomerGroups', data);\n                }));\n            }\n\n            const customFieldActionConstants = [\n                this.flowBuilderService.getActionName('SET_ORDER_CUSTOM_FIELD'),\n                this.flowBuilderService.getActionName('SET_CUSTOMER_CUSTOM_FIELD'),\n                this.flowBuilderService.getActionName('SET_CUSTOMER_GROUP_CUSTOM_FIELD'),\n            ];\n            // eslint-disable-next-line max-len\n            const hasSetCustomFieldAction = this.sequences.some(sequence => customFieldActionConstants.includes(sequence.actionName));\n\n            if (hasSetCustomFieldAction) {\n                promises.push(this.customFieldSetRepository.search(this.customFieldSetCriteria).then((data) => {\n                    Shopware.State.commit('swFlowState/setCustomFieldSets', data);\n                }));\n\n                promises.push(this.customFieldRepository.search(this.customFieldCriteria).then((data) => {\n                    Shopware.State.commit('swFlowState/setCustomFields', data);\n                }));\n            }\n\n            return Promise.all(promises);\n        },\n\n        createFromFlowTemplate() {\n            const flow = this.flowRepository.create();\n            flow.id = Utils.createId();\n            flow.priority = 0;\n\n            return this.flowTemplateRepository.get(this.$route.params.flowTemplateId, Context.api, this.flowTemplateCriteria)\n                .then((data) => {\n                    flow.name = data.name;\n                    flow.eventName = data.config?.eventName;\n                    flow.description = data.config?.description;\n                    flow.sequences = this.buildSequencesFromConfig(data.config?.sequences ?? []);\n\n                    State.commit('swFlowState/setFlow', flow);\n                    State.commit('swFlowState/setOriginFlow', cloneDeep(flow));\n                    this.getDataForActionDescription();\n                    this.getRuleDataForFlowTemplate();\n                })\n                .catch(() => {\n                    this.createNotificationError({\n                        message: this.$tc('sw-flow.flowNotification.messageError'),\n                    });\n                })\n                .finally(() => {\n                    this.isLoading = false;\n                });\n        },\n\n        createSequenceEntity(flowSequence) {\n            const entity = this.flowSequenceRepository.create();\n            Object.keys(flowSequence).forEach((key) => {\n                if (key === 'trueCase') {\n                    entity[key] = Boolean(flowSequence[key]);\n\n                    return;\n                }\n\n                if (key === 'config') {\n                    entity[key] = { ...flowSequence[key] };\n\n                    return;\n                }\n\n                entity[key] = flowSequence[key];\n            });\n\n            return entity;\n        },\n\n        buildSequencesFromConfig(sequences) {\n            const parentIds = {};\n\n            sequences = sequences.map(sequence => {\n                sequence = this.createSequenceEntity(sequence);\n\n                parentIds[sequence.id] = Utils.createId();\n                sequence.id = parentIds[sequence.id];\n\n                return sequence;\n            });\n\n            // update parentId of sequence\n            for (let i = 0; i < sequences.length; i += 1) {\n                if (sequences[i].parentId !== null) {\n                    sequences[i].parentId = parentIds[sequences[i].parentId];\n                }\n            }\n\n            sequences = Service('flowBuilderService').rearrangeArrayObjects(sequences);\n\n            return new EntityCollection(\n                this.flowSequenceRepository.source,\n                this.flowSequenceRepository.entityName,\n                Context.api,\n                null,\n                sequences,\n            );\n        },\n\n        getRuleDataForFlowTemplate() {\n            const ruleIds = this.sequences.filter(sequence => sequence.ruleId !== null).map(sequence => sequence.ruleId);\n\n            if (!ruleIds.length) {\n                return;\n            }\n\n            const criteria = new Criteria(1, 25);\n            criteria.addFilter(Criteria.equalsAny('id', ruleIds));\n\n            this.ruleRepository.search(criteria).then((rules) => {\n                const sequencesWithRules = this.sequences.map(sequence => {\n                    if (sequence.ruleId) {\n                        sequence.rule = rules.find(item => item.id === sequence.ruleId);\n                    }\n\n                    return sequence;\n                });\n\n                State.commit('swFlowState/setSequences', sequencesWithRules);\n                State.commit('swFlowState/setOriginFlow', cloneDeep(this.flow));\n            });\n        },\n    },\n};\n","export default \"\\n{% block sw_flow_detail %}\\n<sw-page class=\\\"sw-flow-detail\\\">\\n    \\n    {% block sw_flow_detail_header %}\\n    <template #smart-bar-header>\\n        <h2>{{ placeholder(flow, 'name', $tc('sw-flow.detail.textHeadline')) }}</h2>\\n    </template>\\n    {% endblock %}\\n\\n    \\n    {% block sw_flow_detail_smart_bar_actions %}\\n    <template #smart-bar-actions>\\n        \\n        {% block sw_flow_detail_smart_bar_actions_save %}\\n        <sw-button-process\\n            v-tooltip=\\\"{\\n                message: $tc('sw-privileges.tooltip.warning'),\\n                disabled: acl.can('flow.editor'),\\n                position: 'bottom',\\n                showOnDisabledElements: true\\n            }\\\"\\n            class=\\\"sw-flow-detail__save\\\"\\n            variant=\\\"primary\\\"\\n            :is-loading=\\\"isLoading\\\"\\n            :process-success=\\\"isSaveSuccessful\\\"\\n            :disabled=\\\"!acl.can('flow.editor')\\\"\\n            {% if VUE3 %}\\n            @update:process-success=\\\"saveFinish\\\"\\n            {% else %}\\n            @process-finish=\\\"saveFinish\\\"\\n            {% endif %}\\n            @click.prevent=\\\"onSave\\\"\\n        >\\n            {{ $tc('global.default.save') }}\\n        </sw-button-process>\\n        {% endblock %}\\n    </template>\\n    {% endblock %}\\n\\n    \\n    {% block sw_flow_content %}\\n    <template #content>\\n        \\n        {% block sw_flow_leave_page_modal %}\\n        <sw-flow-leave-page-modal\\n            v-if=\\\"showLeavePageWarningModal\\\"\\n            @page-leave-cancel=\\\"onLeaveModalClose\\\"\\n            @page-leave-confirm=\\\"onLeaveModalConfirm\\\"\\n        />\\n        {% endblock %}\\n\\n        <sw-card-view :class=\\\"{'sw-flow-detail__template': isTemplate }\\\">\\n            \\n            {% block sw_flow_tabs_header %}\\n            <sw-tabs position-identifier=\\\"sw-flow-detail\\\">\\n                \\n                {% block sw_flow_tabs_header_general %}\\n                <sw-tabs-item\\n                    class=\\\"sw-flow-detail__tab-general\\\"\\n                    :route=\\\"routeDetailTab('general')\\\"\\n                >\\n                    {{ $tc('sw-flow.page.tabGeneral') }}\\n                </sw-tabs-item>\\n                {% endblock %}\\n\\n                \\n                {% block sw_flow_tabs_header_builder %}\\n                <sw-tabs-item\\n                    class=\\\"sw-flow-detail__tab-flow\\\"\\n                    :route=\\\"routeDetailTab('flow')\\\"\\n                >\\n                    {{ $tc('sw-flow.page.tabFlow') }}\\n                </sw-tabs-item>\\n                {% endblock %}\\n\\n                \\n                {% block sw_flow_tabs_header_extension %}{% endblock %}\\n            </sw-tabs>\\n            {% endblock %}\\n            <sw-alert\\n                v-if=\\\"isTemplate\\\"\\n                variant=\\\"warning\\\"\\n                class=\\\"sw-flow-detail__warning\\\"\\n            >\\n                {{ $tc('sw-flow.flowNotification.messageWarningSave') }}\\n            </sw-alert>\\n            \\n            {% block sw_flow_tabs_content %}\\n            <template v-if=\\\"isLoading\\\">\\n                <sw-skeleton />\\n                <sw-skeleton />\\n            </template>\\n\\n            <template v-else>\\n                {% if VUE3 %}\\n                <router-view\\n                    v-slot=\\\"{ Component }\\\"\\n                >\\n                    <component\\n                        :is=\\\"Component\\\"\\n                        :is-loading=\\\"isLoading\\\"\\n                        :is-new-flow=\\\"isNewFlow\\\"\\n                        :is-template=\\\"isTemplate\\\"\\n                        :is-unknown-trigger=\\\"isUnknownTrigger\\\"\\n                    />\\n                </router-view>\\n                {% else %}\\n                <router-view\\n                    :is-loading=\\\"isLoading\\\"\\n                    :is-new-flow=\\\"isNewFlow\\\"\\n                    :is-template=\\\"isTemplate\\\"\\n                    :is-unknown-trigger=\\\"isUnknownTrigger\\\"\\n                />\\n                {% endif %}\\n            </template>\\n            {% endblock %}\\n        </sw-card-view>\\n\\n        \\n        {% block sw_flow_detail_modal_extension %}{% endblock %}\\n    </template>\\n    {% endblock %}\\n</sw-page>\\n{% endblock %}\\n\";"],"sourceRoot":""}