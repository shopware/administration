{"version":3,"sources":["webpack:///./src/module/sw-cms/page/sw-cms-detail/sw-cms-detail.scss","webpack:///./src/module/sw-cms/page/sw-cms-detail/index.js","webpack:///./src/module/sw-cms/page/sw-cms-detail/sw-cms-detail.html.twig"],"names":["content","__esModule","default","module","i","locals","exports","add","_Shopware","Shopware","Component","Mixin","Utils","mapPropertyErrors","getComponentHelper","ShopwareError","Classes","debounce","_Shopware$Utils$objec","object","cloneDeep","getObjectDiff","warn","debug","Criteria","Data","template","inject","mixins","getByName","shortcuts","data","pageId","pageOrigin","page","sections","salesChannels","isLoading","isSaveSuccessful","currentSalesChannelKey","selectedBlockSectionId","currentMappingEntity","currentMappingEntityRepo","demoEntityId","validationWarnings","productDetailBlocks","type","elements","slot","config","showLayoutAssignmentModal","showLayoutSetAsDefaultModal","isDefaultLayout","showMissingElementModal","missingElements","metaInfo","title","this","$createTitle","identifier","computed","_objectSpread","placeholder","pageRepository","repositoryFactory","create","sectionRepository","blockRepository","slotRepository","salesChannelRepository","defaultFolderRepository","cmsBlocks","cmsService","getCmsBlockRegistry","productRepository","cmsStageClasses","concat","currentDeviceView","cmsPageTypeSettings","mappingEntity","CMS","TYPE_MAPPING_ENTITIES","hasOwnProperty","entity","mode","blockConfigDefaults","name","marginBottom","marginTop","marginLeft","marginRight","sizingMode","tooltipSave","acl","can","message","$tc","disabled","showOnDisabledElements","systemKey","$device","getSystemKey","appearance","addBlockTitle","isSystemDefaultLanguage","pageHasSections","length","loadPageCriteria","criteria","sortCriteria","sort","getAssociation","addSorting","addAssociation","setLimit","demoProductCriteria","cmsPageState","currentCmsDeviceView","isProductPage","PAGE_TYPES","PRODUCT_DETAIL","requiredFieldErrors","pageNameError","filter","error","pageErrors","find","pageSectionsError","pageBlocksError","pageSlotsError","pageSlotConfigError","hasPageErrors","pageType","cmsPageTypeService","getType","created","createdComponent","beforeDestroy","beforeDestroyedComponent","methods","_this","ExtensionAPI","publishData","id","path","scope","State","commit","getters","$store","resetCmsPageState","$route","params","addFilter","equals","search","then","response","loadPage","getDefaultLayouts","setPageContext","getDefaultFolderId","folderId","dispatch","pageEntityName","searchResult","_defaultFolder$folder","defaultFolder","first","folder","_this2","get","Context","api","cmsDataResolverService","resolve","updateSectionAndBlockPositions","updateDataMapping","selectedBlock","blockId","blockSectionId","sectionId","forEach","section","blocks","block","setSelectedBlock","catch","exception","createNotificationError","_name","statusText","getEntityMappingTypes","loadFirstDemoEntity","onDeviceViewChange","view","arguments","undefined","onChangeLanguage","_this3","abortOnLanguageChange","Object","keys","saveOnLanguageChange","onSave","loadDemoProduct","entityId","_this4","_asyncToGenerator","_regeneratorRuntime","mark","_callee","context","wrap","_context","prev","next","fromCriteria","setIds","inheritance","sent","stop","loadDemoCategory","_this5","_callee2","category","_context2","loadDemoCategoryProducts","mediaId","loadDemoCategoryMedia","_this6","_callee3","productCriteria","products","_context3","source","_this7","_callee4","media","_context4","_this$cmsPageTypeSett","onDemoEntityChange","_this$cmsPageTypeSett2","demoMappingType","addFirstSection","index","onAddSection","addAdditionalSection","position","visibility","desktop","tablet","mobile","splice","onCloseBlockConfig","pageConfigOpen","sideBarRefs","$refs","cmsSidebar","pageConfigSidebar","openContent","itemConfigSidebar","blockSelectionSidebar","saveFinish","onPageSave","debounced","onPageUpdate","debouncedPageSave","pageIsValid","onSaveEntity","Promise","reject","_this8","deleteEntityAndRequiredConfigKey","save","addError","_ref","_ref$property","property","_ref$payload","payload","_ref$code","code","REQUIRED_FIELD_ERROR_CODE","_ref$message","expression","detail","meta","parameters","getError","getSlotValidations","_this9","uniqueSlotCount","requiredMissingSlotConfigs","backgroundMedia","slots","isProductPageElement","camelSlotType","string","camelCase","count","blockIds","push","slotIds","apply","_toConsumableArray","checkRequiredSlotConfigField","localStorage","getItem","cmsMissingElementDontRemind","valid","missingFieldsValidation","listingPageValidation","pageSectionCountValidation","slotValidation","every","validation","LISTING","some","hidden","_this10","_this$getSlotValidati","affectedErrorElements","affectedWarningElements","UNIQUE_SLOTS","_uniqueSlotCount$inde","label","uniqueSlotString","map","join","names","_this$validationWarni","values","configField","required","reduce","accumulator","slotConfig","value","_this11","updateBlockPositions","onBlockDuplicate","_ref2","_this12","_callee5","_ref2$position","sectionPosition","behavior","_yield$_this12$blockR","clonedBlockID","clonedBlock","_context5","overwrites","cloneChildren","clone","onSectionDuplicate","_this13","_callee6","_yield$_this13$sectio","clonedSectionID","clonedSection","_context6","onPageTypeChange","processProductListingType","remove","processProductDetailType","checkSlotMappings","listingBlock","listingElements","processBlock","processElements","_this14","newBlock","el","blockType","defaultConfig","assign","_this15","element","_this16","key","_slot$config$key","split","demoEntity","UNIQUE_SLOTS_KEBAB","includes","onOpenLayoutAssignment","openLayoutAssignmentModal","closeLayoutAssignmentModal","_this17","saveAfterClose","$nextTick","onOpenLayoutSetAsDefault","onCloseLayoutSetAsDefault","onConfirmLayoutSetAsDefault","_this18","_callee7","configKey","_context7","systemConfigApiService","saveValues","_defineProperty","_this19","_callee8","productDetailId","productListId","_context8","getValues","onCloseMissingElementModal","_this20","onSaveMissingElementModal","_this21","setItem","onChangeDontRemindCheckbox","onClickBack","_this22","_callee9","_context9","window","history","$router","back"],"mappings":"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","file":"static/js/280077b720731e0d7648.js","sourcesContent":["// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../../../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--15-1!../../../../../node_modules/css-loader/dist/cjs.js??ref--15-2!../../../../../node_modules/sass-loader/dist/cjs.js??ref--15-3!./sw-cms-detail.scss\");\nif(content.__esModule) content = content.default;\nif(typeof content === 'string') content = [[module.id, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar add = require(\"!../../../../../node_modules/vue-style-loader/lib/addStylesClient.js\").default\nvar update = add(\"101b75a4\", content, true, {});","import template from './sw-cms-detail.html.twig';\nimport CMS from '../../constant/sw-cms.constant';\nimport './sw-cms-detail.scss';\n\nconst { Component, Mixin, Utils } = Shopware;\nconst { mapPropertyErrors } = Component.getComponentHelper();\nconst { ShopwareError } = Shopware.Classes;\nconst { debounce } = Shopware.Utils;\nconst { cloneDeep, getObjectDiff } = Shopware.Utils.object;\nconst { warn } = Shopware.Utils.debug;\nconst { Criteria } = Shopware.Data;\nconst debounceTimeout = 800;\n\n/**\n * @private\n * @package buyers-experience\n */\nexport default {\n    template,\n\n    inject: [\n        'repositoryFactory',\n        'entityFactory',\n        'entityHydrator',\n        'loginService',\n        'cmsService',\n        'cmsDataResolverService',\n        'acl',\n        'appCmsService',\n        'systemConfigApiService',\n        'cmsPageTypeService',\n    ],\n\n    mixins: [\n        Mixin.getByName('cms-state'),\n        Mixin.getByName('notification'),\n        Mixin.getByName('placeholder'),\n    ],\n\n    shortcuts: {\n        'SYSTEMKEY+S': 'onSave',\n    },\n\n    data() {\n        return {\n            pageId: null,\n            pageOrigin: null,\n            page: {\n                sections: [],\n            },\n            salesChannels: [],\n            isLoading: false,\n            isSaveSuccessful: false,\n            currentSalesChannelKey: null,\n            selectedBlockSectionId: null,\n            currentMappingEntity: null,\n            currentMappingEntityRepo: null,\n            demoEntityId: null,\n            validationWarnings: [],\n            productDetailBlocks: [\n                {\n                    type: 'cross-selling',\n                    elements: [\n                        {\n                            slot: 'content',\n                            type: 'cross-selling',\n                            config: {},\n                        },\n                    ],\n                },\n                {\n                    type: 'product-description-reviews',\n                    elements: [\n                        {\n                            slot: 'content',\n                            type: 'product-description-reviews',\n                            config: {},\n                        },\n                    ],\n                },\n                {\n                    type: 'gallery-buybox',\n                    elements: [\n                        {\n                            slot: 'left',\n                            type: 'image-gallery',\n                            config: {},\n                        },\n                        {\n                            slot: 'right',\n                            type: 'buy-box',\n                            config: {},\n                        },\n                    ],\n                },\n                {\n                    type: 'product-heading',\n                    elements: [\n                        {\n                            slot: 'left',\n                            type: 'product-name',\n                            config: {},\n                        },\n                        {\n                            slot: 'right',\n                            type: 'manufacturer-logo',\n                            config: {},\n                        },\n                    ],\n                },\n            ],\n            showLayoutAssignmentModal: false,\n            showLayoutSetAsDefaultModal: false,\n            isDefaultLayout: false,\n            showMissingElementModal: false,\n            missingElements: [],\n        };\n    },\n\n    metaInfo() {\n        return {\n            title: this.$createTitle(this.identifier),\n        };\n    },\n\n    computed: {\n        identifier() {\n            return this.placeholder(this.page, 'name');\n        },\n\n        pageRepository() {\n            return this.repositoryFactory.create('cms_page');\n        },\n\n        sectionRepository() {\n            return this.repositoryFactory.create('cms_section');\n        },\n\n        blockRepository() {\n            return this.repositoryFactory.create('cms_block');\n        },\n\n        slotRepository() {\n            return this.repositoryFactory.create('cms_slot');\n        },\n\n        salesChannelRepository() {\n            return this.repositoryFactory.create('sales_channel');\n        },\n\n        defaultFolderRepository() {\n            return this.repositoryFactory.create('media_default_folder');\n        },\n\n        cmsBlocks() {\n            return this.cmsService.getCmsBlockRegistry();\n        },\n\n        productRepository() {\n            return this.repositoryFactory.create('product');\n        },\n\n        cmsStageClasses() {\n            return [\n                `is--${this.currentDeviceView}`,\n            ];\n        },\n\n        cmsPageTypeSettings() {\n            const mappingEntity = CMS.TYPE_MAPPING_ENTITIES;\n\n            if (mappingEntity.hasOwnProperty(this.page.type)) {\n                return mappingEntity[this.page.type];\n            }\n\n            return {\n                entity: null,\n                mode: 'static',\n            };\n        },\n\n        blockConfigDefaults() {\n            return {\n                name: null,\n                marginBottom: null,\n                marginTop: null,\n                marginLeft: null,\n                marginRight: null,\n                sizingMode: 'boxed',\n            };\n        },\n\n        tooltipSave() {\n            if (!this.acl.can('cms.editor')) {\n                return {\n                    message: this.$tc('sw-privileges.tooltip.warning'),\n                    disabled: this.acl.can('cms.editor'),\n                    showOnDisabledElements: true,\n                };\n            }\n\n            const systemKey = this.$device.getSystemKey();\n\n            return {\n                message: `${systemKey} + S`,\n                appearance: 'light',\n            };\n        },\n\n        addBlockTitle() {\n            if (!this.isSystemDefaultLanguage) {\n                return this.$tc('sw-cms.general.disabledAddingBlocksToolTip');\n            }\n\n            return this.$tc('sw-cms.detail.sidebar.titleBlockOverview');\n        },\n\n        pageHasSections() {\n            return this.page.sections.length > 0;\n        },\n\n        loadPageCriteria() {\n            const criteria = new Criteria(1, 1);\n            const sortCriteria = Criteria.sort('position', 'ASC', true);\n\n            criteria\n                .getAssociation('sections')\n                .addSorting(sortCriteria)\n                .addAssociation('backgroundMedia')\n\n                .getAssociation('blocks')\n                .addSorting(sortCriteria)\n                .addAssociation('backgroundMedia')\n                .addAssociation('slots');\n\n            criteria\n                .getAssociation('categories')\n                .setLimit(25);\n            criteria\n                .getAssociation('landingPages')\n                .setLimit(25);\n\n            criteria.getAssociation('products').setLimit(25);\n            criteria.getAssociation('products.manufacturer').setLimit(25);\n\n            return criteria;\n        },\n\n        demoProductCriteria() {\n            const criteria = new Criteria(1, 25);\n            criteria.addAssociation('media');\n            criteria.addAssociation('deliveryTime');\n            criteria.addAssociation('manufacturer.media');\n\n            return criteria;\n        },\n\n        currentDeviceView() {\n            return this.cmsPageState.currentCmsDeviceView;\n        },\n\n        isProductPage() {\n            return this.page.type === CMS.PAGE_TYPES.PRODUCT_DETAIL;\n        },\n\n        requiredFieldErrors() {\n            return [this.pageNameError].filter(error => !!error);\n        },\n\n        pageErrors() {\n            return [\n                this.requiredFieldErrors.find(error => !!error),\n                this.pageSectionsError,\n                this.pageBlocksError,\n                this.pageSlotsError,\n                this.pageSlotConfigError,\n            ].filter(error => !!error);\n        },\n\n        hasPageErrors() {\n            return this.pageErrors.length > 0;\n        },\n\n        pageType() {\n            this.cmsPageTypeService.getType(this.page.type);\n        },\n\n        ...mapPropertyErrors('page', [\n            'name',\n            'sections',\n            'blocks',\n            'slots',\n            'slotConfig',\n        ]),\n    },\n\n    created() {\n        this.createdComponent();\n    },\n\n    beforeDestroy() {\n        this.beforeDestroyedComponent();\n    },\n\n    methods: {\n        createdComponent() {\n            Shopware.ExtensionAPI.publishData({\n                id: 'sw-cms-detail__page',\n                path: 'page',\n                scope: this,\n            });\n            Shopware.State.commit('adminMenu/collapseSidebar');\n\n            const isSystemDefaultLanguage = Shopware.State.getters['context/isSystemDefaultLanguage'];\n            this.$store.commit('cmsPageState/setIsSystemDefaultLanguage', isSystemDefaultLanguage);\n\n            this.resetCmsPageState();\n\n            if (this.$route.params.id) {\n                this.pageId = this.$route.params.id;\n                this.isLoading = true;\n                const defaultStorefrontId = '8A243080F92E4C719546314B577CF82B';\n\n                Shopware.State.commit('shopwareApps/setSelectedIds', [this.pageId]);\n\n                const criteria = new Criteria(1, 25);\n                criteria.addFilter(\n                    Criteria.equals('typeId', defaultStorefrontId),\n                );\n\n                this.salesChannelRepository.search(criteria).then((response) => {\n                    this.salesChannels = response;\n\n                    if (this.salesChannels.length > 0) {\n                        this.currentSalesChannelKey = this.salesChannels[0].id;\n                        this.loadPage(this.pageId);\n                    }\n                });\n            }\n\n            if (this.acl.can('system_config.read')) {\n                this.getDefaultLayouts();\n            }\n\n            this.setPageContext();\n        },\n\n        setPageContext() {\n            this.getDefaultFolderId().then((folderId) => {\n                Shopware.State.commit('cmsPageState/setDefaultMediaFolderId', folderId);\n            });\n        },\n\n        resetCmsPageState() {\n            Shopware.State.dispatch('cmsPageState/resetCmsPageState');\n        },\n\n        getDefaultFolderId() {\n            const criteria = new Criteria(1, 1);\n            criteria.addAssociation('folder');\n            criteria.addFilter(Criteria.equals('entity', this.cmsPageState.pageEntityName));\n\n            return this.defaultFolderRepository.search(criteria).then((searchResult) => {\n                const defaultFolder = searchResult.first();\n                if (defaultFolder.folder?.id) {\n                    return defaultFolder.folder.id;\n                }\n\n                return null;\n            });\n        },\n\n        beforeDestroyedComponent() {\n            Shopware.State.commit('cmsPageState/removeCurrentPage');\n            Shopware.State.commit('cmsPageState/removeSelectedBlock');\n            Shopware.State.commit('cmsPageState/removeSelectedSection');\n        },\n\n        loadPage(pageId) {\n            this.isLoading = true;\n\n            return this.pageRepository.get(pageId, Shopware.Context.api, this.loadPageCriteria).then((page) => {\n                this.page = { sections: [] };\n                this.page = page;\n\n                Shopware.State.commit('cmsPageState/setCurrentPageType', page.type);\n\n                this.cmsDataResolverService.resolve(this.page).then(() => {\n                    this.updateSectionAndBlockPositions();\n                    Shopware.State.commit('cmsPageState/setCurrentPage', this.page);\n\n                    this.updateDataMapping();\n                    this.pageOrigin = cloneDeep(this.page);\n\n                    if (this.selectedBlock) {\n                        const blockId = this.selectedBlock.id;\n                        const blockSectionId = this.selectedBlock.sectionId;\n                        this.page.sections.forEach((section) => {\n                            if (section.id === blockSectionId) {\n                                section.blocks.forEach((block) => {\n                                    if (block.id === blockId) {\n                                        this.setSelectedBlock(blockSectionId, block);\n                                    }\n                                });\n                            }\n                        });\n                    }\n\n                    Shopware.ExtensionAPI.publishData({\n                        id: 'sw-cms-detail__page',\n                        path: 'page',\n                        scope: this,\n                    });\n\n                    this.isLoading = false;\n                }).catch((exception) => {\n                    this.isLoading = false;\n                    this.createNotificationError({\n                        title: exception.message,\n                        message: exception.response,\n                    });\n\n                    warn(this._name, exception.message, exception.response);\n                });\n            }).catch((exception) => {\n                this.isLoading = false;\n                this.createNotificationError({\n                    title: exception.message,\n                    message: exception.response.statusText,\n                });\n\n                warn(this._name, exception.message, exception.response);\n            });\n        },\n\n        updateDataMapping() {\n            const mappingEntity = this.cmsPageTypeSettings.entity;\n\n            if (!mappingEntity) {\n                Shopware.State.commit('cmsPageState/removeCurrentMappingEntity');\n                Shopware.State.commit('cmsPageState/removeCurrentMappingTypes');\n                Shopware.State.commit('cmsPageState/removeCurrentDemoEntity');\n                Shopware.State.commit('cmsPageState/removeCurrentDemoProducts');\n\n                this.currentMappingEntity = null;\n                this.currentMappingEntityRepo = null;\n                this.demoEntityId = null;\n                return;\n            }\n\n            if (this.cmsPageState.currentMappingEntity !== mappingEntity) {\n                Shopware.State.commit('cmsPageState/setCurrentMappingEntity', mappingEntity);\n                Shopware.State.commit(\n                    'cmsPageState/setCurrentMappingTypes',\n                    this.cmsService.getEntityMappingTypes(mappingEntity),\n                );\n\n                this.currentMappingEntity = mappingEntity;\n                this.currentMappingEntityRepo = this.repositoryFactory.create(mappingEntity);\n\n                this.loadFirstDemoEntity();\n            }\n        },\n\n        onDeviceViewChange(view) {\n            if (view === 'form' && !this.acl.can('cms.editor')) {\n                return;\n            }\n\n            Shopware.State.commit('cmsPageState/setCurrentCmsDeviceView', view);\n\n            if (view === 'form') {\n                this.setSelectedBlock(null, null);\n            }\n        },\n\n        setSelectedBlock(sectionId, block = null) {\n            this.selectedBlockSectionId = sectionId;\n            this.$store.dispatch('cmsPageState/setBlock', block);\n        },\n\n        onChangeLanguage() {\n            this.isLoading = true;\n\n            return this.salesChannelRepository.search(new Criteria(1, 25)).then((response) => {\n                this.salesChannels = response;\n                const isSystemDefaultLanguage = Shopware.State.getters['context/isSystemDefaultLanguage'];\n                this.$store.commit('cmsPageState/setIsSystemDefaultLanguage', isSystemDefaultLanguage);\n                return this.loadPage(this.pageId);\n            });\n        },\n\n        abortOnLanguageChange() {\n            return Object.keys(getObjectDiff(this.page, this.pageOrigin)).length > 0;\n        },\n\n        saveOnLanguageChange() {\n            return this.onSave();\n        },\n\n        async loadDemoProduct(entityId) {\n            const criteria = Criteria.fromCriteria(this.demoProductCriteria);\n            criteria.setLimit(1);\n\n            if (entityId) {\n                criteria.setIds([entityId]);\n            }\n\n            const context = { ...Shopware.Context.api, inheritance: true };\n\n            const response = await this.productRepository.search(criteria, context);\n            Shopware.State.commit('cmsPageState/setCurrentDemoEntity', response[0]);\n        },\n\n        async loadDemoCategory(entityId) {\n            const criteria = new Criteria(1, 1);\n\n            if (entityId) {\n                criteria.setIds([entityId]);\n            }\n\n            const response = await this.repositoryFactory.create('category').search(criteria);\n            const category = response[0];\n\n            this.demoEntityId = category.id;\n            Shopware.State.commit('cmsPageState/setCurrentDemoEntity', category);\n\n            this.loadDemoCategoryProducts(category);\n\n            if (category.mediaId) {\n                this.loadDemoCategoryMedia(category);\n            }\n        },\n\n        async loadDemoCategoryProducts(entity) {\n            const productCriteria = Criteria.fromCriteria(this.demoProductCriteria);\n\n            productCriteria.setLimit(8);\n\n            const products = await this.repositoryFactory.create(\n                entity.products.entity,\n                entity.products.source,\n            ).search(productCriteria);\n\n            Shopware.State.commit('cmsPageState/setCurrentDemoProducts', products);\n        },\n\n        async loadDemoCategoryMedia(entity) {\n            const media = await this.repositoryFactory.create('media').get(entity.mediaId);\n\n            entity.media = media;\n            Shopware.State.commit('cmsPageState/setCurrentDemoEntity', entity);\n        },\n\n        loadFirstDemoEntity() {\n            const demoMappingType = this.cmsPageTypeSettings?.entity;\n\n            if (demoMappingType === 'category') {\n                this.loadDemoCategory();\n            }\n        },\n\n        onDemoEntityChange(demoEntityId) {\n            const demoMappingType = this.cmsPageTypeSettings?.entity;\n\n            Shopware.State.commit('cmsPageState/removeCurrentDemoEntity');\n            Shopware.State.commit('cmsPageState/removeCurrentDemoProducts');\n\n            if (demoMappingType === 'product') {\n                if (demoEntityId) {\n                    this.loadDemoProduct(demoEntityId);\n                }\n                return;\n            }\n\n            if (demoMappingType === 'category') {\n                this.loadDemoCategory(demoEntityId);\n            }\n        },\n\n        addFirstSection(type, index) {\n            this.onAddSection(type, index);\n        },\n\n        addAdditionalSection(type, index) {\n            this.onAddSection(type, index);\n            this.onSave();\n        },\n\n        onAddSection(type, index) {\n            if (!type || index === 'undefined') {\n                return;\n            }\n\n            const section = this.sectionRepository.create();\n            section.type = type;\n            section.sizingMode = 'boxed';\n            section.position = index;\n            section.pageId = this.page.id;\n\n            section.visibility = {\n                desktop: true,\n                tablet: true,\n                mobile: true,\n            };\n\n            this.page.sections.splice(index, 0, section);\n            this.updateSectionAndBlockPositions();\n        },\n\n        onCloseBlockConfig() {\n            this.$store.commit('cmsPageState/removeSelectedItem');\n        },\n\n        pageConfigOpen(mode = null) {\n            const sideBarRefs = this.$refs.cmsSidebar.$refs;\n\n            if (mode === 'blocks') {\n                if (!this.isSystemDefaultLanguage) {\n                    return;\n                }\n\n                sideBarRefs.blockSelectionSidebar.openContent();\n                return;\n            }\n\n            if (mode === 'itemConfig') {\n                sideBarRefs.itemConfigSidebar.openContent();\n                return;\n            }\n\n            sideBarRefs.pageConfigSidebar.openContent();\n        },\n\n        saveFinish() {\n            this.isSaveSuccessful = false;\n        },\n\n        onPageSave(debounced = false) {\n            this.onPageUpdate();\n\n            if (debounced) {\n                this.debouncedPageSave();\n                return;\n            }\n\n            this.onSave();\n        },\n\n        debouncedPageSave: debounce(function debouncedOnSave() {\n            this.onSave();\n        }, debounceTimeout),\n\n        onSave() {\n            this.isSaveSuccessful = false;\n\n            if (!this.pageIsValid()) {\n                this.createNotificationError({\n                    message: this.$tc('sw-cms.detail.notification.pageInvalid'),\n                });\n\n                return Promise.reject();\n            }\n\n            return this.onSaveEntity();\n        },\n\n        onSaveEntity() {\n            this.isLoading = true;\n            this.deleteEntityAndRequiredConfigKey(this.page.sections);\n\n            return this.pageRepository.save(this.page, Shopware.Context.api, false).then(() => {\n                this.isLoading = false;\n                this.isSaveSuccessful = true;\n\n                return this.loadPage(this.page.id);\n            }).catch((exception) => {\n                this.isLoading = false;\n\n                this.createNotificationError({\n                    message: exception.message,\n                });\n\n                return Promise.reject(exception);\n            });\n        },\n\n        addError({\n            property = null,\n            payload = {},\n            code = CMS.REQUIRED_FIELD_ERROR_CODE,\n            message = '',\n        } = {}) {\n            const expression = `cms_page.${this.page.id}.${property}`;\n            const error = new ShopwareError({\n                code,\n                detail: message,\n                meta: { parameters: payload },\n            });\n\n            Shopware.State.commit('error/addApiError', { expression, error });\n        },\n\n        getError(property) {\n            return Shopware.State.getters['error/getApiError'](this.page, property);\n        },\n\n        getSlotValidations() {\n            const uniqueSlotCount = {};\n            const requiredMissingSlotConfigs = [];\n\n            this.page.sections.forEach((section) => {\n                section.blocks.forEach((block) => {\n                    block.backgroundMedia = null;\n\n                    block.slots.forEach((slot) => {\n                        if (this.page.type === CMS.PAGE_TYPES.PRODUCT_DETAIL && this.isProductPageElement(slot)) {\n                            const camelSlotType = Utils.string.camelCase(slot.type);\n                            if (!uniqueSlotCount.hasOwnProperty(camelSlotType)) {\n                                uniqueSlotCount[camelSlotType] = {\n                                    type: camelSlotType,\n                                    count: 1,\n                                    blockIds: [block.id],\n                                    slotIds: [slot.id],\n                                };\n                            } else {\n                                uniqueSlotCount[camelSlotType].count += 1;\n                                uniqueSlotCount[camelSlotType].blockIds.push(block.id);\n                                uniqueSlotCount[camelSlotType].slotIds.push(slot.id);\n                            }\n\n                            return;\n                        }\n\n                        requiredMissingSlotConfigs.push(...this.checkRequiredSlotConfigField(slot, block));\n                    });\n                });\n            });\n\n            return {\n                requiredMissingSlotConfigs,\n                uniqueSlotCount,\n            };\n        },\n\n        pageIsValid() {\n            if (localStorage.getItem('cmsMissingElementDontRemind') === 'true') {\n                this.cmsMissingElementDontRemind = true;\n            }\n\n            this.validationWarnings = [];\n            Shopware.State.dispatch('error/resetApiErrors');\n\n            const valid = [\n                this.missingFieldsValidation(),\n                this.listingPageValidation(),\n                this.pageSectionCountValidation(),\n                this.slotValidation(),\n            ].every(validation => validation);\n\n            if (!this.cmsMissingElementDontRemind && valid && this.validationWarnings.length > 0) {\n                this.showMissingElementModal = true;\n            }\n\n            return valid;\n        },\n\n        missingFieldsValidation() {\n            const hasName = !this.isSystemDefaultLanguage || this.page.name;\n            if (hasName && this.page.type) {\n                return true;\n            }\n\n            this.addError({\n                property: 'name',\n                message: this.$tc('sw-cms.detail.notification.messageMissingFields'),\n            });\n\n            return false;\n        },\n\n        listingPageValidation() {\n            if (this.page.type !== CMS.PAGE_TYPES.LISTING) {\n                return true;\n            }\n\n            const foundListingBlock = this.page.sections.some((section) => {\n                return section.blocks.some((block) => {\n                    return block.type === 'product-listing';\n                });\n            });\n\n            if (foundListingBlock) {\n                this.cmsBlocks['product-listing'].hidden = true;\n                return true;\n            }\n\n            this.addError({\n                property: 'blocks',\n                code: 'listingBlockNotFound',\n                message: this.$tc('sw-cms.detail.notification.messageMissingProductListing'),\n            });\n            this.cmsBlocks['product-listing'].hidden = false;\n\n            return false;\n        },\n\n        pageSectionCountValidation() {\n            if (this.page.sections.length >= 1) {\n                return true;\n            }\n\n            this.addError({\n                property: 'sections',\n                code: 'noSectionsFound',\n                message: this.$tc('sw-cms.detail.notification.messageMissingSections'),\n            });\n\n            return false;\n        },\n\n        slotValidation() {\n            let valid = true;\n            const { requiredMissingSlotConfigs, uniqueSlotCount } = this.getSlotValidations();\n            const affectedErrorElements = [];\n            const affectedWarningElements = [];\n\n            if (this.page.type === CMS.PAGE_TYPES.PRODUCT_DETAIL) {\n                CMS.UNIQUE_SLOTS.forEach((index) => {\n                    if (uniqueSlotCount?.[index]?.count > 1) {\n                        uniqueSlotCount[index].label = this.$tc(`sw-cms.elements.${index}.label`);\n                        affectedErrorElements.push({ ...uniqueSlotCount[index] });\n\n                        valid = false;\n                    } else if (!uniqueSlotCount?.[index]) {\n                        affectedWarningElements.push(this.$tc(`sw-cms.elements.${index}.label`));\n                    }\n                });\n\n                if (affectedErrorElements.length > 0) {\n                    const uniqueSlotString = CMS.UNIQUE_SLOTS\n                        .map(slot => this.$tc(`sw-cms.elements.${slot}.label`))\n                        .join(', ');\n                    const message = this.$tc('sw-cms.detail.notification.messageRedundantElements', 0, {\n                        names: uniqueSlotString,\n                    });\n\n                    this.addError({\n                        property: 'slots',\n                        code: 'uniqueSlotsOnlyOnce',\n                        message,\n                        payload: {\n                            elements: affectedErrorElements,\n                        },\n                    });\n                }\n\n                if (affectedWarningElements.length > 0) {\n                    this.validationWarnings.push(...affectedWarningElements);\n                }\n            }\n\n            if (requiredMissingSlotConfigs.length > 0) {\n                this.addError({\n                    property: 'slotConfig',\n                    code: 'requiredConfigMissing',\n                    message: this.$tc('sw-cms.detail.notification.messageMissingBlockFields'),\n                    payload: {\n                        elements: requiredMissingSlotConfigs,\n                    },\n                });\n\n                valid = false;\n            }\n\n            return valid;\n        },\n\n        deleteEntityAndRequiredConfigKey(sections) {\n            sections.forEach((section) => {\n                section.blocks.forEach((block) => {\n                    block.slots.forEach((slot) => {\n                        Object.values(slot.config).forEach((configField) => {\n                            if (configField.entity) {\n                                delete configField.entity;\n                            }\n                            if (configField.hasOwnProperty('required')) {\n                                delete configField.required;\n                            }\n                        });\n                    });\n                });\n            });\n        },\n\n        checkRequiredSlotConfigField(slot, block) {\n            return Object.keys(slot.config).reduce((accumulator, index) => {\n                const slotConfig = { ...slot.config[index] };\n                if (\n                    !!slotConfig.required &&\n                    (slotConfig.value === null || slotConfig.value.length < 1)\n                ) {\n                    slotConfig.name = `${slot.type}.${index}`;\n                    slotConfig.blockId = block.id;\n\n                    accumulator.push(slotConfig);\n                }\n\n                return accumulator;\n            }, []);\n        },\n\n        updateSectionAndBlockPositions() {\n            this.page.sections.forEach((section, index) => {\n                section.position = index;\n                this.updateBlockPositions(section);\n            });\n        },\n\n        updateBlockPositions(section) {\n            section.blocks.forEach((block, index) => {\n                block.position = index;\n            });\n        },\n\n        onPageUpdate() {\n            this.updateSectionAndBlockPositions();\n            this.updateDataMapping();\n        },\n\n        async onBlockDuplicate(block, { position: sectionPosition = 0 }) {\n            const behavior = {\n                overwrites: {\n                    position: block.position + 1,\n                },\n                cloneChildren: true,\n            };\n\n            const { id: clonedBlockID } = await this.blockRepository.clone(block.id, Shopware.Context.api, behavior);\n            const clonedBlock = await this.blockRepository.get(clonedBlockID);\n\n            const section = this.page.sections[sectionPosition];\n\n            section.blocks.splice(clonedBlock.position, 0, clonedBlock);\n            this.updateBlockPositions(section);\n\n            this.onSave();\n        },\n\n        async onSectionDuplicate(section) {\n            const behavior = {\n                overwrites: {\n                    position: section.position + 1,\n                },\n                cloneChildren: true,\n            };\n\n            const { id: clonedSectionID } = await this.sectionRepository.clone(section.id, Shopware.Context.api, behavior);\n            const clonedSection = await this.sectionRepository.get(clonedSectionID);\n\n\n            this.page.sections.splice(clonedSection.position, 0, clonedSection);\n            this.updateSectionAndBlockPositions(section);\n\n            this.onSave();\n        },\n\n        onPageTypeChange(pageType) {\n            // if pageType wasn't passed along just assume the page was directly mutated\n            if (typeof pageType === 'string') {\n                Shopware.State.commit('cmsPageState/setCurrentPageType', pageType);\n                this.page.type = pageType;\n            }\n\n            if (this.page.type === CMS.PAGE_TYPES.LISTING) {\n                this.processProductListingType();\n            } else {\n                this.page.sections.forEach((section) => {\n                    section.blocks.forEach((block) => {\n                        if (block.type === 'product-listing') {\n                            section.blocks.remove(block.id);\n                        }\n                    });\n                });\n            }\n\n            if (this.page.type === CMS.PAGE_TYPES.PRODUCT_DETAIL) {\n                this.processProductDetailType();\n            }\n\n            this.checkSlotMappings();\n            this.onPageUpdate();\n        },\n\n        processProductListingType() {\n            const listingBlock = this.blockRepository.create();\n            const listingElements = [\n                {\n                    blockId: listingBlock.id,\n                    slot: 'content',\n                    type: 'product-listing',\n                    config: {},\n                },\n            ];\n\n            this.processBlock(listingBlock, 'product-listing');\n            this.processElements(listingBlock, listingElements);\n        },\n\n        processProductDetailType() {\n            this.productDetailBlocks.forEach(block => {\n                const newBlock = this.blockRepository.create();\n\n                block.elements.forEach(el => { el.blockId = newBlock.id; });\n\n                this.processBlock(newBlock, block.type);\n                this.processElements(newBlock, block.elements);\n            });\n        },\n\n        processBlock(block, blockType) {\n            const cmsBlock = this.cmsBlocks[blockType];\n            let defaultConfig = cmsBlock.defaultConfig;\n\n            if (this.isProductPage && defaultConfig) {\n                defaultConfig = {\n                    ...defaultConfig,\n                    marginLeft: '0',\n                    marginRight: '0',\n                    marginTop: (blockType === 'gallery-buybox' || blockType === 'product-description-reviews')\n                        ? '20px' : '0',\n                    marginBottom: (blockType === 'product-heading' || blockType === 'product-description-reviews')\n                        ? '20px' : '0',\n                };\n            }\n\n            block.type = blockType;\n            block.position = 0;\n\n            block.sectionId = this.page.sections[0].id;\n            block.sectionPosition = 'main';\n\n            Object.assign(\n                block,\n                cloneDeep(this.blockConfigDefaults),\n                cloneDeep(defaultConfig || {}),\n            );\n        },\n\n        processElements(block, elements) {\n            elements.forEach((element) => {\n                const slot = this.slotRepository.create();\n\n                slot.blockId = element.blockId;\n                slot.slot = element.slot;\n                slot.type = element.type;\n                slot.config = element.config;\n\n                block.slots.push(slot);\n            });\n\n            this.page.sections[0].blocks.splice(0, 0, block);\n        },\n\n        checkSlotMappings() {\n            this.page.sections.forEach((sections) => {\n                sections.blocks.forEach((block) => {\n                    block.slots.forEach((slot) => {\n                        Object.keys(slot.config).forEach((key) => {\n                            if (slot.config[key]?.source === 'mapped') {\n                                const mappingPath = slot.config[key].value.split('.');\n\n                                if (mappingPath[0] !== this.demoEntity) {\n                                    slot.config[key].value = null;\n                                    slot.config[key].source = 'static';\n                                }\n                            }\n                        });\n                    });\n                });\n            });\n        },\n\n        isProductPageElement(slot) {\n            return CMS.UNIQUE_SLOTS_KEBAB.includes(slot.type);\n        },\n\n        onOpenLayoutAssignment() {\n            this.openLayoutAssignmentModal();\n        },\n\n        openLayoutAssignmentModal() {\n            this.showLayoutAssignmentModal = true;\n        },\n\n        closeLayoutAssignmentModal(saveAfterClose = false) {\n            this.showLayoutAssignmentModal = false;\n            if (saveAfterClose) {\n                this.$nextTick(() => {\n                    this.onSaveEntity();\n                });\n            }\n        },\n\n        onOpenLayoutSetAsDefault() {\n            this.showLayoutSetAsDefaultModal = true;\n        },\n\n        onCloseLayoutSetAsDefault() {\n            this.showLayoutSetAsDefaultModal = false;\n        },\n\n        async onConfirmLayoutSetAsDefault() {\n            let configKey = 'category_cms_page';\n            if (this.page.type === 'product_detail') {\n                configKey = 'product_cms_page';\n            }\n\n            await this.systemConfigApiService.saveValues({\n                [`core.cms.default_${configKey}`]: this.pageId,\n            });\n\n            this.isDefaultLayout = true;\n            this.showLayoutSetAsDefaultModal = false;\n        },\n\n        async getDefaultLayouts() {\n            const response = await this.systemConfigApiService.getValues('core.cms');\n            const productDetailId = response['core.cms.default_category_cms_page'];\n            const productListId = response['core.cms.default_product_cms_page'];\n\n            if ([productDetailId, productListId].includes(this.pageId)) {\n                this.isDefaultLayout = true;\n            }\n        },\n\n        onCloseMissingElementModal() {\n            this.showMissingElementModal = false;\n            this.cmsMissingElementDontRemind = false;\n\n            this.$nextTick(() => {\n                this.loadPage(this.pageId);\n            });\n        },\n\n        onSaveMissingElementModal() {\n            if (this.cmsMissingElementDontRemind) {\n                localStorage.setItem('cmsMissingElementDontRemind', true);\n            }\n\n            this.showMissingElementModal = false;\n\n            this.$nextTick(() => {\n                this.onSaveEntity();\n            });\n        },\n\n        onChangeDontRemindCheckbox() {\n            this.cmsMissingElementDontRemind = !this.cmsMissingElementDontRemind;\n        },\n\n        async onClickBack() {\n            if (window.history.length > 2) {\n                await this.$router.back();\n            } else {\n                await this.$router.push({ name: 'sw.cms.index' });\n            }\n        },\n    },\n};\n","export default \"\\n{% block sw_cms_detail %}\\n<sw-page\\n    class=\\\"sw-cms-detail\\\"\\n    :show-search-bar=\\\"false\\\"\\n    :show-smart-bar=\\\"false\\\"\\n>\\n    \\n    {% block sw_cms_detail_content %}\\n    <template #content>\\n        <div class=\\\"sw-cms-detail__content\\\">\\n            \\n            {% block sw_cms_detail_toolbar %}\\n            <sw-cms-toolbar>\\n                \\n                {% block sw_cms_detail_toolbar_language_switch %}\\n                <template #language-switch>\\n                    <sw-language-switch\\n                        :disabled=\\\"isLoading || page.locked\\\"\\n                        :allow-edit=\\\"acl.can('cms.editor')\\\"\\n                        :save-changes-function=\\\"saveOnLanguageChange\\\"\\n                        :abort-change-function=\\\"abortOnLanguageChange\\\"\\n                        @on-change=\\\"onChangeLanguage\\\"\\n                    />\\n                </template>\\n                {% endblock %}\\n\\n                \\n                {% block sw_cms_detail_toolbar_title %}\\n                <template #title>\\n                    <div class=\\\"sw-cms-detail__page-info\\\">\\n                        \\n                        {% block sw_cms_detail_toolbar_back_button %}\\n                        <a\\n                            class=\\\"sw-cms-detail__back-btn\\\"\\n                            role=\\\"link\\\"\\n                            tabindex=\\\"0\\\"\\n                            :aria-label=\\\"$tc('global.default.back')\\\"\\n                            @click=\\\"onClickBack\\\"\\n                            @keyup.enter=\\\"onClickBack\\\"\\n                        >\\n                            <sw-icon name=\\\"regular-times\\\" />\\n                        </a>\\n                        {% endblock %}\\n\\n                        \\n                        {% block sw_cms_detail_toolbar_page_name %}\\n                        <h2 class=\\\"sw-cms-detail__page-name\\\">\\n                            {{ placeholder(page, 'name') }}\\n                        </h2>\\n                        {% endblock %}\\n\\n                        \\n                        {% block sw_cms_detail_toolbar_page_type %}\\n                        <div\\n                            v-if=\\\"page.type\\\"\\n                            class=\\\"sw-cms-detail__page-type\\\"\\n                        >\\n                            {{ $tc(pageType?.title ?? '') }}\\n                        </div>\\n                        {% endblock %}\\n\\n                        <div\\n                            v-if=\\\"isDefaultLayout\\\"\\n                            class=\\\"sw-cms-detail__page-defaults\\\"\\n                        >\\n                            {{ $tc('sw-cms.detail.label.defaultLayout') }}\\n                        </div>\\n                    </div>\\n                </template>\\n                {% endblock %}\\n\\n                \\n                {% block sw_cms_detail_toolbar_device_actions %}\\n                <template #tools>\\n                    <div\\n                        v-if=\\\"pageHasSections\\\"\\n                        class=\\\"sw-cms-detail__device-actions\\\"\\n                    >\\n                        \\n                        {% block sw_cms_detail_toolbar_device_actions_mobile %}\\n                        <sw-icon\\n                            name=\\\"regular-mobile\\\"\\n                            :class=\\\"{ 'is--active': currentDeviceView === 'mobile' }\\\"\\n                            @click=\\\"onDeviceViewChange('mobile')\\\"\\n                        />\\n                        {% endblock %}\\n\\n                        \\n                        {% block sw_cms_detail_toolbar_device_actions_tablet_landscape %}\\n                        <sw-icon\\n                            name=\\\"regular-tablet\\\"\\n                            :class=\\\"{ 'is--active': currentDeviceView === 'tablet-landscape' }\\\"\\n                            @click=\\\"onDeviceViewChange('tablet-landscape')\\\"\\n                        />\\n                        {% endblock %}\\n\\n                        \\n                        {% block sw_cms_detail_toolbar_device_actions_desktop %}\\n                        <sw-icon\\n                            name=\\\"regular-desktop\\\"\\n                            :class=\\\"{ 'is--active': currentDeviceView === 'desktop' }\\\"\\n                            @click=\\\"onDeviceViewChange('desktop')\\\"\\n                        />\\n                        {% endblock %}\\n\\n                        \\n                        {% block sw_cms_detail_toolbar_device_actions_form %}\\n                        <sw-icon\\n                            name=\\\"regular-bars-square\\\"\\n                            :class=\\\"{ 'is--active': currentDeviceView === 'form', 'is--disabled': !acl.can('cms.editor') }\\\"\\n                            @click=\\\"onDeviceViewChange('form')\\\"\\n                        />\\n                        {% endblock %}\\n                    </div>\\n                </template>\\n                {% endblock %}\\n\\n                \\n                {% block sw_cms_detail_toolbar_actions %}\\n                <template #actions>\\n                    <div class=\\\"sw-cms-detail__actions\\\">\\n\\n                        \\n                        {% block sw_cms_detail_toolbar_actions_save %}\\n                        <sw-button-process\\n                            v-tooltip.bottom=\\\"tooltipSave\\\"\\n                            class=\\\"sw-cms-detail__save-action\\\"\\n                            :is-loading=\\\"isLoading\\\"\\n                            :process-success=\\\"isSaveSuccessful\\\"\\n                            :disabled=\\\"isLoading || page.locked || !acl.can('cms.editor')\\\"\\n                            variant=\\\"primary\\\"\\n                            {% if VUE3 %}\\n                            @update:process-success=\\\"saveFinish\\\"\\n                            {% else %}\\n                            @process-finish=\\\"saveFinish\\\"\\n                            {% endif %}\\n                            @click=\\\"onSave\\\"\\n                        >\\n                            {{ $tc('sw-cms.detail.label.buttonSave') }}\\n                        </sw-button-process>\\n                        {% endblock %}\\n                    </div>\\n                </template>\\n                {% endblock %}\\n            </sw-cms-toolbar>\\n            {% endblock %}\\n\\n            \\n            {% block sw_cms_detail_stage_container %}\\n            <div class=\\\"sw-cms-detail__stage-container\\\">\\n                <sw-overlay v-if=\\\"page.locked\\\" />\\n\\n                \\n                {% block sw_cms_detail_stage_form_view %}\\n                <div\\n                    v-if=\\\"currentDeviceView === 'form'\\\"\\n                    class=\\\"sw-cms-detail__page-form\\\"\\n                >\\n                    \\n                    {% block sw_cms_detail_page_notification %}\\n                    <div\\n                        v-if=\\\"page.locked\\\"\\n                        class=\\\"sw-cms-detail__page-notification\\\"\\n                    >\\n                        <sw-alert\\n                            class=\\\"sw-cms-detail__page-notification-alert\\\"\\n                            variant=\\\"info\\\"\\n                        >\\n                            {{ $tc('sw-cms.detail.label.lockedNotification') }}\\n                        </sw-alert>\\n                    </div>\\n                    {% endblock %}\\n\\n                    <sw-cms-page-form\\n                        v-if=\\\"!isLoading\\\"\\n                        :page=\\\"page\\\"\\n                    />\\n                </div>\\n                {% endblock %}\\n\\n                \\n                {% block sw_cms_detail_stage_wrapper %}\\n                <div\\n                    v-else\\n                    class=\\\"sw-cms-detail__stage\\\"\\n                >\\n\\n                    \\n                    {% block sw_cms_detail_toolbar_notification %}\\n                    \\n                    {% block sw_cms_detail_toolbar_notification_errors %}\\n                    <div\\n                        v-if=\\\"hasPageErrors\\\"\\n                        class=\\\"sw-cms-detail__page-notification\\\"\\n                    >\\n                        <sw-alert\\n                            class=\\\"sw-cms-detail__page-notification-alert is--error\\\"\\n                            variant=\\\"error\\\"\\n                        >\\n                            {{ $tc('sw-cms.detail.notification.errorCollectionText') }}\\n                            <li\\n                                v-for=\\\"(error, index) in pageErrors\\\"\\n                                :key=\\\"index\\\"\\n                            >\\n                                {{ error.detail }}\\n                            </li>\\n                        </sw-alert>\\n                    </div>\\n                    {% endblock %}\\n\\n                    \\n                    {% block sw_cms_detail_toolbar_notification_warnings %}\\n                    <div\\n                        v-if=\\\"validationWarnings.length > 0\\\"\\n                        class=\\\"sw-cms-detail__page-notification\\\"\\n                    >\\n                        <sw-alert\\n                            class=\\\"sw-cms-detail__page-notification-alert is--warning\\\"\\n                            variant=\\\"warning\\\"\\n                        >\\n                            {{ $tc('sw-cms.detail.notification.warningCollectionText') }}\\n                            <li\\n                                v-for=\\\"(warning, index) in validationWarnings\\\"\\n                                :key=\\\"index\\\"\\n                            >\\n                                {{ warning }}\\n                            </li>\\n                        </sw-alert>\\n                    </div>\\n                    {% endblock %}\\n\\n                    \\n                    {% block sw_cms_detail_toolbar_notification_infos %}\\n                    <div\\n                        v-if=\\\"page.locked\\\"\\n                        class=\\\"sw-cms-detail__page-notification is--info\\\"\\n                    >\\n                        <sw-alert\\n                            class=\\\"sw-cms-detail__page-notification-alert\\\"\\n                            variant=\\\"info\\\"\\n                        >\\n                            {{ $tc('sw-cms.detail.label.lockedNotification') }}\\n                        </sw-alert>\\n                    </div>\\n                    {% endblock %}\\n                    {% endblock %}\\n\\n                    \\n                    {% block sw_cms_detail_stage_empty_stage %}\\n                    <div\\n                        v-if=\\\"!isLoading && !pageHasSections\\\"\\n                        class=\\\"sw-cms-detail__empty-stage\\\"\\n                    >\\n\\n                        \\n                        {% block sw_cms_detail_stage_empty_stade_content %}\\n                        <div class=\\\"sw-cms-detail__empty-stage-content\\\">\\n                            <h2 class=\\\"sw-cms-detail__empty-stage-headline\\\">\\n                                {{ $tc('sw-cms.detail.label.headlineEmptyState') }}\\n                            </h2>\\n                            <p class=\\\"sw-cms-detail__empty-stage-claim\\\">\\n                                {{ $tc('sw-cms.detail.label.claimEmptyState') }}\\n                            </p>\\n                            <sw-cms-stage-add-section\\n                                :key=\\\"0\\\"\\n                                :disabled=\\\"!acl.can('cms.editor')\\\"\\n                                :force-choose=\\\"true\\\"\\n                                @stage-section-add=\\\"addAdditionalSection($event, 0)\\\"\\n                            />\\n                        </div>\\n                        {% endblock %}\\n                    </div>\\n                    {% endblock %}\\n\\n                    \\n                    {% block sw_cms_detail_stage %}\\n                    <div\\n                        v-else\\n                        :id=\\\"`page-${page.id}`\\\"\\n                        class=\\\"sw-cms-stage\\\"\\n                        :class=\\\"cmsStageClasses\\\"\\n                    >\\n\\n                        \\n                        {% block sw_cms_detail_stage_add_first_section %}\\n                        <sw-cms-stage-add-section\\n                            :key=\\\"0\\\"\\n                            :disabled=\\\"!acl.can('cms.editor')\\\"\\n                            @stage-section-add=\\\"addAdditionalSection($event, 0)\\\"\\n                        />\\n                        {% endblock %}\\n\\n                        \\n                        {% block sw_cms_detail_stage_content %}\\n                        <template v-if=\\\"!isLoading\\\">\\n                            <template\\n                                v-for=\\\"(section, index) in page.sections\\\"\\n                                {% if VUE3 %}\\n                                :key=\\\"section.id\\\"\\n                                {% endif %}\\n                            >\\n\\n                                \\n                                {% block sw_cms_detail_stage_content_section %}\\n                                <sw-cms-section\\n                                    {% if VUE2 %}\\n                                    :key=\\\"section.id\\\"\\n                                    {% endif %}\\n                                    class=\\\"sw-cms-stage-section\\\"\\n                                    :page=\\\"page\\\"\\n                                    :section=\\\"section\\\"\\n                                    :active=\\\"selectedSection !== null && selectedSection.id === section.id\\\"\\n                                    :disabled=\\\"!acl.can('cms.editor')\\\"\\n                                    @page-config-open=\\\"pageConfigOpen\\\"\\n                                    @block-duplicate=\\\"onBlockDuplicate\\\"\\n                                />\\n                                {% endblock %}\\n                            </template>\\n                        </template>\\n                        {% endblock %}\\n\\n                        \\n                        {% block sw_cms_detail_stage_add_last_section %}\\n                        <sw-cms-stage-add-section\\n                            :key=\\\"page.sections.length + 1\\\"\\n                            :disabled=\\\"!acl.can('cms.editor')\\\"\\n                            @stage-section-add=\\\"addAdditionalSection($event, page.sections.length)\\\"\\n                        />\\n                        {% endblock %}\\n                    </div>\\n                    {% endblock %}\\n                </div>\\n                {% endblock %}\\n\\n                \\n                {% block sw_cms_detail_sidebar %}\\n                <sw-cms-sidebar\\n                    ref=\\\"cmsSidebar\\\"\\n                    :page=\\\"page\\\"\\n                    :demo-entity=\\\"currentMappingEntity\\\"\\n                    :demo-entity-id-prop=\\\"demoEntityId\\\"\\n                    :disabled=\\\"!acl.can('cms.editor')\\\"\\n                    @demo-entity-change=\\\"onDemoEntityChange\\\"\\n                    @block-duplicate=\\\"onBlockDuplicate\\\"\\n                    @section-duplicate=\\\"onSectionDuplicate\\\"\\n                    @block-stage-drop=\\\"onPageUpdate\\\"\\n                    @page-type-change=\\\"onPageTypeChange\\\"\\n                    @page-update=\\\"onPageUpdate\\\"\\n                    @page-save=\\\"onPageSave\\\"\\n                    @open-layout-assignment=\\\"onOpenLayoutAssignment\\\"\\n                    @open-layout-set-as-default=\\\"onOpenLayoutSetAsDefault\\\"\\n                />\\n                {% endblock %}\\n\\n                \\n                {% block sw_cms_detail_layout_assignment_modal %}\\n                <sw-cms-layout-assignment-modal\\n                    v-if=\\\"showLayoutAssignmentModal\\\"\\n                    :page=\\\"page\\\"\\n                    @modal-close=\\\"closeLayoutAssignmentModal\\\"\\n                />\\n                {% endblock %}\\n\\n                <sw-confirm-modal\\n                    v-if=\\\"showLayoutSetAsDefaultModal\\\"\\n                    class=\\\"sw-cms-detail__confirm-set-as-default-modal\\\"\\n                    :title=\\\"$tc('sw-cms.components.setDefaultLayoutModal.title')\\\"\\n                    :text=\\\"$tc('sw-cms.components.setDefaultLayoutModal.infoText')\\\"\\n                    @confirm=\\\"onConfirmLayoutSetAsDefault\\\"\\n                    @cancel=\\\"onCloseLayoutSetAsDefault\\\"\\n                    @close=\\\"onCloseLayoutSetAsDefault\\\"\\n                />\\n\\n                \\n                {% block sw_cms_detail_missing_element_modal %}\\n                <sw-cms-missing-element-modal\\n                    v-if=\\\"showMissingElementModal\\\"\\n                    :missing-elements=\\\"missingElements\\\"\\n                    @modal-close=\\\"onCloseMissingElementModal\\\"\\n                    @modal-save=\\\"onSaveMissingElementModal\\\"\\n                    @modal-dont-remind-change=\\\"onChangeDontRemindCheckbox\\\"\\n                />\\n                {% endblock %}\\n\\n                \\n                {% block sw_cms_detail_loader %}\\n                <sw-loader v-if=\\\"isLoading\\\" />\\n                {% endblock %}\\n            </div>\\n            {% endblock %}\\n        </div>\\n    </template>\\n    {% endblock %}\\n</sw-page>\\n{% endblock %}\\n\";"],"sourceRoot":""}