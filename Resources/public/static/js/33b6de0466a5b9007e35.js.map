{"version":3,"sources":["webpack:///./src/module/sw-settings-product-feature-sets/service/feature-grid-translation.service.js","webpack:///./src/module/sw-settings-product-feature-sets/component/sw-settings-product-feature-sets-values-card/index.js","webpack:///./src/module/sw-settings-product-feature-sets/component/sw-settings-product-feature-sets-values-card/sw-settings-product-feature-sets-values-card.html.twig","webpack:///./src/module/sw-settings-product-feature-sets/component/sw-settings-product-feature-sets-values-card/sw-settings-product-feature-sets-values-card.scss"],"names":["Criteria","Shopware","Data","FeatureGridTranslationService","component","propertyGroupRepository","customFieldRepository","_classCallCheck","this","entities","property","customField","_createClass","key","value","features","_fetchEntities","type","filterBy","repo","_this","length","Promise","resolve","identifier","filter","map","criteria","addFilter","equalsAny","search","Context","api","then","items","item","$tc","concat","name","group","id","translated","pop","language","State","get","currentLocale","fallback","app","fallbackLocale","field","config","label","template","inject","props","productFeatureSet","Object","required","isLoading","Boolean","disabled","default","allowEdit","data","valuesLoading","cardLoading","values","selection","deleteButtonDisabled","term","showModal","currentValue","translationService","computed","productFeatureSetRepository","repositoryFactory","create","valuesEmpty","valuesCardClasses","productFeatureSetCriteria","equals","featureGridTranslationService","assetFilter","Filter","getByName","created","createdComponent","methods","getList","onAddField","onShowFeatureModal","onGridSelectionChanged","selectionCount","onSearch","doSearch","match","_this2","sort","a","b","position","all","fetchPropertyGroupEntities","fetchCustomFieldEntities","onModalClose","_this3","$nextTick","onDeleteFields","deletedKeys","keys","feature","includes","resetPositions","onPositionChange","$set","forEach","index","getColumns","primary","content","__esModule","module","i","locals","exports","add"],"mappings":"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","file":"static/js/33b6de0466a5b9007e35.js","sourcesContent":["/**\n * @package inventory\n */\nconst { Criteria } = Shopware.Data;\n\n// eslint-disable-next-line sw-deprecation-rules/private-feature-declarations\nexport default class FeatureGridTranslationService {\n    /**\n     * @param {Vue} component\n     * @param {Repository} propertyGroupRepository\n     * @param {Repository} customFieldRepository\n     */\n    constructor(component, propertyGroupRepository, customFieldRepository) {\n        this.component = component;\n        this.propertyGroupRepository = propertyGroupRepository;\n        this.customFieldRepository = customFieldRepository;\n\n        this.entities = {\n            property: [],\n            customField: [],\n        };\n    }\n\n    /**\n     * @param {array} features\n     */\n    fetchPropertyGroupEntities(features) {\n        return this._fetchEntities(features, 'property', 'id', this.propertyGroupRepository);\n    }\n\n    /**\n     * @param {array} features\n     */\n    fetchCustomFieldEntities(features) {\n        return this._fetchEntities(features, 'customField', 'name', this.customFieldRepository);\n    }\n\n    /**\n     * @private\n     *\n     * @param {array} features\n     * @param {string} type\n     * @param {string} filterBy\n     * @param {Repository} repo\n     */\n    _fetchEntities(features, type, filterBy, repo) {\n        if (!features || features.length < 1) {\n            return Promise.resolve();\n        }\n\n        const identifier = features.filter(value => value.type === type).map(value => value[filterBy]);\n\n        if (identifier.length < 1) {\n            return Promise.resolve();\n        }\n\n        const criteria = new Criteria(1, 25);\n\n        criteria.addFilter(Criteria.equalsAny(\n            filterBy,\n            identifier,\n        ));\n\n        return repo.search(criteria, Shopware.Context.api).then((items) => {\n            this.entities[type] = items;\n        });\n    }\n\n    /**\n     * @param {Object} item\n     * @param {string} item.type\n     * @param {string} item.name\n     * @param {string} item.id\n     */\n    getNameTranslation(item) {\n        if (item.type === 'product') {\n            return this.component.$tc(`sw-settings-product-feature-sets.modal.label.${item.name}`);\n        }\n\n        if (item.type === 'property') {\n            return this.entities.property\n                .filter(group => group.id === item.id)\n                .map(group => group.translated.name)\n                .pop();\n        }\n\n        if (item.type === 'customField') {\n            const language = Shopware.State.get('session').currentLocale;\n            const fallback = Shopware.Context.app.fallbackLocale;\n\n            return this.entities.customField\n                .filter(field => field.name === item.name)\n                .map(field => (field.config.label[language] || field.config.label[fallback]))\n                .pop();\n        }\n\n        if (item.type === 'referencePrice') {\n            return this.component.$tc('sw-settings-product-feature-sets.modal.label.referencePrice');\n        }\n\n        return '';\n    }\n\n    /**\n     * @param {Object} item\n     * @param {string} item.type\n     * @param {string} item.name\n     */\n    getTypeTranslation(item) {\n        if (item.type === 'product') {\n            return this.component.$tc('sw-settings-product-feature-sets.modal.textProductInfoLabel');\n        }\n\n        if (item.type === 'property') {\n            return this.component.$tc('sw-settings-product-feature-sets.modal.textPropertyLabel');\n        }\n\n        if (item.type === 'customField') {\n            return this.component.$tc('sw-settings-product-feature-sets.modal.textCustomFieldLabel');\n        }\n\n        if (item.type === 'referencePrice') {\n            return this.component.$tc('sw-settings-product-feature-sets.modal.textReferencePriceLabel');\n        }\n\n        return '';\n    }\n}\n","/**\n * @package inventory\n */\n// eslint-disable-next-line max-len\nimport FeatureGridTranslationService from 'src/module/sw-settings-product-feature-sets/service/feature-grid-translation.service';\nimport template from './sw-settings-product-feature-sets-values-card.html.twig';\nimport './sw-settings-product-feature-sets-values-card.scss';\n\nconst { Criteria } = Shopware.Data;\n\n// eslint-disable-next-line sw-deprecation-rules/private-feature-declarations\nexport default {\n    template,\n\n    inject: ['repositoryFactory'],\n\n    props: {\n        productFeatureSet: {\n            type: Object,\n            required: true,\n        },\n        isLoading: {\n            type: Boolean,\n            required: true,\n        },\n        disabled: {\n            type: Boolean,\n            required: false,\n            default: false,\n        },\n        allowEdit: {\n            type: Boolean,\n            required: false,\n            // TODO: Boolean props should only be opt in and therefore default to false\n            // eslint-disable-next-line vue/no-boolean-default\n            default: true,\n        },\n    },\n\n    data() {\n        return {\n            valuesLoading: false,\n            cardLoading: false,\n            values: [],\n            selection: null,\n            deleteButtonDisabled: true,\n            term: '',\n            showModal: false,\n            currentValue: null,\n            translationService: null,\n        };\n    },\n\n    computed: {\n        productFeatureSetRepository() {\n            return this.repositoryFactory.create('product_feature_set');\n        },\n\n        propertyGroupRepository() {\n            return this.repositoryFactory.create('property_group');\n        },\n\n        customFieldRepository() {\n            return this.repositoryFactory.create('custom_field');\n        },\n\n        valuesEmpty() {\n            return this.values.length === 0;\n        },\n\n        valuesCardClasses() {\n            return {\n                'is--empty': this.valuesEmpty,\n            };\n        },\n\n        productFeatureSetCriteria() {\n            const criteria = new Criteria(1, 25);\n            criteria.addFilter(Criteria.equals('product_feature_set.id', this.productFeatureSet.id));\n\n            return criteria;\n        },\n\n        featureGridTranslationService() {\n            if (this.translationService === null) {\n                // eslint-disable-next-line vue/no-side-effects-in-computed-properties\n                this.translationService = new FeatureGridTranslationService(\n                    this,\n                    this.propertyGroupRepository,\n                    this.customFieldRepository,\n                );\n            }\n\n            return this.translationService;\n        },\n\n        assetFilter() {\n            return Shopware.Filter.getByName('asset');\n        },\n    },\n\n    created() {\n        this.createdComponent();\n    },\n\n    methods: {\n        createdComponent() {\n            this.getList();\n        },\n\n        onAddField() {\n            this.onShowFeatureModal();\n        },\n\n        onGridSelectionChanged(selection, selectionCount) {\n            this.selection = selection;\n            this.deleteButtonDisabled = selectionCount <= 0;\n        },\n\n        onSearch() {\n            this.doSearch();\n        },\n\n        doSearch() {\n            if (!this.term) {\n                this.getList();\n            }\n\n            this.values = this.productFeatureSet.features.filter((item) => {\n                return item.name.match(this.term) || item.type.match(this.term);\n            });\n        },\n\n        getList() {\n            this.valuesLoading = true;\n            this.values = [];\n\n            if (this.productFeatureSet.features) {\n                this.values = this.productFeatureSet.features;\n\n                if (this.term) {\n                    this.doSearch();\n                }\n            }\n\n            // Initially sort the features by position, further sorting will be handled by the grid component\n            this.values.sort((a, b) => a.position - b.position);\n\n            Promise.all([\n                this.featureGridTranslationService.fetchPropertyGroupEntities(this.values),\n                this.featureGridTranslationService.fetchCustomFieldEntities(this.values),\n            ]).then(() => {\n                this.valuesLoading = false;\n            });\n        },\n\n        onModalClose() {\n            this.showModal = false;\n            this.currentValue = null;\n            this.$nextTick(() => this.getList());\n        },\n\n        onShowFeatureModal() {\n            this.showModal = true;\n        },\n\n        onDeleteFields() {\n            if (this.selection) {\n                const deletedKeys = Object.keys(this.selection);\n\n                this.productFeatureSet.features = this.productFeatureSet.features.filter((feature) => {\n                    return !deletedKeys.includes(feature.id);\n                });\n\n                this.resetPositions();\n                this.getList();\n            }\n        },\n\n        onPositionChange(features) {\n            this.$set(this.productFeatureSet, 'features', features);\n        },\n\n        resetPositions() {\n            this.productFeatureSet.features.forEach((feature, index) => {\n                feature.position = index + 1;\n            });\n        },\n\n        getColumns() {\n            return [{\n                property: 'name',\n                label: 'sw-settings-product-feature-sets.valuesCard.labelValue',\n                primary: true,\n            }, {\n                property: 'type',\n                label: 'sw-settings-product-feature-sets.valuesCard.labelType',\n            }, {\n                property: 'position',\n                label: 'sw-settings-product-feature-sets.valuesCard.labelPosition',\n            }];\n        },\n    },\n};\n","export default \"\\n{% block sw_product_feature_set_card %}\\n<sw-card\\n    :title=\\\"$tc('sw-settings-product-feature-sets.valuesCard.cardTitle')\\\"\\n    class=\\\"sw-settings-product-feature-sets-values-card\\\"\\n    position-identifier=\\\"sw-settings-product-feature-sets-values-card\\\"\\n    :class=\\\"valuesCardClasses\\\"\\n    :is-loading=\\\"isLoading || valuesLoading || cardLoading\\\"\\n>\\n\\n    <template #grid>\\n        <div v-if=\\\"!valuesEmpty && !disabled\\\">\\n            \\n            {% block sw_product_feature_set_toolbar %}\\n            <div class=\\\"sw-product-feature-set__toolbar\\\">\\n\\n                \\n                {% block sw_product_feature_set_toolbar_container %}\\n                <sw-container\\n                    columns=\\\"1fr 32px minmax(100px, 200px)\\\"\\n                    gap=\\\"0 10px\\\"\\n                >\\n\\n                    \\n                    {% block sw_product_feature_set_toolbar_search %}\\n                    <sw-simple-search-field\\n                        v-model=\\\"term\\\"\\n                        size=\\\"small\\\"\\n                        variant=\\\"form\\\"\\n                        :disabled=\\\"!allowEdit\\\"\\n                        @search-term-change=\\\"onSearch\\\"\\n                    />\\n                    {% endblock %}\\n\\n                    \\n                    {% block sw_product_feature_set_toolbar_delete %}\\n                    <sw-button\\n                        :disabled=\\\"deleteButtonDisabled || !allowEdit\\\"\\n                        square\\n                        size=\\\"small\\\"\\n                        class=\\\"sw-product-feature-set__delete-button\\\"\\n                        @click=\\\"onDeleteFields\\\"\\n                    >\\n                        <sw-icon\\n                            name=\\\"regular-trash\\\"\\n                            small\\n                        />\\n                    </sw-button>\\n                    {% endblock %}\\n\\n                    \\n                    {% block sw_product_feature_set_toolbar_add %}\\n                    <sw-container>\\n                        <sw-button\\n                            :disabled=\\\"isLoading || !allowEdit\\\"\\n                            variant=\\\"ghost\\\"\\n                            size=\\\"small\\\"\\n                            class=\\\"sw-product-feature-set__add-button\\\"\\n                            @click=\\\"onAddField\\\"\\n                        >\\n                            {{ $tc('sw-settings-product-feature-sets.valuesCard.labelCreateNew') }}\\n                        </sw-button>\\n                    </sw-container>\\n                    {% endblock %}\\n\\n                </sw-container>\\n                {% endblock %}\\n\\n            </div>\\n            {% endblock %}\\n\\n            \\n            {% block sw_product_feature_set_card_grid %}\\n            <sw-data-grid\\n                :data-source=\\\"values\\\"\\n                :columns=\\\"getColumns()\\\"\\n                :show-selection=\\\"allowEdit\\\"\\n                :show-actions=\\\"false\\\"\\n                :is-loading=\\\"isLoading\\\"\\n                identifier=\\\"sw-product-feature-set-grid\\\"\\n                @selection-change=\\\"onGridSelectionChanged\\\"\\n            >\\n\\n                \\n                {% block sw_settings_product_feature_set_card_grid_column_name %}\\n                <template #column-name=\\\"{ item }\\\">\\n                    {{ featureGridTranslationService.getNameTranslation(item) }}\\n                </template>\\n                {% endblock %}\\n\\n                \\n                {% block sw_settings_product_feature_set_card_grid_column_type %}\\n                <template #column-type=\\\"{ item }\\\">\\n                    {{ featureGridTranslationService.getTypeTranslation(item) }}\\n                </template>\\n                {% endblock %}\\n\\n                \\n                {% block sw_settings_product_feature_set_card_grid_column_position %}\\n                <template #column-position=\\\"{ item }\\\">\\n                    <sw-data-grid-column-position\\n                        ref=\\\"columnPosition\\\"\\n                        v-model=\\\"values\\\"\\n                        :show-value=\\\"false\\\"\\n                        :item=\\\"item\\\"\\n                        :disabled=\\\"!allowEdit\\\"\\n                        @position-changed=\\\"onPositionChange\\\"\\n                    />\\n                </template>\\n                {% endblock %}\\n\\n            </sw-data-grid>\\n            {% endblock %}\\n\\n        </div>\\n    </template>\\n\\n    \\n    {% block sw_product_feature_set_card_empty_state %}\\n    <template v-if=\\\"valuesEmpty || disabled\\\">\\n\\n        <div class=\\\"sw-settings-product-feature-set-card__empty-state\\\">\\n            \\n            {% block sw_product_feature_set_card_empty_state_image %}\\n            <img\\n                :src=\\\"assetFilter('administration/static/img/empty-states/settings-empty-state.svg')\\\"\\n                alt=\\\"\\\"\\n            >\\n            {% endblock %}\\n\\n            \\n            {% block sw_product_feature_set_card_empty_state_label %}\\n            <div class=\\\"sw-settings-product-feature-set-card__empty-state--label\\\">\\n                <p v-if=\\\"disabled\\\">\\n                    {{ $tc('sw-settings-product-feature-sets.valuesCard.createStateDescription') }}\\n                </p>\\n                <p v-else>\\n                    {{ $tc('sw-settings-product-feature-sets.valuesCard.emptyStateDescription') }}\\n                </p>\\n            </div>\\n            {% endblock %}\\n\\n            \\n            {% block sw_product_feature_set_card_empty_state_button %}\\n            <sw-button\\n                variant=\\\"ghost\\\"\\n                size=\\\"small\\\"\\n                :disabled=\\\"disabled\\\"\\n                @click=\\\"showModal = true\\\"\\n            >\\n                {{ $tc('sw-settings-product-feature-sets.valuesCard.labelCreateNew') }}\\n            </sw-button>\\n            {% endblock %}\\n        </div>\\n\\n    </template>\\n    {% endblock %}\\n\\n    \\n    {% block sw_product_feature_set_card_grid_column_modal %}\\n    <sw-settings-product-feature-sets-modal\\n        v-if=\\\"showModal\\\"\\n        :product-feature-set=\\\"productFeatureSet\\\"\\n        @modal-close=\\\"onModalClose\\\"\\n    />\\n    {% endblock %}\\n\\n</sw-card>\\n{% endblock %}\\n\";","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../../../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--15-1!../../../../../node_modules/css-loader/dist/cjs.js??ref--15-2!../../../../../node_modules/sass-loader/dist/cjs.js??ref--15-3!./sw-settings-product-feature-sets-values-card.scss\");\nif(content.__esModule) content = content.default;\nif(typeof content === 'string') content = [[module.id, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar add = require(\"!../../../../../node_modules/vue-style-loader/lib/addStylesClient.js\").default\nvar update = add(\"75da99c0\", content, true, {});"],"sourceRoot":""}