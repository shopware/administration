{"version":3,"sources":["webpack:///./src/module/sw-order/component/sw-order-general-info/sw-order-general-info.scss","webpack:///./src/module/sw-order/component/sw-order-general-info/index.js","webpack:///./src/module/sw-order/component/sw-order-general-info/sw-order-general-info.html.twig"],"names":["content","__esModule","default","module","i","locals","exports","add","Mixin","Shopware","_Shopware$Data","Data","Criteria","EntityCollection","_Shopware$Component$g","Component","getComponentHelper","mapGetters","mapState","cloneDeep","Utils","object","template","inject","mixins","getByName","props","order","type","Object","required","data","currentActionName","currentStateType","deliveryStateOptions","liveOrder","modalConfirmed","orderStateOptions","paymentStateOptions","showModal","tagCollection","computed","_objectSpread","lastChangedUser","this","updatedBy","createdBy","lastChangedDateTime","updatedAt","createdAt","lastChangedByCriteria","criteria","setIds","id","addAssociation","summaryMainHeader","concat","orderNumber","orderCustomer","firstName","lastName","email","orderRepository","repositoryFactory","create","orderTagRepository","tags","entity","source","stateMachineStateRepository","stateMachineStateCriteria","addSorting","field","addFilter","equalsAny","transaction","transactions","length","includes","stateMachineState","technicalName","last","delivery","deliveries","currencyFilter","Filter","dateFilter","watch","savedSuccessful","getLiveOrder","created","createdComponent","methods","Context","api","getTransitionOptions","_this","search","then","response","first","onTagAdd","item","_this2","assign","onTagRemove","_this3","delete","remove","getAllStates","buildTransitionOptions","stateMachineName","allTransitions","possibleTransitions","options","filter","entry","stateMachine","map","state","index","stateName","name","translated","disabled","forEach","option","transitionToState","transition","toStateName","actionName","backgroundStyle","stateType","stateStyleDataProviderService","getStyle","selectBackgroundStyle","_this4","State","commit","statePromises","stateMachineService","getState","push","Promise","all","allStates","orderState","transitions","orderTransactionState","orderDeliveryState","resolve","finally","onStateSelected","createStateChangeErrorNotification","$tc","onLeaveModalClose","onLeaveModalConfirm","docIds","_this5","sendMail","arguments","undefined","orderStateMachineService","transitionOrderTransactionState","documentIds","transitionOrderDeliveryState","transitionOrderState","createNotificationError","message","loadHistory","catch","error","_this6","statesLoading","$emit","errorMessage"],"mappings":"0GAGA,IAAIA,EAAU,EAAQ,QACnBA,EAAQC,aAAYD,EAAUA,EAAQE,SACnB,iBAAZF,IAAsBA,EAAU,CAAC,CAACG,EAAOC,EAAIJ,EAAS,MAC7DA,EAAQK,SAAQF,EAAOG,QAAUN,EAAQK,SAG/BE,EADH,EAAQ,QAAwEL,SACzE,WAAYF,GAAS,EAAM,K,oqBCF5C,IAAQQ,EAAUC,SAAVD,MACRE,EAAuCD,SAASE,KAAxCC,EAAQF,EAARE,SAAUC,EAAgBH,EAAhBG,iBAClBC,EAAiCL,SAASM,UAAUC,qBAA5CC,EAAUH,EAAVG,WAAYC,EAAQJ,EAARI,SACZC,EAAcV,SAASW,MAAMC,OAA7BF,UAGO,WACXG,SCdW,w4ODgBXC,OAAQ,CACJ,MACA,oBACA,sBACA,2BACA,iCAGJC,OAAQ,CACJhB,EAAMiB,UAAU,iBAGpBC,MAAO,CACHC,MAAO,CACHC,KAAMC,OACNC,UAAU,IAIlBC,KAAI,WACA,MAAO,CACHC,kBAAmB,KACnBC,iBAAkB,KAClBC,qBAAsB,GACtBC,UAAW,KACXC,gBAAgB,EAChBC,kBAAmB,GACnBC,oBAAqB,GACrBC,WAAW,EACXC,cAAe,OAIvBC,SAAQC,MAAA,GACDzB,EAAW,gBAAiB,CAC3B,eAGDC,EAAS,gBAAiB,CACzB,qBACF,IAEFyB,gBAAe,WACX,GAAIC,KAAKT,UAAW,CAChB,GAAIS,KAAKT,UAAUU,UACf,OAAOD,KAAKT,UAAUU,UAG1B,GAAID,KAAKT,UAAUW,UACf,OAAOF,KAAKT,UAAUW,UAI9B,OAAO,MAGXC,oBAAmB,WACf,GAAIH,KAAKT,UAAW,CAChB,GAAIS,KAAKT,UAAUa,UACf,OAAOJ,KAAKT,UAAUa,UAG1B,GAAIJ,KAAKT,UAAUc,UACf,OAAOL,KAAKT,UAAUc,UAI9B,OAAO,MAGXC,sBAAqB,WACjB,IAAMC,EAAW,IAAIvC,EAAS,EAAG,IAOjC,OANAuC,EAASC,OAAO,CAACR,KAAKjB,MAAM0B,KAE5BF,EACKG,eAAe,aACfA,eAAe,aAEbH,GAGXI,kBAAiB,WAEb,MAAM,GAANC,OAAUZ,KAAKjB,MAAM8B,YAAW,OAAAD,OAAMZ,KAAKjB,MAAM+B,cAAcC,UAAS,KAAAH,OAAIZ,KAAKjB,MAAM+B,cAAcE,SAAQ,MAAAJ,OAAKZ,KAAKjB,MAAM+B,cAAcG,MAAK,MAGpJC,gBAAe,WACX,OAAOlB,KAAKmB,kBAAkBC,OAAO,UAGzCC,mBAAkB,WACd,OAAOrB,KAAKmB,kBAAkBC,OAC1BpB,KAAKjB,MAAMuC,KAAKC,OAChBvB,KAAKjB,MAAMuC,KAAKE,SAIxBC,4BAA2B,WACvB,OAAOzB,KAAKmB,kBAAkBC,OAAO,wBAGzCM,0BAAyB,WACrB,IAAMnB,EAAW,IAAIvC,EAAS,EAAG,MAUjC,OATAuC,EAASoB,WAAW,CAAEC,MAAO,OAAQ7C,MAAO,QAC5CwB,EAASG,eAAe,gBACxBH,EAASsB,UACL7D,EAAS8D,UACL,iDACA,CAAC,cAAe,0BAA2B,0BAI5CvB,GAGXwB,YAAW,WACP,IAAK,IAAIvE,EAAI,EAAGA,EAAIwC,KAAKjB,MAAMiD,aAAaC,OAAQzE,GAAK,EACrD,IAAK,CAAC,YAAa,UAAU0E,SAASlC,KAAKjB,MAAMiD,aAAaxE,GAAG2E,kBAAkBC,eAC/E,OAAOpC,KAAKjB,MAAMiD,aAAaxE,GAGvC,OAAOwC,KAAKjB,MAAMiD,aAAaK,QAGnCC,SAAQ,WACJ,OAAOtC,KAAKjB,MAAMwD,WAAW,IAGjCC,eAAc,WACV,OAAO3E,SAAS4E,OAAO5D,UAAU,aAGrC6D,WAAU,WACN,OAAO7E,SAAS4E,OAAO5D,UAAU,WAIzC8D,MAAO,CACHC,gBAAe,WACP5C,KAAK4C,iBACL5C,KAAK6C,iBAKjBC,QAAO,WACH9C,KAAK+C,oBAGTC,QAAS,CACLD,iBAAgB,WACZ,IAAMzB,EAAO/C,EAAUyB,KAAKjB,MAAMuC,MAElCtB,KAAKJ,cAAgB,IAAI3B,EACrB+B,KAAKjB,MAAMuC,KAAKE,OAChBxB,KAAKjB,MAAMuC,KAAKC,OAChB1D,SAASoF,QAAQC,IACjB,KACA5B,EACAA,EAAKW,QAGTjC,KAAK6C,eACL7C,KAAKmD,wBAGTN,aAAY,WAAI,IAADO,EAAA,KACXpD,KAAKkB,gBAAgBmC,OAAOrD,KAAKM,sBAAuBzC,SAASoF,QAAQC,KACpEI,MAAK,SAAAC,GACEA,GAAYA,EAASC,UACrBJ,EAAK7D,UAAYgE,EAASC,aAK1CC,SAAQ,SAACC,GAAO,IAADC,EAAA,KACX3D,KAAKqB,mBAAmBuC,OAAOF,EAAKjD,IAC/B6C,MAAK,WACFK,EAAK/D,cAAcjC,IAAI+F,OAInCG,YAAW,SAACH,GAAO,IAADI,EAAA,KACd9D,KAAKqB,mBAAmB0C,OAAOL,EAAKjD,IAC/B6C,MAAK,WACFQ,EAAKlE,cAAcoE,OAAON,EAAKjD,QAI3CwD,aAAY,WACR,OAAOjE,KAAKyB,4BAA4B4B,OAAOrD,KAAK0B,4BAGxDwC,uBAAsB,SAACC,EAAkBC,EAAgBC,GACrD,IAIMC,EAJUF,EAAeG,QAAO,SAACC,GACnC,OAAOA,EAAMC,aAAarC,gBAAkB+B,KAGxBO,KAAI,SAACC,EAAOC,GAChC,MAAO,CACHC,UAAWF,EAAMvC,cACjB3B,GAAImE,EACJE,KAAMH,EAAMI,WAAWD,KACvBE,UAAU,MAelB,OAXAV,EAAQW,SAAQ,SAACC,GACb,IAAMC,EAAoBd,EAAoBE,QAAO,SAACa,GAClD,OAAOA,EAAWC,cAAgBH,EAAOL,aAGzCM,EAAkBlD,QAAU,IAC5BiD,EAAOF,UAAW,EAClBE,EAAOzE,GAAK0E,EAAkB,GAAGG,eAIlChB,GAGXiB,gBAAe,SAACC,GACZ,IAAIpD,EAEJ,OAAQoD,GACJ,IAAK,oBACDpD,EAAgBpC,KAAK+B,YAAYI,kBAAkBC,cACnD,MACJ,IAAK,iBACDA,EAAgBpC,KAAKsC,SAASH,kBAAkBC,cAChD,MACJ,IAAK,QACDA,EAAgBpC,KAAKjB,MAAMoD,kBAAkBC,cAC7C,MACJ,QACI,OAAO,KAGf,OAAOpC,KAAKyF,8BAA8BC,SAAS,GAAD9E,OAC3C4E,EAAS,UACZpD,GACFuD,uBAGNxC,qBAAoB,WAAI,IAADyC,EAAA,KACnB/H,SAASgI,MAAMC,OAAO,2BAA4B,CAAC,UAAU,IAE7D,IAAMC,EAAgB,CAAC/F,KAAKgG,oBAAoBC,SAAS,QAASjG,KAAKjB,MAAM0B,KAU7E,OARIT,KAAK+B,aACLgE,EAAcG,KAAKlG,KAAKgG,oBAAoBC,SAAS,oBAAqBjG,KAAK+B,YAAYtB,KAG3FT,KAAKsC,UACLyD,EAAcG,KAAKlG,KAAKgG,oBAAoBC,SAAS,iBAAkBjG,KAAKsC,SAAS7B,KAGlF0F,QAAQC,IAAI,CAEXpG,KAAKiE,gBAAcrD,OAChBmF,IAETzC,MAAK,SAACnE,GACJ,IAAMkH,EAAYlH,EAAK,GACjBmH,EAAanH,EAAK,GAQxB,GANAyG,EAAKnG,kBAAoBmG,EAAK1B,uBAC1B,cACAmC,EACAC,EAAWnH,KAAKoH,aAGhBX,EAAK7D,YAAa,CAClB,IAAMyE,EAAwBrH,EAAK,GACnCyG,EAAKlG,oBAAsBkG,EAAK1B,uBAC5B,0BACAmC,EACAG,EAAsBrH,KAAKoH,aAInC,GAAIX,EAAKtD,SAAU,CACf,IAAMmE,EAAqBtH,EAAK,GAChCyG,EAAKtG,qBAAuBsG,EAAK1B,uBAC7B,uBACAmC,EACAI,EAAmBtH,KAAKoH,aAIhC,OAAOJ,QAAQO,aAChBC,SAAQ,WACP9I,SAASgI,MAAMC,OAAO,2BAA4B,CAAC,UAAU,QAIrEc,gBAAe,SAACpB,EAAWF,GACvB,GAAKE,GAAcF,EAKnB,OAAKtF,KAAKR,oBASVQ,KAAKR,gBAAiB,IARlBQ,KAAKZ,kBAAoBkG,EACzBtF,KAAKX,iBAAmBmG,OAExBxF,KAAKL,WAAY,IARjBK,KAAK6G,mCAAmC7G,KAAK8G,IAAI,2CAgBzDC,kBAAiB,WACb/G,KAAKR,gBAAiB,EACtBQ,KAAKZ,kBAAoB,KACzBY,KAAKX,iBAAmB,KACxBW,KAAKL,WAAY,GAGrBqH,oBAAmB,SAACC,GAA0B,IAADC,EAAA,KAAjBC,IAAQC,UAAAnF,OAAA,QAAAoF,IAAAD,UAAA,KAAAA,UAAA,GAChCpH,KAAKL,WAAY,EAEjB,IAAIyF,EAAa,KAEjB,OAAQpF,KAAKX,kBACT,IAAK,oBACD+F,EAAapF,KAAKsH,yBAAyBC,gCACvCvH,KAAK+B,YAAYtB,GACjBT,KAAKZ,kBACL,CAAEoI,YAAaP,EAAQE,aAE3B,MACJ,IAAK,iBACD/B,EAAapF,KAAKsH,yBAAyBG,6BACvCzH,KAAKsC,SAAS7B,GACdT,KAAKZ,kBACL,CAAEoI,YAAaP,EAAQE,aAE3B,MACJ,IAAK,QACD/B,EAAapF,KAAKsH,yBAAyBI,qBACvC1H,KAAKjB,MAAM0B,GACXT,KAAKZ,kBACL,CAAEoI,YAAaP,EAAQE,aAE3B,MACJ,QAII,YAHAnH,KAAK2H,wBAAwB,CACzBC,QAAS5H,KAAK8G,IAAI,8CAK1B1B,GACAA,EAAW9B,MAAK,WACZ4D,EAAKW,iBACNC,OAAM,SAACC,GACNb,EAAKL,mCAAmCkB,MAIhD/H,KAAKZ,kBAAoB,KACzBY,KAAKX,iBAAmB,MAG5BwI,YAAW,WAAI,IAADG,EAAA,KACVhI,KAAKiI,eAAgB,EACrBjI,KAAKR,gBAAiB,EAEtBQ,KAAKmD,uBACAG,MAAK,WACF0E,EAAKE,MAAM,iBAEdJ,OAAM,SAACC,GACJC,EAAKL,wBAAwBI,OAIzClB,mCAAkC,SAACsB,GAC/BnI,KAAK2H,wBAAwB,CACzBC,QAAS5H,KAAK8G,IAAI,4CAA8CqB","file":"static/js/19988a5160d073ac423c.js","sourcesContent":["// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../../../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--15-1!../../../../../node_modules/css-loader/dist/cjs.js??ref--15-2!../../../../../node_modules/sass-loader/dist/cjs.js??ref--15-3!./sw-order-general-info.scss\");\nif(content.__esModule) content = content.default;\nif(typeof content === 'string') content = [[module.id, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar add = require(\"!../../../../../node_modules/vue-style-loader/lib/addStylesClient.js\").default\nvar update = add(\"7bb93e84\", content, true, {});","import './sw-order-general-info.scss';\nimport template from './sw-order-general-info.html.twig';\n\n/**\n * @package checkout\n */\n\nconst { Mixin } = Shopware;\nconst { Criteria, EntityCollection } = Shopware.Data;\nconst { mapGetters, mapState } = Shopware.Component.getComponentHelper();\nconst { cloneDeep } = Shopware.Utils.object;\n\n// eslint-disable-next-line sw-deprecation-rules/private-feature-declarations\nexport default {\n    template,\n\n    inject: [\n        'acl',\n        'repositoryFactory',\n        'stateMachineService',\n        'orderStateMachineService',\n        'stateStyleDataProviderService',\n    ],\n\n    mixins: [\n        Mixin.getByName('notification'),\n    ],\n\n    props: {\n        order: {\n            type: Object,\n            required: true,\n        },\n    },\n\n    data() {\n        return {\n            currentActionName: null,\n            currentStateType: null,\n            deliveryStateOptions: [],\n            liveOrder: null,\n            modalConfirmed: false,\n            orderStateOptions: [],\n            paymentStateOptions: [],\n            showModal: false,\n            tagCollection: null,\n        };\n    },\n\n    computed: {\n        ...mapGetters('swOrderDetail', [\n            'isLoading',\n        ]),\n\n        ...mapState('swOrderDetail', [\n            'savedSuccessful',\n        ]),\n\n        lastChangedUser() {\n            if (this.liveOrder) {\n                if (this.liveOrder.updatedBy) {\n                    return this.liveOrder.updatedBy;\n                }\n\n                if (this.liveOrder.createdBy) {\n                    return this.liveOrder.createdBy;\n                }\n            }\n\n            return null;\n        },\n\n        lastChangedDateTime() {\n            if (this.liveOrder) {\n                if (this.liveOrder.updatedAt) {\n                    return this.liveOrder.updatedAt;\n                }\n\n                if (this.liveOrder.createdAt) {\n                    return this.liveOrder.createdAt;\n                }\n            }\n\n            return null;\n        },\n\n        lastChangedByCriteria() {\n            const criteria = new Criteria(1, 25);\n            criteria.setIds([this.order.id]);\n\n            criteria\n                .addAssociation('createdBy')\n                .addAssociation('updatedBy');\n\n            return criteria;\n        },\n\n        summaryMainHeader() {\n            // eslint-disable-next-line max-len\n            return `${this.order.orderNumber} - ${this.order.orderCustomer.firstName} ${this.order.orderCustomer.lastName} (${this.order.orderCustomer.email})`;\n        },\n\n        orderRepository() {\n            return this.repositoryFactory.create('order');\n        },\n\n        orderTagRepository() {\n            return this.repositoryFactory.create(\n                this.order.tags.entity,\n                this.order.tags.source,\n            );\n        },\n\n        stateMachineStateRepository() {\n            return this.repositoryFactory.create('state_machine_state');\n        },\n\n        stateMachineStateCriteria() {\n            const criteria = new Criteria(1, null);\n            criteria.addSorting({ field: 'name', order: 'ASC' });\n            criteria.addAssociation('stateMachine');\n            criteria.addFilter(\n                Criteria.equalsAny(\n                    'state_machine_state.stateMachine.technicalName',\n                    ['order.state', 'order_transaction.state', 'order_delivery.state'],\n                ),\n            );\n\n            return criteria;\n        },\n\n        transaction() {\n            for (let i = 0; i < this.order.transactions.length; i += 1) {\n                if (!['cancelled', 'failed'].includes(this.order.transactions[i].stateMachineState.technicalName)) {\n                    return this.order.transactions[i];\n                }\n            }\n            return this.order.transactions.last();\n        },\n\n        delivery() {\n            return this.order.deliveries[0];\n        },\n\n        currencyFilter() {\n            return Shopware.Filter.getByName('currency');\n        },\n\n        dateFilter() {\n            return Shopware.Filter.getByName('date');\n        },\n    },\n\n    watch: {\n        savedSuccessful() {\n            if (this.savedSuccessful) {\n                this.getLiveOrder();\n            }\n        },\n    },\n\n    created() {\n        this.createdComponent();\n    },\n\n    methods: {\n        createdComponent() {\n            const tags = cloneDeep(this.order.tags);\n\n            this.tagCollection = new EntityCollection(\n                this.order.tags.source,\n                this.order.tags.entity,\n                Shopware.Context.api,\n                null,\n                tags,\n                tags.length,\n            );\n\n            this.getLiveOrder();\n            this.getTransitionOptions();\n        },\n\n        getLiveOrder() {\n            this.orderRepository.search(this.lastChangedByCriteria, Shopware.Context.api)\n                .then(response => {\n                    if (response && response.first()) {\n                        this.liveOrder = response.first();\n                    }\n                });\n        },\n\n        onTagAdd(item) {\n            this.orderTagRepository.assign(item.id)\n                .then(() => {\n                    this.tagCollection.add(item);\n                });\n        },\n\n        onTagRemove(item) {\n            this.orderTagRepository.delete(item.id)\n                .then(() => {\n                    this.tagCollection.remove(item.id);\n                });\n        },\n\n        getAllStates() {\n            return this.stateMachineStateRepository.search(this.stateMachineStateCriteria);\n        },\n\n        buildTransitionOptions(stateMachineName, allTransitions, possibleTransitions) {\n            const entries = allTransitions.filter((entry) => {\n                return entry.stateMachine.technicalName === stateMachineName;\n            });\n\n            const options = entries.map((state, index) => {\n                return {\n                    stateName: state.technicalName,\n                    id: index,\n                    name: state.translated.name,\n                    disabled: true,\n                };\n            });\n\n            options.forEach((option) => {\n                const transitionToState = possibleTransitions.filter((transition) => {\n                    return transition.toStateName === option.stateName;\n                });\n\n                if (transitionToState.length >= 1) {\n                    option.disabled = false;\n                    option.id = transitionToState[0].actionName;\n                }\n            });\n\n            return options;\n        },\n\n        backgroundStyle(stateType) {\n            let technicalName;\n\n            switch (stateType) {\n                case 'order_transaction':\n                    technicalName = this.transaction.stateMachineState.technicalName;\n                    break;\n                case 'order_delivery':\n                    technicalName = this.delivery.stateMachineState.technicalName;\n                    break;\n                case 'order':\n                    technicalName = this.order.stateMachineState.technicalName;\n                    break;\n                default:\n                    return null;\n            }\n\n            return this.stateStyleDataProviderService.getStyle(\n                `${stateType}.state`,\n                technicalName,\n            ).selectBackgroundStyle;\n        },\n\n        getTransitionOptions() {\n            Shopware.State.commit('swOrderDetail/setLoading', ['states', true]);\n\n            const statePromises = [this.stateMachineService.getState('order', this.order.id)];\n\n            if (this.transaction) {\n                statePromises.push(this.stateMachineService.getState('order_transaction', this.transaction.id));\n            }\n\n            if (this.delivery) {\n                statePromises.push(this.stateMachineService.getState('order_delivery', this.delivery.id));\n            }\n\n            return Promise.all(\n                [\n                    this.getAllStates(),\n                    ...statePromises,\n                ],\n            ).then((data) => {\n                const allStates = data[0];\n                const orderState = data[1];\n\n                this.orderStateOptions = this.buildTransitionOptions(\n                    'order.state',\n                    allStates,\n                    orderState.data.transitions,\n                );\n\n                if (this.transaction) {\n                    const orderTransactionState = data[2];\n                    this.paymentStateOptions = this.buildTransitionOptions(\n                        'order_transaction.state',\n                        allStates,\n                        orderTransactionState.data.transitions,\n                    );\n                }\n\n                if (this.delivery) {\n                    const orderDeliveryState = data[3];\n                    this.deliveryStateOptions = this.buildTransitionOptions(\n                        'order_delivery.state',\n                        allStates,\n                        orderDeliveryState.data.transitions,\n                    );\n                }\n\n                return Promise.resolve();\n            }).finally(() => {\n                Shopware.State.commit('swOrderDetail/setLoading', ['states', false]);\n            });\n        },\n\n        onStateSelected(stateType, actionName) {\n            if (!stateType || !actionName) {\n                this.createStateChangeErrorNotification(this.$tc('sw-order.stateCard.labelErrorNoAction'));\n                return;\n            }\n\n            if (!this.modalConfirmed) {\n                this.currentActionName = actionName;\n                this.currentStateType = stateType;\n\n                this.showModal = true;\n\n                return;\n            }\n\n            this.modalConfirmed = false;\n        },\n\n        onLeaveModalClose() {\n            this.modalConfirmed = false;\n            this.currentActionName = null;\n            this.currentStateType = null;\n            this.showModal = false;\n        },\n\n        onLeaveModalConfirm(docIds, sendMail = true) {\n            this.showModal = false;\n\n            let transition = null;\n\n            switch (this.currentStateType) {\n                case 'order_transaction':\n                    transition = this.orderStateMachineService.transitionOrderTransactionState(\n                        this.transaction.id,\n                        this.currentActionName,\n                        { documentIds: docIds, sendMail },\n                    );\n                    break;\n                case 'order_delivery':\n                    transition = this.orderStateMachineService.transitionOrderDeliveryState(\n                        this.delivery.id,\n                        this.currentActionName,\n                        { documentIds: docIds, sendMail },\n                    );\n                    break;\n                case 'order':\n                    transition = this.orderStateMachineService.transitionOrderState(\n                        this.order.id,\n                        this.currentActionName,\n                        { documentIds: docIds, sendMail },\n                    );\n                    break;\n                default:\n                    this.createNotificationError({\n                        message: this.$tc('sw-order.stateCard.labelErrorStateChange'),\n                    });\n                    return;\n            }\n\n            if (transition) {\n                transition.then(() => {\n                    this.loadHistory();\n                }).catch((error) => {\n                    this.createStateChangeErrorNotification(error);\n                });\n            }\n\n            this.currentActionName = null;\n            this.currentStateType = null;\n        },\n\n        loadHistory() {\n            this.statesLoading = true;\n            this.modalConfirmed = false;\n\n            this.getTransitionOptions()\n                .then(() => {\n                    this.$emit('save-edits');\n                })\n                .catch((error) => {\n                    this.createNotificationError(error);\n                });\n        },\n\n        createStateChangeErrorNotification(errorMessage) {\n            this.createNotificationError({\n                message: this.$tc('sw-order.stateCard.labelErrorStateChange') + errorMessage,\n            });\n        },\n    },\n};\n","export default \"\\n{% block sw_order_detail_base_general_info %}\\n<div class=\\\"sw-order-general-info\\\">\\n    \\n    {% block sw_order_detail_base_general_info_summary %}\\n    <div class=\\\"sw-order-general-info__summary\\\">\\n        \\n        {% block sw_order_detail_base_general_info_summary_main %}\\n        <div class=\\\"sw-order-general-info__summary-main\\\">\\n            \\n            {% block sw_order_detail_base_general_info_summary_main_header %}\\n            <div class=\\\"sw-order-general-info__summary-main-header\\\">\\n                {{ summaryMainHeader }}\\n            </div>\\n            {% endblock %}\\n            \\n            {% block sw_order_detail_base_general_info_summary_main_total %}\\n            <div class=\\\"sw-order-general-info__summary-main-total\\\">\\n                {{ currencyFilter(order.amountTotal, order.currency.translated.shortName, order.totalRounding.decimals) }}\\n            </div>\\n            {% endblock %}\\n        </div>\\n        {% endblock %}\\n\\n        \\n        {% block sw_order_detail_base_general_info_summary_sub %}\\n        <div class=\\\"sw-order-general-info__summary-sub\\\">\\n            \\n            {% block sw_order_detail_base_general_info_summary_sub_description %}\\n            <div class=\\\"sw-order-general-info__summary-sub-description\\\">\\n                {{ $tc('sw-order.generalTab.info.summary.on') }}\\n                {{ dateFilter(order.orderDateTime, {\\n                hour: '2-digit',\\n                minute: '2-digit',\\n                day: '2-digit',\\n                month: '2-digit',\\n                year: 'numeric'\\n                }) }}\\n                {{ $tc('sw-order.generalTab.info.summary.with') }}\\n                {{ order.transactions.last().paymentMethod.translated.distinguishableName }}\\n                <template v-if=\\\"order.deliveries.last()\\\">\\n                    {{ $tc('sw-order.generalTab.info.summary.and') }}\\n                    {{ order.deliveries.last().shippingMethod.translated.name }}\\n                </template>\\n            </div>\\n            {% endblock %}\\n            \\n            {% block sw_order_detail_base_general_info_summary_sub_last_changed %}\\n            <div class=\\\"sw-order-general-info__summary-sub-last-changed\\\">\\n                \\n                {% block sw_order_detail_base_general_info_summary_sub_last_changed_time %}\\n                <div\\n                    v-if=\\\"lastChangedDateTime\\\"\\n                    class=\\\"sw-order-general-info__summary-sub-last-changed-time\\\"\\n                >\\n                    {{ $tc('sw-order.generalTab.info.summary.lastChanged') }}:\\n                    {{ dateFilter(lastChangedDateTime, {\\n                    hour: '2-digit',\\n                    minute: '2-digit',\\n                    day: '2-digit',\\n                    month: '2-digit',\\n                    year: 'numeric'\\n                    }) }}\\n                </div>\\n                {% endblock %}\\n                \\n                {% block sw_order_detail_base_general_info_summary_sub_last_changed_user %}\\n                <div\\n                    v-if=\\\"lastChangedUser\\\"\\n                    class=\\\"sw-order-general-info__summary-sub-last-changed-user\\\"\\n                >\\n                    {{ $tc('sw-order.generalTab.info.summary.by') }}\\n                    {{ lastChangedUser.firstName }} {{ lastChangedUser.lastName }}\\n                </div>\\n                {% endblock %}\\n            </div>\\n            {% endblock %}\\n        </div>\\n        {% endblock %}\\n    </div>\\n    {% endblock %}\\n\\n    \\n    {% block sw_order_state_change_card_modal %}\\n    <sw-order-state-change-modal\\n        v-if=\\\"showModal\\\"\\n        :order=\\\"order\\\"\\n        :is-loading=\\\"isLoading\\\"\\n        :technical-name=\\\"''\\\"\\n        @page-leave=\\\"onLeaveModalClose\\\"\\n        @page-leave-confirm=\\\"onLeaveModalConfirm\\\"\\n    />\\n    {% endblock %}\\n\\n    \\n    {% block sw_order_detail_base_general_info_order_states %}\\n    <div class=\\\"sw-order-general-info__order-states\\\">\\n        \\n        {% block sw_order_detail_base_general_info_order_states_payment %}\\n        <div class=\\\"sw-order-general-info__order-state\\\">\\n            <sw-order-state-select-v2\\n                v-tooltip=\\\"{\\n                    message: $tc('sw-privileges.tooltip.warning'),\\n                    disabled: acl.can('order.editor'),\\n                    showOnDisabledElements: true\\n                }\\\"\\n                class=\\\"sw-order-general-info__order-state-payment\\\"\\n                :transition-options=\\\"paymentStateOptions\\\"\\n                state-type=\\\"order_transaction\\\"\\n                rounded-style\\n                :placeholder=\\\"transaction.stateMachineState.translated.name\\\"\\n                :label=\\\"$tc('sw-order.stateCard.headlineTransactionState')\\\"\\n                :background-style=\\\"backgroundStyle('order_transaction')\\\"\\n                :disabled=\\\"!acl.can('order.editor')\\\"\\n                @state-select=\\\"onStateSelected\\\"\\n            />\\n        </div>\\n        {% endblock %}\\n        \\n        {% block sw_order_detail_base_general_info_order_states_shipping %}\\n        <div\\n            v-if=\\\"delivery\\\"\\n            class=\\\"sw-order-general-info__order-state\\\"\\n        >\\n            <sw-order-state-select-v2\\n                v-tooltip=\\\"{\\n                    message: $tc('sw-privileges.tooltip.warning'),\\n                    disabled: acl.can('order.editor'),\\n                    showOnDisabledElements: true\\n                }\\\"\\n                class=\\\"sw-order-general-info__order-state-delivery\\\"\\n                :transition-options=\\\"deliveryStateOptions\\\"\\n                state-type=\\\"order_delivery\\\"\\n                rounded-style\\n                :placeholder=\\\"delivery.stateMachineState.translated.name\\\"\\n                :label=\\\"$tc('sw-order.stateCard.headlineDeliveryState')\\\"\\n                :background-style=\\\"backgroundStyle('order_delivery')\\\"\\n                :disabled=\\\"!acl.can('order.editor')\\\"\\n                @state-select=\\\"onStateSelected\\\"\\n            />\\n        </div>\\n        {% endblock %}\\n        \\n        {% block sw_order_detail_base_general_info_order_states_order %}\\n        <div class=\\\"sw-order-general-info__order-state\\\">\\n            <sw-order-state-select-v2\\n                v-tooltip=\\\"{\\n                    message: $tc('sw-privileges.tooltip.warning'),\\n                    disabled: acl.can('order.editor'),\\n                    showOnDisabledElements: true\\n                }\\\"\\n                class=\\\"sw-order-general-info__order-state-order\\\"\\n                :transition-options=\\\"orderStateOptions\\\"\\n                rounded-style\\n                state-type=\\\"order\\\"\\n                :placeholder=\\\"order.stateMachineState.translated.name\\\"\\n                :label=\\\"$tc('sw-order.stateCard.headlineOrderState')\\\"\\n                :background-style=\\\"backgroundStyle('order')\\\"\\n                :disabled=\\\"!acl.can('order.editor')\\\"\\n                @state-select=\\\"onStateSelected\\\"\\n            />\\n        </div>\\n        {% endblock %}\\n    </div>\\n    {% endblock %}\\n\\n    \\n    {% block sw_order_detail_base_general_info_order_tags %}\\n    <sw-entity-tag-select\\n        class=\\\"sw-order-general-info__order-tags\\\"\\n        size=\\\"small\\\"\\n        :entity-collection=\\\"tagCollection\\\"\\n        :disabled=\\\"!acl.can('order.editor')\\\"\\n        :placeholder=\\\"$tc('sw-order.generalTab.tagSelect.placeholder')\\\"\\n        :always-show-placeholder=\\\"true\\\"\\n        @item-add=\\\"onTagAdd\\\"\\n        @item-remove=\\\"onTagRemove\\\"\\n    />\\n    {% endblock %}\\n</div>\\n{% endblock %}\\n\";"],"sourceRoot":""}