{"version":3,"sources":["webpack:///./src/module/sw-settings-country/page/sw-settings-country-detail/index.js","webpack:///./src/module/sw-settings-country/page/sw-settings-country-detail/sw-settings-country-detail.html.twig","webpack:///./src/module/sw-settings-country/page/sw-settings-country-detail/sw-settings-country-detail.scss"],"names":["_Shopware","Shopware","Component","Mixin","mapPropertyErrors","getComponentHelper","Criteria","Data","template","inject","mixins","getByName","shortcuts","active","this","allowSave","method","ESCAPE","data","country","customerTax","enabled","companyTax","countryId","isLoading","countryStateRepository","isSaveSuccessful","customFieldSets","userConfig","value","userConfigValues","showPreviewModal","previewData","metaInfo","title","$createTitle","identifier","computed","_objectSpread","currentUserId","State","get","currentUser","id","countryRepository","repositoryFactory","create","userConfigRepository","placeholder","stateColumns","getStateColumns","isNewCountry","isNew","acl","can","tooltipSave","message","$tc","disabled","showOnDisabledElements","systemKey","$device","getSystemKey","concat","appearance","userConfigCriteria","addFilter","multi","equals","showCustomFields","length","created","createdComponent","methods","$route","params","Promise","all","loadEntityData","loadCustomFieldSets","loadUserConfig","_this","then","states","entity","source","catch","_this2","customFieldDataProviderService","getCustomFieldSets","sets","_this3","search","Context","api","userConfigs","userId","key","first","saveFinish","onSave","_this4","userConfigValue","save","Object","keys","onCancel","$router","push","name","abortOnLanguageChange","hasChanges","saveOnLanguageChange","onChangeLanguage","property","label","inlineEdit","primary","onSaveModal","content","__esModule","default","module","i","locals","exports","add"],"mappings":"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","file":"static/js/281274d8e0612954d7a4.js","sourcesContent":["/**\n * @package buyers-experience\n */\nimport template from './sw-settings-country-detail.html.twig';\nimport './sw-settings-country-detail.scss';\n\nconst { Component, Mixin } = Shopware;\nconst { mapPropertyErrors } = Component.getComponentHelper();\nconst { Criteria } = Shopware.Data;\n\n// eslint-disable-next-line sw-deprecation-rules/private-feature-declarations\nexport default {\n    template,\n\n    inject: [\n        'repositoryFactory',\n        'acl',\n        'customFieldDataProviderService',\n    ],\n\n    mixins: [\n        Mixin.getByName('notification'),\n        Mixin.getByName('placeholder'),\n        Mixin.getByName('discard-detail-page-changes')('country'),\n    ],\n\n    shortcuts: {\n        'SYSTEMKEY+S': {\n            active() {\n                return this.allowSave;\n            },\n            method: 'onSave',\n        },\n        ESCAPE: 'onCancel',\n    },\n\n    data() {\n        return {\n            country: {\n                customerTax: {\n                    enabled: false,\n                },\n                companyTax: {\n                    enabled: false,\n                },\n            },\n            countryId: null,\n            isLoading: false,\n            countryStateRepository: null,\n            isSaveSuccessful: false,\n            customFieldSets: null,\n            userConfig: {\n                value: {},\n            },\n            userConfigValues: {},\n            showPreviewModal: false,\n            previewData: null,\n        };\n    },\n\n    metaInfo() {\n        return {\n            title: this.$createTitle(this.identifier),\n        };\n    },\n\n    computed: {\n        currentUserId() {\n            return Shopware.State.get('session').currentUser.id;\n        },\n\n        countryRepository() {\n            return this.repositoryFactory.create('country');\n        },\n\n        userConfigRepository() {\n            return this.repositoryFactory.create('user_config');\n        },\n\n        identifier() {\n            return this.placeholder(this.country, 'name');\n        },\n\n        stateColumns() {\n            return this.getStateColumns();\n        },\n\n        isNewCountry() {\n            return typeof this.country.isNew === 'function'\n                ? this.country.isNew()\n                : false;\n        },\n\n        allowSave() {\n            return this.isNewCountry\n                ? this.acl.can('country.creator')\n                : this.acl.can('country.editor');\n        },\n\n        tooltipSave() {\n            if (!this.allowSave) {\n                return {\n                    message: this.$tc('sw-privileges.tooltip.warning'),\n                    disabled: this.allowSave,\n                    showOnDisabledElements: true,\n                };\n            }\n\n            const systemKey = this.$device.getSystemKey();\n\n            return {\n                message: `${systemKey} + S`,\n                appearance: 'light',\n            };\n        },\n\n        userConfigCriteria() {\n            return new Criteria(1, 25).addFilter(Criteria.multi(\n                'AND',\n                [\n                    Criteria.equals('userId', this.currentUserId),\n                    Criteria.equals('key', 'setting-country'),\n                ],\n            ));\n        },\n\n        ...mapPropertyErrors('country', ['name']),\n\n        showCustomFields() {\n            return this.customFieldSets && this.customFieldSets.length > 0;\n        },\n    },\n\n    created() {\n        this.createdComponent();\n    },\n\n    methods: {\n        createdComponent() {\n            if (!this.$route.params.id) { return; }\n\n            this.countryId = this.$route.params.id;\n\n            Promise.all([\n                this.loadEntityData(),\n                this.loadCustomFieldSets(),\n                this.loadUserConfig(),\n            ]);\n        },\n\n        loadEntityData() {\n            if (typeof this.country.isNew === 'function' && this.country.isNew()) {\n                return false;\n            }\n\n            this.isLoading = true;\n            return this.countryRepository.get(this.countryId).then(country => {\n                this.country = country;\n\n                this.isLoading = false;\n\n                this.countryStateRepository = this.repositoryFactory.create(\n                    this.country.states.entity,\n                    this.country.states.source,\n                );\n            }).catch(() => {\n                this.isLoading = false;\n            });\n        },\n\n        loadCustomFieldSets() {\n            this.customFieldDataProviderService.getCustomFieldSets('country').then((sets) => {\n                this.customFieldSets = sets;\n            });\n        },\n\n        loadUserConfig() {\n            return this.userConfigRepository.search(this.userConfigCriteria, Shopware.Context.api).then((userConfigs) => {\n                if (userConfigs.length === 0) {\n                    this.userConfig = this.userConfigRepository.create(Shopware.Context.api);\n                    this.userConfig.userId = this.currentUserId;\n                    this.userConfig.key = 'setting-country';\n                    this.userConfig.value = [];\n                    return;\n                }\n                this.userConfig = userConfigs.first();\n                this.userConfigValues = this.userConfig.value[this.countryId];\n\n                if (!this.userConfigValues) {\n                    this.userConfig.value[this.countryId] = {};\n                    this.userConfigValues = this.userConfig.value[this.countryId];\n                }\n            });\n        },\n\n        saveFinish() {\n            this.isSaveSuccessful = false;\n        },\n\n        onSave() {\n            this.isSaveSuccessful = false;\n            this.isLoading = true;\n\n            const userConfigValue = this.userConfig.value[this.countryId];\n\n            return this.countryRepository.save(this.country, Shopware.Context.api).then(() => {\n                if (userConfigValue\n                    && Object.keys(userConfigValue).length > 0) {\n                    this.userConfigRepository.save(this.userConfig, Shopware.Context.api)\n                        .then(() => {\n                            this.loadUserConfig();\n                        });\n                }\n                this.loadEntityData();\n                this.isLoading = false;\n                this.isSaveSuccessful = true;\n            }).catch(() => {\n                this.isLoading = false;\n            });\n        },\n\n        onCancel() {\n            this.$router.push({ name: 'sw.settings.country.index' });\n        },\n\n        abortOnLanguageChange() {\n            return this.countryRepository.hasChanges(this.country);\n        },\n\n        saveOnLanguageChange() {\n            return this.onSave();\n        },\n\n        onChangeLanguage() {\n            this.loadEntityData();\n        },\n\n        getStateColumns() {\n            return [{\n                property: 'name',\n                label: this.$tc('sw-settings-country.detail.columnStateNameLabel'),\n                inlineEdit: 'string',\n                primary: true,\n            }, {\n                property: 'shortCode',\n                label: this.$tc('sw-settings-country.detail.columnStateShortCodeLabel'),\n                inlineEdit: 'string',\n            }];\n        },\n\n        onSaveModal() {\n            return this.onSave();\n        },\n    },\n};\n","export default \"\\n{% block sw_settings_country_detail %}\\n<sw-page class=\\\"sw-settings-country-detail\\\">\\n\\n    \\n    {% block sw_settings_country_detail_header %}\\n    <template #smart-bar-header>\\n        <h2>{{ placeholder(country, 'name', $tc('sw-settings-country.detail.textHeadline')) }}</h2>\\n    </template>\\n    {% endblock %}\\n\\n    \\n    {% block sw_settings_country_detail_actions %}\\n    <template #smart-bar-actions>\\n        \\n        {% block sw_settings_country_detail_actions_abort %}\\n        <sw-button\\n            v-tooltip.bottom=\\\"{\\n                message: 'ESC',\\n                appearance: 'light'\\n            }\\\"\\n            :disabled=\\\"isLoading\\\"\\n            @click=\\\"onCancel\\\"\\n        >\\n            {{ $tc('sw-settings-country.detail.buttonCancel') }}\\n        </sw-button>\\n        {% endblock %}\\n\\n        \\n        {% block sw_settings_country_detail_actions_save %}\\n        <sw-button-process\\n            v-tooltip.bottom=\\\"tooltipSave\\\"\\n            class=\\\"sw-settings-country-detail__save-action\\\"\\n            :is-loading=\\\"isLoading\\\"\\n            :process-success=\\\"isSaveSuccessful\\\"\\n            :disabled=\\\"!country || !allowSave\\\"\\n            variant=\\\"primary\\\"\\n            {% if VUE3 %}\\n            @update:process-success=\\\"saveFinish\\\"\\n            {% else %}\\n            @process-finish=\\\"saveFinish\\\"\\n            {% endif %}\\n            @click.prevent=\\\"onSave\\\"\\n        >\\n            {{ $tc('sw-settings-country.detail.buttonSave') }}\\n        </sw-button-process>\\n        {% endblock %}\\n    </template>\\n    {% endblock %}\\n\\n    \\n    {% block sw_settings_country_detail_language_switch %}\\n    <template #language-switch>\\n        <sw-language-switch\\n            :save-changes-function=\\\"saveOnLanguageChange\\\"\\n            :abort-change-function=\\\"abortOnLanguageChange\\\"\\n            @on-change=\\\"onChangeLanguage\\\"\\n        />\\n    </template>\\n    {% endblock %}\\n\\n    \\n    {% block sw_settings_country_detail_content %}\\n    <template #content>\\n        <sw-card-view>\\n            \\n            {% block sw_settings_country_detail_content_language_info %}\\n            <sw-language-info\\n                :entity-description=\\\"placeholder(country, 'name', $tc('sw-settings-country.detail.textHeadline'))\\\"\\n            />\\n            {% endblock %}\\n\\n            \\n            {% block sw_settings_country_tabs_header %}\\n            <sw-tabs position-identifier=\\\"sw-settings-country-detail-header\\\">\\n                \\n                {% block sw_setting_country_tabs_setting %}\\n                <sw-tabs-item\\n                    v-bind=\\\"$props\\\"\\n                    class=\\\"sw-settings-country__setting-tab\\\"\\n                    :route=\\\"{ name: isNewCountry ? 'sw.settings.country.create.general' : 'sw.settings.country.detail.general' }\\\"\\n                >\\n                    {{ $tc('sw-settings-country.page.generalTab') }}\\n                </sw-tabs-item>\\n                {% endblock %}\\n\\n                \\n                {% block sw_setting_country_tabs_state %}\\n                <sw-tabs-item\\n                    v-bind=\\\"$props\\\"\\n                    class=\\\"sw-settings-country__state-tab\\\"\\n                    :route=\\\"{ name: isNewCountry ? 'sw.settings.country.create.state' : 'sw.settings.country.detail.state' }\\\"\\n                >\\n                    {{ $tc('sw-settings-country.page.stateTab') }}\\n                </sw-tabs-item>\\n                {% endblock %}\\n\\n                \\n                {% block sw_setting_country_tabs_address_handling %}\\n                <sw-tabs-item\\n                    v-bind=\\\"$props\\\"\\n                    class=\\\"sw-settings-country__address-handling-tab\\\"\\n                    :route=\\\"{ name: isNewCountry ? 'sw.settings.country.create.address-handling' : 'sw.settings.country.detail.address-handling' }\\\"\\n                >\\n                    {{ $tc('sw-settings-country.page.addressHandlingTab') }}\\n                </sw-tabs-item>\\n                {% endblock %}\\n\\n                \\n                {% block sw_setting_country_tabs_extension %}{% endblock %}\\n            </sw-tabs>\\n            {% endblock %}\\n\\n            <template v-if=\\\"isLoading\\\">\\n                <sw-skeleton />\\n                <sw-skeleton />\\n            </template>\\n\\n            <template v-else>\\n                \\n                {% block sw_settings_country_tabs_content %}\\n                {% if VUE3 %}\\n                <router-view\\n                    v-slot=\\\"{ Component }\\\"\\n                >\\n                    <component\\n                        :is=\\\"Component\\\"\\n                        :country=\\\"country\\\"\\n                        :country-state-repository=\\\"countryStateRepository\\\"\\n                        :is-loading=\\\"isLoading\\\"\\n                        :user-config=\\\"userConfig\\\"\\n                        :user-config-values=\\\"userConfigValues\\\"\\n                        @modal-save=\\\"onSaveModal\\\"\\n                    />\\n                </router-view>\\n                {% else %}\\n                <router-view\\n                    :country=\\\"country\\\"\\n                    :country-state-repository=\\\"countryStateRepository\\\"\\n                    :is-loading=\\\"isLoading\\\"\\n                    :user-config=\\\"userConfig\\\"\\n                    :user-config-values=\\\"userConfigValues\\\"\\n                    @modal-save=\\\"onSaveModal\\\"\\n                />\\n                {% endif %}\\n                {% endblock %}\\n\\n                \\n                {% block sw_settings_country_detail_custom_field_sets %}\\n                <sw-card\\n                    v-if=\\\"showCustomFields\\\"\\n                    position-identifier=\\\"sw-settings-country-detail-custom-field-sets\\\"\\n                    :title=\\\"$tc('sw-settings-custom-field.general.mainMenuItemGeneral')\\\"\\n                    :is-loading=\\\"isLoading\\\"\\n                >\\n                    <sw-custom-field-set-renderer\\n                        :entity=\\\"country\\\"\\n                        :disabled=\\\"!acl.can('country.editor')\\\"\\n                        :sets=\\\"customFieldSets\\\"\\n                    />\\n                </sw-card>\\n                {% endblock %}\\n            </template>\\n        </sw-card-view>\\n    </template>\\n    {% endblock %}\\n</sw-page>\\n{% endblock %}\\n\";","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../../../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--15-1!../../../../../node_modules/css-loader/dist/cjs.js??ref--15-2!../../../../../node_modules/sass-loader/dist/cjs.js??ref--15-3!./sw-settings-country-detail.scss\");\nif(content.__esModule) content = content.default;\nif(typeof content === 'string') content = [[module.id, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar add = require(\"!../../../../../node_modules/vue-style-loader/lib/addStylesClient.js\").default\nvar update = add(\"54654300\", content, true, {});"],"sourceRoot":""}