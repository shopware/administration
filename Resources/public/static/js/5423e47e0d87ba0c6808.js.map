{"version":3,"sources":["webpack:///./src/module/sw-order/component/sw-order-address-selection/sw-order-address-selection.scss","webpack:///./src/module/sw-order/component/sw-order-address-selection/index.js","webpack:///./src/module/sw-order/component/sw-order-address-selection/sw-order-address-selection.html.twig"],"names":["content","__esModule","default","module","i","locals","exports","add","_Shopware","Shopware","EntityDefinition","Mixin","Criteria","Data","mapState","Component","getComponentHelper","cloneDeep","Utils","object","template","inject","mixins","getByName","props","address","type","Object","required","label","String","addressId","disabled","Boolean","data","_this$address","customer","currentAddress","customerAddressCustomFieldSets","orderAddressId","this","id","computed","_objectSpread","orderCustomer","order","orderRepository","repositoryFactory","create","addressRepository","addresses","entity","source","customerRepository","customerCriteria","criteria","addAssociation","customFieldSetRepository","customFieldSetCriteria","addFilter","equals","addressOptions","_this$customer","map","item","concat","street","zipcode","city","unshift","modalTitle","_this$currentAddress","$tc","_isNew","selectedAddressId","_this$address$custome","_this$address2","customerAddressId","created","createdComponent","methods","getCustomer","getCustomFieldSet","onEditAddress","Context","api","assign","get","onCreateNewAddress","createNewCustomerAddress","newAddress","customerId","onSaveAddress","_this$customer$addres","_this","Promise","resolve","save","versionContext","then","catch","createNotificationError","message","isValidAddress","reject","has","remove","push","ignoreFields","keys","getRequiredFields","every","field","indexOf","onChangeDefaultAddress","value","hasOwnProperty","defaultShippingAddressId","defaultBillingAddressId","preFix","createPrefix","name","string","replace","charAt","toUpperCase","slice","onAddressChange","$emit","_this2","_this3","search","customFieldSets"],"mappings":"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","file":"static/js/5423e47e0d87ba0c6808.js","sourcesContent":["// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../../../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--15-1!../../../../../node_modules/css-loader/dist/cjs.js??ref--15-2!../../../../../node_modules/sass-loader/dist/cjs.js??ref--15-3!./sw-order-address-selection.scss\");\nif(content.__esModule) content = content.default;\nif(typeof content === 'string') content = [[module.id, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar add = require(\"!../../../../../node_modules/vue-style-loader/lib/addStylesClient.js\").default\nvar update = add(\"10052f90\", content, true, {});","import { required } from 'src/core/service/validation.service';\nimport template from './sw-order-address-selection.html.twig';\nimport './sw-order-address-selection.scss';\n\n/**\n * @package checkout\n */\n\nconst { EntityDefinition, Mixin } = Shopware;\nconst { Criteria } = Shopware.Data;\nconst { mapState } = Shopware.Component.getComponentHelper();\nconst { cloneDeep } = Shopware.Utils.object;\n\n// eslint-disable-next-line sw-deprecation-rules/private-feature-declarations\nexport default {\n    template,\n\n    inject: ['repositoryFactory'],\n\n    mixins: [\n        Mixin.getByName('notification'),\n    ],\n\n    props: {\n        address: {\n            type: Object,\n            required: false,\n            default: () => {},\n        },\n\n        label: {\n            type: String,\n            required: false,\n            default: '',\n        },\n\n        addressId: {\n            type: String,\n            required: false,\n            default: null,\n        },\n\n        disabled: {\n            type: Boolean,\n            required: false,\n            default: false,\n        },\n\n        type: {\n            type: String,\n            required: false,\n            default: '',\n        },\n    },\n\n    data() {\n        return {\n            customer: {},\n            currentAddress: null,\n            customerAddressCustomFieldSets: null,\n            orderAddressId: cloneDeep(this.address?.id),\n        };\n    },\n\n    computed: {\n        ...mapState('swOrderDetail', [\n            'order',\n            'versionContext',\n        ]),\n\n        orderCustomer() {\n            return this.order.orderCustomer;\n        },\n\n        orderRepository() {\n            return this.repositoryFactory.create('order');\n        },\n\n        addressRepository() {\n            return this.repositoryFactory.create(\n                this.customer.addresses.entity,\n                this.customer.addresses.source,\n            );\n        },\n\n        customerRepository() {\n            return this.repositoryFactory.create('customer');\n        },\n\n        customerCriteria() {\n            const criteria = new Criteria(1, 25);\n            criteria.addAssociation('addresses');\n\n            return criteria;\n        },\n\n        customFieldSetRepository() {\n            return this.repositoryFactory.create('custom_field_set');\n        },\n\n        customFieldSetCriteria() {\n            const criteria = new Criteria(1, 25);\n            criteria.addFilter(Criteria.equals('relations.entityName', 'customer_address'))\n                .addAssociation('customFields');\n\n            return criteria;\n        },\n\n        addressOptions() {\n            const addresses = (this.customer?.addresses || []).map(item => {\n                return {\n                    label: `${item.street}, ${item.zipcode} ${item.city}`,\n                    ...item,\n                };\n            });\n\n            // eslint-disable-next-line no-unused-expressions\n            this.address && addresses.unshift({\n                label: `${this.address.street}, ${this.address.zipcode} ${this.address.city}`,\n                ...this.address,\n            });\n\n            return addresses;\n        },\n\n        modalTitle() {\n            return this.$tc(\n                `sw-order.addressSelection.${this.currentAddress?._isNew\n                    ? 'modalTitleEditAddress'\n                    : 'modalTitleSelectAddress'}`,\n            );\n        },\n\n        selectedAddressId() {\n            return this.address?.customerAddressId ?? this.addressId;\n        },\n    },\n\n    created() {\n        this.createdComponent();\n    },\n\n    methods: {\n        createdComponent() {\n            this.getCustomer();\n            this.getCustomFieldSet();\n        },\n\n        onEditAddress(id) {\n            // set address selected\n            this.orderAddressId = id;\n\n            if (id === this.address.id) {\n                this.currentAddress = this.address;\n                return;\n            }\n\n            const currentAddress = this.addressRepository.create(Shopware.Context.api, id);\n\n            this.currentAddress = Object.assign(currentAddress, this.customer.addresses.get(id));\n        },\n\n        onCreateNewAddress() {\n            this.createNewCustomerAddress();\n        },\n\n        createNewCustomerAddress() {\n            const newAddress = this.addressRepository.create();\n            newAddress.customerId = this.customer.id;\n\n            this.currentAddress = newAddress;\n        },\n\n        onSaveAddress() {\n            if (this.currentAddress === null) {\n                return Promise.resolve();\n            }\n\n            // edit order address\n            if (this.currentAddress.id === this.address.id) {\n                return this.orderRepository.save(this.order, this.versionContext).then(() => {\n                    this.currentAddress = null;\n                }).catch(() => {\n                    this.createNotificationError({\n                        message: this.$tc('sw-order.detail.messageSaveError'),\n                    });\n                });\n            }\n\n            if (!this.isValidAddress(this.currentAddress)) {\n                this.createNotificationError({\n                    message: this.$tc('sw-customer.notification.requiredFields'),\n                });\n\n                return Promise.reject();\n            }\n\n            const address = this.customer.addresses.get(this.currentAddress.id) ??\n                this.addressRepository.create(Shopware.Context.api, this.currentAddress.id);\n\n            Object.assign(address, this.currentAddress);\n\n            if (this.customer.addresses.has(address.id)) {\n                this.customer.addresses.remove(address.id);\n            }\n\n            this.customer.addresses.push(address);\n\n            return this.customerRepository.save(this.customer).then(() => {\n                this.currentAddress = null;\n            });\n        },\n\n        isValidAddress(address) {\n            const ignoreFields = ['createdAt'];\n            const requiredAddressFields = Object.keys(EntityDefinition.getRequiredFields('customer_address'));\n\n            return requiredAddressFields.every(field => (ignoreFields.indexOf(field) !== -1) || required(address[field]));\n        },\n\n        onChangeDefaultAddress(data) {\n            if (!data.value) {\n                if (this.hasOwnProperty('defaultShippingAddressId')) {\n                    this.customer.defaultShippingAddressId = this.defaultShippingAddressId;\n                }\n\n                if (this.hasOwnProperty('defaultBillingAddressId')) {\n                    this.customer.defaultBillingAddressId = this.defaultBillingAddressId;\n                }\n                return;\n            }\n\n            const preFix = this.createPrefix(data.name, '-address');\n            const name = `default${preFix}AddressId`;\n\n            this[name] = this.customer[name];\n            this.customer[name] = data.id;\n        },\n\n        createPrefix(string, replace) {\n            const preFix = string.replace(replace, '');\n\n            return `${preFix.charAt(0).toUpperCase()}${preFix.slice(1)}`;\n        },\n\n        onAddressChange(customerAddressId) {\n            this.$emit('change-address', {\n                orderAddressId: this.addressId,\n                customerAddressId,\n                type: this.type,\n            });\n        },\n\n        getCustomer() {\n            if (!this.orderCustomer.customerId) {\n                return Promise.reject();\n            }\n\n            return this.customerRepository.get(\n                this.orderCustomer.customerId,\n                Shopware.Context.api,\n                this.customerCriteria,\n            ).then((customer) => {\n                this.customer = customer;\n            });\n        },\n\n        getCustomFieldSet() {\n            return this.customFieldSetRepository\n                .search(this.customFieldSetCriteria)\n                .then((customFieldSets) => {\n                    this.customerAddressCustomFieldSets = customFieldSets;\n                });\n        },\n    },\n};\n","export default \"\\n{% block sw_order_address_selection %}\\n<div class=\\\"sw-order-address\\\">\\n    \\n    {% block sw_order_address_selection_modal %}\\n    <sw-modal\\n        v-if=\\\"currentAddress\\\"\\n        :title=\\\"modalTitle\\\"\\n        @modal-close=\\\"currentAddress = null\\\"\\n    >\\n        \\n        {% block sw_order_address_modal_content %}\\n        <sw-customer-address-form\\n            :address=\\\"currentAddress\\\"\\n            :customer=\\\"customer\\\"\\n        >\\n            <sw-customer-address-form-options\\n                v-if=\\\"currentAddress._isNew\\\"\\n                :address=\\\"currentAddress\\\"\\n                :customer=\\\"customer\\\"\\n                :custom-field-sets=\\\"customerAddressCustomFieldSets\\\"\\n                @default-address-change=\\\"onChangeDefaultAddress\\\"\\n            />\\n        </sw-customer-address-form>\\n        {% endblock %}\\n\\n        \\n        {% block sw_order_address_modal_actions %}\\n        <template #modal-footer>\\n            \\n            {% block sw_order_address_modal_action_close %}\\n            <sw-button\\n                size=\\\"small\\\"\\n                @click=\\\"currentAddress = null\\\"\\n            >\\n                {{ $tc('global.default.cancel') }}\\n            </sw-button>\\n            {% endblock %}\\n\\n            \\n            {% block sw_order_address_modal_actions_apply %}\\n            <sw-button\\n                variant=\\\"primary\\\"\\n                size=\\\"small\\\"\\n                @click=\\\"onSaveAddress\\\"\\n            >\\n                {{ $tc('global.default.apply') }}\\n            </sw-button>\\n            {% endblock %}\\n        </template>\\n        {% endblock %}\\n    </sw-modal>\\n    {% endblock %}\\n\\n    \\n    {% block sw_order_address_selection_entity_single_select %}\\n    <sw-single-select\\n        :value=\\\"addressId\\\"\\n        class=\\\"sw-order-address-selection\\\"\\n        :options=\\\"addressOptions\\\"\\n        value-property=\\\"id\\\"\\n        :label=\\\"label\\\"\\n        :placeholder=\\\"$tc('sw-order.createBase.detailsBody.placeholderAddress')\\\"\\n        :popover-classes=\\\"['sw-order-address-selection__popover']\\\"\\n        :disabled=\\\"disabled\\\"\\n        {% if VUE3 %}\\n        @update:value=\\\"onAddressChange\\\"\\n        {% else %}\\n        @change=\\\"onAddressChange\\\"\\n        {% endif %}\\n    >\\n        <template #before-item-list>\\n            <ul class=\\\"sw-select-result__item-list\\\">\\n                <li\\n                    class=\\\"sw-select-result sw-select-result__add-new-address\\\"\\n                    role=\\\"button\\\"\\n                    tabindex=\\\"0\\\"\\n                    @click=\\\"onCreateNewAddress\\\"\\n                    @keydown.enter=\\\"onCreateNewAddress\\\"\\n                >\\n                    {{ $tc('sw-order.createBase.detailsBody.buttonAddNewAddress') }}\\n                </li>\\n            </ul>\\n        </template>\\n\\n        <template #result-item=\\\"{ item, index, labelProperty, isSelected }\\\">\\n            <sw-select-result\\n                :selected=\\\"isSelected(item)\\\"\\n                v-bind=\\\"{ item, index }\\\"\\n                :class=\\\"{'sw-order-address-selection__order-address': isSelected(item)}\\\"\\n            >\\n                <div class=\\\"sw-order-address-selection__information\\\">\\n                    <p>{{ item.firstName }} {{ item.lastName }}</p>\\n                    <p class=\\\"text-gray\\\">\\n                        {{ item.street }}\\n                    </p>\\n                    <p class=\\\"text-gray\\\">\\n                        {{ item.zipcode }} {{ item.city }}\\n                    </p>\\n                </div>\\n\\n                <div class=\\\"sw-order-address-selection__edit-action\\\">\\n                    <sw-context-menu-item @click=\\\"onEditAddress(item.id)\\\">\\n                        {{ $tc('global.default.edit') }}\\n                    </sw-context-menu-item>\\n                </div>\\n            </sw-select-result>\\n        </template>\\n    </sw-single-select>\\n    {% endblock %}\\n</div>\\n{% endblock %}\\n\";"],"sourceRoot":""}