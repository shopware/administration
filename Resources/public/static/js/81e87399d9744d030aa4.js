(window.webpackJsonpAdministration=window.webpackJsonpAdministration||[]).push([[8642],{89495:function(){},308642:function(t,e,n){"use strict";n.r(e),n.d(e,{default:function(){return i}}),n(320154);let{Mixin:s}=Shopware,{Criteria:a}=Shopware.Data,{cloneDeep:o}=Shopware.Utils.object;var i=Shopware.Component.wrapComponentConfig({template:'\n{% block sw_settings_payment_overview %}\n<sw-page class="sw-settings-payment-overview">\n\n    \n    {% block sw_settings_payment_overview_smart_bar_actions %}\n    <template #smart-bar-actions>\n\n        \n        {% block sw_settings_payment_overview_smart_bar_actions_add %}\n        <sw-button\n            v-tooltip="{\n                message: $tc(\'sw-privileges.tooltip.warning\'),\n                disabled: acl.can(\'payment.creator\'),\n                showOnDisabledElements: true\n            }"\n            class="sw-settings-payment-overview__button-create"\n            :disabled="!acl.can(\'payment.creator\') || undefined"\n            :router-link="{ name: \'sw.settings.payment.create\' }"\n            variant="primary"\n        >\n            {{ $tc(\'sw-settings-payment.list.buttonAddPaymentMethod\') }}\n        </sw-button>\n        {% endblock %}\n\n    </template>\n    {% endblock %}\n\n    \n    {% block sw_settings_payment_overview_smart_bar_header %}\n    <template #smart-bar-header>\n\n        \n        {% block sw_settings_payment_overview_smart_bar_header_title %}\n        <h2 class="sw-settings-payment-overview__title">\n            {{ $tc(\'sw-settings-payment.general.mainMenuItemGeneral\') }}\n        </h2>\n        {% endblock %}\n\n    </template>\n    {% endblock %}\n\n    \n    {% block sw_settings_payment_overview_language_switch %}\n    <template #language-switch>\n        <sw-language-switch @on-change="onChangeLanguage" />\n    </template>\n    {% endblock %}\n\n    \n    {% block sw_settings_payment_overview_content %}\n    <template #content>\n\n        \n        {% block sw_settings_payment_overview_content_inner %}\n        <sw-card-view class="sw-settings-payment-overview__content">\n\n            \n            {% block sw_settings_payment_overview_sorting_modal_card %}\n            <sw-card\n                class="sw-settings-payment-overview__sorting_modal_card"\n                position-identifier="sw-settings-payment-overview-sorting-modal-card"\n            >\n                <sw-button-process\n                    :disabled="isLoading || undefined"\n                    :is-loading="isLoading"\n                    :process-success="false"\n                    variant="ghost"\n                    @click="showSortingModal = true"\n                >\n                    {{ $tc(\'sw-settings-payment.overview.openSortingModalButton\') }}\n                </sw-button-process>\n            </sw-card>\n            {% endblock %}\n\n            \n            {% block sw_settings_payment_overview_list %}\n            <template\n                v-for="card in paymentMethodCards"\n                :key="card.id"\n            >\n\n                <template v-if="card.hasCustomCard">\n                    \n                    {% block sw_settings_payment_overview_list_card_custom_location %}\n                    <sw-extension-component-section\n                        :key="`extension-${card.id}`"\n                        :position-identifier="card.positionId"\n                    />\n                    {% endblock %}\n                </template>\n\n                <template v-if="card.hasCustomCard && card.component">\n                    \n                    {% block sw_settings_payment_overview_list_card_custom_card %}\n                    <component\n                        :is="card.component"\n                        :key="`component-${card.id}`"\n                        :payment-methods="card.paymentMethods"\n                        @set-payment-active="togglePaymentMethodActive"\n                    />\n                    {% endblock %}\n                </template>\n\n                <template v-if="!card.hasCustomCard">\n                    \n                    {% block sw_settings_payment_overview_list_card_default %}\n                    <sw-payment-card\n                        :key="`default-${card.id}`"\n                        :payment-method="card.paymentMethod"\n                        @set-payment-active="togglePaymentMethodActive"\n                    />\n                    {% endblock %}\n                </template>\n\n            </template>\n            {% endblock %}\n\n            \n            {% block sw_settings_payment_overview_empty_state %}\n            <sw-empty-state\n                v-if="isEmpty"\n                :title="$tc(\'sw-empty-state.messageNoResultTitle\')"\n            >\n                <template #default>\n                    {{ $tc(\'sw-empty-state.messageNoResultSublineBefore\') }}\n                    <router-link\n                        class="sw-empty-state__description-link"\n                        :to="{ name: \'sw.profile.index.searchPreferences\' }"\n                    >\n                        {{ $tc(\'sw-empty-state.messageNoResultSublineLink\') }}\n                    </router-link>\n                    {{ $tc(\'sw-empty-state.messageNoResultSublineAfter\') }}\n                </template>\n            </sw-empty-state>\n            {% endblock %}\n\n        </sw-card-view>\n        {% endblock %}\n\n        \n        {% block sw_settings_payment_overview_sorting_modal %}\n        <sw-settings-payment-sorting-modal\n            v-if="showSortingModal"\n            :payment-methods="paymentMethods"\n            @modal-close="showSortingModal = false"\n            @modal-save="loadPaymentMethods"\n        />\n        {% endblock %}\n    </template>\n    {% endblock %}\n</sw-page>\n{% endblock %}\n',compatConfig:Shopware.compatConfig,inject:["repositoryFactory","acl"],mixins:[s.getByName("notification")],data(){return{paymentMethods:[],isLoading:!1,showSortingModal:!1}},metaInfo(){return{title:this.$createTitle()}},computed:{customCards(){return Shopware.State.get("paymentOverviewCardState").cards??[]},paymentMethodRepository(){return this.repositoryFactory.create("payment_method")},paymentMethodCriteria(){let t=new a(1,500);return t.addAssociation("media"),t.addSorting(a.sort("position","ASC")),t},isEmpty(){return!this.isLoading&&0===this.paymentMethods.length},paymentMethodCards(){if(0===this.paymentMethods.length)return[];let t=[],e=o(this.paymentMethods);return this.customCards.forEach(n=>{let s=e.filter(t=>n.paymentMethodHandlers.includes(t.formattedHandlerIdentifier));0!==s.length&&(t.push({id:s[0].id,hasCustomCard:!0,component:n.component,position:Math.min(...s.map(t=>t.position)),positionId:n.positionId,paymentMethods:s}),e=e.filter(t=>!n.paymentMethodHandlers.includes(t.formattedHandlerIdentifier)))}),t.push(...e.map(t=>({id:t.id,hasCustomCard:!1,paymentMethod:t,position:t.position,positionId:""}))),t.sort((t,e)=>t.position-e.position)}},created(){this.createdComponent()},methods:{createdComponent(){this.loadPaymentMethods()},loadPaymentMethods(){this.isLoading=!0,this.paymentMethodRepository.search(this.paymentMethodCriteria).then(t=>{this.paymentMethods=t}).finally(()=>{this.isLoading=!1})},onChangeLanguage(t){Shopware.State.commit("context/setApiLanguageId",t),this.loadPaymentMethods()},togglePaymentMethodActive(t){let e=this.paymentMethods.find(e=>e.id===t.id);e&&(e.active=t.active,this.paymentMethodRepository.save(e).then(()=>{this.loadPaymentMethods(),this.showActivationSuccessNotification(e.translated?.name??"",e.active)}).catch(()=>{this.showActivationErrorNotification(e.translated?.name??"",e.active),this.$nextTick(()=>{e.active=!e.active})}))},showActivationSuccessNotification(t,e){let n=e?this.$tc("sw-settings-payment.overview.notification.activationSuccess",0,{name:t}):this.$tc("sw-settings-payment.overview.notification.deactivationSuccess",0,{name:t});this.createNotificationSuccess({message:n})},showActivationErrorNotification(t,e){let n=e?this.$tc("sw-settings-payment.overview.notification.activationError",0,{name:t}):this.$tc("sw-settings-payment.overview.notification.deactivationError",0,{name:t});this.createNotificationError({message:n})}}})},320154:function(t,e,n){var s=n(89495);s.__esModule&&(s=s.default),"string"==typeof s&&(s=[[t.id,s,""]]),s.locals&&(t.exports=s.locals),n(745346).Z("2f87d3e6",s,!0,{})}}]);