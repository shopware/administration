{"version":3,"sources":["webpack:///./src/app/asyncComponent/form/sw-datepicker/sw-datepicker.scss","webpack:///./src/app/asyncComponent/form/sw-datepicker/index.js","webpack:///./src/app/asyncComponent/form/sw-datepicker/sw-datepicker.html.twig"],"names":["content","__esModule","default","module","i","locals","exports","add","Mixin","Shopware","allEvents","template","inheritAttrs","inject","mixins","getByName","props","value","type","String","required","config","Object","dateType","validValues","validator","includes","placeholderText","Boolean","disabled","hideHint","data","flatpickrInstance","isDatepickerOpen","defaultConfig","computed","flatpickrInputRef","this","$refs","flatpickrInput","locale","State","getters","adminLocaleLanguage","currentFlatpickrConfig","placeholder","length","altFormat","suffixName","noCalendar","enableTime","additionalEventListeners","_this","listeners","keys","$listeners","forEach","key","userTimeZone","_Shopware$State$get$c","_Shopware2","_Shopware2$State","_Shopware2$State$get","_Shopware2$State$get$","get","currentUser","timeZone","timezoneFormattedValue","utcToZonedTime","toISOString","set","newValue","feature","isActive","$emit","utcDate","zonedTimeToUtc","Date","showTimeZoneHint","watch","deep","handler","updateFlatpickrInstance","createConfig","immediate","setDatepickerValue","isDisabled","_input","created","createdComponent","mounted","mountedComponent","beforeDestroy","beforeDestroyComponent","methods","destroy","setDate","getMergedConfig","newConfig","undefined","mode","console","warn","_objectSpread","_this2","mergedConfig","hook","name","createFlatpickrInstance","_this3","getEventNames","_ref","kebabCase","camelCase","_len","arguments","args","Array","_key","apply","concat","Flatpickr","onOpen","push","onClose","onChange","emitValue","_this4","events","event","kebabToCamel","openDatepicker","_this5","$nextTick","open","string","replace","m","g1","toUpperCase","unsetValue","_this6","dateFormat","time_24hr","altInput","allowInput"],"mappings":"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","file":"static/js/c5d03213a36d4b7ced99.js","sourcesContent":["// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../../../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--15-1!../../../../../node_modules/css-loader/dist/cjs.js??ref--15-2!../../../../../node_modules/sass-loader/dist/cjs.js??ref--15-3!./sw-datepicker.scss\");\nif(content.__esModule) content = content.default;\nif(typeof content === 'string') content = [[module.id, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar add = require(\"!../../../../../node_modules/vue-style-loader/lib/addStylesClient.js\").default\nvar update = add(\"29b0e46c\", content, true, {});","import Flatpickr from 'flatpickr';\nimport 'flatpickr/dist/l10n';\nimport { zonedTimeToUtc, utcToZonedTime } from 'date-fns-tz';\nimport template from './sw-datepicker.html.twig';\nimport 'flatpickr/dist/flatpickr.css';\nimport './sw-datepicker.scss';\n\nconst { Mixin } = Shopware;\n\n/**\n * @package admin\n *\n * @deprecated tag:v6.6.0 - Will be private\n * @public\n * @description Datepicker wrapper for date inputs. For all configuration options visit:\n * <a href=\"https://flatpickr.js.org/options/\">https://flatpickr.js.org/options/</a>.\n * Be careful when changing the config object. To add a parameter to the config at runtime use:\n * <a href=\"https://vuejs.org/v2/api/#Vue-set\">https://vuejs.org/v2/api/#Vue-set</a>.\n *\n * @status ready\n * @example-type static\n * @component-example\n * <sw-datepicker\n *      dateType=\"date\"\n *      label=\"SW-Field Date\"\n *      size=\"default\"\n *      placeholder=\"Enter date...\"\n *      value=\"12.10.2019\">\n * </sw-datepicker>\n */\nconst allEvents = [\n    'onChange',\n    'onClose',\n    'onDestroy',\n    'onMonthChange',\n    'onOpen',\n    'onYearChange',\n    'onValueUpdate',\n    'onDayCreate',\n    'onParseConfig',\n    'onReady',\n    'onPreCalendarPosition',\n    'onKeyDown',\n];\n\n// eslint-disable-next-line sw-deprecation-rules/private-feature-declarations\nexport default {\n    template,\n    inheritAttrs: false,\n\n    inject: ['feature'],\n\n    mixins: [\n        Mixin.getByName('sw-form-field'),\n        Mixin.getByName('remove-api-error'),\n    ],\n\n    props: {\n        value: {\n            type: String,\n            required: false,\n            default: null,\n        },\n\n        config: {\n            type: Object,\n            default() {\n                return {};\n            },\n        },\n\n        dateType: {\n            type: String,\n            default: 'date',\n            validValues: ['time', 'date', 'datetime'],\n            validator(value) {\n                return ['time', 'date', 'datetime'].includes(value);\n            },\n        },\n\n        placeholderText: {\n            type: String,\n            default: '',\n            required: false,\n        },\n\n        required: {\n            type: Boolean,\n            default: false,\n            required: false,\n        },\n\n        disabled: {\n            type: Boolean,\n            default: false,\n            required: false,\n        },\n\n        hideHint: {\n            type: Boolean,\n            default: false,\n            required: false,\n        },\n    },\n\n    data() {\n        return {\n            flatpickrInstance: null,\n            isDatepickerOpen: false,\n            defaultConfig: {},\n        };\n    },\n\n    computed: {\n        /**\n         * @deprecated tag:v6.6.0 - Will be removed, use `this.$refs.flatpickrInput` instead.\n         */\n        flatpickrInputRef() {\n            return this.$refs.flatpickrInput;\n        },\n\n        locale() {\n            return Shopware.State.getters.adminLocaleLanguage || 'en';\n        },\n\n        currentFlatpickrConfig() {\n            if (this.flatpickrInstance === null) {\n                return {};\n            }\n\n            return this.flatpickrInstance.config;\n        },\n\n        placeholder() {\n            if (this.placeholderText.length > 0) {\n                return this.placeholderText;\n            }\n\n            if (this.flatpickrInstance === null) {\n                return this.defaultConfig.altFormat;\n            }\n\n            return this.flatpickrInstance.config.altFormat;\n        },\n\n        suffixName() {\n            if (this.noCalendar) {\n                return 'regular-clock';\n            }\n\n            return 'regular-calendar';\n        },\n\n        noCalendar() {\n            return this.dateType === 'time';\n        },\n\n        enableTime() {\n            return this.noCalendar || this.dateType === 'datetime';\n        },\n\n        additionalEventListeners() {\n            const listeners = {};\n\n            /**\n             * Do not pass \"change\" or \"input\" event listeners to the form elements\n             * because the component implements its own listeners for this event types.\n             * The callback methods will emit the corresponding event to the parent.\n             */\n            Object.keys(this.$listeners).forEach((key) => {\n                if (!['change', 'input'].includes(key)) {\n                    listeners[key] = this.$listeners[key];\n                }\n            });\n\n            return listeners;\n        },\n\n        userTimeZone() {\n            return Shopware?.State?.get('session')?.currentUser?.timeZone ?? 'UTC';\n        },\n\n        timezoneFormattedValue: {\n            get() {\n                if (!this.value) {\n                    return null;\n                }\n\n                if (['time', 'date'].includes(this.dateType)) {\n                    return this.value;\n                }\n\n                // convert from UTC timezone to user timezone (represented as UTC)\n                const userTimezoneDate = utcToZonedTime(this.value, this.userTimeZone);\n\n                // get the time converted to the user timezone\n                return userTimezoneDate.toISOString();\n            },\n            set(newValue) {\n                if (newValue === null) {\n                    if (this.feature.isActive('VUE3')) {\n                        this.$emit('update:value', null);\n                        return;\n                    }\n\n                    this.$emit('input', null);\n                    return;\n                }\n\n                if (['time', 'date'].includes(this.dateType)) {\n                    if (this.feature.isActive('VUE3')) {\n                        this.$emit('update:value', newValue);\n                        return;\n                    }\n\n                    this.$emit('input', newValue);\n                    return;\n                }\n\n                // convert from user timezone (represented as UTC) to UTC timezone\n                const utcDate = zonedTimeToUtc(new Date(newValue), this.userTimeZone);\n\n                // emit the UTC time so that the v-model value always work in UTC time (which is needed for the server)\n                if (this.feature.isActive('VUE3')) {\n                    this.$emit('update:value', utcDate.toISOString());\n                    return;\n                }\n\n                this.$emit('input', utcDate.toISOString());\n            },\n        },\n\n        showTimeZoneHint() {\n            const validMode = [\n                'datetime',\n                'datetime-local',\n            ].includes(this.dateType);\n\n            return validMode && !this.hideHint;\n        },\n    },\n\n    watch: {\n        config: {\n            deep: true,\n            handler() {\n                this.updateFlatpickrInstance();\n            },\n        },\n\n        dateType() {\n            this.createConfig();\n            this.updateFlatpickrInstance();\n        },\n\n        locale: {\n            immediate: true,\n            handler() {\n                this.defaultConfig.locale = this.locale;\n                this.updateFlatpickrInstance(this.config);\n            },\n        },\n\n        /**\n         * Watch for changes from parent component and update DOM\n         *\n         * @param newValue\n         */\n        timezoneFormattedValue(newValue) {\n            this.setDatepickerValue(newValue);\n        },\n\n        disabled(isDisabled) {\n            this.flatpickrInstance._input.disabled = isDisabled;\n        },\n    },\n\n    created() {\n        this.createdComponent();\n    },\n\n    mounted() {\n        this.mountedComponent();\n    },\n\n    /**\n     * Free up memory\n     */\n    beforeDestroy() {\n        this.beforeDestroyComponent();\n    },\n\n    methods: {\n        createdComponent() {\n            this.createConfig();\n        },\n\n        mountedComponent() {\n            if (this.flatpickrInstance === null) {\n                return;\n            }\n\n            this.updateFlatpickrInstance();\n        },\n\n        /**\n         * Free up memory\n         */\n        beforeDestroyComponent() {\n            if (this.flatpickrInstance !== null) {\n                this.flatpickrInstance.destroy();\n                this.flatpickrInstance = null;\n            }\n        },\n\n        /**\n         * Update with the new value.\n         *\n         * @param value\n         */\n        setDatepickerValue(value) {\n            // Make sure we have a flatpickr instance\n            if (this.flatpickrInstance !== null) {\n                // Notify flatpickr instance that there is a change in value\n                this.flatpickrInstance.setDate(value, false);\n            }\n        },\n\n        /**\n         * Merge the newConfig parameter with the defaultConfig and other options.\n         *\n         * @param newConfig\n         * @returns {any}\n         */\n        getMergedConfig(newConfig) {\n            if (newConfig.mode !== undefined) {\n                console.warn(\n                    '[sw-datepicker] The only allowed mode is the default \\'single\\' mode ' +\n                    '(the specified mode will be ignored!). ' +\n                    'The modes \\'multiple\\' or \\'range\\' are currently not supported',\n                );\n            }\n\n            return {\n\n                ...this.defaultConfig,\n                enableTime: this.enableTime,\n                noCalendar: this.noCalendar,\n                ...newConfig,\n                mode: 'single',\n            };\n        },\n\n        /**\n         * Update the flatpickr instance with a new config.\n         */\n        updateFlatpickrInstance() {\n            if (this.flatpickrInstance === null) {\n                return;\n            }\n\n            const mergedConfig = this.getMergedConfig(this.config);\n\n            if (mergedConfig.enableTime !== undefined\n                    && mergedConfig.enableTime !== this.currentFlatpickrConfig.enableTime) {\n                // The instance must be recreated for some config options to take effect like 'enableTime' changes.\n                // See https://github.com/flatpickr/flatpickr/issues/1108 for details.\n                this.createFlatpickrInstance(this.config);\n                return;\n            }\n            // Workaround: Don't allow to pass hooks to configs again otherwise\n            // previously registered hooks will stop working\n            // Notice: we are looping through all events\n            // This also means that new callbacks can not passed once component has been initialized\n            allEvents.forEach((hook) => {\n                delete mergedConfig[hook];\n            });\n\n            // Update the flatpickr config.\n            this.flatpickrInstance.set(mergedConfig);\n\n            // Workaround: Allow to change locale dynamically\n            ['locale', 'showMonths'].forEach((name) => {\n                if (typeof mergedConfig[name] !== 'undefined') {\n                    this.flatpickrInstance.set(name, mergedConfig[name]);\n                }\n            });\n        },\n\n        /**\n         * Create the flatpickr instance. If already one exists it will be recreated.\n         */\n        createFlatpickrInstance() {\n            if (this.flatpickrInstance !== null) {\n                this.flatpickrInstance.destroy();\n                this.flatpickrInstance = null;\n            }\n\n            const mergedConfig = this.getMergedConfig(this.config);\n\n            // Set event hooks in config.\n            this.getEventNames().forEach(({ kebabCase, camelCase }) => {\n                mergedConfig[camelCase] = (...args) => {\n                    this.$emit(kebabCase, ...args);\n                };\n            });\n\n            // Init flatpickr only if it is not already loaded.\n            this.flatpickrInstance = new Flatpickr(this.$refs.flatpickrInput, mergedConfig);\n            this.flatpickrInstance.config.onOpen.push(() => {\n                this.isDatepickerOpen = true;\n            });\n\n            this.flatpickrInstance.config.onClose.push(() => {\n                this.isDatepickerOpen = false;\n            });\n\n            this.flatpickrInstance.config.onChange.push((...args) => {\n                this.emitValue(args[1]);\n            });\n\n            // Set the right datepicker value from the property.\n            this.setDatepickerValue(this.timezoneFormattedValue);\n        },\n\n        /**\n         * Convert the events for the date picker to another format:\n         * from: 'on-month-change' to: { camelCase: 'onMonthChange', kebabCase: 'on-month-change' }\n         * So this can be used as a parameter to flatpickr to specify which events will be thrown\n         * and also emit the right event from vue.\n         *\n         * @returns {Array}\n         */\n        getEventNames() {\n            const events = [];\n            Object.keys(this.additionalEventListeners).forEach((event) => {\n                events.push({\n                    kebabCase: event,\n                    camelCase: this.kebabToCamel(event),\n                });\n            });\n\n            return events;\n        },\n\n        /**\n         * Opens the datepicker.\n         */\n        openDatepicker() {\n            this.$nextTick(() => {\n                this.flatpickrInstance.open();\n            });\n        },\n\n        /**\n         * Get a camel case (\"camelCase\") string from a kebab case (\"kebab-case\") string.\n         *\n         * @param string\n         * @returns {*}\n         */\n        kebabToCamel(string) {\n            return string.replace(/-([a-z])/g, (m, g1) => {\n                return g1.toUpperCase();\n            });\n        },\n\n        unsetValue() {\n            this.$nextTick(() => {\n                this.emitValue(null);\n            });\n        },\n\n        emitValue(value) {\n            // Prevent emitting an empty date, to reset a date, null should be emitted\n            if (value === '') {\n                value = null;\n            }\n\n            // Prevent emit if value is already up to date\n            if (value === this.timezoneFormattedValue) {\n                return;\n            }\n\n            this.timezoneFormattedValue = value;\n        },\n\n        createConfig() {\n            let dateFormat = 'Y-m-dTH:i:S';\n            let altFormat = 'Y-m-d H:i';\n\n            if (this.dateType === 'time') {\n                dateFormat = 'H:i:S';\n                altFormat = 'H:i';\n            }\n\n            if (this.dateType === 'date') {\n                altFormat = 'Y-m-d';\n            }\n\n            this.defaultConfig = {\n                time_24hr: true,\n                locale: this.locale,\n                dateFormat,\n                altInput: true,\n                altFormat,\n                allowInput: true,\n            };\n        },\n    },\n};\n","export default \"\\n{% block sw_datepicker %}\\n<sw-contextual-field\\n    class=\\\"sw-field--datepicker\\\"\\n    :class=\\\"{ 'has--focus': isDatepickerOpen }\\\"\\n    v-bind=\\\"$attrs\\\"\\n    :required=\\\"required\\\"\\n    :name=\\\"formFieldName\\\"\\n    :disabled=\\\"disabled\\\"\\n    @sw-contextual-field-suffix-clicked=\\\"openDatepicker\\\"\\n    @inheritance-restore=\\\"$emit('inheritance-restore', $event)\\\"\\n    @inheritance-remove=\\\"$emit('inheritance-remove', $event)\\\"\\n    @base-field-mounted=\\\"createFlatpickrInstance\\\"\\n    v-on=\\\"additionalEventListeners\\\"\\n>\\n\\n    <template #sw-field-input=\\\"{ identification, disabled }\\\">\\n        \\n        <input\\n            :id=\\\"identification\\\"\\n            ref=\\\"flatpickrInput\\\"\\n            type=\\\"text\\\"\\n            :name=\\\"identification\\\"\\n            :disabled=\\\"disabled\\\"\\n            :placeholder=\\\"placeholder\\\"\\n        >\\n        <sw-icon\\n            v-if=\\\"!required && timezoneFormattedValue && !disabled\\\"\\n            class=\\\"sw-field--datepicker__button-reset-value\\\"\\n            name=\\\"regular-times-xs\\\"\\n            @click=\\\"unsetValue\\\"\\n        />\\n    </template>\\n\\n    <template\\n        v-if=\\\"showTimeZoneHint\\\"\\n        #hint\\n    >\\n        <sw-icon\\n            name=\\\"solid-clock\\\"\\n            size=\\\"12px\\\"\\n        />\\n        {{ userTimeZone }}\\n    </template>\\n\\n    <template #sw-contextual-field-suffix>\\n        <sw-icon\\n            :name=\\\"suffixName\\\"\\n            @click.stop=\\\"openDatepicker\\\"\\n        />\\n    </template>\\n\\n    <template #label>\\n        <slot name=\\\"label\\\"></slot>\\n    </template>\\n</sw-contextual-field>\\n{% endblock %}\\n\";"],"sourceRoot":""}