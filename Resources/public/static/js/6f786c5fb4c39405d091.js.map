{"version":3,"sources":["webpack:///./src/module/sw-settings-country/component/sw-settings-country-currency-dependent-modal/index.js","webpack:///./src/module/sw-settings-country/component/sw-settings-country-currency-dependent-modal/sw-settings-country-currency-dependent-modal.html.twig","webpack:///./src/module/sw-settings-country/component/sw-settings-country-currency-dependent-modal/sw-settings-country-currency-dependent-modal.scss"],"names":["utils","Shopware","Utils","template","inject","props","currencyDependsValue","type","Array","required","countryId","String","userConfig","Object","userConfigValues","menuOptions","taxFreeType","default","isLoading","Boolean","data","inputId","createId","checkBox","basedItem","computed","currentUserId","State","get","currentUser","id","currencyTaxFreeDependentRepository","this","repositoryFactory","create","radioButtonName","concat","countryCurrencyColumns","property","label","inlineEdit","primary","$tc","methods","closeModal","$emit","saveModal","createUserConfigValue","changeCurrencyDependentRow","currencyId","isChecked","addCurrencyDependentRow","removeCurrencyDependentRow","taxFreeDependent","amount","calculateInheritedPrice","enabled","push","currencyDependentRemoval","find","value","splice","indexOf","updateCheckBoxHamburgerMenu","forEach","currency","checked","onChangeBaseCurrency","item","disabled","basePrice","getPriceByCurrency","reCalculatorInherited","_this","getCurrencyById","currencyBaseItem","factor","isNew","createNewUserConfig","updateExistedValue","_this2","_defineProperty","valuesUserConfig","_toConsumableArray","Set","getCurrencyNameById","_currency$name","checkBoxCurrency","name","content","__esModule","module","i","locals","exports","add"],"mappings":"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","file":"static/js/6f786c5fb4c39405d091.js","sourcesContent":["/**\n * @package buyers-experience\n */\nimport template from './sw-settings-country-currency-dependent-modal.html.twig';\nimport './sw-settings-country-currency-dependent-modal.scss';\n\nconst utils = Shopware.Utils;\n\n// eslint-disable-next-line sw-deprecation-rules/private-feature-declarations\nexport default {\n    template,\n\n    inject: [\n        'repositoryFactory',\n        'acl',\n    ],\n\n    props: {\n        currencyDependsValue: {\n            type: Array,\n            required: true,\n        },\n        countryId: {\n            type: String,\n            required: true,\n        },\n        userConfig: {\n            type: Object,\n            required: true,\n        },\n        userConfigValues: {\n            type: Object,\n            required: true,\n        },\n        menuOptions: {\n            type: Array,\n            required: true,\n        },\n        taxFreeType: {\n            type: String,\n            required: false,\n            default: '',\n        },\n        isLoading: {\n            type: Boolean,\n            required: true,\n        },\n    },\n\n    data() {\n        return {\n            inputId: utils.createId(),\n            checkBox: true,\n            basedItem: {},\n        };\n    },\n\n    computed: {\n        currentUserId() {\n            return Shopware.State.get('session').currentUser.id;\n        },\n\n        currencyTaxFreeDependentRepository() {\n            return this.repositoryFactory.create('country_currency_tax_free_dependent_value');\n        },\n\n        radioButtonName() {\n            return `sw-settings-country-currency-dependent-modal-boolean-radio-${this.inputId}`;\n        },\n\n        countryCurrencyColumns() {\n            return [{\n                property: 'currencyId',\n                label: '',\n                inlineEdit: 'string',\n                primary: true,\n            }, {\n                property: 'amount',\n                label: this.$tc('sw-settings-country.detail.taxFreeFrom'),\n                inlineEdit: 'string',\n                primary: true,\n            }, {\n                property: 'enabled',\n                label: this.$tc('sw-settings-country.detail.baseCurrency'),\n                inlineEdit: 'string',\n            }];\n        },\n    },\n\n    methods: {\n        closeModal() {\n            this.$emit('modal-close');\n        },\n\n        saveModal() {\n            this.createUserConfigValue();\n            this.closeModal();\n            this.$emit('modal-save');\n        },\n\n        changeCurrencyDependentRow(currencyId, isChecked) {\n            if (isChecked) {\n                this.addCurrencyDependentRow(currencyId);\n                return;\n            }\n            this.removeCurrencyDependentRow(currencyId);\n        },\n\n        addCurrencyDependentRow(currencyId) {\n            const taxFreeDependent = {\n                amount: this.calculateInheritedPrice(currencyId),\n                enabled: false,\n                currencyId: currencyId,\n            };\n\n            this.currencyDependsValue.push(taxFreeDependent);\n        },\n\n        removeCurrencyDependentRow(currencyId) {\n            const currencyDependentRemoval = this.currencyDependsValue.find((value) => {\n                return value.currencyId === currencyId;\n            });\n\n            if (!currencyDependentRemoval) {\n                return;\n            }\n\n            this.currencyDependsValue\n                .splice(this.currencyDependsValue.indexOf(currencyDependentRemoval), 1);\n\n            if (this.userConfigValues[this.taxFreeType]) {\n                this.userConfigValues[this.taxFreeType]\n                    .splice(this.userConfigValues[this.taxFreeType].indexOf(currencyId), 1);\n            }\n            this.updateCheckBoxHamburgerMenu(currencyId);\n        },\n\n        updateCheckBoxHamburgerMenu(currencyId) {\n            this.menuOptions.forEach((currency) => {\n                if (currency.id === currencyId) {\n                    currency.checked = false;\n                }\n            });\n        },\n\n        onChangeBaseCurrency(item) {\n            item.enabled = true;\n\n            this.currencyDependsValue.forEach((value) => {\n                value.enabled = value.currencyId === item.currencyId;\n            });\n\n            if (this.userConfigValues[this.taxFreeType]) {\n                this.userConfigValues[this.taxFreeType]\n                    .splice(this.userConfigValues[this.taxFreeType].indexOf(item.currencyId), 1);\n            }\n\n            this.menuOptions.forEach((currency) => {\n                currency.disabled = currency.id === item.currencyId;\n            });\n\n            this.checkBox = true;\n            this.basedItem = item;\n            this.$emit('base-item-change', this.basedItem);\n        },\n\n        calculateInheritedPrice(currencyId) {\n            const basePrice = this.currencyDependsValue.find((value) => {\n                return value.enabled === true;\n            });\n\n            if (!basePrice) {\n                return 0;\n            }\n            return this.getPriceByCurrency(basePrice, currencyId);\n        },\n\n        reCalculatorInherited(basePrice) {\n            this.currencyDependsValue.forEach((item) => {\n                if (item.enabled === false) {\n                    item.amount = this.getPriceByCurrency(basePrice, item.currencyId);\n                }\n            });\n        },\n\n        getPriceByCurrency(basePrice, currencyId) {\n            const currency = this.getCurrencyById(currencyId);\n            const currencyBaseItem = this.getCurrencyById(basePrice.currencyId);\n            if (!currency.factor || !currencyBaseItem.factor) {\n                return 0;\n            }\n\n            return (basePrice.amount / currencyBaseItem.factor) * currency.factor;\n        },\n\n        createUserConfigValue() {\n            if (this.userConfig.isNew()) {\n                return this.createNewUserConfig();\n            }\n            return this.updateExistedValue();\n        },\n\n        createNewUserConfig() {\n            this.userConfig.value = {\n                [this.countryId]:\n                    {\n                        [this.taxFreeType]: [],\n                    },\n            };\n\n            this.currencyDependsValue.forEach(value => {\n                if (!value.enabled) {\n                    this.userConfig.value[this.countryId][this.taxFreeType].push(value.currencyId);\n                }\n            });\n        },\n\n        updateExistedValue() {\n            let valuesUserConfig = this.userConfigValues[this.taxFreeType];\n            if (!valuesUserConfig) {\n                this.userConfigValues[this.taxFreeType] = [];\n                valuesUserConfig = this.userConfigValues[this.taxFreeType];\n            }\n\n            this.currencyDependsValue.forEach(value => {\n                if (!value.enabled) {\n                    valuesUserConfig.push(value.currencyId);\n                }\n            });\n\n            this.userConfig.value[this.countryId][this.taxFreeType] = [...new Set(valuesUserConfig)];\n        },\n\n        getCurrencyNameById(currencyId) {\n            const currency = this.menuOptions.find((checkBoxCurrency) => {\n                return checkBoxCurrency.id === currencyId;\n            });\n\n            return currency?.name ?? '';\n        },\n\n        getCurrencyById(currencyId) {\n            const currency = this.menuOptions.find((checkBoxCurrency) => {\n                return checkBoxCurrency.id === currencyId;\n            });\n\n            return currency || {};\n        },\n    },\n};\n","export default \"\\n{% block sw_settings_country_currency_dependent_modal %}\\n<sw-modal\\n    class=\\\"sw-settings-country-currency-dependent-modal\\\"\\n    :title=\\\"$tc('sw-settings-country.detail.currencyDependentValues')\\\"\\n    @modal-close=\\\"closeModal\\\"\\n>\\n\\n    \\n    {% block sw_settings_country_currency_dependent_modal_content %}\\n    <sw-data-grid\\n        class=\\\"sw-settings-country-currency-dependent-modal__grid\\\"\\n        :data-source=\\\"currencyDependsValue\\\"\\n        :is-loading=\\\"isLoading\\\"\\n        :show-selection=\\\"false\\\"\\n        :plain-appearance=\\\"true\\\"\\n        :columns=\\\"countryCurrencyColumns\\\"\\n    >\\n\\n        \\n        {% block sw_settings_country_currency_dependent_modal_content_hamburger_menu %}\\n        <template #customSettings>\\n            <sw-settings-country-currency-hamburger-menu\\n                :options=\\\"menuOptions\\\"\\n                @currency-change=\\\"changeCurrencyDependentRow\\\"\\n            />\\n        </template>\\n        {% endblock %}\\n\\n        \\n        {% block  sw_settings_country_currency_dependent_modal_content_currency_name %}\\n        <template #column-currencyId=\\\"{ item }\\\">\\n            <div class=\\\"sw-settings-country-currency-dependent-modal__inheritance-wrapper\\\">\\n                \\n                <label>{{ getCurrencyNameById(item.currencyId) }}</label>\\n            </div>\\n        </template>\\n        {% endblock %}\\n\\n        \\n        {% block sw_settings_country_currency_dependent_grid_column_value %}\\n        <template #column-amount=\\\"{ item }\\\">\\n            <sw-number-field\\n                {% if VUE3 %}\\n                v-model:value=\\\"item.amount\\\"\\n                {% else %}\\n                v-model=\\\"item.amount\\\"\\n                {% endif %}\\n                class=\\\"sw-settings-country-currency-dependent-modal__input\\\"\\n                :min=\\\"0\\\"\\n                :disabled=\\\"!item.enabled || !acl.can('country.editor')\\\"\\n                {% if VUE3 %}\\n                @update:value=\\\"reCalculatorInherited(item)\\\"\\n                {% else %}\\n                @change=\\\"reCalculatorInherited(item)\\\"\\n                {% endif %}\\n            />\\n        </template>\\n        {% endblock %}\\n\\n        \\n        {% block sw_settings_country_currency_dependent_grid_column_is_base_currency %}\\n        <template #column-enabled=\\\"{ item }\\\">\\n            <sw-radio-field\\n                :value=\\\"checkBox\\\"\\n                :name=\\\"radioButtonName\\\"\\n                :options=\\\"[{ value: item.enabled }]\\\"\\n                :disabled=\\\"!acl.can('country.editor')\\\"\\n                {% if VUE3 %}\\n                @update:value=\\\"onChangeBaseCurrency(item)\\\"\\n                {% else %}\\n                @change=\\\"onChangeBaseCurrency(item)\\\"\\n                {% endif %}\\n            />\\n        </template>\\n        {% endblock %}\\n\\n        \\n        {% block sw_settings_country_currency_dependent_column_actions %}\\n        <template #actions=\\\"{ item }\\\">\\n\\n            \\n            {% block sw_settings_country_currency_dependent_grid_column_action_delete %}\\n            <sw-context-menu-item\\n                variant=\\\"danger\\\"\\n                :disabled=\\\"item.enabled || !acl.can('country.editor')\\\"\\n                @click=\\\"changeCurrencyDependentRow(item.currencyId, false)\\\"\\n            >\\n                {{ $tc('global.default.delete') }}\\n            </sw-context-menu-item>\\n            {% endblock %}\\n\\n        </template>\\n        {% endblock %}\\n\\n    </sw-data-grid>\\n    {% endblock %}\\n\\n    \\n    {% block sw_settings_country_currency_dependent_modal_footer %}\\n    <template #modal-footer>\\n        \\n        {% block sw_settings_country_currency_dependent_modal_close %}\\n        <sw-button\\n            class=\\\"sw-settings-country-currency-dependent-modal__cancel-button\\\"\\n            size=\\\"small\\\"\\n            :disabled=\\\"!acl.can('country.editor')\\\"\\n            @click=\\\"closeModal\\\"\\n        >\\n            {{ $tc('global.default.cancel') }}\\n        </sw-button>\\n\\n        <sw-button\\n            class=\\\"sw-settings-country-currency-dependent-modal__save-button\\\"\\n            variant=\\\"primary\\\"\\n            size=\\\"small\\\"\\n            :disabled=\\\"!acl.can('country.editor')\\\"\\n            @click=\\\"saveModal\\\"\\n        >\\n            {{ $tc('global.default.save') }}\\n        </sw-button>\\n        {% endblock %}\\n    </template>\\n    {% endblock %}\\n</sw-modal>\\n{% endblock %}\\n\";","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../../../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--15-1!../../../../../node_modules/css-loader/dist/cjs.js??ref--15-2!../../../../../node_modules/sass-loader/dist/cjs.js??ref--15-3!./sw-settings-country-currency-dependent-modal.scss\");\nif(content.__esModule) content = content.default;\nif(typeof content === 'string') content = [[module.id, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar add = require(\"!../../../../../node_modules/vue-style-loader/lib/addStylesClient.js\").default\nvar update = add(\"737c13fe\", content, true, {});"],"sourceRoot":""}