{"version":3,"sources":["webpack:///./src/module/sw-settings-search/component/sw-settings-search-search-index/sw-settings-search-search-index.html.twig","webpack:///./src/module/sw-settings-search/component/sw-settings-search-search-index/index.js","webpack:///./src/module/sw-settings-search/component/sw-settings-search-search-index/sw-settings-search-search-index.scss"],"names":["_Shopware","Shopware","Mixin","Context","Criteria","Data","format","Utils","template","inject","mixins","getByName","data","isLoading","isRebuildSuccess","isRebuildInProgress","progressBarValue","offset","syncPolling","totalProduct","latestIndex","computed","productRepository","this","repositoryFactory","create","productSearchKeywordRepository","productCriteria","addFilter","equals","productSearchKeywordsCriteria","criteria","addAggregation","min","max","latestBuild","latestProductIndexed","$tc","latestBuildDate","Date","createdAt","date","year","month","day","hour","minute","created","createdComponent","beforeDestroy","beforeDestroyComponent","methods","getTotalProduct","getLatestProductKeywordIndexed","clearPolling","_this","search","api","then","result","firstDate","aggregations","lastDate","catch","err","createNotificationError","message","finally","_this2","total","updateProgress","_this3","productIndexService","index","response","_this3$offset","finish","createNotificationSuccess","pollData","setTimeout","clearTimeout","rebuildSearchIndex","$emit","createNotificationInfo","buildFinish","content","__esModule","default","module","i","locals","exports","add"],"mappings":"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","file":"static/js/e5161d2e4cbdd04168ba.js","sourcesContent":["export default \"\\n{% block sw_settings_search_search_index %}\\n<sw-card\\n    position-identifier=\\\"sw-settings-search-search-index\\\"\\n    :title=\\\"$tc('sw-settings-search.generalTab.labelSearchIndex')\\\"\\n    :is-loading=\\\"isLoading\\\"\\n>\\n\\n    \\n    {% block sw_settings_search_search_index_description %}\\n    <sw-alert\\n        v-if=\\\"isRebuildInProgress\\\"\\n        class=\\\"sw-settings-search__search-index-warning-text\\\"\\n        variant=\\\"warning\\\"\\n    >\\n\\n        \\n        {% block sw_settings_search_search_index_warning_top %}\\n        <p class=\\\"sw-settings-search__search-index-warning-top\\\">\\n            {{ $tc('sw-settings-search.generalTab.textWarningOpenTab') }}\\n        </p>\\n        {% endblock %}\\n\\n        \\n        {% block sw_settings_search_search_index_warning_bottom %}\\n        <p>{{ $tc('sw-settings-search.generalTab.textRebuildSearchIndexDescription') }}</p>\\n        {% endblock %}\\n\\n    </sw-alert>\\n    {% endblock %}\\n\\n    \\n    {% block sw_settings_search_search_index_rebuild_button %}\\n    <sw-button-process\\n        variant=\\\"ghost\\\"\\n        class=\\\"sw-settings-search__search-index-rebuild-button\\\"\\n        :is-loading=\\\"isRebuildInProgress\\\"\\n        :disabled=\\\"isRebuildInProgress || !acl.can('product_search_config.editor')\\\"\\n        :process-success=\\\"isRebuildSuccess\\\"\\n        {% if VUE3 %}\\n        @update:process-success=\\\"buildFinish\\\"\\n        {% else %}\\n        @process-finish=\\\"buildFinish\\\"\\n        {% endif %}\\n        @click=\\\"rebuildSearchIndex\\\"\\n    >\\n        {{ $tc('sw-settings-search.generalTab.buttonRebuildSearchIndex') }}\\n    </sw-button-process>\\n\\n    \\n    {% block sw_settings_search_search_index_lastest_build %}\\n    <span class=\\\"sw-settings-search__search-index-latest-build\\\">\\n        <template v-if=\\\"latestIndex\\\">\\n            {{ $tc('sw-settings-search.generalTab.textLastedBuild') }} <sw-time-ago :date=\\\"latestIndex.firstDate\\\" /> &dash; <sw-time-ago :date=\\\"latestIndex.lastDate\\\" />\\n        </template>\\n        <template v-else>\\n            {{ $tc('sw-settings-search.generalTab.textSearchNotIndexedYet') }}\\n        </template>\\n    </span>\\n    {% endblock %}\\n    {% endblock %}\\n\\n    \\n    {% block sw_settings_search_search_index_rebuild_progress %}\\n    <div\\n        v-if=\\\"progressBarValue\\\"\\n        class=\\\"sw-settings-search__search-index-rebuilding-progress\\\"\\n    >\\n\\n        \\n        {% block sw_settings_search_search_index_rebuild_progress_text %}\\n        <span class=\\\"sw-settings-search__search-index-rebuilding-text\\\">\\n            {{ $tc('sw-settings-search.generalTab.textRebuildingSearchIndex') }}\\n        </span>\\n        {% endblock %}\\n\\n        \\n        {% block sw_settings_search_search_index_rebuild_progress_bar %}\\n        <sw-progress-bar\\n            :value=\\\"progressBarValue\\\"\\n            :max-value=\\\"100\\\"\\n        >\\n            {{ $tc('sw-settings-search.generalTab.textRebuildingSearchIndex') }}\\n        </sw-progress-bar>\\n        {% endblock %}\\n    </div>\\n    {% endblock %}\\n\\n</sw-card>\\n{% endblock %}\\n\";","/**\n * @package buyers-experience\n */\nimport template from './sw-settings-search-search-index.html.twig';\nimport './sw-settings-search-search-index.scss';\n\nconst PRODUCT_INDEXER_INTERVAL = 3000;\nconst { Mixin, Context } = Shopware;\nconst { Criteria } = Shopware.Data;\nconst { format } = Shopware.Utils;\n\n// eslint-disable-next-line sw-deprecation-rules/private-feature-declarations\nexport default {\n    template,\n\n    inject: [\n        'productIndexService',\n        'repositoryFactory',\n        'acl',\n    ],\n\n    mixins: [Mixin.getByName('notification')],\n\n    data() {\n        return {\n            isLoading: true,\n            isRebuildSuccess: false,\n            isRebuildInProgress: false,\n            progressBarValue: 0,\n            offset: 0,\n            syncPolling: null,\n            totalProduct: 0,\n            latestIndex: null,\n        };\n    },\n\n    computed: {\n        productRepository() {\n            return this.repositoryFactory.create('product');\n        },\n\n        productSearchKeywordRepository() {\n            return this.repositoryFactory.create('product_search_keyword');\n        },\n\n        productCriteria() {\n            const productCriteria = new Criteria(1, 1);\n            productCriteria.addFilter(Criteria.equals('product.parentId', null));\n            return productCriteria;\n        },\n\n        productSearchKeywordsCriteria() {\n            const criteria = new Criteria(1, 1);\n            criteria.addAggregation(Criteria.min('firstDate', 'createdAt'));\n            criteria.addAggregation(Criteria.max('lastDate', 'createdAt'));\n            return criteria;\n        },\n\n        /**\n         * @deprecated tag:v6.6.0 - will be removed\n         */\n        latestBuild() {\n            if (!this.latestProductIndexed) {\n                return this.$tc('sw-settings-search.generalTab.textSearchNotIndexedYet');\n            }\n\n            const latestBuildDate = new Date(this.latestProductIndexed.createdAt);\n            const options = { year: 'numeric', month: 'numeric', day: 'numeric', hour: 'numeric', minute: '2-digit' };\n            return format.date(latestBuildDate, options);\n        },\n    },\n\n    created() {\n        this.createdComponent();\n    },\n\n    beforeDestroy() {\n        this.beforeDestroyComponent();\n    },\n\n    methods: {\n        createdComponent() {\n            this.isLoading = false;\n            this.getTotalProduct();\n            this.getLatestProductKeywordIndexed();\n        },\n\n        beforeDestroyComponent() {\n            this.clearPolling();\n        },\n\n        getLatestProductKeywordIndexed() {\n            this.isLoading = true;\n            this.productSearchKeywordRepository.search(this.productSearchKeywordsCriteria, Context.api)\n                .then((result) => {\n                    this.latestIndex = {\n                        firstDate: result.aggregations.firstDate.min,\n                        lastDate: result.aggregations.lastDate.max,\n                    };\n                })\n                .catch((err) => {\n                    this.createNotificationError({\n                        message: err.message,\n                    });\n                })\n                .finally(() => {\n                    this.isLoading = false;\n                });\n        },\n\n        getTotalProduct() {\n            this.isLoading = true;\n            this.productRepository.search(this.productCriteria, Context.api)\n                .then((result) => {\n                    this.totalProduct = result?.total;\n                })\n                .catch((err) => {\n                    this.createNotificationError({\n                        message: err.message,\n                    });\n                })\n                .finally(() => {\n                    this.isLoading = false;\n                });\n        },\n\n        updateProgress() {\n            this.productIndexService.index(this.offset)\n                .then((response) => {\n                    const data = response.data;\n                    this.isRebuildSuccess = data.finish;\n\n                    if (this.isRebuildSuccess) {\n                        this.clearPolling();\n                        this.getLatestProductKeywordIndexed();\n                        this.progressBarValue = 100;\n                        this.createNotificationSuccess({\n                            message: this.$tc('sw-settings-search.notification.index.success'),\n                        });\n                    } else {\n                        this.progressBarValue = ((this.offset ?? 1) / this.totalProduct) * 100;\n                        this.offset = data.offset.offset;\n                        this.updateProgress();\n                    }\n                })\n                .catch((err) => {\n                    this.createNotificationError({\n                        message: err.message,\n                    });\n                    this.isRebuildSuccess = false;\n                });\n        },\n\n        pollData() {\n            if (this.syncPolling === null) {\n                this.syncPolling = setTimeout(\n                    this.updateProgress,\n                    PRODUCT_INDEXER_INTERVAL,\n                );\n            }\n        },\n\n        clearPolling() {\n            if (this.syncPolling !== null) {\n                clearTimeout(this.syncPolling);\n                this.syncPolling = null;\n            }\n        },\n\n        rebuildSearchIndex() {\n            this.isRebuildInProgress = true;\n            this.progressBarValue = 1;\n            this.offset = 0;\n\n            this.$emit('edit-change', this.isRebuildInProgress);\n            this.pollData();\n            this.createNotificationInfo({\n                message: this.$tc('sw-settings-search.notification.index.started'),\n            });\n        },\n\n        buildFinish() {\n            this.isRebuildSuccess = false;\n            this.isRebuildInProgress = false;\n            this.progressBarValue = 0;\n            this.$emit('edit-change', this.isRebuildInProgress);\n        },\n    },\n};\n","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../../../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--15-1!../../../../../node_modules/css-loader/dist/cjs.js??ref--15-2!../../../../../node_modules/sass-loader/dist/cjs.js??ref--15-3!./sw-settings-search-search-index.scss\");\nif(content.__esModule) content = content.default;\nif(typeof content === 'string') content = [[module.id, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar add = require(\"!../../../../../node_modules/vue-style-loader/lib/addStylesClient.js\").default\nvar update = add(\"98ed786c\", content, true, {});"],"sourceRoot":""}