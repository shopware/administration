{"version":3,"sources":["webpack:///./src/module/sw-customer/view/sw-customer-detail-order/sw-customer-detail-order.scss","webpack:///./src/module/sw-customer/view/sw-customer-detail-order/sw-customer-detail-order.html.twig","webpack:///./src/module/sw-customer/view/sw-customer-detail-order/index.js"],"names":["content","__esModule","default","module","i","locals","exports","add","Criteria","Shopware","Data","template","inject","props","customer","type","Object","required","data","isLoading","activeCustomer","this","orders","term","orderIcon","computed","orderColumns","getOrderColumns","orderRepository","repositoryFactory","create","emptyTitle","$tc","currencyFilter","Filter","getByName","assetFilter","created","createdComponent","methods","refreshList","onChange","criteria","setPage","setTerm","property","label","align","_this","addFilter","equals","id","addAssociation","search","then","navigateToCreateOrder","$router","push","name","params"],"mappings":"iIAGA,IAAIA,EAAU,EAAQ,QACnBA,EAAQC,aAAYD,EAAUA,EAAQE,SACnB,iBAAZF,IAAsBA,EAAU,CAAC,CAACG,EAAOC,EAAIJ,EAAS,MAC7DA,EAAQK,SAAQF,EAAOG,QAAUN,EAAQK,SAG/BE,EADH,EAAQ,QAAwEL,SACzE,WAAYF,GAAS,EAAM,K,mDCT7B,ICOPQ,EAAaC,SAASC,KAAtBF,SAGO,WACXG,SDXW,6iKCaXC,OAAQ,CAAC,oBAAqB,OAE9BC,MAAO,CACHC,SAAU,CACNC,KAAMC,OACNC,UAAU,IAIlBC,KAAI,WACA,MAAO,CACHC,WAAW,EACXC,eAAgBC,KAAKP,SACrBQ,OAAQ,KACRC,KAAM,GAENC,UAAW,yBAInBC,SAAU,CACNC,aAAY,WACR,OAAOL,KAAKM,mBAGhBC,gBAAe,WACX,OAAOP,KAAKQ,kBAAkBC,OAAO,UAGzCC,WAAU,WACN,OAAOV,KAAKE,KACRF,KAAKW,IAAI,4CACTX,KAAKW,IAAI,uCAGjBC,eAAc,WACV,OAAOxB,SAASyB,OAAOC,UAAU,aAGrCC,YAAW,WACP,OAAO3B,SAASyB,OAAOC,UAAU,WAIzCE,QAAO,WACHhB,KAAKiB,oBAGTC,QAAS,CACLD,iBAAgB,WACZjB,KAAKF,WAAY,EAEjBE,KAAKmB,eAGTC,SAAQ,SAAClB,GACLF,KAAKE,KAAOA,EACZF,KAAKC,OAAOoB,SAASC,QAAQ,GAC7BtB,KAAKC,OAAOoB,SAASE,QAAQrB,GAE7BF,KAAKmB,eAGTb,gBAAe,WACX,MAAO,CAAC,CACJkB,SAAU,cACVC,MAAO,uCACPC,MAAO,UACR,CACCF,SAAU,cACVC,MAAO,uCACPC,MAAO,SACR,CACCF,SAAU,yBACVC,MAAO,4CACR,CACCD,SAAU,gBACVC,MAAO,0CACPC,MAAO,YAIfP,YAAW,WAAI,IAADQ,EAAA,KACNN,EAAW,IAAIlC,EAAS,EAAG,IAC1Ba,KAAKC,QAAWD,KAAKC,OAAOoB,SAG7BA,EAAWrB,KAAKC,OAAOoB,SAFvBA,EAASO,UAAUzC,EAAS0C,OAAO,iCAAkC7B,KAAKP,SAASqC,KAIvFT,EAASU,eAAe,qBACnBA,eAAe,YAEpB/B,KAAKO,gBAAgByB,OAAOX,GAAUY,MAAK,SAAChC,GACxC0B,EAAK1B,OAASA,EACd0B,EAAK7B,WAAY,MAIzBoC,sBAAqB,WACjBlC,KAAKmC,QAAQC,KAAK,CACdC,KAAM,kBACNC,OAAQ,CACJ7C,SAAUO,KAAKP","file":"static/js/1931f1518a61f562580a.js","sourcesContent":["// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../../../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--15-1!../../../../../node_modules/css-loader/dist/cjs.js??ref--15-2!../../../../../node_modules/sass-loader/dist/cjs.js??ref--15-3!./sw-customer-detail-order.scss\");\nif(content.__esModule) content = content.default;\nif(typeof content === 'string') content = [[module.id, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar add = require(\"!../../../../../node_modules/vue-style-loader/lib/addStylesClient.js\").default\nvar update = add(\"07bcc56a\", content, true, {});","export default \"\\n{% block sw_customer_detail_order_card %}\\n<sw-card\\n    class=\\\"sw-customer-detail-order\\\"\\n    position-identifier=\\\"sw-customer-detail-order\\\"\\n>\\n    \\n    {% block sw_customer_detail_order_card_toolbar %}\\n    <template #toolbar>\\n        <sw-card-filter\\n            v-if=\\\"(orders && orders.total > 0) || term\\\"\\n            :placeholder=\\\"$tc('sw-customer.detailOrder.searchbarPlaceholder')\\\"\\n            @sw-card-filter-term-change=\\\"onChange\\\"\\n        >\\n            <template #filter>\\n                \\n                {% block sw_customer_detail_order_add_button %}\\n                <sw-button\\n                    v-tooltip=\\\"{\\n                        message: $tc('sw-privileges.tooltip.warning'),\\n                        disabled: acl.can('order.creator'),\\n                        showOnDisabledElements: true\\n                    }\\\"\\n                    class=\\\"sw-customer-detail-order__add-order-action\\\"\\n                    size=\\\"small\\\"\\n                    :disabled=\\\"!acl.can('order.creator')\\\"\\n                    @click=\\\"navigateToCreateOrder\\\"\\n                >\\n                    <sw-icon\\n                        name=\\\"regular-plus-circle-s\\\"\\n                        small\\n                    />\\n                    {{ $tc('sw-customer.detailOrder.buttonCreateOrder') }}\\n                </sw-button>\\n                {% endblock %}\\n            </template>\\n        </sw-card-filter>\\n    </template>\\n    {% endblock %}\\n\\n    \\n    {% block sw_customer_detail_order_card_grid %}\\n    <template\\n        v-if=\\\"(orders && orders.total > 0) || term\\\"\\n        #grid\\n    >\\n        <sw-entity-listing\\n            :columns=\\\"orderColumns\\\"\\n            :repository=\\\"orderRepository\\\"\\n            :items=\\\"orders\\\"\\n            :allow-column-edit=\\\"false\\\"\\n            :show-settings=\\\"false\\\"\\n            :show-selection=\\\"false\\\"\\n            :full-page=\\\"false\\\"\\n            :is-loading=\\\"isLoading\\\"\\n        >\\n            \\n            {% block sw_customer_detail_order_card_grid_columns %}\\n            \\n            {% block sw_customer_detail_order_card_grid_columns_number %}\\n            <template #column-orderNumber=\\\"{ item }\\\">\\n                <router-link :to=\\\"{ name: 'sw.order.detail', params: { id: item.id } }\\\">\\n                    {{ item.orderNumber }}\\n                </router-link>\\n            </template>\\n            {% endblock %}\\n\\n            \\n            {% block sw_customer_detail_order_card_grid_columns_amount %}\\n            <template #column-amountTotal=\\\"{ item }\\\">\\n                {{ currencyFilter(item.amountTotal, item.currency.shortName) }}\\n            </template>\\n            {% endblock %}\\n\\n            \\n            {% block sw_customer_detail_order_card_grid_columns_order_date_time %}\\n            <template #column-orderDateTime=\\\"{ item }\\\">\\n                <sw-time-ago :date=\\\"item.orderDateTime\\\" />\\n            </template>\\n            {% endblock %}\\n            {% endblock %}\\n\\n            \\n            {% block sw_customer_detail_order_card_grid_columns_action %}\\n            <template #actions=\\\"{ item }\\\">\\n                \\n                {% block sw_customer_detail_order_card_grid_columns_action_button %}\\n                <sw-context-menu-item\\n                    class=\\\"sw-order-list-order-view-action\\\"\\n                    :router-link=\\\"{ name: 'sw.order.detail', params: { id: item.id } }\\\"\\n                >\\n                    {{ $tc('sw-customer.detailOrder.columnContextOpenOrder') }}\\n                </sw-context-menu-item>\\n                {% endblock %}\\n            </template>\\n            {% endblock %}\\n        </sw-entity-listing>\\n    </template>\\n    {% endblock %}\\n\\n    \\n    {% block sw_customer_detail_order_card_grid_empty_state %}\\n    <template v-if=\\\"(!orders || orders.total === 0) && !isLoading && !term\\\">\\n        <sw-empty-state\\n            :title=\\\"emptyTitle\\\"\\n            :absolute=\\\"false\\\"\\n            :subline=\\\"$tc('sw-customer.detailOrder.emptySubline')\\\"\\n        >\\n            <template #icon>\\n                <img\\n                    :src=\\\"assetFilter('/administration/static/img/empty-states/order-empty-state.svg')\\\"\\n                    :alt=\\\"emptyTitle\\\"\\n                >\\n            </template>\\n\\n            <template #actions>\\n                \\n                {% block sw_customer_detail_order_card_grid_empty_state_action %}\\n                <sw-button\\n                    v-tooltip=\\\"{\\n                        message: $tc('sw-privileges.tooltip.warning'),\\n                        disabled: acl.can('order.creator'),\\n                        showOnDisabledElements: true\\n                    }\\\"\\n                    variant=\\\"ghost\\\"\\n                    class=\\\"sw-customer-detail-order__add-order-action\\\"\\n                    :disabled=\\\"!acl.can('order.creator')\\\"\\n                    @click=\\\"navigateToCreateOrder\\\"\\n                >\\n                    {{ $tc('sw-customer.detailOrder.buttonCreateOrder') }}\\n                </sw-button>\\n                {% endblock %}\\n            </template>\\n        </sw-empty-state>\\n    </template>\\n    {% endblock %}\\n</sw-card>\\n{% endblock %}\\n\";","import template from './sw-customer-detail-order.html.twig';\nimport './sw-customer-detail-order.scss';\n\n/**\n * @package checkout\n */\n\nconst { Criteria } = Shopware.Data;\n\n// eslint-disable-next-line sw-deprecation-rules/private-feature-declarations\nexport default {\n    template,\n\n    inject: ['repositoryFactory', 'acl'],\n\n    props: {\n        customer: {\n            type: Object,\n            required: true,\n        },\n    },\n\n    data() {\n        return {\n            isLoading: false,\n            activeCustomer: this.customer,\n            orders: null,\n            term: '',\n            // todo after NEXT-2291: to be removed if new emptyState-Splashscreens are implemented\n            orderIcon: 'regular-shopping-bag',\n        };\n    },\n\n    computed: {\n        orderColumns() {\n            return this.getOrderColumns();\n        },\n\n        orderRepository() {\n            return this.repositoryFactory.create('order');\n        },\n\n        emptyTitle() {\n            return this.term ?\n                this.$tc('sw-customer.detailOrder.emptySearchTitle') :\n                this.$tc('sw-customer.detailOrder.emptyTitle');\n        },\n\n        currencyFilter() {\n            return Shopware.Filter.getByName('currency');\n        },\n\n        assetFilter() {\n            return Shopware.Filter.getByName('asset');\n        },\n    },\n\n    created() {\n        this.createdComponent();\n    },\n\n    methods: {\n        createdComponent() {\n            this.isLoading = true;\n\n            this.refreshList();\n        },\n\n        onChange(term) {\n            this.term = term;\n            this.orders.criteria.setPage(1);\n            this.orders.criteria.setTerm(term);\n\n            this.refreshList();\n        },\n\n        getOrderColumns() {\n            return [{\n                property: 'orderNumber',\n                label: 'sw-customer.detailOrder.columnNumber',\n                align: 'center',\n            }, {\n                property: 'amountTotal',\n                label: 'sw-customer.detailOrder.columnAmount',\n                align: 'right',\n            }, {\n                property: 'stateMachineState.name',\n                label: 'sw-customer.detailOrder.columnOrderState',\n            }, {\n                property: 'orderDateTime',\n                label: 'sw-customer.detailOrder.columnOrderDate',\n                align: 'center',\n            }];\n        },\n\n        refreshList() {\n            let criteria = new Criteria(1, 25);\n            if (!this.orders || !this.orders.criteria) {\n                criteria.addFilter(Criteria.equals('order.orderCustomer.customerId', this.customer.id));\n            } else {\n                criteria = this.orders.criteria;\n            }\n            criteria.addAssociation('stateMachineState')\n                .addAssociation('currency');\n\n            this.orderRepository.search(criteria).then((orders) => {\n                this.orders = orders;\n                this.isLoading = false;\n            });\n        },\n\n        navigateToCreateOrder() {\n            this.$router.push({\n                name: 'sw.order.create',\n                params: {\n                    customer: this.customer,\n                },\n            });\n        },\n    },\n};\n"],"sourceRoot":""}