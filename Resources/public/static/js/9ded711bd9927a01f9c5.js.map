{"version":3,"sources":["webpack:///./src/module/sw-order/view/sw-order-create-base/index.js","webpack:///./src/module/sw-order/view/sw-order-create-base/sw-order-create-base.html.twig"],"names":["_Shopware","Shopware","Component","State","Utils","Data","Service","Mixin","Criteria","get","format","array","mapGetters","getComponentHelper","template","inject","mixins","getByName","data","isLoading","isLoadingDetail","address","showAddressModal","addAddressModalTitle","editAddressModalTitle","promotionError","showPromotionModal","disabledAutoPromotionChecked","computed","_objectSpread","customerRepository","create","customerAddressRepository","currencyRepository","customerAddressCriteria","criteria","addAssociation","defaultCriteria","orderDate","today","Date","date","customer","salesChannelId","_this$customer$salesC","_this$customer","this","isCustomerActive","getters","cart","cartLineItems","lineItems","cartAutomaticPromotionItems","filter","item","type","payload","code","cartPrice","price","currency","context","cartDelivery","promotionCodeTags","promotionCodes","set","commit","cartDeliveryDiscounts","slice","deliveries","filteredCalculatedTaxes","calculatedTaxes","sortByTaxRate","tax","promotionCodeLineItems","hasLineItem","hasOwnProperty","length","shippingCostsDetail","_this","decorateCalcTaxes","shippingCosts","map","$tc","taxRate","shortName","concat","join","disabledAutoPromotionVisibility","visibility","switchAutomaticPromotions","taxStatus","displayRounded","rawTotal","totalPrice","orderTotal","currencyFilter","Filter","watch","deep","handler","cartErrors","newValue","_this2","Object","values","forEach","value","level","createNotificationSuccess","message","createNotificationWarning","createNotificationError","created","createdComponent","methods","$route","params","onSelectExistingCustomer","id","createCart","_asyncToGenerator","_regeneratorRuntime","mark","_callee","wrap","_context","prev","next","dispatch","stop","loadCart","_this3","_callee2","_context2","token","abrupt","updateLoading","contextToken","finally","customerId","_this4","_callee3","_context3","Context","api","sent","setCustomer","setCurrency","updateCustomerContext","t0","finish","_this5","_callee4","_context4","salesChannel","currencyId","then","onEditBillingAddress","contextDataKey","defaultBillingAddress","contextId","contextDataDefaultId","onEditShippingAddress","defaultShippingAddress","setCustomerAddress","_ref","_this6","availableCustomerAddresses","billingAddressId","dataKey","shippingAddressId","defaultBillingAddressId","defaultShippingAddressId","updatedAddress","customerAddress","closeModal","save","onSaveItem","_this7","onRemoveItems","lineItemKeys","_this8","key","removedTag","find","tag","discountId","loadingValue","sort","current","onSubmitCode","_this9","onRemoveExistingCode","isInvalid","updatePromotionList","_this10","matchedItem","lineItem","_toConsumableArray","handlePromotionCodeTags","oldValue","promotionCodeLength","latestTag","detail","onShippingChargeEdited","amount","_this11","positiveAmount","Math","abs","unitPrice","catch","error","$emit","enableAutomaticPromotions","_this12","additionalParams","onClosePromotionModal","onSavePromotionModal"],"mappings":"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","file":"static/js/9ded711bd9927a01f9c5.js","sourcesContent":["import template from './sw-order-create-base.html.twig';\n\n/**\n * @package checkout\n */\n\nconst { Component, State, Utils, Data, Service, Mixin } = Shopware;\nconst { Criteria } = Data;\nconst { get, format, array } = Utils;\nconst { mapGetters } = Component.getComponentHelper();\n\n// eslint-disable-next-line sw-deprecation-rules/private-feature-declarations\nexport default {\n    template,\n\n    inject: ['feature'],\n\n    mixins: [\n        Mixin.getByName('notification'),\n    ],\n\n    data() {\n        return {\n            isLoading: false,\n            isLoadingDetail: false,\n            address: {\n                data: null,\n            },\n            showAddressModal: false,\n            addAddressModalTitle: null,\n            editAddressModalTitle: null,\n            promotionError: null,\n            showPromotionModal: false,\n            disabledAutoPromotionChecked: false,\n        };\n    },\n\n    computed: {\n        ...mapGetters('swOrder', [\n            'cartErrors',\n        ]),\n\n        customerRepository() {\n            return Service('repositoryFactory').create('customer');\n        },\n\n        customerAddressRepository() {\n            return Service('repositoryFactory').create('customer_address');\n        },\n\n        currencyRepository() {\n            return Service('repositoryFactory').create('currency');\n        },\n\n        customerAddressCriteria() {\n            const criteria = new Criteria(1, 25);\n\n            criteria.addAssociation('salutation');\n            criteria.addAssociation('country');\n            criteria.addAssociation('countryState');\n\n            return criteria;\n        },\n\n        defaultCriteria() {\n            const criteria = new Criteria(1, 25);\n            criteria\n                .addAssociation('addresses')\n                .addAssociation('group')\n                .addAssociation('salutation')\n                .addAssociation('salesChannel')\n                .addAssociation('defaultPaymentMethod')\n                .addAssociation('lastPaymentMethod')\n                .addAssociation('defaultBillingAddress.country')\n                .addAssociation('defaultBillingAddress.countryState')\n                .addAssociation('defaultBillingAddress.salutation')\n                .addAssociation('defaultShippingAddress.country')\n                .addAssociation('defaultShippingAddress.countryState')\n                .addAssociation('defaultShippingAddress.salutation')\n                .addAssociation('tags');\n\n            return criteria;\n        },\n\n        orderDate() {\n            const today = new Date();\n            return format.date(today);\n        },\n\n        customer() {\n            return State.get('swOrder').customer;\n        },\n\n        salesChannelId() {\n            return this.customer?.salesChannelId ?? '';\n        },\n\n        isCustomerActive() {\n            return State.getters['swOrder/isCustomerActive'];\n        },\n\n        cart() {\n            return State.get('swOrder').cart;\n        },\n\n        cartLineItems() {\n            return this.cart.lineItems;\n        },\n\n        cartAutomaticPromotionItems() {\n            return this.cartLineItems.filter(item => item.type === 'promotion' && item.payload.code === '');\n        },\n\n        cartPrice() {\n            return this.cart.price;\n        },\n\n        currency() {\n            return State.get('swOrder').context.currency;\n        },\n\n        cartDelivery() {\n            return get(this.cart, 'deliveries[0]', null);\n        },\n\n        promotionCodeTags: {\n            get() {\n                return State.get('swOrder').promotionCodes;\n            },\n\n            set(promotionCodeTags) {\n                State.commit('swOrder/setPromotionCodes', promotionCodeTags);\n            },\n        },\n\n        cartDeliveryDiscounts() {\n            return array.slice(this.cart.deliveries, 1) || [];\n        },\n\n        filteredCalculatedTaxes() {\n            if (!this.cartPrice || !this.cartPrice.calculatedTaxes) {\n                return [];\n            }\n\n            return this.sortByTaxRate(this.cartPrice.calculatedTaxes).filter(price => price.tax !== 0);\n        },\n\n        promotionCodeLineItems() {\n            return this.cartLineItems.filter(item => item.type === 'promotion' && get(item, 'payload.code'));\n        },\n\n        hasLineItem() {\n            return this.cartLineItems.filter(item => item.hasOwnProperty('id')).length > 0;\n        },\n\n        shippingCostsDetail() {\n            if (!this.cartDelivery) {\n                return null;\n            }\n\n            const calcTaxes = this.sortByTaxRate(this.cartDelivery.shippingCosts.calculatedTaxes);\n            const decorateCalcTaxes = calcTaxes.map((item) => {\n                return this.$tc('sw-order.createBase.shippingCostsTax', 0, {\n                    taxRate: item.taxRate,\n                    tax: format.currency(item.tax, this.currency.shortName),\n                });\n            });\n\n            return `${this.$tc('sw-order.createBase.tax')}<br>${decorateCalcTaxes.join('<br>')}`;\n        },\n\n        disabledAutoPromotionVisibility: {\n            get() {\n                return this.disabledAutoPromotionChecked;\n            },\n            set(visibility) {\n                this.switchAutomaticPromotions(visibility);\n            },\n        },\n\n        taxStatus() {\n            return get(this.cart, 'price.taxStatus', '');\n        },\n\n        displayRounded() {\n            if (!this.cartPrice) {\n                return false;\n            }\n            return this.cartPrice.rawTotal !== this.cartPrice.totalPrice;\n        },\n\n        orderTotal() {\n            if (!this.cartPrice) {\n                return 0;\n            }\n\n            if (this.displayRounded) {\n                return this.cartPrice.rawTotal;\n            }\n\n            return this.cartPrice.totalPrice;\n        },\n\n        currencyFilter() {\n            return Shopware.Filter.getByName('currency');\n        },\n    },\n\n    watch: {\n        cart: {\n            deep: true,\n            handler: 'updatePromotionList',\n        },\n\n        promotionCodeTags: {\n            handler: 'handlePromotionCodeTags',\n        },\n\n        cartErrors: {\n            handler(newValue) {\n                if (!newValue || newValue.length === 0) {\n                    return;\n                }\n\n                Object.values(newValue).forEach((value) => {\n                    switch (value.level) {\n                        case 0: {\n                            this.createNotificationSuccess({\n                                message: value.message,\n                            });\n                            break;\n                        }\n\n                        case 10: {\n                            this.createNotificationWarning({\n                                message: value.message,\n                            });\n                            break;\n                        }\n\n                        default: {\n                            this.createNotificationError({\n                                message: value.message,\n                            });\n                            break;\n                        }\n                    }\n                });\n            },\n        },\n    },\n\n    created() {\n        this.createdComponent();\n    },\n\n    methods: {\n        createdComponent() {\n            const { customer } = this.$route.params;\n\n            if (!customer) {\n                return;\n            }\n\n            State.commit('swOrder/setCustomer', customer);\n            this.onSelectExistingCustomer(customer.id);\n        },\n\n        async createCart(salesChannelId) {\n            await State.dispatch('swOrder/createCart', { salesChannelId });\n        },\n\n        async loadCart() {\n            if (!this.cart.token || this.cart.lineItems.length === 0) return;\n            this.updateLoading(true);\n\n            State.dispatch('swOrder/getCart', {\n                salesChannelId: this.customer.salesChannelId,\n                contextToken: this.cart.token,\n            }).finally(() => this.updateLoading(false));\n        },\n\n        async onSelectExistingCustomer(customerId) {\n            this.isLoadingDetail = true;\n\n            try {\n                const customer = await this.customerRepository.get(customerId, Shopware.Context.api, this.defaultCriteria);\n\n                if (!this.cart.token) {\n                    await this.createCart(customer.salesChannelId);\n                }\n\n                this.setCustomer(customer);\n                this.setCurrency(customer);\n\n                await this.updateCustomerContext();\n            } catch {\n                this.createNotificationError({\n                    message: this.$tc('sw-order.create.messageSwitchCustomerError'),\n                });\n            } finally {\n                this.isLoadingDetail = false;\n            }\n        },\n\n        async updateCustomerContext() {\n            await State.dispatch('swOrder/updateCustomerContext', {\n                customerId: this.customer.id,\n                salesChannelId: this.customer.salesChannelId,\n                contextToken: this.cart.token,\n            });\n        },\n\n        setCustomer(customer) {\n            State.dispatch('swOrder/selectExistingCustomer', { customer });\n        },\n\n        setCurrency(customer) {\n            this.currencyRepository.get(customer.salesChannel.currencyId).then((currency) => {\n                State.commit('swOrder/setCurrency', currency);\n            });\n        },\n\n        onEditBillingAddress() {\n            const contextId = 'billingAddressId';\n            const contextDataKey = 'billingAddress';\n            const contextDataDefaultId = 'defaultBillingAddressId';\n            const data = this.customer[contextDataKey]\n                ? this.customer[contextDataKey]\n                : this.customer.defaultBillingAddress;\n\n            this.addAddressModalTitle = this.$tc('sw-order.addressSelection.modalTitleAddBillingAddress');\n            this.editAddressModalTitle = this.$tc('sw-order.addressSelection.modalTitleEditBillingAddress');\n            this.address = { contextId, contextDataKey, contextDataDefaultId, data };\n            this.showAddressModal = true;\n        },\n\n        onEditShippingAddress() {\n            const contextId = 'shippingAddressId';\n            const contextDataKey = 'shippingAddress';\n            const contextDataDefaultId = 'defaultShippingAddressId';\n            const data = this.customer[contextDataKey]\n                ? this.customer[contextDataKey]\n                : this.customer.defaultShippingAddress;\n\n            this.addAddressModalTitle = this.$tc('sw-order.addressSelection.modalTitleAddShippingAddress');\n            this.editAddressModalTitle = this.$tc('sw-order.addressSelection.modalTitleEditShippingAddress');\n            this.address = { contextId, contextDataKey, contextDataDefaultId, data };\n            this.showAddressModal = true;\n        },\n\n        setCustomerAddress({ contextId, data }) {\n            this.customer[contextId] = data.id;\n            const availableCustomerAddresses = [\n                {\n                    id: this.customer.billingAddressId,\n                    dataKey: 'billingAddress',\n                },\n                {\n                    id: this.customer.shippingAddressId,\n                    dataKey: 'shippingAddress',\n                },\n                {\n                    id: this.customer.defaultBillingAddressId,\n                    dataKey: 'defaultBillingAddress',\n                },\n                {\n                    id: this.customer.defaultShippingAddressId,\n                    dataKey: 'defaultShippingAddress',\n                },\n            ];\n\n            this.customerAddressRepository\n                .get(data.id, Shopware.Context.api, this.customerAddressCriteria)\n                .then((updatedAddress) => {\n                    availableCustomerAddresses.forEach(customerAddress => {\n                        if (customerAddress.id === data.id) {\n                            this.customer[customerAddress.dataKey] = updatedAddress;\n                        }\n                    });\n\n                    this.setCustomer(this.customer);\n                });\n        },\n\n        closeModal() {\n            this.showAddressModal = false;\n            this.address.data = null;\n        },\n\n        save() {\n            this.closeModal();\n        },\n\n        onSaveItem(item) {\n            this.updateLoading(true);\n\n            State.dispatch('swOrder/saveLineItem', {\n                salesChannelId: this.customer.salesChannelId,\n                contextToken: this.cart.token,\n                item,\n            })\n                .finally(() => this.updateLoading(false));\n        },\n\n        onRemoveItems(lineItemKeys) {\n            this.updateLoading(true);\n\n            State.dispatch('swOrder/removeLineItems', {\n                salesChannelId: this.customer.salesChannelId,\n                contextToken: this.cart.token,\n                lineItemKeys: lineItemKeys,\n            })\n                .then(() => {\n                    // Remove promotion code tag if corresponding line item removed\n                    lineItemKeys.forEach(key => {\n                        const removedTag = this.promotionCodeTags.find(tag => tag.discountId === key);\n                        if (removedTag) {\n                            this.promotionCodeTags = this.promotionCodeTags.filter(item => {\n                                return item.discountId !== removedTag.discountId;\n                            });\n                        }\n                    });\n                })\n                .finally(() => this.updateLoading(false));\n        },\n\n        updateLoading(loadingValue) {\n            this.isLoading = loadingValue;\n        },\n\n        sortByTaxRate(price) {\n            return price.sort((prev, current) => {\n                return prev.taxRate - current.taxRate;\n            });\n        },\n\n        onSubmitCode(code) {\n            this.updateLoading(true);\n\n            State.dispatch('swOrder/addPromotionCode', {\n                salesChannelId: this.customer.salesChannelId,\n                contextToken: this.cart.token,\n                code,\n            })\n                .finally(() => this.updateLoading(false));\n        },\n\n        onRemoveExistingCode(item) {\n            if (item.isInvalid) {\n                this.promotionCodeTags = this.promotionCodeTags.filter(tag => tag.code !== item.code);\n            } else {\n                this.onRemoveItems([item.discountId]);\n            }\n        },\n\n        updatePromotionList() {\n            // Update data and isInvalid flag for each item in promotionCodeTags\n            this.promotionCodeTags = this.promotionCodeTags.map(tag => {\n                const matchedItem = this.promotionCodeLineItems.find(lineItem => lineItem.payload.code === tag.code);\n\n                if (matchedItem) {\n                    return { ...matchedItem.payload, isInvalid: false };\n                }\n\n                return { ...tag, isInvalid: true };\n            });\n\n            // Add new items from promotionCodeLineItems which promotionCodeTags doesn't contain\n            this.promotionCodeLineItems.forEach(lineItem => {\n                const matchedItem = this.promotionCodeTags.find(tag => tag.code === lineItem.payload.code);\n\n                if (!matchedItem) {\n                    this.promotionCodeTags = [...this.promotionCodeTags, { ...lineItem.payload, isInvalid: false }];\n                }\n            });\n        },\n\n        handlePromotionCodeTags(newValue, oldValue) {\n            this.promotionError = null;\n\n            if (newValue.length < oldValue.length) {\n                return;\n            }\n\n            const promotionCodeLength = this.promotionCodeTags.length;\n            const latestTag = this.promotionCodeTags[promotionCodeLength - 1];\n\n            if (newValue.length > oldValue.length) {\n                this.onSubmitCode(latestTag.code);\n            }\n\n            if (promotionCodeLength > 0 && latestTag.isInvalid) {\n                this.promotionError = { detail: this.$tc('sw-order.createBase.textInvalidPromotionCode') };\n            }\n        },\n\n        onShippingChargeEdited(amount) {\n            const positiveAmount = Math.abs(amount);\n            this.cartDelivery.shippingCosts.unitPrice = positiveAmount;\n            this.cartDelivery.shippingCosts.totalPrice = positiveAmount;\n            this.updateLoading(true);\n\n            State.dispatch('swOrder/modifyShippingCosts', {\n                salesChannelId: this.customer.salesChannelId,\n                contextToken: this.cart.token,\n                shippingCosts: this.cartDelivery.shippingCosts,\n            }).catch((error) => {\n                this.$emit('error', error);\n            }).finally(() => {\n                this.updateLoading(false);\n            });\n        },\n\n        switchAutomaticPromotions(visibility) {\n            this.disabledAutoPromotionChecked = visibility;\n            this.showPromotionModal = visibility;\n            if (!this.showPromotionModal) {\n                this.enableAutomaticPromotions();\n            }\n        },\n\n        enableAutomaticPromotions() {\n            this.updateLoading(true);\n            const additionalParams = { salesChannelId: this.customer.salesChannelId };\n            Service('cartStoreService').enableAutomaticPromotions(this.cart.token, additionalParams).then(() => {\n                this.loadCart();\n            });\n        },\n\n        onClosePromotionModal() {\n            this.showPromotionModal = false;\n            this.disabledAutoPromotionChecked = false;\n        },\n\n        onSavePromotionModal() {\n            this.showPromotionModal = false;\n            this.disabledAutoPromotionChecked = true;\n\n            this.loadCart();\n        },\n    },\n};\n","export default \"\\n{% block sw_order_create %}\\n<sw-card-view>\\n    \\n    {% block sw_order_create_address_modal %}\\n    <sw-order-create-address-modal\\n        v-if=\\\"showAddressModal\\\"\\n        :address=\\\"address\\\"\\n        :add-address-modal-title=\\\"addAddressModalTitle\\\"\\n        :edit-address-modal-title=\\\"editAddressModalTitle\\\"\\n        :customer=\\\"customer\\\"\\n        :cart=\\\"cart\\\"\\n        @close-modal=\\\"closeModal\\\"\\n        @set-customer-address=\\\"setCustomerAddress\\\"\\n    />\\n    {% endblock %}\\n\\n    \\n    {% block sw_order_create_promotion_modal %}\\n    <sw-order-create-promotion-modal\\n        v-if=\\\"showPromotionModal\\\"\\n        :is-loading=\\\"isLoading\\\"\\n        :currency=\\\"currency\\\"\\n        :sales-channel-id=\\\"customer.salesChannelId\\\"\\n        @close=\\\"onClosePromotionModal\\\"\\n        @save=\\\"onSavePromotionModal\\\"\\n    />\\n    {% endblock %}\\n\\n    \\n    {% block sw_order_create_details %}\\n    <sw-card\\n        :title=\\\"$tc('sw-order.createBase.labelDetailsCard')\\\"\\n        :is-loading=\\\"isLoadingDetail\\\"\\n        position-identifier=\\\"sw-order-create-base-details\\\"\\n        class=\\\"sw-order-create__card\\\"\\n    >\\n        <template #grid>\\n            <sw-container\\n                type=\\\"row\\\"\\n                class=\\\"sw-order-user-card\\\"\\n            >\\n                <sw-card-section>\\n                    \\n                    {% block sw_order_create_details_header %}\\n                    <sw-order-create-details-header\\n                        :customer=\\\"customer\\\"\\n                        :order-date=\\\"orderDate\\\"\\n                        :cart-price=\\\"cartPrice\\\"\\n                        :currency=\\\"currency\\\"\\n                        @on-select-existing-customer=\\\"onSelectExistingCustomer\\\"\\n                    />\\n                    {% endblock %}\\n                    \\n                    {% block sw_order_create_details_body %}\\n                    <sw-order-create-details-body\\n                        :customer=\\\"customer\\\"\\n                        :is-customer-active=\\\"isCustomerActive\\\"\\n                        @on-edit-billing-address=\\\"onEditBillingAddress\\\"\\n                        @on-edit-shipping-address=\\\"onEditShippingAddress\\\"\\n                    />\\n                    {% endblock %}\\n                </sw-card-section>\\n                <sw-card-section\\n                    secondary\\n                    divider=\\\"top\\\"\\n                >\\n                    \\n                    {% block sw_order_create_details_footer %}\\n                    <sw-order-create-details-footer\\n                        :customer=\\\"customer\\\"\\n                        :is-customer-active=\\\"isCustomerActive\\\"\\n                        :cart=\\\"cart\\\"\\n                        @loading-change=\\\"updateLoading\\\"\\n                    />\\n                    {% endblock %}\\n                </sw-card-section>\\n            </sw-container>\\n        </template>\\n    </sw-card>\\n    {% endblock %}\\n\\n    \\n    {% block sw_order_create_base_line_items_card %}\\n    <sw-card\\n        :title=\\\"$tc('sw-order.createBase.cardTitleLineItems')\\\"\\n        :is-loading=\\\"isLoading\\\"\\n        position-identifier=\\\"sw-order-create-base-line-items\\\"\\n        class=\\\"sw-order-create__card sw-order-create-base__line-item-grid-card\\\"\\n    >\\n        \\n        {% block sw_order_create_base_line_items_card_rows %}\\n        <template #grid>\\n            <sw-container type=\\\"row\\\">\\n                \\n                {% block sw_order_create_base_line_items_grid %}\\n                <sw-order-line-items-grid-sales-channel\\n                    ref=\\\"sw-order-line-item-grid-sales-channel\\\"\\n                    :cart=\\\"cart\\\"\\n                    :currency=\\\"currency\\\"\\n                    :sales-channel-id=\\\"salesChannelId\\\"\\n                    :is-loading=\\\"isLoading\\\"\\n                    :is-customer-active=\\\"isCustomerActive\\\"\\n                    editable\\n                    @on-save-item=\\\"onSaveItem\\\"\\n                    @on-remove-items=\\\"onRemoveItems\\\"\\n                />\\n                {% endblock %}\\n\\n                \\n                {% block sw_order_create_base_line_items_summary %}\\n                <sw-card-section\\n                    v-show=\\\"cartLineItems.length\\\"\\n                    divider=\\\"top\\\"\\n                    secondary\\n                    slim\\n                >\\n                    <sw-container\\n                        columns=\\\"1fr 1fr\\\"\\n                        class=\\\"sw-order-create-summary\\\"\\n                    >\\n                        <div>\\n                            \\n                            {% block sw_order_create_base_line_items_switch_promotions %}\\n                            <sw-switch-field\\n                                {% if VUE3 %}\\n                                v-model:value=\\\"disabledAutoPromotionVisibility\\\"\\n                                {% else %}\\n                                v-model=\\\"disabledAutoPromotionVisibility\\\"\\n                                {% endif %}\\n                                class=\\\"sw-order-create-summary__switch-promotions\\\"\\n                                :label=\\\"$tc('sw-order.promotionModal.labelTitle')\\\"\\n                            />\\n                            {% endblock %}\\n                            \\n                            {% block sw_order_create_base_line_items_voucher_field %}\\n                            <sw-order-promotion-tag-field\\n                                {% if VUE3 %}\\n                                v-model:value=\\\"promotionCodeTags\\\"\\n                                {% else %}\\n                                v-model=\\\"promotionCodeTags\\\"\\n                                {% endif %}\\n                                :disabled=\\\"!hasLineItem\\\"\\n                                :currency=\\\"currency\\\"\\n                                :label=\\\"$tc('sw-order.createBase.labelAddPromotion')\\\"\\n                                :placeholder=\\\"$tc('sw-order.createBase.placeholderAddPromotion')\\\"\\n                                :error=\\\"promotionError\\\"\\n                                @on-remove-code=\\\"onRemoveExistingCode\\\"\\n                            />\\n                            {% endblock %}\\n                        </div>\\n                        <sw-description-list\\n                            grid=\\\"1fr 1fr\\\"\\n                            class=\\\"sw-order-create-summary__data\\\"\\n                        >\\n                            \\n                            {% block sw_order_create_base_line_items_summary_entries %}\\n                            \\n                            {% block sw_order_create_base_line_items_summary_amount %}\\n                            <dt>{{ $tc('sw-order.createBase.summaryLabelAmount') }}</dt>\\n                            <dd>{{ currencyFilter(cartPrice ? cartPrice.positionPrice : 0, currency.shortName) }}</dd>\\n                            {% endblock %}\\n\\n                            \\n                            {% block sw_order_create_base_line_items_summary_shipping_cost %}\\n                            <template v-if=\\\"cartDelivery\\\">\\n                                <dt>{{ $tc('sw-order.createBase.summaryLabelShippingCosts') }}</dt>\\n                                <dd>\\n                                    <sw-order-saveable-field\\n                                        v-tooltip=\\\"{\\n                                            showDelay: 300,\\n                                            message: shippingCostsDetail,\\n                                            disabled: taxStatus === 'tax-free'\\n                                        }\\\"\\n                                        type=\\\"number\\\"\\n                                        editable\\n                                        :value=\\\"cartDelivery.shippingCosts.totalPrice\\\"\\n                                        @value-change=\\\"onShippingChargeEdited\\\"\\n                                    >\\n                                        {{ currencyFilter(cartDelivery.shippingCosts.totalPrice, currency.shortName) }}\\n                                    </sw-order-saveable-field>\\n                                </dd>\\n                            </template>\\n                            \\n                            <template\\n                                v-for=\\\"(delivery, index) in cartDeliveryDiscounts\\\"\\n                                v-if=\\\"cartDeliveryDiscounts\\\"\\n                                {% if VUE3 %}\\n                                :key=\\\"index\\\"\\n                                {% endif %}\\n                            >\\n                                <dt\\n                                    {% if VUE2 %}\\n                                    :key=\\\"`dt-${index}`\\\"\\n                                    {% endif %}\\n                                >\\n                                    {{ $tc('sw-order.createBase.discountLabelShippingCosts') }}\\n                                </dt>\\n                                <dd\\n                                    {% if VUE2 %}\\n                                    :key=\\\"`dd-${index}`\\\"\\n                                    {% endif %}\\n                                >\\n                                    {{ currencyFilter(delivery.shippingCosts.totalPrice, currency.shortName) }}\\n                                </dd>\\n                            </template>\\n                            {% endblock %}\\n\\n                            \\n                            {% block sw_order_create_base_line_items_summary_amount_without_tax %}\\n                            <template v-if=\\\"taxStatus !== 'tax-free'\\\">\\n                                <dt><strong>{{ $tc('sw-order.createBase.summaryLabelAmountWithoutTaxes') }}</strong></dt>\\n                                <dd><strong>{{ currencyFilter(cartPrice ? cartPrice.netPrice : 0, currency.shortName) }}</strong></dd>\\n                            </template>\\n                            {% endblock %}\\n\\n                            \\n                            {% block sw_order_create_base_line_items_summary_taxes %}\\n                            <template v-if=\\\"taxStatus !== 'tax-free'\\\">\\n                                <template\\n                                    v-for=\\\"(calculatedTax, index) in filteredCalculatedTaxes\\\"\\n                                    {% if VUE3 %}\\n                                    :key=\\\"index\\\"\\n                                    {% endif %}\\n                                >\\n                                    <dt\\n                                        {% if VUE2 %}\\n                                        :key=\\\"`dt-${index}`\\\"\\n                                        {% endif %}\\n                                    >\\n                                        {{ $tc('sw-order.createBase.summaryLabelTaxes', 1, { taxRate: calculatedTax.taxRate }) }}\\n                                    </dt>\\n                                    <dd\\n                                        {% if VUE2 %}\\n                                        :key=\\\"`dd-${index}`\\\"\\n                                        {% endif %}\\n                                    >\\n                                        {{ currencyFilter(calculatedTax.tax, currency.shortName) }}\\n                                    </dd>\\n                                </template>\\n                            </template>\\n                            {% endblock %}\\n\\n                            \\n                            {% block sw_order_create_base_line_items_summary_amount_total %}\\n                            <template v-if=\\\"taxStatus !== 'tax-free'\\\">\\n                                <dt><strong>{{ $tc('sw-order.createBase.summaryLabelAmountTotal') }}</strong></dt>\\n                                <dd><strong>{{ currencyFilter(orderTotal, currency.shortName) }}</strong></dd>\\n                                <template v-if=\\\"displayRounded\\\">\\n                                    <dt><strong>{{ $tc('sw-order.createBase.summaryLabelAmountTotalRounded') }}</strong></dt>\\n                                    <dd><strong>{{ currencyFilter(cart.price.totalPrice, currency.shortName) }}</strong></dd>\\n                                </template>\\n                            </template>\\n                            {% endblock %}\\n\\n                            \\n                            {% block sw_order_create_base_line_items_summary_amount_free_tax %}\\n                            <template v-if=\\\"taxStatus === 'tax-free'\\\">\\n                                <dt><strong>{{ $tc('sw-order.detailBase.summaryLabelAmount') }}</strong></dt>\\n                                <dd><strong>{{ currencyFilter(cart.price.totalPrice, currency.shortName) }}</strong></dd>\\n                            </template>\\n                            {% endblock %}\\n                            {% endblock %}\\n                        </sw-description-list>\\n                    </sw-container>\\n                </sw-card-section>\\n                {% endblock %}\\n            </sw-container>\\n        </template>\\n        {% endblock %}\\n    </sw-card>\\n    {% endblock %}\\n</sw-card-view>\\n{% endblock %}\\n\";"],"sourceRoot":""}