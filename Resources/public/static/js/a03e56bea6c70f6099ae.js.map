{"version":3,"sources":["webpack:///./src/module/sw-bulk-edit/page/sw-bulk-edit-customer/index.js","webpack:///./src/module/sw-bulk-edit/page/sw-bulk-edit-customer/sw-bulk-edit-customer.html.twig","webpack:///./src/module/sw-bulk-edit/state/sw-bulk-edit.state.js","webpack:///./src/module/sw-bulk-edit/page/sw-bulk-edit-customer/sw-bulk-edit-customer.scss"],"names":["Mixin","Shopware","Criteria","Data","types","Utils","chunk","array","cloneDeep","object","template","inject","mixins","getByName","data","isLoading","isLoadedData","isSaveSuccessful","bulkEditData","customFieldSets","processStatus","customer","metaInfo","title","this","$createTitle","computed","selectedIds","State","get","customFieldSetRepository","repositoryFactory","create","customerRepository","customFieldSetCriteria","criteria","addFilter","equals","hasChanges","_this$bulkEditData$cu","customFieldsValue","customFields","value","hasFieldsChanged","Object","values","some","field","isChanged","hasCustomFieldsChanged","isEmpty","keys","length","actionsRequestGroup","label","$tc","accountFormFields","name","config","componentName","entity","changeLabel","placeholder","type","labelHelpText","options","tagsFormFields","entityCollection","tags","allowOverwrite","allowClear","allowAdd","allowRemove","beforeCreate","registerModule","swBulkEditState","created","createdComponent","beforeDestroy","unregisterModule","methods","_this","setRouteMetaModule","getters","commit","Context","api","loadCustomFieldSets","then","loadBulkEditData","catch","error","createNotificationError","message","finally","$set","$route","meta","$module","defineBulkEditData","arguments","undefined","_this2","forEach","bulkEditForms","bulkEditForm","_this3","search","res","onCustomFieldsChange","filter","change","onProcessData","_this4","requestData","syncData","key","bulkEditField","bulkEditValue","push","openModal","$router","onSave","_this5","_asyncToGenerator","_regeneratorRuntime","mark","_callee","_this5$onProcessData","bulkEditCustomerHandler","payloadChunks","requests","wrap","_context","prev","next","bulkEditApiFactory","getHandler","bulkEditRequestedGroup","payload","bulkEdit","abrupt","Promise","all","e","console","stop","closeModal","onChangeLanguage","languageId","namespaced","state","today","Date","toISOString","isFlowTriggered","orderDocuments","invoice","documentDate","documentComment","storno","delivery_note","custom","deliveryDate","deliveryNoteDate","credit_note","download","mutations","setIsFlowTriggered","setOrderDocumentsIsChanged","_ref","setOrderDocumentsValue","_ref2","documentTypeConfigs","entries","_ref3","_ref4","_slicedToArray","fileType","content","__esModule","default","module","i","locals","exports","add"],"mappings":"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","file":"static/js/a03e56bea6c70f6099ae.js","sourcesContent":["import template from './sw-bulk-edit-customer.html.twig';\nimport './sw-bulk-edit-customer.scss';\nimport swBulkEditState from '../../state/sw-bulk-edit.state';\n\nconst { Mixin } = Shopware;\nconst { Criteria } = Shopware.Data;\nconst { types } = Shopware.Utils;\nconst { chunk } = Shopware.Utils.array;\nconst { cloneDeep } = Shopware.Utils.object;\n\n/**\n * @package system-settings\n */\n// eslint-disable-next-line sw-deprecation-rules/private-feature-declarations\nexport default {\n    template,\n\n    inject: [\n        'feature',\n        'bulkEditApiFactory',\n        'repositoryFactory',\n    ],\n\n    mixins: [\n        Mixin.getByName('notification'),\n    ],\n\n    data() {\n        return {\n            isLoading: false,\n            isLoadedData: false,\n            isSaveSuccessful: false,\n            bulkEditData: {},\n            customFieldSets: [],\n            processStatus: '',\n            customer: {},\n        };\n    },\n\n    metaInfo() {\n        return {\n            title: this.$createTitle(),\n        };\n    },\n\n    computed: {\n        selectedIds() {\n            return Shopware.State.get('shopwareApps').selectedIds;\n        },\n\n        customFieldSetRepository() {\n            return this.repositoryFactory.create('custom_field_set');\n        },\n\n        customerRepository() {\n            return this.repositoryFactory.create('customer');\n        },\n\n        customFieldSetCriteria() {\n            const criteria = new Criteria(1, null);\n\n            criteria.addFilter(Criteria.equals('relations.entityName', 'customer'));\n\n            return criteria;\n        },\n\n        hasChanges() {\n            const customFieldsValue = this.bulkEditData.customFields?.value;\n            const hasFieldsChanged = Object.values(this.bulkEditData).some((field) => field.isChanged);\n            const hasCustomFieldsChanged = !types.isEmpty(customFieldsValue) && Object.keys(customFieldsValue).length > 0;\n\n            return hasFieldsChanged || hasCustomFieldsChanged;\n        },\n\n        actionsRequestGroup() {\n            return [{\n                value: 'accept',\n                label: this.$tc('sw-bulk-edit.customer.account.customerGroupRequest.options.accept'),\n            }, {\n                value: 'decline',\n                label: this.$tc('sw-bulk-edit.customer.account.customerGroupRequest.options.decline'),\n            }];\n        },\n\n        accountFormFields() {\n            return [{\n                name: 'groupId',\n                config: {\n                    componentName: 'sw-entity-single-select',\n                    entity: 'customer_group',\n                    changeLabel: this.$tc('sw-bulk-edit.customer.account.customerGroup.label'),\n                    placeholder: this.$tc('sw-bulk-edit.customer.account.customerGroup.placeholder'),\n                },\n            }, {\n                name: 'defaultPaymentMethodId',\n                config: {\n                    componentName: 'sw-entity-single-select',\n                    entity: 'payment_method',\n                    changeLabel: this.$tc('sw-bulk-edit.customer.account.defaultPaymentMethod.label'),\n                    placeholder: this.$tc('sw-bulk-edit.customer.account.defaultPaymentMethod.placeholder'),\n                },\n            }, {\n                name: 'active',\n                type: 'bool',\n                config: {\n                    type: 'switch',\n                    changeLabel: this.$tc('sw-bulk-edit.customer.account.status.label'),\n                },\n            }, {\n                name: 'languageId',\n                config: {\n                    componentName: 'sw-entity-single-select',\n                    entity: 'language',\n                    changeLabel: this.$tc('sw-bulk-edit.customer.account.language.label'),\n                    placeholder: this.$tc('sw-bulk-edit.customer.account.language.placeholder'),\n                },\n            }, {\n                name: 'requestedCustomerGroupId',\n                labelHelpText: this.$tc('sw-bulk-edit.customer.account.customerGroupRequest.helpText'),\n                config: {\n                    componentName: 'sw-single-select',\n                    entity: 'customer_group',\n                    changeLabel: this.$tc('sw-bulk-edit.customer.account.customerGroupRequest.label'),\n                    placeholder: this.$tc('sw-bulk-edit.customer.account.customerGroupRequest.placeholder'),\n                    options: this.actionsRequestGroup,\n                },\n            }];\n        },\n\n        tagsFormFields() {\n            return [\n                {\n                    name: 'tags',\n                    config: {\n                        componentName: 'sw-entity-tag-select',\n                        entityCollection: this.customer.tags,\n                        allowOverwrite: true,\n                        allowClear: true,\n                        allowAdd: true,\n                        allowRemove: true,\n                        changeLabel: this.$tc('sw-bulk-edit.order.tags.changeLabel'),\n                        placeholder: this.$tc('sw-bulk-edit.order.tags.placeholder'),\n                    },\n                },\n            ];\n        },\n    },\n\n    beforeCreate() {\n        Shopware.State.registerModule('swBulkEdit', swBulkEditState);\n    },\n\n    created() {\n        this.createdComponent();\n    },\n\n    beforeDestroy() {\n        Shopware.State.unregisterModule('swBulkEdit');\n    },\n\n    methods: {\n        createdComponent() {\n            this.setRouteMetaModule();\n            if (!Shopware.State.getters['context/isSystemDefaultLanguage']) {\n                Shopware.State.commit('context/resetLanguageToDefault');\n            }\n\n            this.isLoading = true;\n\n            this.customer = this.customerRepository.create(Shopware.Context.api);\n\n            this.loadCustomFieldSets().then(() => {\n                this.loadBulkEditData();\n                this.isLoadedData = true;\n            }).catch(error => {\n                this.createNotificationError({\n                    title: this.$tc('global.default.error'),\n                    message: error,\n                });\n            }).finally(() => {\n                this.isLoading = false;\n            });\n        },\n\n        setRouteMetaModule() {\n            this.$set(this.$route.meta.$module, 'color', '#F88962');\n            this.$set(this.$route.meta.$module, 'icon', 'regular-users');\n        },\n\n        defineBulkEditData(name, value = null, type = 'overwrite', isChanged = false) {\n            if (this.bulkEditData[name]) {\n                return;\n            }\n\n            this.$set(this.bulkEditData, name, {\n                isChanged: isChanged,\n                type: type,\n                value: value,\n            });\n        },\n\n        loadBulkEditData() {\n            const bulkEditFormGroups = [\n                this.accountFormFields,\n                this.tagsFormFields,\n            ];\n\n            bulkEditFormGroups.forEach((bulkEditForms) => {\n                bulkEditForms.forEach((bulkEditForm) => {\n                    this.defineBulkEditData(bulkEditForm.name);\n                });\n            });\n\n            this.$set(this.bulkEditData, 'customFields', {\n                type: 'overwrite',\n                value: null,\n            });\n        },\n\n        loadCustomFieldSets() {\n            return this.customFieldSetRepository.search(this.customFieldSetCriteria).then((res) => {\n                this.customFieldSets = res;\n            });\n        },\n\n        onCustomFieldsChange(value) {\n            if (Object.keys(value).length <= 0) {\n                this.bulkEditData = this.bulkEditData.filter(change => change.field !== 'customFields');\n                return;\n            }\n\n            this.bulkEditData.customFields.value = value;\n        },\n\n        onProcessData() {\n            const data = {\n                requestData: [],\n                syncData: [],\n            };\n\n            Object.keys(this.bulkEditData).forEach(key => {\n                const bulkEditField = cloneDeep(this.bulkEditData[key]);\n\n                let bulkEditValue = this.customer[key];\n\n                if (key === 'active' && !bulkEditValue) {\n                    bulkEditValue = false;\n                }\n\n                if (key === 'customFields') {\n                    bulkEditValue = bulkEditField.value;\n                }\n\n                const change = {\n                    field: key,\n                    type: bulkEditField.type,\n                    value: bulkEditValue,\n                };\n\n                if (bulkEditField.isChanged || (key === 'customFields' && bulkEditField.value)) {\n                    if (key === 'requestedCustomerGroupId') {\n                        data.requestData.push(change);\n                    } else {\n                        data.syncData.push(change);\n                    }\n                }\n            });\n\n            return data;\n        },\n\n        openModal() {\n            this.$router.push({ name: 'sw.bulk.edit.customer.save' });\n        },\n\n        async onSave() {\n            this.isLoading = true;\n            const { requestData, syncData } = this.onProcessData();\n            const bulkEditCustomerHandler = this.bulkEditApiFactory.getHandler('customer');\n            const payloadChunks = chunk(this.selectedIds, 50);\n            const requests = [];\n\n            if (requestData.length) {\n                requests.push(bulkEditCustomerHandler.bulkEditRequestedGroup(this.selectedIds, requestData));\n            }\n\n            payloadChunks.forEach(payload => {\n                if (syncData.length) {\n                    requests.push(bulkEditCustomerHandler.bulkEdit(payload, syncData));\n                }\n            });\n\n            return Promise.all(requests)\n                .then(() => {\n                    this.processStatus = 'success';\n                }).catch((e) => {\n                    console.error(e);\n                    this.processStatus = 'fail';\n                }).finally(() => {\n                    this.isLoading = false;\n                });\n        },\n\n        closeModal() {\n            this.$router.push({ name: 'sw.bulk.edit.customer' });\n        },\n\n        onChangeLanguage(languageId) {\n            Shopware.State.commit('context/setApiLanguageId', languageId);\n        },\n    },\n};\n","export default \"\\n{% block sw_bulk_edit_customer %}\\n<sw-page class=\\\"sw-bulk-edit-customer\\\">\\n    \\n    {% block sw_bulk_edit_customer_search_bar %}\\n    <template #search-bar>\\n        <sw-search-bar />\\n    </template>\\n    {% endblock %}\\n\\n    \\n    {% block sw_bulk_edit_customer_smart_bar_header %}\\n    <template #smart-bar-header>\\n        <h2>{{ $tc('sw-bulk-edit.customer.textTitle', selectedIds.length, { customerTotal: selectedIds.length }) }}</h2>\\n    </template>\\n    {% endblock %}\\n\\n    \\n    {% block sw_bulk_edit_customer_content_language_switch %}\\n    <template #language-switch>\\n        <sw-language-switch @on-change=\\\"onChangeLanguage\\\" />\\n    </template>\\n    {% endblock %}\\n\\n    \\n    {% block sw_bulk_edit_customer_content_smart_bar_actions %}\\n    <template #smart-bar-actions>\\n        \\n        {% block sw_bulk_edit_customer_actions_save %}\\n        <sw-button-process\\n            class=\\\"sw-bulk-edit-customer__save-action\\\"\\n            variant=\\\"primary\\\"\\n            :is-loading=\\\"isLoading\\\"\\n            :process-success=\\\"false\\\"\\n            :disabled=\\\"isLoading || !hasChanges\\\"\\n            @click=\\\"openModal\\\"\\n        >\\n            {{ $tc('sw-bulk-edit.applyChanges') }}\\n        </sw-button-process>\\n        {% endblock %}\\n    </template>\\n    {% endblock %}\\n\\n    \\n    {% block sw_bulk_edit_customer_content %}\\n    <template #content>\\n        <sw-card-view\\n            v-if=\\\"selectedIds.length > 0 && isLoadedData\\\"\\n        >\\n            \\n            {% block sw_bulk_edit_customer_content_account_card %}\\n            <sw-card\\n                class=\\\"sw-bulk-edit-customer-base__account\\\"\\n                position-identifier=\\\"sw-bulk-edit-customer-account\\\"\\n                :title=\\\"$tc('sw-bulk-edit.customer.account.cardTitle')\\\"\\n                :is-loading=\\\"isLoading\\\"\\n            >\\n                \\n                {% block sw_bulk_edit_customer_content_account_section %}\\n                <sw-bulk-edit-change-type-field-renderer\\n                    :form-fields=\\\"accountFormFields\\\"\\n                    :bulk-edit-data=\\\"bulkEditData\\\"\\n                    :entity=\\\"customer\\\"\\n                />\\n                {% endblock %}\\n            </sw-card>\\n            {% endblock %}\\n\\n            \\n            {% block sw_bulk_edit_customer_tags_card %}\\n            <sw-card\\n                class=\\\"sw-bulk-edit-customer-base__tags\\\"\\n                position-identifier=\\\"sw-bulk-edit-customer-tags\\\"\\n                :title=\\\"$tc('sw-bulk-edit.customer.tags.cardTitle')\\\"\\n                :is-loading=\\\"isLoading\\\"\\n            >\\n                \\n                {% block sw_bulk_edit_customer_tags %}\\n                <sw-bulk-edit-change-type-field-renderer\\n                    :form-fields=\\\"tagsFormFields\\\"\\n                    :bulk-edit-data=\\\"bulkEditData\\\"\\n                    :entity=\\\"customer\\\"\\n                />\\n                {% endblock %}\\n            </sw-card>\\n            {% endblock %}\\n\\n            \\n            {% block sw_bulk_edit_customer_custom_field_card %}\\n            <sw-card\\n                class=\\\"sw-bulk-edit-customer-base__custom_fields\\\"\\n                position-identifier=\\\"sw-bulk-edit-customer-custom-field\\\"\\n                :title=\\\"$tc('sw-bulk-edit.customer.customFields.cardTitle')\\\"\\n                :is-loading=\\\"isLoading\\\"\\n            >\\n                <sw-bulk-edit-custom-fields\\n                    class=\\\"sw-bulk-edit__custom-fields\\\"\\n                    :sets=\\\"customFieldSets\\\"\\n                    @change=\\\"onCustomFieldsChange\\\"\\n                />\\n            </sw-card>\\n            {% endblock %}\\n        </sw-card-view>\\n\\n        \\n        {% block sw_bulk_edit_customer_empty_state %}\\n        <sw-empty-state\\n            v-if=\\\"selectedIds.length <= 0 && !isLoading\\\"\\n            :title=\\\"$tc('sw-bulk-edit.customer.messageEmptyTitle')\\\"\\n            :subline=\\\"$tc('sw-bulk-edit.customer.messageEmptySubline')\\\"\\n        />\\n        {% endblock %}\\n\\n        \\n        {% block sw_bulk_edit_customer_save_modal %}\\n        {% if VUE3 %}\\n        <router-view\\n            v-slot=\\\"{ Component }\\\"\\n        >\\n            <component\\n                :is=\\\"Component\\\"\\n                :item-total=\\\"selectedIds.length\\\"\\n                :is-loading=\\\"isLoading\\\"\\n                :process-status=\\\"processStatus\\\"\\n                :bulk-edit-data=\\\"bulkEditData\\\"\\n                @modal-close=\\\"closeModal\\\"\\n                @bulk-save=\\\"onSave\\\"\\n            />\\n        </router-view>\\n        {% else %}\\n        <router-view\\n            :item-total=\\\"selectedIds.length\\\"\\n            :is-loading=\\\"isLoading\\\"\\n            :process-status=\\\"processStatus\\\"\\n            :bulk-edit-data=\\\"bulkEditData\\\"\\n            @modal-close=\\\"closeModal\\\"\\n            @bulk-save=\\\"onSave\\\"\\n        />\\n        {% endif %}\\n        {% endblock %}\\n    </template>\\n    {% endblock %}\\n</sw-page>\\n{% endblock %}\\n\";","/**\n * @package system-settings\n */\n// eslint-disable-next-line sw-deprecation-rules/private-feature-declarations\nexport default {\n    namespaced: true,\n\n    state() {\n        const today = (new Date()).toISOString();\n\n        return {\n            isFlowTriggered: true,\n            orderDocuments: {\n                invoice: {\n                    isChanged: false,\n                    value: {\n                        documentDate: today,\n                        documentComment: null,\n                    },\n                },\n                storno: {\n                    isChanged: false,\n                    value: {\n                        documentDate: today,\n                        documentComment: null,\n                    },\n                },\n                delivery_note: {\n                    isChanged: false,\n                    value: {\n                        custom: {\n                            deliveryDate: today,\n                            deliveryNoteDate: today,\n                        },\n                        documentDate: today,\n                        documentComment: null,\n                    },\n                },\n                credit_note: {\n                    isChanged: false,\n                    value: {\n                        documentDate: today,\n                        documentComment: null,\n                    },\n                },\n                download: {\n                    isChanged: false,\n                    value: [],\n                },\n            },\n        };\n    },\n\n    mutations: {\n        setIsFlowTriggered(state, isFlowTriggered) {\n            state.isFlowTriggered = isFlowTriggered;\n        },\n        setOrderDocumentsIsChanged(state, { type, isChanged }) {\n            state.orderDocuments[type].isChanged = isChanged;\n        },\n        setOrderDocumentsValue(state, { type, value }) {\n            state.orderDocuments[type].value = value;\n        },\n    },\n\n    getters: {\n        documentTypeConfigs(state) {\n            const documentTypeConfigs = [];\n\n            Object.entries(state.orderDocuments).forEach(([key, value]) => {\n                if (key === 'download') {\n                    return;\n                }\n                if (value.isChanged === true) {\n                    documentTypeConfigs.push({\n                        fileType: 'pdf',\n                        type: key,\n                        config: value.value,\n                    });\n                }\n            });\n\n            return documentTypeConfigs;\n        },\n    },\n};\n","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../../../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--15-1!../../../../../node_modules/css-loader/dist/cjs.js??ref--15-2!../../../../../node_modules/sass-loader/dist/cjs.js??ref--15-3!./sw-bulk-edit-customer.scss\");\nif(content.__esModule) content = content.default;\nif(typeof content === 'string') content = [[module.id, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar add = require(\"!../../../../../node_modules/vue-style-loader/lib/addStylesClient.js\").default\nvar update = add(\"4f8ba557\", content, true, {});"],"sourceRoot":""}