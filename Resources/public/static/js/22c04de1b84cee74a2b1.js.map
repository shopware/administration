{"version":3,"sources":["webpack:///./src/module/sw-customer/page/sw-customer-detail/index.js","webpack:///./src/module/sw-customer/page/sw-customer-detail/sw-customer-detail.html.twig","webpack:///./src/module/sw-customer/constant/sw-customer.constant.js","webpack:///./src/module/sw-customer/page/sw-customer-detail/sw-customer-detail.scss"],"names":["Mixin","Shopware","Criteria","Data","ShopwareError","Classes","mapPageErrors","Component","getComponentHelper","template","inject","mixins","getByName","shortcuts","ESCAPE","props","customerId","type","String","required","data","isLoading","isSaveSuccessful","customer","customerAddressCustomFieldSets","customerCustomFieldSets","errorEmailCustomer","metaInfo","title","this","$createTitle","identifier","computed","_objectSpread","salutation","customerRepository","repositoryFactory","create","editMode","get","$route","query","edit","set","$router","push","name","defaultCriteria","criteria","addAssociation","getAssociation","addSorting","sort","generalRoute","params","id","addressesRoute","ordersRoute","emailHasChanged","origin","getOrigin","isNew","email","validCompanyField","_this$customer$compan","accountType","CUSTOMER","ACCOUNT_TYPE_BUSINESS","company","trim","length","salutationRepository","salutationCriteria","addFilter","equals","errorConfig","watch","createdComponent","created","methods","loadCustomer","_this","_asyncToGenerator","_regeneratorRuntime","mark","_callee","defaultSalutationId","wrap","_context","prev","next","getDefaultSalutation","sent","ExtensionAPI","publishData","path","scope","Context","api","then","_this$customer","_this$customer$addres","salutationId","addresses","map","address","stop","_this2","_callee2","_context2","saveFinish","validateEmail","_this3","_this$customer2","boundSalesChannelId","customerValidationService","checkCustomerEmail","emailIsValid","State","dispatch","expression","concat","error","catch","exception","response","errors","onSave","_this4","_callee3","hasError","_context3","abrupt","isValid","createErrorMessageForCompanyField","validPassword","createNotificationError","message","$tc","birthday","passwordNew","password","ACCOUNT_TYPE_PRIVATE","vatIds","save","createNotificationSuccess","firstName","lastName","onAbortButtonClick","_this5","_callee4","_context4","discardChanges","onActivateCustomerEditMode","abortOnLanguageChange","hasChanges","saveOnLanguageChange","onChangeLanguage","languageId","commit","_this6","_callee5","passwordConfirm","passwordNotEquals","_context5","detail","code","acceptCustomerGroupRegistration","_this7","customerGroupRegistrationService","accept","finally","declineCustomerGroupRegistration","_this8","decline","_this9","_callee6","_res$data","res","_context6","searchIds","Object","freeze","content","__esModule","default","module","i","locals","exports","add"],"mappings":"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","file":"static/js/22c04de1b84cee74a2b1.js","sourcesContent":["import './sw-customer-detail.scss';\nimport template from './sw-customer-detail.html.twig';\nimport errorConfig from '../../error-config.json';\nimport CUSTOMER from '../../constant/sw-customer.constant';\n\n/**\n * @package checkout\n */\n\nconst { Mixin } = Shopware;\nconst { Criteria } = Shopware.Data;\nconst { ShopwareError } = Shopware.Classes;\nconst { mapPageErrors } = Shopware.Component.getComponentHelper();\n\n// eslint-disable-next-line sw-deprecation-rules/private-feature-declarations\nexport default {\n    template,\n\n    inject: [\n        'repositoryFactory',\n        'customerGroupRegistrationService',\n        'acl',\n        'customerValidationService',\n    ],\n\n    mixins: [\n        Mixin.getByName('notification'),\n        Mixin.getByName('salutation'),\n        Mixin.getByName('discard-detail-page-changes')('customer'),\n    ],\n\n    shortcuts: {\n        'SYSTEMKEY+S': 'onSave',\n        ESCAPE: 'onAbortButtonClick',\n    },\n\n    props: {\n        customerId: {\n            type: String,\n            required: true,\n        },\n    },\n\n    data() {\n        return {\n            isLoading: false,\n            isSaveSuccessful: false,\n            customer: null,\n            customerAddressCustomFieldSets: [],\n            customerCustomFieldSets: [],\n            errorEmailCustomer: null,\n        };\n    },\n\n    metaInfo() {\n        return {\n            title: this.$createTitle(this.identifier),\n        };\n    },\n\n    computed: {\n        identifier() {\n            return this.customer !== null ? this.salutation(this.customer) : '';\n        },\n\n        customerRepository() {\n            return this.repositoryFactory.create('customer');\n        },\n\n        editMode: {\n            get() {\n                if (typeof this.$route.query.edit === 'boolean') {\n                    return this.$route.query.edit;\n                }\n\n                return this.$route.query.edit === 'true';\n            },\n            set(editMode) {\n                this.$router.push({ name: this.$route.name, query: { edit: editMode } });\n            },\n        },\n\n        defaultCriteria() {\n            const criteria = new Criteria(1, 25);\n            criteria\n                .addAssociation('addresses')\n                .addAssociation('group')\n                .addAssociation('salutation')\n                .addAssociation('salesChannel')\n                .addAssociation('defaultPaymentMethod')\n                .addAssociation('lastPaymentMethod')\n                .addAssociation('defaultBillingAddress.country')\n                .addAssociation('defaultBillingAddress.countryState')\n                .addAssociation('defaultBillingAddress.salutation')\n                .addAssociation('defaultShippingAddress.country')\n                .addAssociation('defaultShippingAddress.countryState')\n                .addAssociation('defaultShippingAddress.salutation')\n                .addAssociation('tags')\n                .addAssociation('requestedGroup');\n\n            criteria\n                .getAssociation('addresses')\n                .addSorting(Criteria.sort('firstName'), 'ASC', false);\n\n            return criteria;\n        },\n\n        generalRoute() {\n            return {\n                name: 'sw.customer.detail.base',\n                params: { id: this.customerId },\n                query: { edit: this.editMode },\n            };\n        },\n\n        addressesRoute() {\n            return {\n                name: 'sw.customer.detail.addresses',\n                params: { id: this.customerId },\n                query: { edit: this.editMode },\n            };\n        },\n\n        ordersRoute() {\n            return {\n                name: 'sw.customer.detail.order',\n                params: { id: this.customerId },\n                query: { edit: this.editMode },\n            };\n        },\n\n        emailHasChanged() {\n            const origin = this.customer.getOrigin();\n            if (this.customer.isNew() || !origin.email) {\n                return true;\n            }\n\n            return origin.email !== this.customer.email;\n        },\n\n        validCompanyField() {\n            return this.customer.accountType === CUSTOMER.ACCOUNT_TYPE_BUSINESS ?\n                this.customer.company?.trim().length : true;\n        },\n\n        salutationRepository() {\n            return this.repositoryFactory.create('salutation');\n        },\n\n        salutationCriteria() {\n            const criteria = new Criteria(1, 1);\n\n            criteria.addFilter(Criteria.equals('salutationKey', 'not_specified'));\n\n            return criteria;\n        },\n\n        ...mapPageErrors(errorConfig),\n    },\n\n    watch: {\n        customerId() {\n            this.createdComponent();\n        },\n    },\n\n    created() {\n        this.createdComponent();\n    },\n\n    methods: {\n        async loadCustomer() {\n            const defaultSalutationId = await this.getDefaultSalutation();\n\n            Shopware.ExtensionAPI.publishData({\n                id: 'sw-customer-detail__customer',\n                path: 'customer',\n                scope: this,\n            });\n            this.isLoading = true;\n\n            this.customerRepository.get(\n                this.customerId,\n                Shopware.Context.api,\n                this.defaultCriteria,\n            ).then((customer) => {\n                this.customer = customer;\n                if (!this.customer?.salutationId) {\n                    this.customer.salutationId = defaultSalutationId;\n                }\n\n                this.customer.addresses?.map((address) => {\n                    if (!address.salutationId) {\n                        address.salutationId = defaultSalutationId;\n                    }\n\n                    return address;\n                });\n\n                this.isLoading = false;\n            });\n        },\n\n        async createdComponent() {\n            await this.loadCustomer();\n        },\n\n        saveFinish() {\n            this.isSaveSuccessful = false;\n            this.editMode = false;\n            this.createdComponent();\n            this.isLoading = false;\n        },\n\n        validateEmail() {\n            const { id, email, boundSalesChannelId } = this.customer;\n\n            return this.customerValidationService.checkCustomerEmail({\n                id,\n                email,\n                boundSalesChannelId,\n            }).then((emailIsValid) => {\n                if (this.errorEmailCustomer) {\n                    Shopware.State.dispatch(\n                        'error/addApiError',\n                        {\n                            expression: `customer.${this.customer.id}.email`,\n                            error: null,\n                        },\n                    );\n                }\n\n                return emailIsValid;\n            }).catch((exception) => {\n                this.emailIsValid = false;\n                Shopware.State.dispatch(\n                    'error/addApiError',\n                    {\n                        expression: `customer.${this.customer.id}.email`,\n                        error: new ShopwareError(exception.response.data.errors[0]),\n                    },\n                );\n            });\n        },\n\n        async onSave() {\n            this.isLoading = true;\n\n            if (!this.editMode) {\n                return false;\n            }\n\n            let hasError = false;\n            if (this.customer.email && this.emailHasChanged) {\n                const response = await this.validateEmail();\n\n                if (!response || !response.isValid) {\n                    hasError = true;\n                }\n            }\n\n            if (!this.validCompanyField) {\n                this.createErrorMessageForCompanyField();\n                hasError = true;\n            }\n\n            if (!(await this.validPassword(this.customer))) {\n                hasError = true;\n            }\n\n            if (hasError) {\n                this.createNotificationError({\n                    message: this.$tc('sw-customer.detail.messageSaveError'),\n                });\n                this.isLoading = false;\n                return false;\n            }\n\n            this.isSaveSuccessful = false;\n\n            if (!this.customer.birthday) {\n                this.customer.birthday = null;\n            }\n\n            if (this.customer.passwordNew) {\n                this.customer.password = this.customer.passwordNew;\n            }\n\n            if (this.customer.accountType === CUSTOMER.ACCOUNT_TYPE_PRIVATE) {\n                this.customer.vatIds = [];\n            }\n\n            return this.customerRepository.save(this.customer).then(() => {\n                this.isSaveSuccessful = true;\n                this.createNotificationSuccess({\n                    message: this.$tc('sw-customer.detail.messageSaveSuccess', 0, {\n                        name: `${this.customer.firstName} ${this.customer.lastName}`,\n                    }),\n                });\n            }).catch((exception) => {\n                this.createNotificationError({\n                    message: this.$tc('sw-customer.detail.messageSaveError'),\n                });\n                this.isLoading = false;\n                throw exception;\n            });\n        },\n\n        async onAbortButtonClick() {\n            this.discardChanges();\n            this.editMode = false;\n            await this.loadCustomer();\n        },\n\n        onActivateCustomerEditMode() {\n            this.editMode = true;\n        },\n\n        abortOnLanguageChange() {\n            return this.customerRepository.hasChanges(this.customer);\n        },\n\n        saveOnLanguageChange() {\n            return this.onSave();\n        },\n\n        onChangeLanguage(languageId) {\n            Shopware.State.commit('context/setApiLanguageId', languageId);\n            this.createdComponent();\n        },\n\n        async validPassword(customer) {\n            const { passwordNew, passwordConfirm } = customer;\n            const passwordSet = (passwordNew || passwordConfirm);\n            const passwordNotEquals = (passwordNew !== passwordConfirm);\n\n            if (passwordSet && passwordNotEquals) {\n                Shopware.State.dispatch('error/addApiError', {\n                    expression: `customer.${this.customer.id}.passwordConfirm`,\n                    error: new ShopwareError(\n                        {\n                            detail: this.$tc('sw-customer.error.passwordDoNotMatch'),\n                            code: 'password_not_match',\n                        },\n                    ),\n                });\n\n                return false;\n            }\n\n            return true;\n        },\n\n        acceptCustomerGroupRegistration() {\n            this.customerGroupRegistrationService.accept(this.customer.id).then(() => {\n                this.createNotificationSuccess({\n                    message: this.$tc('sw-customer.customerGroupRegistration.acceptMessage'),\n                });\n            }).catch(() => {\n                this.createNotificationError({\n                    message: this.$tc('sw-customer.customerGroupRegistration.errorMessage'),\n                });\n            }).finally(() => {\n                this.createdComponent();\n            });\n        },\n\n        declineCustomerGroupRegistration() {\n            this.customerGroupRegistrationService.decline(this.customer.id).then(() => {\n                this.createNotificationSuccess({\n                    message: this.$tc('sw-customer.customerGroupRegistration.declineMessage'),\n                });\n            }).catch(() => {\n                this.createNotificationError({\n                    message: this.$tc('sw-customer.customerGroupRegistration.errorMessage'),\n                });\n            }).finally(() => {\n                this.createdComponent();\n            });\n        },\n\n        createErrorMessageForCompanyField() {\n            this.isLoading = false;\n            Shopware.State.dispatch('error/addApiError', {\n                expression: `customer.${this.customer.id}.company`,\n                error: new ShopwareError(\n                    {\n                        code: 'c1051bb4-d103-4f74-8988-acbcafc7fdc3',\n                    },\n                ),\n            });\n        },\n\n        async getDefaultSalutation() {\n            const res = await this.salutationRepository.searchIds(this.salutationCriteria);\n\n            return res.data?.[0];\n        },\n    },\n};\n","export default \"\\n{% block sw_customer_detail %}\\n<sw-page class=\\\"sw-customer-detail\\\">\\n    \\n    {% block sw_customer_detail_header %}\\n    <template\\n        v-if=\\\"!isLoading\\\"\\n        #smart-bar-header\\n    >\\n        <h2>\\n            {{ salutation(customer) }}\\n        </h2>\\n        <sw-label\\n            v-if=\\\"customer?.createdById\\\"\\n            appearance=\\\"pill\\\"\\n            size=\\\"small\\\"\\n            class=\\\"sw-customer-detail__created-by-admin-label\\\"\\n        >\\n            {{ $tc('sw-customer.detail.labelCreatedByAdmin') }}\\n        </sw-label>\\n    </template>\\n    {% endblock %}\\n\\n    \\n    {% block sw_customer_detail_actions %}\\n    <template #smart-bar-actions>\\n        \\n        {% block sw_customer_detail_actions_edit %}\\n        <span v-if=\\\"!editMode\\\">\\n            <sw-button\\n                v-tooltip=\\\"{\\n                    message: $tc('sw-privileges.tooltip.warning'),\\n                    disabled: acl.can('customer.editor'),\\n                    showOnDisabledElements: true\\n                }\\\"\\n                class=\\\"sw-customer-detail__open-edit-mode-action\\\"\\n                variant=\\\"primary\\\"\\n                :disabled=\\\"isLoading || !acl.can('customer.editor')\\\"\\n                @click.prevent=\\\"onActivateCustomerEditMode\\\"\\n            >\\n                {{ $tc('sw-customer.detail.buttonEdit') }}\\n            </sw-button>\\n        </span>\\n        {% endblock %}\\n\\n        <span v-else>\\n            \\n            {% block sw_customer_detail_actions_cancel %}\\n            <sw-button\\n                :disabled=\\\"isLoading\\\"\\n                @click=\\\"onAbortButtonClick\\\"\\n            >\\n                {{ $tc('sw-customer.detail.buttonCancel') }}\\n            </sw-button>\\n            {% endblock %}\\n\\n            \\n            {% block sw_customer_detail_actions_save %}\\n            <sw-button-process\\n                class=\\\"sw-customer-detail__save-action\\\"\\n                :is-loading=\\\"isLoading\\\"\\n                :process-success=\\\"isSaveSuccessful\\\"\\n                :disabled=\\\"isLoading\\\"\\n                variant=\\\"primary\\\"\\n                {% if VUE3 %}\\n                @update:process-success=\\\"saveFinish\\\"\\n                {% else %}\\n                @process-finish=\\\"saveFinish\\\"\\n                {% endif %}\\n                @click.prevent=\\\"onSave\\\"\\n            >\\n                {{ $tc('sw-customer.detail.buttonSave') }}\\n            </sw-button-process>\\n            {% endblock %}\\n        </span>\\n    </template>\\n    {% endblock %}\\n\\n    <template #language-switch>\\n        <sw-language-switch\\n            :abort-change-function=\\\"abortOnLanguageChange\\\"\\n            :save-changes-function=\\\"saveOnLanguageChange\\\"\\n            @on-change=\\\"onChangeLanguage\\\"\\n        />\\n    </template>\\n\\n    \\n    {% block sw_customer_detail_content %}\\n    <template #content>\\n        <sw-card-view>\\n            \\n            {% block sw_customer_detail_content_customer_group_registration %}\\n            <div class=\\\"sw-customer-detail__customer-registration-alert\\\">\\n                <sw-alert\\n                    v-if=\\\"customer && customer.requestedGroup\\\"\\n                    variant=\\\"info\\\"\\n                >\\n                    \\n                    {% block sw_customer_detail_content_customer_group_registration_content %}\\n                    <div class=\\\"sw-customer-detail__customer-registration-alert-text\\\">\\n                        \\n                        {% block sw_customer_detail_content_customer_group_registration_message %}\\n                        {{ $tc('sw-customer.customerGroupRegistration.alert', 0, { name: customer.requestedGroup.translated.name }) }}\\n                        {% endblock %}\\n                    </div>\\n                    <div class=\\\"sw-customer-detail__customer-registration-alert-actions\\\">\\n                        \\n                        {% block sw_customer_detail_content_customer_group_registration_actions %}\\n                        <sw-button\\n                            variant=\\\"danger\\\"\\n                            size=\\\"small\\\"\\n                            @click=\\\"declineCustomerGroupRegistration\\\"\\n                        >\\n                            {{ $tc('sw-customer.customerGroupRegistration.decline') }}\\n                        </sw-button>\\n\\n                        <sw-button\\n                            variant=\\\"primary\\\"\\n                            size=\\\"small\\\"\\n                            @click=\\\"acceptCustomerGroupRegistration\\\"\\n                        >\\n                            {{ $tc('sw-customer.customerGroupRegistration.accept') }}\\n                        </sw-button>\\n                        {% endblock %}\\n                    </div>\\n                    {% endblock %}\\n                </sw-alert>\\n            </div>\\n            {% endblock %}\\n\\n            \\n            {% block sw_customer_detail_content_tabs %}\\n            <sw-tabs\\n                class=\\\"sw-customer-detail-page__tabs\\\"\\n                position-identifier=\\\"sw-customer-detail-tabs\\\"\\n            >\\n                \\n                {% block sw_customer_detail_content_tab_general %}\\n                <sw-tabs-item\\n                    class=\\\"sw-customer-detail__tab-general\\\"\\n                    :route=\\\"generalRoute\\\"\\n                    :title=\\\"$tc('sw-customer.detail.tabGeneral')\\\"\\n                    :has-error=\\\"swCustomerDetailBaseError\\\"\\n                >\\n                    {{ $tc('sw-customer.detail.tabGeneral') }}\\n                </sw-tabs-item>\\n                {% endblock %}\\n\\n                \\n                {% block sw_customer_detail_content_tab_addresses %}\\n                <sw-tabs-item\\n                    class=\\\"sw-customer-detail__tab-addresses\\\"\\n                    :route=\\\"addressesRoute\\\"\\n                    :title=\\\"$tc('sw-customer.detail.tabAddresses')\\\"\\n                >\\n                    {{ $tc('sw-customer.detail.tabAddresses') }}\\n                </sw-tabs-item>\\n                {% endblock %}\\n\\n                \\n                {% block sw_customer_detail_content_tab_order %}\\n                <sw-tabs-item\\n                    class=\\\"sw-customer-detail__tab-order\\\"\\n                    :route=\\\"ordersRoute\\\"\\n                    :title=\\\"$tc('sw-customer.detailBase.labelOrderCard')\\\"\\n                >\\n                    {{ $tc('sw-customer.detailBase.labelOrderCard') }}\\n                </sw-tabs-item>\\n                {% endblock %}\\n\\n                \\n                {% block sw_customer_detail_content_tab_after %}{% endblock %}\\n            </sw-tabs>\\n            {% endblock %}\\n\\n            \\n            {% block sw_customer_detail_content_view %}\\n            <template v-if=\\\"isLoading\\\">\\n                <sw-skeleton variant=\\\"detail-bold\\\" />\\n                <sw-skeleton />\\n            </template>\\n\\n            {% if VUE3 %}\\n            <router-view\\n                v-if=\\\"customer\\\"\\n                v-slot=\\\"{ Component }\\\"\\n            >\\n                {# v-show is used here as underlying components influence the loading state and v-if would destroy this behaviour #}\\n                <component\\n                    :is=\\\"Component\\\"\\n                    v-show=\\\"!isLoading\\\"\\n                    :customer=\\\"customer\\\"\\n                    :customer-edit-mode=\\\"editMode\\\"\\n                />\\n            </router-view>\\n            {% else %}\\n            <router-view\\n                v-if=\\\"customer\\\"\\n                v-show=\\\"!isLoading\\\"\\n                :customer=\\\"customer\\\"\\n                :customer-edit-mode=\\\"editMode\\\"\\n            />\\n            {% endif %}\\n            {% endblock %}\\n        </sw-card-view>\\n    </template>\\n    {% endblock %}\\n</sw-page>\\n{% endblock %}\\n\";","/**\n * @package checkout\n */\n\nconst ACCOUNT_TYPE_PRIVATE = 'private';\nconst ACCOUNT_TYPE_BUSINESS = 'business';\n\n// eslint-disable-next-line sw-deprecation-rules/private-feature-declarations\nexport default Object.freeze({\n    ACCOUNT_TYPE_PRIVATE,\n    ACCOUNT_TYPE_BUSINESS,\n});\n","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../../../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--15-1!../../../../../node_modules/css-loader/dist/cjs.js??ref--15-2!../../../../../node_modules/sass-loader/dist/cjs.js??ref--15-3!./sw-customer-detail.scss\");\nif(content.__esModule) content = content.default;\nif(typeof content === 'string') content = [[module.id, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar add = require(\"!../../../../../node_modules/vue-style-loader/lib/addStylesClient.js\").default\nvar update = add(\"aaa12200\", content, true, {});"],"sourceRoot":""}