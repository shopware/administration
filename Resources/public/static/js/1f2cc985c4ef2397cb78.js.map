{"version":3,"sources":["webpack:///./src/module/sw-media/component/sidebar/sw-media-quickinfo/index.js","webpack:///./src/module/sw-media/component/sidebar/sw-media-quickinfo/sw-media-quickinfo.html.twig","webpack:///./src/module/sw-media/component/sidebar/sw-media-quickinfo/sw-media-quickinfo.scss"],"names":["_Shopware","Shopware","Mixin","Context","Utils","dom","format","template","inject","mixins","getByName","props","item","required","type","Object","validator","value","getEntityName","editable","Boolean","default","data","customFieldSets","isLoading","isSaveSuccessful","showModalReplace","fileNameError","computed","mediaRepository","this","repositoryFactory","create","isMediaObject","fileSize","createdAt","date","uploadedAt","fileNameClasses","watch","handler","created","createdComponent","methods","loadCustomFieldSets","_this","customFieldDataProviderService","getCustomFieldSets","then","sets","onSaveCustomFields","_this2","_asyncToGenerator","_regeneratorRuntime","mark","_callee","wrap","_context","prev","next","save","api","stop","saveFinish","copyLinkToClipboard","copyToClipboard","url","createNotificationSuccess","message","$tc","onSubmitTitle","_this3","_callee2","_context2","title","t0","$refs","inlineEditFieldTitle","cancelSubmit","onSubmitAltText","_this4","_callee3","_context3","alt","inlineEditFieldAlt","onChangeFileName","_this5","_callee4","_context4","mediaService","renameMedia","id","catch","error","fileNameErrorCodes","response","errors","forEach","e","includes","code","Promise","reject","fileName","$emit","createNotificationError","finish","openModalReplace","acl","can","closeModalReplace","emitRefreshMediaLibrary","_this6","$nextTick","quickActionClasses","disabled","onRemoveFileNameError","content","__esModule","module","i","locals","exports","add"],"mappings":"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","file":"static/js/1f2cc985c4ef2397cb78.js","sourcesContent":["import template from './sw-media-quickinfo.html.twig';\nimport './sw-media-quickinfo.scss';\n\nconst { Mixin, Context, Utils } = Shopware;\nconst { dom, format } = Utils;\n\n/**\n * @package buyers-experience\n */\n// eslint-disable-next-line sw-deprecation-rules/private-feature-declarations\nexport default {\n    template,\n\n    inject: ['mediaService', 'repositoryFactory', 'acl', 'customFieldDataProviderService'],\n\n    mixins: [\n        Mixin.getByName('notification'),\n        Mixin.getByName('media-sidebar-modal-mixin'),\n        Mixin.getByName('placeholder'),\n    ],\n\n    props: {\n        item: {\n            required: true,\n            type: Object,\n            validator(value) {\n                return value.getEntityName() === 'media';\n            },\n        },\n\n        editable: {\n            type: Boolean,\n            required: false,\n            default: false,\n        },\n    },\n\n    data() {\n        return {\n            customFieldSets: [],\n            isLoading: false,\n            isSaveSuccessful: false,\n            showModalReplace: false,\n            fileNameError: null,\n        };\n    },\n\n    computed: {\n        mediaRepository() {\n            return this.repositoryFactory.create('media');\n        },\n\n        isMediaObject() {\n            return this.item.type === 'media';\n        },\n\n        fileSize() {\n            return format.fileSize(this.item.fileSize);\n        },\n\n        createdAt() {\n            const date = this.item.uploadedAt || this.item.createdAt;\n            return format.date(date);\n        },\n\n        fileNameClasses() {\n            return {\n                'has--error': this.fileNameError,\n            };\n        },\n    },\n\n    watch: {\n        'item.id': {\n            handler() {\n                this.fileNameError = null;\n            },\n        },\n    },\n\n    created() {\n        this.createdComponent();\n    },\n\n    methods: {\n        createdComponent() {\n            this.loadCustomFieldSets();\n        },\n\n        loadCustomFieldSets() {\n            return this.customFieldDataProviderService.getCustomFieldSets('media').then((sets) => {\n                this.customFieldSets = sets;\n            });\n        },\n\n        async onSaveCustomFields(item) {\n            this.isSaveSuccessful = false;\n            this.isLoading = true;\n\n            await this.mediaRepository.save(item, Context.api);\n\n            this.isSaveSuccessful = true;\n            this.isLoading = false;\n        },\n\n        saveFinish() {\n            this.isSaveSuccessful = false;\n        },\n\n        copyLinkToClipboard() {\n            if (this.item) {\n                dom.copyToClipboard(this.item.url);\n                this.createNotificationSuccess({\n                    message: this.$tc('sw-media.general.notification.urlCopied.message'),\n                });\n            }\n        },\n\n        async onSubmitTitle(value) {\n            this.item.title = value;\n\n            try {\n                await this.mediaRepository.save(this.item, Context.api);\n            } catch {\n                this.$refs.inlineEditFieldTitle.cancelSubmit();\n            }\n        },\n\n        async onSubmitAltText(value) {\n            this.item.alt = value;\n\n            try {\n                await this.mediaRepository.save(this.item, Context.api);\n            } catch {\n                this.$refs.inlineEditFieldAlt.cancelSubmit();\n            }\n        },\n\n        async onChangeFileName(value) {\n            const { item } = this;\n            item.isLoading = true;\n            this.fileNameError = null;\n\n            try {\n                await this.mediaService.renameMedia(item.id, value).catch((error) => {\n                    const fileNameErrorCodes = ['CONTENT__MEDIA_EMPTY_FILE', 'CONTENT__MEDIA_ILLEGAL_FILE_NAME'];\n\n                    error.response.data.errors.forEach((e) => {\n                        if (this.fileNameError || !fileNameErrorCodes.includes(e.code)) {\n                            return;\n                        }\n\n                        this.fileNameError = e;\n                    });\n\n                    return Promise.reject(error);\n                });\n                item.fileName = value;\n\n                this.createNotificationSuccess({\n                    message: this.$tc('global.sw-media-media-item.notification.renamingSuccess.message'),\n                });\n                this.$emit('media-item-rename-success', item);\n            } catch {\n                this.createNotificationError({\n                    message: this.$tc('global.sw-media-media-item.notification.renamingError.message'),\n                });\n            } finally {\n                item.isLoading = false;\n            }\n        },\n\n        openModalReplace() {\n            if (!this.acl.can('media.editor')) {\n                return;\n            }\n\n            this.showModalReplace = true;\n        },\n\n        closeModalReplace() {\n            this.showModalReplace = false;\n        },\n\n        emitRefreshMediaLibrary() {\n            this.closeModalReplace();\n\n            this.$nextTick(() => {\n                this.$emit('media-item-replaced');\n            });\n        },\n\n        quickActionClasses(disabled) {\n            return ['sw-media-sidebar__quickaction', {\n                'sw-media-sidebar__quickaction--disabled': disabled,\n            }];\n        },\n\n        onRemoveFileNameError() {\n            this.fileNameError = null;\n        },\n    },\n};\n","export default \"\\n{% block sw_media_quickinfo %}\\n<div class=\\\"sw-media-quickinfo\\\">\\n    \\n    {% block sw_media_quickinfo_broken_file %}\\n    <sw-alert\\n        v-if=\\\"!item.hasFile\\\"\\n        class=\\\"sw-media-quickinfo__alert-file-missing\\\"\\n        variant=\\\"warning\\\"\\n        :title=\\\"$tc('sw-media.sidebar.infoMissingFile.titleMissingFile')\\\"\\n    >\\n        {{ $tc('sw-media.sidebar.infoMissingFile.descriptionMissingFile') }}\\n    </sw-alert>\\n    {% endblock %}\\n\\n    \\n    {% block sw_media_quickinfo_quickactions %}\\n    <sw-media-collapse\\n        v-if=\\\"editable\\\"\\n        :title=\\\"$tc('sw-media.sidebar.sections.actions')\\\"\\n        :expand-on-loading=\\\"true\\\"\\n    >\\n\\n        <template #content>\\n            \\n            {% block sw_media_quickinfo_quickactions_content %}\\n            <ul class=\\\"sw-media-sidebar__quickactions-list\\\">\\n                \\n                {% block sw_media_quickinfo_quickactions_replace %}\\n                <li\\n                    v-if=\\\"!item.private\\\"\\n                    v-tooltip=\\\"{\\n                        message: $tc('sw-privileges.tooltip.warning'),\\n                        disabled: acl.can('media.editor'),\\n                        showOnDisabledElements: true\\n                    }\\\"\\n                    class=\\\"quickaction--replace\\\"\\n                    :class=\\\"quickActionClasses(!acl.can('media.editor'))\\\"\\n                    role=\\\"button\\\"\\n                    tabindex=\\\"0\\\"\\n                    @click=\\\"openModalReplace\\\"\\n                    @keydown.enter=\\\"openModalReplace\\\"\\n                >\\n                    <sw-icon\\n                        small\\n                        name=\\\"regular-files\\\"\\n                        class=\\\"sw-media-sidebar__quickactions-icon\\\"\\n                    />\\n                    {{ $tc('sw-media.sidebar.actions.replace') }}\\n                </li>\\n                {% endblock %}\\n\\n                \\n                {% block sw_media_quickinfo_quickactions_download %}\\n                <li\\n                    v-if=\\\"item.hasFile\\\"\\n                    class=\\\"sw-media-sidebar__quickaction quickaction--download\\\"\\n                >\\n                    <sw-external-link\\n                        class=\\\"sw-media-sidebar__quickaction\\\"\\n                        :href=\\\"item.url\\\"\\n                        download\\n                    >\\n\\n                        <sw-icon\\n                            small\\n                            name=\\\"regular-cloud-download\\\"\\n                            class=\\\"sw-media-sidebar__quickactions-icon\\\"\\n                        />\\n                        {{ $tc('sw-media.sidebar.actions.download') }}\\n                    </sw-external-link>\\n                </li>\\n                {% endblock %}\\n                \\n                {% block sw_media_quickinfo_quickactions_move %}\\n                <li\\n                    v-tooltip=\\\"{\\n                        message: $tc('sw-privileges.tooltip.warning'),\\n                        disabled: acl.can('media.editor'),\\n                        showOnDisabledElements: true\\n                    }\\\"\\n                    class=\\\"quickaction--move\\\"\\n                    :class=\\\"quickActionClasses(!acl.can('media.editor'))\\\"\\n                    role=\\\"button\\\"\\n                    tabindex=\\\"0\\\"\\n                    @click=\\\"openModalMove\\\"\\n                    @keydown.enter=\\\"openModalMove\\\"\\n                >\\n\\n                    <sw-icon\\n                        small\\n                        name=\\\"regular-file-export\\\"\\n                        class=\\\"sw-media-sidebar__quickactions-icon\\\"\\n                    />\\n                    {{ $tc('sw-media.sidebar.actions.move') }}\\n                </li>\\n                {% endblock %}\\n\\n                \\n                {% block sw_media_quickinfo_quickactions_copy_link %}\\n                <li\\n                    v-if=\\\"item.hasFile\\\"\\n                    class=\\\"sw-media-sidebar__quickaction quickaction--copy-link\\\"\\n                    role=\\\"button\\\"\\n                    tabindex=\\\"0\\\"\\n                    @click=\\\"copyLinkToClipboard\\\"\\n                    @keydown.enter=\\\"copyLinkToClipboard\\\"\\n                >\\n\\n                    <sw-icon\\n                        small\\n                        name=\\\"regular-link\\\"\\n                        class=\\\"sw-media-sidebar__quickactions-icon\\\"\\n                    />\\n                    {{ $tc('sw-media.sidebar.actions.copyLink') }}\\n                </li>\\n                {% endblock %}\\n\\n                \\n                {% block sw_media_quickinfo_quickactions_delete %}\\n                <li\\n                    v-if=\\\"!item.private\\\"\\n                    v-tooltip=\\\"{\\n                        message: $tc('sw-privileges.tooltip.warning'),\\n                        disabled: acl.can('media.deleter'),\\n                        showOnDisabledElements: true\\n                    }\\\"\\n                    class=\\\"quickaction--delete\\\"\\n                    :class=\\\"quickActionClasses(!acl.can('media.deleter'))\\\"\\n                    role=\\\"button\\\"\\n                    tabindex=\\\"0\\\"\\n                    @click=\\\"openModalDelete\\\"\\n                    @keydown.enter=\\\"openModalDelete\\\"\\n                >\\n                    <sw-icon\\n                        small\\n                        name=\\\"regular-trash\\\"\\n                        class=\\\"sw-media-sidebar__quickactions-icon is--danger\\\"\\n                    />\\n                    {{ $tc('sw-media.sidebar.actions.delete') }}\\n                </li>\\n                {% endblock %}\\n            </ul>\\n            {% endblock %}\\n        </template>\\n    </sw-media-collapse>\\n    {% endblock %}\\n\\n    \\n    {% block sw_media_quickinfo_preview %}\\n    <sw-media-collapse\\n        v-if=\\\"item.hasFile\\\"\\n        :expand-on-loading=\\\"true\\\"\\n        :title=\\\"$tc('sw-media.sidebar.sections.preview')\\\"\\n    >\\n\\n        \\n        {% block sw_media_quickinfo_preview_content %}\\n        <template #content>\\n            <div>\\n                \\n                {% block sw_media_quickinfo_preview_item %}\\n                <sw-media-preview-v2\\n                    class=\\\"sw-media-quickinfo__media-preview\\\"\\n                    :source=\\\"item.id\\\"\\n                    :show-controls=\\\"true\\\"\\n                    :use-thumbnails=\\\"false\\\"\\n                />\\n                {% endblock %}\\n            </div>\\n        </template>\\n        {% endblock %}\\n    </sw-media-collapse>\\n    {% endblock %}\\n\\n    \\n    {% block sw_media_quickinfo_metadata %}\\n    <sw-media-collapse\\n        v-if=\\\"item.hasFile\\\"\\n        :expand-on-loading=\\\"true\\\"\\n        :title=\\\"$tc('sw-media.sidebar.sections.metadata')\\\"\\n    >\\n\\n        \\n        {% block sw_media_quickinfo_metadata_content %}\\n        <template #content>\\n            <dl class=\\\"sw-media-sidebar__metadata-list\\\">\\n                \\n                {% block sw_media_quickinfo_metadata_content_base %}\\n                <sw-media-quickinfo-metadata-item\\n                    class=\\\"sw-media-quickinfo-metadata-name\\\"\\n                    :class=\\\"fileNameClasses\\\"\\n                    :label-name=\\\"$tc('sw-media.sidebar.metadata.name')\\\"\\n                    :truncated=\\\"false\\\"\\n                >\\n\\n                    <sw-confirm-field\\n                        v-if=\\\"editable\\\"\\n                        ref=\\\"inlineEditFieldName\\\"\\n                        class=\\\"sw-media-quickinfo-metadata-name\\\"\\n                        :disabled=\\\"!acl.can('media.editor')\\\"\\n                        compact\\n                        :value=\\\"item.fileName\\\"\\n                        :error=\\\"fileNameError\\\"\\n                        @input=\\\"onChangeFileName\\\"\\n                        @remove-error=\\\"onRemoveFileNameError\\\"\\n                    /><template v-else>\\n                        {{ item.fileName }}\\n                    </template>\\n                </sw-media-quickinfo-metadata-item>\\n\\n                <sw-media-quickinfo-metadata-item\\n                    class=\\\"sw-media-quickinfo-metadata-file-type\\\"\\n                    :label-name=\\\"$tc('sw-media.sidebar.metadata.fileType')\\\"\\n                >\\n                    {{ item.fileExtension.toUpperCase() }}\\n                </sw-media-quickinfo-metadata-item>\\n\\n                <sw-media-quickinfo-metadata-item\\n                    class=\\\"sw-media-quickinfo-metadata-alt-field\\\"\\n                    :label-name=\\\"$tc('sw-media.sidebar.metadata.altText')\\\"\\n                    :truncated=\\\"false\\\"\\n                >\\n\\n                    <sw-confirm-field\\n                        v-if=\\\"editable\\\"\\n                        ref=\\\"inlineEditFieldAlt\\\"\\n                        :disabled=\\\"!acl.can('media.editor')\\\"\\n                        compact\\n                        :placeholder=\\\"placeholder(item, 'alt', $tc('sw-media.sidebar.metadata.altText'))\\\"\\n                        :value=\\\"item.alt\\\"\\n                        @input=\\\"onSubmitAltText\\\"\\n                    /><template v-else>\\n                        {{ placeholder(item, 'alt') }}\\n                    </template>\\n                </sw-media-quickinfo-metadata-item>\\n\\n                <sw-media-quickinfo-metadata-item\\n                    class=\\\"sw-media-quickinfo-metadata-alt-field\\\"\\n                    :label-name=\\\"$tc('sw-media.sidebar.metadata.title')\\\"\\n                    :truncated=\\\"false\\\"\\n                >\\n\\n                    <sw-confirm-field\\n                        v-if=\\\"editable\\\"\\n                        ref=\\\"inlineEditFieldTitle\\\"\\n                        :disabled=\\\"!acl.can('media.editor')\\\"\\n                        compact\\n                        :value=\\\"item.title\\\"\\n                        :placeholder=\\\"placeholder(item, 'title', $tc('sw-media.sidebar.metadata.title'))\\\"\\n                        @input=\\\"onSubmitTitle\\\"\\n                    /><template v-else>\\n                        {{ placeholder(item, 'title') }}\\n                    </template>\\n                </sw-media-quickinfo-metadata-item>\\n\\n                <sw-media-quickinfo-metadata-item\\n                    class=\\\"sw-media-quickinfo-metadata-mimeType\\\"\\n                    :label-name=\\\"$tc('sw-media.sidebar.metadata.mimeType')\\\"\\n                >\\n                    {{ item.mimeType }}\\n                </sw-media-quickinfo-metadata-item>\\n\\n                <sw-media-quickinfo-metadata-item\\n                    class=\\\"sw-media-quickinfo-metadata-size\\\"\\n                    :label-name=\\\"$tc('sw-media.sidebar.metadata.fileSize')\\\"\\n                >\\n                    {{ fileSize }}\\n                </sw-media-quickinfo-metadata-item>\\n\\n                <sw-media-quickinfo-metadata-item\\n                    class=\\\"sw-media-quickinfo-metadata-createdAt\\\"\\n                    :label-name=\\\"$tc('sw-media.sidebar.metadata.createdAt')\\\"\\n                >\\n                    {{ createdAt }}\\n                </sw-media-quickinfo-metadata-item>\\n                {% endblock %}\\n\\n                <template v-if=\\\"item.metaData\\\">\\n                    \\n                    {% block sw_media_quickinfo_metadata_specific_meta_data %}\\n                    <template v-if=\\\"item.mediaType.name === 'IMAGE'\\\">\\n                        \\n                        {% block sw_media_quickinfo_metadata_content_image %}\\n                        <sw-media-quickinfo-metadata-item\\n                            v-if=\\\"item.metaData.width\\\"\\n                            class=\\\"sw-media-quickinfo-metadata-width\\\"\\n                            :label-name=\\\"$tc('sw-media.sidebar.metadata.width')\\\"\\n                        >\\n                            {{ item.metaData.width }}px\\n                        </sw-media-quickinfo-metadata-item>\\n\\n                        <sw-media-quickinfo-metadata-item\\n                            v-if=\\\"item.metaData.height\\\"\\n                            class=\\\"sw-media-quickinfo-metadata-height\\\"\\n                            :label-name=\\\"$tc('sw-media.sidebar.metadata.height')\\\"\\n                        >\\n                            {{ item.metaData.height }}px\\n                        </sw-media-quickinfo-metadata-item>\\n                        {% endblock %}\\n                    </template>\\n                    {% endblock %}\\n                </template>\\n            </dl>\\n        </template>\\n        {% endblock %}\\n    </sw-media-collapse>\\n    {% endblock %}\\n\\n    \\n    {% block sw_media_quickinfo_tags %}\\n    <sw-media-tag\\n        :disabled=\\\"!acl.can('media.editor')\\\"\\n        :media=\\\"item\\\"\\n    />\\n    {% endblock %}\\n\\n    \\n    {% block sw_media_quickinfo_usage %}\\n    <sw-media-collapse\\n        v-if=\\\"editable && item.hasFile\\\"\\n        :expand-on-loading=\\\"true\\\"\\n        :title=\\\"$tc('sw-media.sidebar.sections.usage')\\\"\\n    >\\n\\n        <template #content>\\n            <sw-media-quickinfo-usage :item=\\\"item\\\" />\\n        </template>\\n    </sw-media-collapse>\\n    {% endblock %}\\n\\n    \\n    {% block sw_media_quickinfo_modal_replace %}\\n    <sw-media-modal-replace\\n        v-if=\\\"showModalReplace\\\"\\n        :item-to-replace=\\\"item\\\"\\n        @media-replace-modal-item-replaced=\\\"emitRefreshMediaLibrary\\\"\\n        @media-replace-modal-close=\\\"closeModalReplace\\\"\\n    />\\n    {% endblock %}\\n\\n    \\n    {% block sw_media_quickinfo_modal_delete %}\\n    <sw-media-modal-delete\\n        v-if=\\\"showModalDelete\\\"\\n        :items-to-delete=\\\"[item]\\\"\\n        @media-delete-modal-close=\\\"closeModalDelete\\\"\\n        @media-delete-modal-items-delete=\\\"deleteSelectedItems\\\"\\n    />\\n    {% endblock %}\\n\\n    \\n    {% block sw_media_quickinfo_move_modal %}\\n    <sw-media-modal-move\\n        v-if=\\\"showModalMove\\\"\\n        :items-to-move=\\\"[item]\\\"\\n        @media-move-modal-close=\\\"closeModalMove\\\"\\n        @media-move-modal-items-move=\\\"onFolderMoved\\\"\\n    />\\n    {% endblock %}\\n\\n    \\n    {% block sw_media_quickinfo_custom_field_sets %}\\n    <sw-custom-field-set-renderer\\n        :disabled=\\\"!acl.can('media.editor')\\\"\\n        :entity=\\\"item\\\"\\n        variant=\\\"media-collapse\\\"\\n        :sets=\\\"customFieldSets\\\"\\n        :is-loading=\\\"isLoading\\\"\\n        :is-save-successful=\\\"isSaveSuccessful\\\"\\n        @save=\\\"onSaveCustomFields(item)\\\"\\n        @process-finish=\\\"saveFinish\\\"\\n    />\\n    {% endblock %}\\n</div>\\n{% endblock %}\\n\";","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../../../../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--15-1!../../../../../../node_modules/css-loader/dist/cjs.js??ref--15-2!../../../../../../node_modules/sass-loader/dist/cjs.js??ref--15-3!./sw-media-quickinfo.scss\");\nif(content.__esModule) content = content.default;\nif(typeof content === 'string') content = [[module.id, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar add = require(\"!../../../../../../node_modules/vue-style-loader/lib/addStylesClient.js\").default\nvar update = add(\"566b4f36\", content, true, {});"],"sourceRoot":""}