{"version":3,"sources":["webpack:///./src/module/sw-settings-tag/page/sw-settings-tag-list/sw-settings-tag-list.scss","webpack:///./src/module/sw-settings-tag/page/sw-settings-tag-list/index.js","webpack:///./src/module/sw-settings-tag/page/sw-settings-tag-list/sw-settings-tag-list.html.twig"],"names":["content","__esModule","default","module","i","locals","exports","add","Mixin","Shopware","Criteria","Data","template","inject","mixins","getByName","data","tags","sortBy","isLoading","sortDirection","showDeleteModal","showDuplicateModal","showBulkMergeModal","duplicateName","showDetailModal","detailProperty","detailEntity","assignmentFilter","emptyFilter","duplicateFilter","bulkMergeProgress","isRunning","currentAssignment","progress","total","metaInfo","title","this","$createTitle","computed","tagRepository","repositoryFactory","create","tagDefinition","EntityDefinition","get","assignmentProperties","properties","Object","entries","forEach","_ref","_ref2","_slicedToArray","propertyName","relation","push","tagCriteria","criteria","page","limit","setTerm","term","setAggregations","naturalSort","sorting","sort","includes","field","type","addSorting","tagColumns","_this","columns","property","dataIndex","label","routerLink","width","primary","allowResize","concat","$tc","sortable","assignmentFilterOptions","_this2","options","_ref3","_ref4","value","a","b","hasAssignmentFilter","length","filterCount","count","methods","_ref5","_ref6","addAggregation","terms","getList","_this$term","_this3","$refs","swCardFilter","tagApiService","filterIds","parse","then","_ref7","ids","setIds","setTotalCountMode","aggregations","associations","search","items","sortByIdsOrder","catch","indexOf","id","getCounts","_this4","counts","_ref8","_ref9","countBucket","buckets","filter","bucket","key","getPropertyCounting","onDelete","onCloseDeleteModal","onConfirmDelete","_this5","$nextTick","delete","onDuplicate","item","name","onCloseDuplicateModal","onConfirmDuplicate","_this6","behavior","cloneChildren","overwrites","clone","Context","api","createNotificationError","message","onDetail","entity","onCloseDetailModal","onCloseBulkMergeModal","onMergeTags","selection","_this7","merge","keys","swSettingsTagGrid","resetSelection","onFilter","getBulkMergeMessageGlue","onSaveFinish","_this8","resetFilters"],"mappings":"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","file":"static/js/b18ef7af90be040d9162.js","sourcesContent":["// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../../../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--15-1!../../../../../node_modules/css-loader/dist/cjs.js??ref--15-2!../../../../../node_modules/sass-loader/dist/cjs.js??ref--15-3!./sw-settings-tag-list.scss\");\nif(content.__esModule) content = content.default;\nif(typeof content === 'string') content = [[module.id, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar add = require(\"!../../../../../node_modules/vue-style-loader/lib/addStylesClient.js\").default\nvar update = add(\"bc8ce026\", content, true, {});","/**\n * @package inventory\n */\nimport template from './sw-settings-tag-list.html.twig';\nimport './sw-settings-tag-list.scss';\n\nconst { Mixin } = Shopware;\nconst { Criteria } = Shopware.Data;\n\n// eslint-disable-next-line sw-deprecation-rules/private-feature-declarations\nexport default {\n    template,\n\n    inject: ['repositoryFactory', 'acl', 'tagApiService'],\n\n    mixins: [\n        Mixin.getByName('listing'),\n        Mixin.getByName('notification'),\n    ],\n\n    data() {\n        return {\n            tags: null,\n            sortBy: 'name',\n            isLoading: false,\n            sortDirection: 'ASC',\n            showDeleteModal: false,\n            showDuplicateModal: false,\n            showBulkMergeModal: false,\n            duplicateName: null,\n            showDetailModal: false,\n            detailProperty: null,\n            detailEntity: null,\n            assignmentFilter: null,\n            emptyFilter: false,\n            duplicateFilter: false,\n            bulkMergeProgress: {\n                isRunning: false,\n                currentAssignment: null,\n                progress: 0,\n                total: 0,\n            },\n        };\n    },\n\n    metaInfo() {\n        return {\n            title: this.$createTitle(),\n        };\n    },\n\n    computed: {\n        tagRepository() {\n            return this.repositoryFactory.create('tag');\n        },\n\n        tagDefinition() {\n            return Shopware.EntityDefinition.get('tag');\n        },\n\n        assignmentProperties() {\n            const properties = [];\n\n            Object.entries(this.tagDefinition.properties).forEach(([propertyName, property]) => {\n                if (property.relation !== 'many_to_many') {\n                    return;\n                }\n\n                properties.push(propertyName);\n            });\n\n            return properties;\n        },\n\n        tagCriteria() {\n            const criteria = new Criteria(this.page, this.limit);\n\n            criteria.setTerm(this.term);\n\n            this.setAggregations(criteria);\n\n            const naturalSort = this.sortBy === 'createdAt';\n            const sorting = Criteria.sort(this.sortBy, this.sortDirection, naturalSort);\n\n            if (this.assignmentProperties.includes(this.sortBy)) {\n                sorting.field += '.id';\n                sorting.type = 'count';\n            }\n            criteria.addSorting(sorting);\n\n            return criteria;\n        },\n\n        tagColumns() {\n            const columns = [{\n                property: 'name',\n                dataIndex: 'name',\n                label: 'sw-settings-tag.list.columnName',\n                routerLink: 'sw.settings.tag.detail',\n                width: '200px',\n                primary: true,\n                allowResize: true,\n            }];\n\n            this.assignmentProperties.forEach((propertyName) => {\n                columns.push({\n                    property: `${propertyName}`,\n                    label: this.$tc(`sw-settings-tag.list.assignments.header.${propertyName}`),\n                    width: '250px',\n                    allowResize: true,\n                    sortable: true,\n                });\n            });\n\n            return columns;\n        },\n\n        assignmentFilterOptions() {\n            const options = [];\n\n            Object.entries(this.tagDefinition.properties).forEach(([propertyName, property]) => {\n                if (property.relation !== 'many_to_many') {\n                    return;\n                }\n\n                options.push({\n                    value: propertyName,\n                    label: this.$tc(`sw-settings-tag.list.assignments.filter.${propertyName}`),\n                });\n            });\n            options.sort((a, b) => {\n                if (a.label > b.label) { return 1; }\n                if (b.label > a.label) { return -1; }\n                return 0;\n            });\n\n            return options;\n        },\n\n        hasAssignmentFilter() {\n            return this.assignmentFilter && this.assignmentFilter.length > 0;\n        },\n\n        filterCount() {\n            let count = 0;\n\n            if (this.hasAssignmentFilter || this.emptyFilter) {\n                count += 1;\n            }\n\n            if (this.duplicateFilter) {\n                count += 1;\n            }\n\n            return count;\n        },\n    },\n\n    methods: {\n        setAggregations(criteria) {\n            Object.entries(this.tagDefinition.properties).forEach(([propertyName, property]) => {\n                if (property.relation !== 'many_to_many') {\n                    return;\n                }\n\n                criteria.addAggregation(\n                    Criteria.terms(\n                        propertyName,\n                        'id',\n                        null,\n                        null,\n                        Criteria.count(propertyName, `tag.${propertyName}.id`),\n                    ),\n                );\n            });\n        },\n\n        getList() {\n            this.isLoading = true;\n\n            if (this.$refs.swCardFilter && this.$refs.swCardFilter.term !== this.term) {\n                this.$refs.swCardFilter.term = this.term ?? '';\n            }\n\n            if (this.duplicateFilter || this.emptyFilter || this.hasAssignmentFilter) {\n                this.tagApiService.filterIds(this.tagCriteria.parse(), {\n                    duplicateFilter: this.duplicateFilter,\n                    emptyFilter: this.emptyFilter,\n                    assignmentFilter: this.assignmentFilter,\n                }).then(({ total, ids }) => {\n                    this.total = total;\n\n                    if (total === 0) {\n                        this.tags = null;\n                        this.isLoading = false;\n\n                        return;\n                    }\n\n                    const criteria = new Criteria(1, this.limit);\n                    criteria.setIds(ids);\n                    criteria.setTotalCountMode(0);\n                    criteria.aggregations = this.tagCriteria.aggregations;\n                    criteria.associations = this.tagCriteria.associations;\n\n                    this.tagRepository.search(criteria).then((items) => {\n                        items.total = total;\n                        this.tags = this.sortByIdsOrder(items, ids);\n                        this.isLoading = false;\n\n                        return items;\n                    }).catch(() => {\n                        this.isLoading = false;\n                    });\n                }).catch(() => {\n                    this.isLoading = false;\n                });\n\n                return;\n            }\n\n            this.tagRepository.search(this.tagCriteria).then((items) => {\n                this.total = items.total;\n                this.tags = items;\n                this.isLoading = false;\n\n                return items;\n            }).catch(() => {\n                this.isLoading = false;\n            });\n        },\n\n        sortByIdsOrder(items, ids) {\n            items.sort((a, b) => {\n                if (ids.indexOf(a.id) > ids.indexOf(b.id)) {\n                    return 1;\n                }\n\n                return -1;\n            });\n\n            return items;\n        },\n\n        getCounts(id) {\n            const counts = {};\n\n            Object.entries(this.tagDefinition.properties).forEach(([propertyName, property]) => {\n                if (property.relation === 'many_to_many') {\n                    const countBucket = this.tags.aggregations[propertyName].buckets.filter((bucket) => {\n                        return bucket.key === id;\n                    })[0];\n\n                    if (!countBucket[propertyName] || !countBucket[propertyName].count) {\n                        return;\n                    }\n\n                    counts[propertyName] = countBucket[propertyName].count;\n                }\n            });\n\n            return counts;\n        },\n\n        getPropertyCounting(propertyName, id) {\n            if (!this.tags.aggregations[propertyName]) {\n                return 0;\n            }\n\n            const countBucket = this.tags.aggregations[propertyName].buckets.filter((bucket) => {\n                return bucket.key === id;\n            })[0];\n\n            if (!countBucket || !countBucket[propertyName] || !countBucket[propertyName].count) {\n                return 0;\n            }\n\n            return countBucket[propertyName].count;\n        },\n\n        onDelete(id) {\n            this.showDeleteModal = id;\n        },\n\n        onCloseDeleteModal() {\n            this.showDeleteModal = false;\n        },\n\n        onConfirmDelete(id) {\n            this.showDeleteModal = false;\n            this.$nextTick().then(() => {\n                this.isLoading = true;\n            });\n\n            return this.tagRepository.delete(id).then(() => {\n                this.getList();\n            });\n        },\n\n        onDuplicate(item) {\n            this.showDuplicateModal = item.id;\n            this.duplicateName = `${item.name} ${this.$tc('global.default.copy')}`;\n        },\n\n        onCloseDuplicateModal() {\n            this.showDuplicateModal = false;\n            this.duplicateName = null;\n        },\n\n        onConfirmDuplicate(id) {\n            this.showDuplicateModal = false;\n            this.$nextTick().then(() => {\n                this.isLoading = true;\n            });\n\n            const behavior = {\n                cloneChildren: false,\n                overwrites: {\n                    name: this.duplicateName,\n                },\n            };\n\n            return this.tagRepository.clone(id, Shopware.Context.api, behavior).then(() => {\n                this.duplicateName = null;\n                this.getList();\n            }).catch(() => {\n                this.isLoading = false;\n                this.duplicateName = null;\n\n                this.createNotificationError({\n                    message: this.$tc('global.notification.unspecifiedSaveErrorMessage'),\n                });\n            });\n        },\n\n        onDetail(id, property, entity) {\n            this.showDetailModal = id ?? true;\n\n            if (property && entity) {\n                this.detailProperty = property;\n                this.detailEntity = entity;\n            }\n        },\n\n        onCloseDetailModal() {\n            this.showDetailModal = false;\n            this.detailProperty = null;\n            this.detailEntity = null;\n        },\n\n        onCloseBulkMergeModal() {\n            this.bulkMergeProgress.isRunning = false;\n            this.showBulkMergeModal = false;\n            this.duplicateName = null;\n        },\n\n        onMergeTags(selection) {\n            return this.tagApiService.merge(\n                Object.keys(selection),\n                this.duplicateName,\n                this.tagDefinition.properties,\n                this.bulkMergeProgress,\n            )\n                .then(() => {\n                    this.duplicateName = null;\n                    this.$refs.swSettingsTagGrid.resetSelection();\n\n                    this.bulkMergeProgress.isRunning = false;\n                    this.showBulkMergeModal = false;\n                    this.$nextTick().then(() => {\n                        this.isLoading = true;\n                    });\n\n                    this.onFilter();\n                })\n                .catch(() => {\n                    this.bulkMergeProgress.isRunning = false;\n                    this.createNotificationError({\n                        message: this.$tc('global.notification.unspecifiedSaveErrorMessage'),\n                    });\n                });\n        },\n\n        getBulkMergeMessageGlue(ids, id) {\n            if (ids.length - 1 === ids.indexOf(id)) {\n                return this.bulkMergeProgress.isRunning\n                    ? this.$tc('sw-settings-tag.list.bulkMergeInto')\n                    : this.$tc('sw-settings-tag.list.bulkMergeMessageFinal');\n            }\n\n            if (ids.length - 2 === ids.indexOf(id)) {\n                return this.$tc('sw-settings-tag.list.bulkMergeMessageAnd');\n            }\n\n            return ',';\n        },\n\n        onSaveFinish() {\n            this.onCloseDetailModal();\n\n            this.$nextTick().then(() => {\n                this.getList();\n            });\n        },\n\n        onFilter() {\n            if (this.assignmentFilter && this.emptyFilter) {\n                this.assignmentFilter = null;\n            }\n\n            this.page = 1;\n            this.getList();\n        },\n\n        resetFilters() {\n            this.assignmentFilter = null;\n            this.emptyFilter = false;\n            this.duplicateFilter = false;\n\n            this.onFilter();\n        },\n    },\n};\n","export default \"\\n{% block sw_settings_list %}\\n\\n{% block sw_settings_tag_index %}\\n<sw-page class=\\\"sw-settings-tag-list\\\">\\n    \\n    {% block sw_settings_tag_list_search_bar %}\\n    <template #search-bar>\\n        <sw-search-bar\\n            initial-search-type=\\\"tag\\\"\\n            :placeholder=\\\"$tc('sw-settings-tag.general.placeholderSearchBar')\\\"\\n            :initial-search=\\\"term\\\"\\n            @search=\\\"onSearch\\\"\\n        />\\n    </template>\\n    {% endblock %}\\n\\n    \\n    {% block sw_settings_tag_list_smart_bar_header %}\\n    <template #smart-bar-header>\\n        \\n        {% block sw_settings_tag_list_smart_bar_header_title %}\\n        <h2>\\n            \\n            {% block sw_settings_tag_list_smart_bar_header_title_text %}\\n            {{ $tc('sw-settings.index.title') }} <sw-icon\\n                name=\\\"regular-chevron-right-xs\\\"\\n                small\\n            /> {{ $tc('sw-settings-tag.list.textHeadline') }}\\n            {% endblock %}\\n\\n            \\n            {% block sw_settings_tag_list_smart_bar_header_amount %}\\n            <span\\n                v-if=\\\"!isLoading\\\"\\n                class=\\\"sw-page__smart-bar-amount\\\"\\n            >\\n                ({{ total }})\\n            </span>\\n            {% endblock %}\\n        </h2>\\n        {% endblock %}\\n    </template>\\n    {% endblock %}\\n\\n    \\n    {% block sw_settings_tag_list_smart_bar_actions %}\\n    <template #smart-bar-actions>\\n        \\n        {% block sw_settings_tag_list_smart_bar_actions_add %}\\n        <sw-button\\n            v-tooltip.bottom=\\\"{\\n                message: $tc('sw-privileges.tooltip.warning'),\\n                disabled: acl.can('tag.creator'),\\n                showOnDisabledElements: true\\n            }\\\"\\n            class=\\\"sw-settings-tag-list__button-create\\\"\\n            variant=\\\"primary\\\"\\n            :disabled=\\\"!acl.can('tag.creator')\\\"\\n            @click=\\\"onDetail(null)\\\"\\n        >\\n            {{ $tc('sw-settings-tag.list.buttonAddTag') }}\\n        </sw-button>\\n        {% endblock %}\\n    </template>\\n    {% endblock %}\\n\\n    \\n    {% block sw_settings_tag_list_content %}\\n    <template #content>\\n        <sw-card-view>\\n            \\n            {% block sw_settings_tag_list_content_card %}\\n            <sw-card\\n                class=\\\"sw-settings-tag-list__content\\\"\\n                position-identifier=\\\"sw-settings-tag-list-content\\\"\\n            >\\n                <template #toolbar>\\n                    \\n                    {% block sw_settings_tag_list_grid_toolbar_search %}\\n                    <sw-card-filter\\n                        ref=\\\"swCardFilter\\\"\\n                        :placeholder=\\\"$tc('sw-settings-tag.list.searchPlaceholder')\\\"\\n                        @sw-card-filter-term-change=\\\"onSearch\\\"\\n                    />\\n                    {% endblock %}\\n                    \\n                    {% block sw_settings_tag_list_grid_toolbar_filter %}\\n                    <sw-context-button\\n                        :menu-width=\\\"300\\\"\\n                        :auto-close=\\\"false\\\"\\n                        :auto-close-outside-click=\\\"true\\\"\\n                        :z-index=\\\"1000\\\"\\n                        :additional-context-menu-classes=\\\"{ 'sw-settings-tag-list__filter': true }\\\"\\n                    >\\n                        <template #button>\\n                            \\n                            {% block sw_settings_tag_list_grid_toolbar_filter_menu_trigger %}\\n                            <sw-button\\n                                class=\\\"sw-settings-tag-list__filter-menu-trigger\\\"\\n                                size=\\\"small\\\"\\n                            >\\n                                <sw-icon\\n                                    name=\\\"regular-filter-s\\\"\\n                                    size=\\\"16\\\"\\n                                />\\n                                {{ $tc('sw-settings-tag.list.filter') }}\\n                            </sw-button>\\n                            <i\\n                                v-if=\\\"filterCount > 0\\\"\\n                                class=\\\"filter-badge\\\"\\n                            >\\n                                {{ filterCount }}\\n                            </i>\\n                            {% endblock %}\\n                        </template>\\n\\n                        \\n                        {% block sw_settings_tag_list_grid_toolbar_filter_header %}\\n                        <h3>{{ $tc('sw-settings-tag.list.filter') }}</h3>\\n                        {% endblock %}\\n\\n                        \\n                        {% block sw_settings_tag_list_grid_toolbar_filter_divider %}\\n                        <sw-context-menu-divider />\\n                        {% endblock %}\\n\\n                        \\n                        {% block sw_settings_tag_list_grid_toolbar_filter_duplicate %}\\n                        <sw-switch-field\\n                            {% if VUE3 %}\\n                            v-model:value=\\\"duplicateFilter\\\"\\n                            {% else %}\\n                            v-model=\\\"duplicateFilter\\\"\\n                            {% endif %}\\n                            :label=\\\"$tc('sw-settings-tag.list.filterDuplicate')\\\"\\n                            {% if VUE3 %}\\n                            @update:value=\\\"onFilter\\\"\\n                            {% else %}\\n                            @change=\\\"onFilter\\\"\\n                            {% endif %}\\n                        />\\n                        {% endblock %}\\n\\n                        \\n                        {% block sw_settings_tag_list_grid_toolbar_filter_empty %}\\n                        <sw-switch-field\\n                            {% if VUE3 %}\\n                            v-model:value=\\\"emptyFilter\\\"\\n                            {% else %}\\n                            v-model=\\\"emptyFilter\\\"\\n                            {% endif %}\\n                            :label=\\\"$tc('sw-settings-tag.list.filterEmpty')\\\"\\n                            {% if VUE3 %}\\n                            @update:value=\\\"onFilter\\\"\\n                            {% else %}\\n                            @change=\\\"onFilter\\\"\\n                            {% endif %}\\n                        />\\n                        {% endblock %}\\n\\n                        \\n                        {% block sw_settings_tag_list_grid_toolbar_filter_assignment %}\\n                        <sw-multi-select\\n                            {% if VUE3 %}\\n                            v-model:value=\\\"assignmentFilter\\\"\\n                            {% else %}\\n                            v-model=\\\"assignmentFilter\\\"\\n                            {% endif %}\\n                            class=\\\"sw-settings-tag-list__filter-assignment-select\\\"\\n                            :label=\\\"$tc('sw-settings-tag.list.filterAssignemnt')\\\"\\n                            :placeholder=\\\"$tc('sw-settings-tag.list.placeholderFilterAssignemnt')\\\"\\n                            :options=\\\"assignmentFilterOptions\\\"\\n                            :disabled=\\\"emptyFilter\\\"\\n                            {% if VUE3 %}\\n                            @update:value=\\\"onFilter\\\"\\n                            {% else %}\\n                            @change=\\\"onFilter\\\"\\n                            {% endif %}\\n                        />\\n                        {% endblock %}\\n\\n                        \\n                        {% block sw_settings_tag_list_grid_toolbar_filter_footer %}\\n                        <div class=\\\"sw-settings-tag-list__filter-footer\\\">\\n                            <a\\n                                href=\\\"#\\\"\\n                                @click.prevent=\\\"resetFilters\\\"\\n                            >\\n                                {{ $tc('sw-settings-tag.list.resetFilters') }}\\n                            </a>\\n                        </div>\\n                        {% endblock %}\\n                    </sw-context-button>\\n                    {% endblock %}\\n                </template>\\n\\n                <template #grid>\\n                    \\n                    {% block sw_settings_tag_list_grid %}\\n                    <sw-entity-listing\\n                        v-if=\\\"isLoading || total > 0\\\"\\n                        ref=\\\"swSettingsTagGrid\\\"\\n                        class=\\\"sw-settings-tag-list__grid\\\"\\n                        identifier=\\\"sw-settings-tag-list\\\"\\n                        :items=\\\"tags\\\"\\n                        :columns=\\\"tagColumns\\\"\\n                        :repository=\\\"tagRepository\\\"\\n                        :full-page=\\\"total > 0\\\"\\n                        :plain-appearance=\\\"true\\\"\\n                        :compact-mode=\\\"true\\\"\\n                        :show-selection=\\\"true\\\"\\n                        :is-loading=\\\"isLoading\\\"\\n                        :allow-view=\\\"acl.can('tag.viewer')\\\"\\n                        :allow-edit=\\\"acl.can('tag.editor')\\\"\\n                        :allow-delete=\\\"acl.can('tag.deleter')\\\"\\n                        :disable-data-fetching=\\\"true\\\"\\n                        :sort-by=\\\"sortBy\\\"\\n                        :sort-direction=\\\"sortDirection\\\"\\n                        @column-sort=\\\"onSortColumn\\\"\\n                        @page-change=\\\"onPageChange\\\"\\n                    >\\n                        \\n                        {% block sw_settings_tag_list_grid_bulk %}\\n                        <template #bulk-additional=\\\"{ selectionCount }\\\">\\n                            \\n                            <a\\n                                v-if=\\\"selectionCount > 1 && acl.can('tag.creator') && acl.can('tag.deleter')\\\"\\n                                class=\\\"link\\\"\\n                                role=\\\"button\\\"\\n                                tabindex=\\\"0\\\"\\n                                @click=\\\"showBulkMergeModal = true\\\"\\n                            >\\n                                {{ $tc('sw-settings-tag.list.bulkMerge') }}\\n                            </a>\\n                        </template>\\n                        {% endblock %}\\n\\n                        \\n                        {% block sw_settings_tag_list_grid_bulk_merge_modal %}\\n                        <template #bulk-modals-additional=\\\"{ selection, ids }\\\">\\n                            <sw-modal\\n                                v-if=\\\"showBulkMergeModal\\\"\\n                                variant=\\\"large\\\"\\n                                :title=\\\"$tc('sw-settings-tag.list.bulkMergeTitle')\\\"\\n                                @modal-close=\\\"onCloseBulkMergeModal\\\"\\n                            >\\n                                <slot\\n                                    name=\\\"bulk-modal-merge-confirm-text\\\"\\n                                    v-bind=\\\"{ selection, ids }\\\"\\n                                >\\n                                    <sw-alert variant=\\\"info\\\">\\n                                        {{ $tc('sw-settings-tag.list.bulkMergeNotice') }}\\n                                    </sw-alert>\\n                                    <p class=\\\"sw-settings-tag-list__confirm-bulk-merge-text\\\">\\n                                        <span v-if=\\\"!bulkMergeProgress.isRunning\\\">\\n                                            {{ $tc('sw-settings-tag.list.bulkMergeMessage') }}\\n                                        </span>\\n                                        <span v-else>\\n                                            {{ $tc('sw-settings-tag.list.bulkMerging') }}\\n                                        </span>\\n                                        <span\\n                                            v-for=\\\"(id, index) in ids\\\"\\n                                            :key=\\\"index\\\"\\n                                            class=\\\"confirm-bulk-merge-text__label\\\"\\n                                        >\\n                                            <sw-label v-tooltip=\\\"{ message: selection[id].name }\\\">\\n                                                {{ selection[id].name }}\\n                                            </sw-label>&nbsp;{{ getBulkMergeMessageGlue(ids, id) }}\\n                                        </span>\\n                                        <span\\n                                            v-if=\\\"bulkMergeProgress.isRunning\\\"\\n                                            class=\\\"confirm-bulk-merge-text__label-into\\\"\\n                                        >\\n                                            <sw-label v-tooltip=\\\"{ message: duplicateName }\\\">{{ duplicateName }}</sw-label>&nbsp;.\\n                                        </span>\\n                                    </p>\\n                                    <p v-if=\\\"bulkMergeProgress.isRunning\\\">\\n                                        {{ $tc('sw-settings-tag.list.bulkMergeTimeNotice') }}\\n                                    </p>\\n                                    <p v-else>\\n                                        {{ $tc('sw-settings-tag.list.bulkMergeNoUndoNotice') }}\\n                                    </p>\\n                                </slot>\\n\\n                                \\n                                {% block sw_settings_tag_list_merge_modal_confirm_name_input %}\\n                                <slot name=\\\"bulk-modal-merge-confirm-name-input\\\">\\n                                    <p\\n                                        v-if=\\\"!bulkMergeProgress.isRunning\\\"\\n                                        class=\\\"sw-settings-tag-list__confirm-bulk-merge-name-input\\\"\\n                                    >\\n                                        <sw-text-field\\n                                            {% if VUE3 %}\\n                                            v-model:value=\\\"duplicateName\\\"\\n                                            {% else %}\\n                                            v-model=\\\"duplicateName\\\"\\n                                            {% endif %}\\n                                            :label=\\\"$tc('sw-settings-tag.list.bulkMergeName')\\\"\\n                                            :placeholder=\\\"$tc('sw-settings-tag.list.placeholderTagName')\\\"\\n                                            maxlength=\\\"255\\\"\\n                                            required\\n                                        />\\n                                    </p>\\n                                </slot>\\n                                {% endblock %}\\n\\n                                \\n                                {% block sw_settings_tag_list_merge_modal_progress %}\\n                                <slot name=\\\"bulk-modal-merge-progress\\\">\\n                                    <div\\n                                        v-if=\\\"bulkMergeProgress.isRunning\\\"\\n                                        class=\\\"sw-settings-tag-list__bulk-merge-progress\\\"\\n                                    >\\n                                        <sw-loader\\n                                            class=\\\"sw-settings-tag-list__bulk-merge-progress-icon\\\"\\n                                            size=\\\"44px\\\"\\n                                        />\\n                                    </div>\\n                                </slot>\\n                                {% endblock %}\\n\\n                                <template #modal-footer>\\n                                    <slot\\n                                        name=\\\"bulk-modal-merge-footer\\\"\\n                                        v-bind=\\\"{ selection }\\\"\\n                                    >\\n                                        <sw-button\\n                                            size=\\\"small\\\"\\n                                            @click=\\\"onCloseBulkMergeModal\\\"\\n                                        >\\n                                            {{ $tc('global.default.cancel') }}\\n                                        </sw-button>\\n\\n                                        <sw-button\\n                                            variant=\\\"primary\\\"\\n                                            size=\\\"small\\\"\\n                                            :is-loading=\\\"isLoading\\\"\\n                                            :disabled=\\\"!duplicateName || bulkMergeProgress.isRunning\\\"\\n                                            @click=\\\"onMergeTags(selection)\\\"\\n                                        >\\n                                            {{ $tc('sw-settings-tag.list.bulkMerge') }}\\n                                        </sw-button>\\n                                    </slot>\\n                                </template>\\n                            </sw-modal>\\n                        </template>\\n                        {% endblock %}\\n\\n                        \\n                        {% block sw_settings_tag_list_grid_column_default_name %}\\n                        <template #column-name=\\\"{ item, column }\\\">\\n                            <sw-label v-tooltip=\\\"{ message: item.name }\\\">\\n                                {{ item.name }}\\n                            </sw-label>\\n                        </template>\\n                        {% endblock %}\\n\\n                        \\n                        {% block sw_settings_tag_list_grid_column_assignments %}\\n                        <template\\n                            v-for=\\\"(propertyName, index) in assignmentProperties\\\"\\n                            {% if VUE3 %}\\n                            :key=\\\"index\\\"\\n                            {% endif %}\\n                            #[`column-${propertyName}`]=\\\"{ item }\\\"\\n                        >\\n                            <span\\n                                {% if VUE2 %}\\n                                :key=\\\"index\\\"\\n                                {% endif %}\\n                                class=\\\"sw-data-grid__cell-value\\\"\\n                            >\\n                                {{ getPropertyCounting(propertyName, item.id) }}\\n                                {{ $tc(`sw-settings-tag.list.assignments.content.${propertyName}`, getPropertyCounting(propertyName, item.id)) }}\\n                            </span>\\n                        </template>\\n                        {% endblock %}\\n\\n                        \\n                        {% block sw_settings_tag_list_grid_columns_actions %}\\n                        <template #actions=\\\"{ item }\\\">\\n                            \\n                            {% block sw_settings_tag_list_grid_columns_actions_edit %}\\n                            <sw-context-menu-item\\n                                class=\\\"sw-settings-tag-list__edit-action\\\"\\n                                :disabled=\\\"!acl.can('tag.editor')\\\"\\n                                @click=\\\"onDetail(item.id)\\\"\\n                            >\\n                                {{ $tc('sw-settings-tag.list.contextMenuEdit') }}\\n                            </sw-context-menu-item>\\n                            {% endblock %}\\n\\n                            \\n                            {% block sw_settings_tag_list_grid_columns_actions_duplicate %}\\n                            <sw-context-menu-item\\n                                :disabled=\\\"!acl.can('tag.creator')\\\"\\n                                class=\\\"sw-settings-tag-list__duplicate-action\\\"\\n                                @click=\\\"onDuplicate(item)\\\"\\n                            >\\n                                {{ $tc('sw-settings-tag.list.contextMenuDuplicate') }}\\n                            </sw-context-menu-item>\\n                            {% endblock %}\\n\\n                            \\n                            {% block sw_settings_tag_list_grid_columns_actions_delete %}\\n                            <sw-context-menu-item\\n                                class=\\\"sw-settings-tag-list__delete-action\\\"\\n                                variant=\\\"danger\\\"\\n                                :disabled=\\\"!acl.can('tag.deleter')\\\"\\n                                @click=\\\"onDelete(item.id)\\\"\\n                            >\\n                                {{ $tc('sw-settings-tag.list.contextMenuDelete') }}\\n                            </sw-context-menu-item>\\n                            {% endblock %}\\n                        </template>\\n                        {% endblock %}\\n\\n                        \\n                        {% block sw_settings_tag_list_grid_action_modals %}\\n                        <template #action-modals=\\\"{ item }\\\">\\n                            \\n                            {% block sw_settings_tag_list_delete_modal %}\\n                            <sw-modal\\n                                v-if=\\\"showDeleteModal === item.id\\\"\\n                                :title=\\\"$tc('global.default.warning')\\\"\\n                                variant=\\\"small\\\"\\n                                @modal-close=\\\"onCloseDeleteModal\\\"\\n                            >\\n                                \\n                                {% block sw_settings_tag_list_delete_modal_confirm_delete_text %}\\n                                <p class=\\\"sw-settings-tag-list__confirm-delete-text\\\">\\n                                    {{ $tc('sw-settings-tag.list.textDeleteConfirm', 0, { name: item.name }) }}\\n                                </p>\\n                                {% endblock %}\\n\\n                                \\n                                {% block sw_settings_tag_list_delete_modal_footer %}\\n                                <template #modal-footer>\\n                                    \\n                                    {% block sw_settings_tag_list_delete_modal_cancel %}\\n                                    <sw-button\\n                                        size=\\\"small\\\"\\n                                        @click=\\\"onCloseDeleteModal\\\"\\n                                    >\\n                                        {{ $tc('sw-settings-tag.list.buttonCancel') }}\\n                                    </sw-button>\\n                                    {% endblock %}\\n\\n                                    \\n                                    {% block sw_settings_tag_list_delete_modal_confirm %}\\n                                    <sw-button\\n                                        variant=\\\"danger\\\"\\n                                        size=\\\"small\\\"\\n                                        @click=\\\"onConfirmDelete(item.id)\\\"\\n                                    >\\n                                        {{ $tc('sw-settings-tag.list.buttonDelete') }}\\n                                    </sw-button>\\n                                    {% endblock %}\\n                                </template>\\n                                {% endblock %}\\n                            </sw-modal>\\n                            {% endblock %}\\n\\n                            \\n                            {% block sw_settings_tag_list_duplicate_modal %}\\n                            <sw-modal\\n                                v-if=\\\"showDuplicateModal === item.id\\\"\\n                                :title=\\\"$tc('sw-settings-tag.list.contextMenuDuplicate')\\\"\\n                                variant=\\\"small\\\"\\n                                @modal-close=\\\"onCloseDuplicateModal\\\"\\n                            >\\n                                \\n                                {% block sw_settings_tag_list_delete_modal_confirm_duplicate_input %}\\n                                <p class=\\\"sw-settings-tag-list__confirm-duplicate-input\\\">\\n                                    <sw-text-field\\n                                        {% if VUE3 %}\\n                                        v-model:value=\\\"duplicateName\\\"\\n                                        {% else %}\\n                                        v-model=\\\"duplicateName\\\"\\n                                        {% endif %}\\n                                        :label=\\\"$tc('sw-settings-tag.list.columnName')\\\"\\n                                        :placeholder=\\\"$tc('sw-settings-tag.list.placeholderTagName')\\\"\\n                                        maxlength=\\\"255\\\"\\n                                        required\\n                                    />\\n                                </p>\\n                                {% endblock %}\\n\\n                                \\n                                {% block sw_settings_tag_list_duplicate_modal_footer %}\\n                                <template #modal-footer>\\n                                    \\n                                    {% block sw_settings_tag_list_duplicate_modal_cancel %}\\n                                    <sw-button\\n                                        size=\\\"small\\\"\\n                                        @click=\\\"onCloseDuplicateModal\\\"\\n                                    >\\n                                        {{ $tc('sw-settings-tag.list.buttonCancel') }}\\n                                    </sw-button>\\n                                    {% endblock %}\\n\\n                                    \\n                                    {% block sw_settings_tag_list_duplicate_modal_confirm %}\\n                                    <sw-button\\n                                        variant=\\\"primary\\\"\\n                                        size=\\\"small\\\"\\n                                        :disabled=\\\"!duplicateName\\\"\\n                                        @click=\\\"onConfirmDuplicate(item.id)\\\"\\n                                    >\\n                                        {{ $tc('sw-settings-tag.list.buttonAddTag') }}\\n                                    </sw-button>\\n                                    {% endblock %}\\n                                </template>\\n                                {% endblock %}\\n                            </sw-modal>\\n                            {% endblock %}\\n\\n                            \\n                            {% block sw_settings_tag_list_detail_edit_modal %}\\n                            <sw-settings-tag-detail-modal\\n                                v-if=\\\"showDetailModal === item.id\\\"\\n                                :edited-tag=\\\"item\\\"\\n                                :counts=\\\"getCounts(item.id)\\\"\\n                                :property=\\\"detailProperty\\\"\\n                                :entity=\\\"detailEntity\\\"\\n                                @finish=\\\"onSaveFinish\\\"\\n                                @close=\\\"onCloseDetailModal\\\"\\n                            />\\n                            {% endblock %}\\n                        </template>\\n                        {% endblock %}\\n                    </sw-entity-listing>\\n                    {% endblock %}\\n\\n                    \\n                    {% block sw_settings_tag_list_empty_state %}\\n                    <sw-empty-state\\n                        v-else\\n                        :absolute=\\\"false\\\"\\n                        :show-description=\\\"false\\\"\\n                        :title=\\\"$tc('sw-settings-tag.list.titleEmptyStateList')\\\"\\n                    />\\n                    {% endblock %}\\n\\n                    \\n                    {% block sw_settings_tag_list_detail_add_modal %}\\n                    <sw-settings-tag-detail-modal\\n                        v-if=\\\"showDetailModal === true\\\"\\n                        @finish=\\\"onSaveFinish\\\"\\n                        @close=\\\"onCloseDetailModal\\\"\\n                    />\\n                    {% endblock %}\\n                </template>\\n            </sw-card>\\n            {% endblock %}\\n        </sw-card-view>\\n    </template>\\n    {% endblock %}\\n</sw-page>\\n{% endblock %}\\n{% endblock %}\\n\";"],"sourceRoot":""}