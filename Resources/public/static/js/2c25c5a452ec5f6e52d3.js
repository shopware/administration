(window.webpackJsonpAdministration=window.webpackJsonpAdministration||[]).push([[90264],{35468:function(){},90264:function(e,t,s){"use strict";s.r(t),s.d(t,{default:function(){return a}});var n=s(64205);s(33230);let{Criteria:r}=Shopware.Data;var a={template:'\n{% block sw_product_feature_set_card %}\n<sw-card\n    :title="$tc(\'sw-settings-product-feature-sets.valuesCard.cardTitle\')"\n    class="sw-settings-product-feature-sets-values-card"\n    position-identifier="sw-settings-product-feature-sets-values-card"\n    :class="valuesCardClasses"\n    :is-loading="isLoading || valuesLoading || cardLoading"\n>\n\n    <template #grid>\n        <div v-if="!valuesEmpty && !disabled">\n            \n            {% block sw_product_feature_set_toolbar %}\n            <div class="sw-product-feature-set__toolbar">\n\n                \n                {% block sw_product_feature_set_toolbar_container %}\n                <sw-container\n                    columns="1fr 32px minmax(100px, 200px)"\n                    gap="0 10px"\n                >\n\n                    \n                    {% block sw_product_feature_set_toolbar_search %}\n                    <sw-simple-search-field\n                        v-model:value="term"\n                        size="small"\n                        variant="form"\n                        :disabled="!allowEdit"\n                        @search-term-change="onSearch"\n                    />\n                    {% endblock %}\n\n                    \n                    {% block sw_product_feature_set_toolbar_delete %}\n                    <sw-button\n                        :disabled="deleteButtonDisabled || !allowEdit"\n                        square\n                        size="small"\n                        class="sw-product-feature-set__delete-button"\n                        @click="onDeleteFields"\n                    >\n                        <sw-icon\n                            name="regular-trash"\n                            small\n                        />\n                    </sw-button>\n                    {% endblock %}\n\n                    \n                    {% block sw_product_feature_set_toolbar_add %}\n                    <sw-container>\n                        <sw-button\n                            :disabled="isLoading || !allowEdit"\n                            variant="ghost"\n                            size="small"\n                            class="sw-product-feature-set__add-button"\n                            @click="onAddField"\n                        >\n                            {{ $tc(\'sw-settings-product-feature-sets.valuesCard.labelCreateNew\') }}\n                        </sw-button>\n                    </sw-container>\n                    {% endblock %}\n\n                </sw-container>\n                {% endblock %}\n\n            </div>\n            {% endblock %}\n\n            \n            {% block sw_product_feature_set_card_grid %}\n            <sw-data-grid\n                :data-source="values"\n                :columns="getColumns()"\n                :show-selection="allowEdit"\n                :show-actions="false"\n                :is-loading="isLoading"\n                identifier="sw-product-feature-set-grid"\n                @selection-change="onGridSelectionChanged"\n            >\n\n                \n                {% block sw_settings_product_feature_set_card_grid_column_name %}\n                <template #column-name="{ item }">\n                    {{ featureGridTranslationService.getNameTranslation(item) }}\n                </template>\n                {% endblock %}\n\n                \n                {% block sw_settings_product_feature_set_card_grid_column_type %}\n                <template #column-type="{ item }">\n                    {{ featureGridTranslationService.getTypeTranslation(item) }}\n                </template>\n                {% endblock %}\n\n                \n                {% block sw_settings_product_feature_set_card_grid_column_position %}\n                <template #column-position="{ item }">\n                    <sw-data-grid-column-position\n                        ref="columnPosition"\n                        v-model:value="values"\n                        :show-value="false"\n                        :item="item"\n                        :disabled="!allowEdit"\n                        @position-changed="onPositionChange"\n                    />\n                </template>\n                {% endblock %}\n\n            </sw-data-grid>\n            {% endblock %}\n\n        </div>\n    </template>\n\n    \n    {% block sw_product_feature_set_card_empty_state %}\n    <template v-if="valuesEmpty || disabled">\n\n        <div class="sw-settings-product-feature-set-card__empty-state">\n            \n            {% block sw_product_feature_set_card_empty_state_image %}\n            <img\n                :src="assetFilter(\'administration/static/img/empty-states/settings-empty-state.svg\')"\n                alt=""\n            >\n            {% endblock %}\n\n            \n            {% block sw_product_feature_set_card_empty_state_label %}\n            <div class="sw-settings-product-feature-set-card__empty-state--label">\n                <p v-if="disabled">\n                    {{ $tc(\'sw-settings-product-feature-sets.valuesCard.createStateDescription\') }}\n                </p>\n                <p v-else>\n                    {{ $tc(\'sw-settings-product-feature-sets.valuesCard.emptyStateDescription\') }}\n                </p>\n            </div>\n            {% endblock %}\n\n            \n            {% block sw_product_feature_set_card_empty_state_button %}\n            <sw-button\n                variant="ghost"\n                size="small"\n                :disabled="disabled"\n                @click="showModal = true"\n            >\n                {{ $tc(\'sw-settings-product-feature-sets.valuesCard.labelCreateNew\') }}\n            </sw-button>\n            {% endblock %}\n        </div>\n\n    </template>\n    {% endblock %}\n\n    \n    {% block sw_product_feature_set_card_grid_column_modal %}\n    <sw-settings-product-feature-sets-modal\n        v-if="showModal"\n        :product-feature-set="productFeatureSet"\n        @modal-close="onModalClose"\n    />\n    {% endblock %}\n\n</sw-card>\n{% endblock %}\n',inject:["repositoryFactory"],props:{productFeatureSet:{type:Object,required:!0},isLoading:{type:Boolean,required:!0},disabled:{type:Boolean,required:!1,default:!1},allowEdit:{type:Boolean,required:!1,default:!0}},data(){return{valuesLoading:!1,cardLoading:!1,values:[],selection:null,deleteButtonDisabled:!0,term:"",showModal:!1,currentValue:null,translationService:null}},computed:{productFeatureSetRepository(){return this.repositoryFactory.create("product_feature_set")},propertyGroupRepository(){return this.repositoryFactory.create("property_group")},customFieldRepository(){return this.repositoryFactory.create("custom_field")},valuesEmpty(){return 0===this.values.length},valuesCardClasses(){return{"is--empty":this.valuesEmpty}},productFeatureSetCriteria(){let e=new r(1,25);return e.addFilter(r.equals("product_feature_set.id",this.productFeatureSet.id)),e},featureGridTranslationService(){return null===this.translationService&&(this.translationService=new n.Z(this,this.propertyGroupRepository,this.customFieldRepository)),this.translationService},assetFilter(){return Shopware.Filter.getByName("asset")}},created(){this.createdComponent()},methods:{createdComponent(){this.getList()},onAddField(){this.onShowFeatureModal()},onGridSelectionChanged(e,t){this.selection=e,this.deleteButtonDisabled=t<=0},onSearch(){this.doSearch()},doSearch(){this.term||this.getList(),this.values=this.productFeatureSet.features.filter(e=>e.name.match(this.term)||e.type.match(this.term))},getList(){this.valuesLoading=!0,this.values=[],this.productFeatureSet.features&&(this.values=this.productFeatureSet.features,this.term&&this.doSearch()),this.values.sort((e,t)=>e.position-t.position),Promise.all([this.featureGridTranslationService.fetchPropertyGroupEntities(this.values),this.featureGridTranslationService.fetchCustomFieldEntities(this.values)]).then(()=>{this.valuesLoading=!1})},onModalClose(){this.showModal=!1,this.currentValue=null,this.$nextTick(()=>this.getList())},onShowFeatureModal(){this.showModal=!0},onDeleteFields(){if(this.selection){let e=Object.keys(this.selection);this.productFeatureSet.features=this.productFeatureSet.features.filter(t=>!e.includes(t.id)),this.resetPositions(),this.getList()}},onPositionChange(e){this.$set(this.productFeatureSet,"features",e)},resetPositions(){this.productFeatureSet.features.forEach((e,t)=>{e.position=t+1})},getColumns(){return[{property:"name",label:"sw-settings-product-feature-sets.valuesCard.labelValue",primary:!0},{property:"type",label:"sw-settings-product-feature-sets.valuesCard.labelType"},{property:"position",label:"sw-settings-product-feature-sets.valuesCard.labelPosition"}]}}}},64205:function(e,t,s){"use strict";s.d(t,{Z:function(){return r}});let{Criteria:n}=Shopware.Data;class r{constructor(e,t,s){this.component=e,this.propertyGroupRepository=t,this.customFieldRepository=s,this.entities={property:[],customField:[]}}fetchPropertyGroupEntities(e){return this._fetchEntities(e,"property","id",this.propertyGroupRepository)}fetchCustomFieldEntities(e){return this._fetchEntities(e,"customField","name",this.customFieldRepository)}_fetchEntities(e,t,s,r){if(!e||e.length<1)return Promise.resolve();let a=e.filter(e=>e.type===t).map(e=>e[s]);if(a.length<1)return Promise.resolve();let o=new n(1,25);return o.addFilter(n.equalsAny(s,a)),r.search(o,Shopware.Context.api).then(e=>{this.entities[t]=e})}getNameTranslation(e){if("product"===e.type)return this.component.$tc(`sw-settings-product-feature-sets.modal.label.${e.name}`);if("property"===e.type)return this.entities.property.filter(t=>t.id===e.id).map(e=>e.translated.name).pop();if("customField"===e.type){let t=Shopware.State.get("session").currentLocale,s=Shopware.Context.app.fallbackLocale;return this.entities.customField.filter(t=>t.name===e.name).map(e=>e.config.label[t]||e.config.label[s]).pop()}return"referencePrice"===e.type?this.component.$tc("sw-settings-product-feature-sets.modal.label.referencePrice"):""}getTypeTranslation(e){return"product"===e.type?this.component.$tc("sw-settings-product-feature-sets.modal.textProductInfoLabel"):"property"===e.type?this.component.$tc("sw-settings-product-feature-sets.modal.textPropertyLabel"):"customField"===e.type?this.component.$tc("sw-settings-product-feature-sets.modal.textCustomFieldLabel"):"referencePrice"===e.type?this.component.$tc("sw-settings-product-feature-sets.modal.textReferencePriceLabel"):""}}},33230:function(e,t,s){var n=s(35468);n.__esModule&&(n=n.default),"string"==typeof n&&(n=[[e.id,n,""]]),n.locals&&(e.exports=n.locals),s(45346).Z("b480e4ec",n,!0,{})}}]);