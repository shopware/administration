{"version":3,"sources":["webpack:///./src/module/sw-settings-country/component/sw-settings-country-state/sw-settings-country-state.scss","webpack:///./src/module/sw-settings-country/component/sw-settings-country-state/sw-settings-country-state.html.twig","webpack:///./src/module/sw-settings-country/component/sw-settings-country-state/index.js"],"names":["content","__esModule","default","module","i","locals","exports","add","Mixin","Shopware","template","inject","mixins","getByName","props","country","type","Object","required","isLoading","Boolean","countryStateRepository","data","deleteButtonDisabled","term","currentCountryState","countryStateLoading","showEmptyState","computed","stateColumns","this","getStateColumns","countryStates","states","watch","checkEmptyState","mounted","mountedComponent","methods","property","label","$tc","inlineEdit","primary","countryStateSelectionChanged","selection","selectionCount","onSearchCountryState","criteria","setTerm","refreshCountryStateList","onDeleteCountryStates","_this","$refs","countryStateGrid","countryStateIds","keys","length","isNew","forEach","countryStateId","remove","resetSelection","Promise","resolve","syncDeleted","Context","api","then","finally","onAddCountryState","create","onSaveCountryState","countryState","_this2","save","catch","errors","response","code","createNotificationError","message","onCancelCountryState","onClickCountryState","item","copy","id","_isNew","assign","_this3","load","getCountryStateName","_item$translated","translated","name","_this$country","_this$$refs$countrySt","_this$country2","_this$country2$states","total"],"mappings":"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","file":"static/js/3bfb1e9e0b163db1bf9f.js","sourcesContent":["// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../../../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--15-1!../../../../../node_modules/css-loader/dist/cjs.js??ref--15-2!../../../../../node_modules/sass-loader/dist/cjs.js??ref--15-3!./sw-settings-country-state.scss\");\nif(content.__esModule) content = content.default;\nif(typeof content === 'string') content = [[module.id, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar add = require(\"!../../../../../node_modules/vue-style-loader/lib/addStylesClient.js\").default\nvar update = add(\"22778918\", content, true, {});","export default \"\\n{% block sw_settings_country_state_list_card %}\\n<sw-card\\n    v-if=\\\"!isLoading\\\"\\n    position-identifier=\\\"sw-settings-country-state\\\"\\n>\\n    <template #toolbar>\\n        <sw-container\\n            columns=\\\"1fr 32px minmax(100px, 200px)\\\"\\n            gap=\\\"0 10px\\\"\\n        >\\n\\n            \\n            {% block sw_attribute_list_toolbar_searchfield %}\\n            <sw-simple-search-field\\n                v-model=\\\"term\\\"\\n                size=\\\"small\\\"\\n                variant=\\\"form\\\"\\n                @search-term-change=\\\"onSearchCountryState\\\"\\n            />\\n            {% endblock %}\\n\\n            \\n            {% block sw_settings_country_state_list_toolbar_delete %}\\n            <sw-button\\n                v-tooltip.bottom=\\\"{\\n                    message: $tc('sw-privileges.tooltip.warning'),\\n                    disabled: acl.can('country.editor'),\\n                    showOnDisabledElements: true\\n                }\\\"\\n                square\\n                size=\\\"small\\\"\\n                class=\\\"sw-settings-country-state-list__delete-button\\\"\\n                :disabled=\\\"deleteButtonDisabled || !acl.can('country.editor')\\\"\\n                @click=\\\"onDeleteCountryStates\\\"\\n            >\\n                <sw-icon\\n                    name=\\\"regular-trash\\\"\\n                    small\\n                />\\n            </sw-button>\\n            {% endblock %}\\n\\n            \\n            {% block sw_settings_country_state_list_toolbar_add %}\\n            <sw-button\\n                v-tooltip.bottom=\\\"{\\n                    message: $tc('sw-privileges.tooltip.warning'),\\n                    disabled: acl.can('country.editor'),\\n                    showOnDisabledElements: true\\n                }\\\"\\n                class=\\\"sw-settings-country-state__add-country-state-button\\\"\\n                size=\\\"x-small\\\"\\n                variant=\\\"primary\\\"\\n                :disabled=\\\"!acl.can('country.editor')\\\"\\n                @click=\\\"onAddCountryState\\\"\\n            >\\n                {{ $tc('sw-settings-country.detail.buttonAddCountryState') }}\\n            </sw-button>\\n            {% endblock %}\\n\\n        </sw-container>\\n    </template>\\n\\n    <template #grid>\\n\\n        \\n        {% block sw_settings_country_state_list_listing %}\\n        <sw-one-to-many-grid\\n            ref=\\\"countryStateGrid\\\"\\n            class=\\\"sw-settings-country-state-list__content\\\"\\n            :is-loading=\\\"countryStateLoading\\\"\\n            :collection=\\\"country.states\\\"\\n            :full-page=\\\"false\\\"\\n            :local-mode=\\\"country.isNew()\\\"\\n            :columns=\\\"stateColumns\\\"\\n            :allow-delete=\\\"acl.can('country.editor')\\\"\\n            :tooltip-delete=\\\"{\\n                message: $tc('sw-privileges.tooltip.warning'),\\n                disabled: acl.can('country.editor'),\\n                showOnDisabledElements: true\\n            }\\\"\\n            @selection-change=\\\"countryStateSelectionChanged\\\"\\n            @load-finish=\\\"checkEmptyState\\\"\\n        >\\n\\n            <template #column-name=\\\"{ item }\\\">\\n\\n                \\n                {% block sw_settings_country_state_list_listing_column_name %}\\n                <a\\n                    class=\\\"sw-settings-country-state__link\\\"\\n                    role=\\\"button\\\"\\n                    tabindex=\\\"0\\\"\\n                    @click=\\\"onClickCountryState(item)\\\"\\n                    @keydown.enter=\\\"onClickCountryState(item)\\\"\\n                >\\n                    {{ getCountryStateName(item) }}\\n                </a>\\n                {% endblock %}\\n\\n            </template>\\n\\n            <template #more-actions=\\\"{ item }\\\">\\n                \\n                {% block sw_settings_country_state_list_listing_action_edit %}\\n                <sw-context-menu-item\\n                    v-tooltip.top=\\\"{\\n                        message: $tc('sw-privileges.tooltip.warning'),\\n                        disabled: acl.can('country.editor'),\\n                        showOnDisabledElements: true\\n                    }\\\"\\n                    class=\\\"sw-settings-country-state__edit-country-state-action\\\"\\n                    :disabled=\\\"!acl.can('country.editor')\\\"\\n                    @click=\\\"onClickCountryState(item)\\\"\\n                >\\n                    {{ $tc('sw-settings-country.detail.editAction') }}\\n                </sw-context-menu-item>\\n                {% endblock %}\\n            </template>\\n        </sw-one-to-many-grid>\\n        {% endblock %}\\n        \\n        {% block sw_settings_country_state_list_empty %}\\n        <sw-empty-state\\n            v-if=\\\"showEmptyState\\\"\\n            :absolute=\\\"false\\\"\\n            :title=\\\"$tc('sw-country-state-detail.emptyTitle')\\\"\\n            :subline=\\\"$tc('sw-country-state-detail.emptySubline')\\\"\\n            auto-height\\n        />\\n        {% endblock %}\\n    </template>\\n    \\n    {% block sw_settings_country_state_detail %}\\n    <sw-country-state-detail\\n        v-if=\\\"currentCountryState\\\"\\n        :country-state=\\\"currentCountryState\\\"\\n        @attribute-edit-save=\\\"onSaveCountryState\\\"\\n        @attribute-edit-cancel=\\\"onCancelCountryState\\\"\\n    />\\n    {% endblock %}\\n</sw-card>\\n{% endblock %}\\n\\n\";","/**\n * @package buyers-experience\n */\nimport template from './sw-settings-country-state.html.twig';\nimport './sw-settings-country-state.scss';\n\nconst { Mixin } = Shopware;\n\n// eslint-disable-next-line sw-deprecation-rules/private-feature-declarations\nexport default {\n    template,\n\n    inject: [\n        'repositoryFactory',\n        'acl',\n    ],\n\n    mixins: [\n        Mixin.getByName('notification'),\n    ],\n\n    props: {\n        country: {\n            type: Object,\n            required: true,\n        },\n        isLoading: {\n            type: Boolean,\n            required: false,\n            default: false,\n        },\n        countryStateRepository: {\n            type: Object,\n            required: false,\n            default: null,\n        },\n    },\n\n    data() {\n        return {\n            deleteButtonDisabled: true,\n            term: null,\n            currentCountryState: null,\n            countryStateLoading: false,\n            showEmptyState: false,\n        };\n    },\n\n    computed: {\n        stateColumns() {\n            return this.getStateColumns();\n        },\n\n        countryStates() {\n            return this.country.states;\n        },\n    },\n\n    watch: {\n        countryStates() {\n            this.checkEmptyState();\n        },\n    },\n\n    mounted() {\n        this.mountedComponent();\n    },\n\n    methods: {\n        mountedComponent() {\n            this.checkEmptyState();\n        },\n\n        getStateColumns() {\n            return [{\n                property: 'name',\n                label: this.$tc('sw-settings-country.detail.columnStateNameLabel'),\n                inlineEdit: 'string',\n                primary: true,\n            }, {\n                property: 'shortCode',\n                label: this.$tc('sw-settings-country.detail.columnStateShortCodeLabel'),\n                inlineEdit: 'string',\n            }];\n        },\n\n        countryStateSelectionChanged(selection, selectionCount) {\n            this.deleteButtonDisabled = selectionCount <= 0;\n        },\n\n        onSearchCountryState() {\n            this.country.states.criteria.setTerm(this.term);\n            this.refreshCountryStateList();\n        },\n\n        onDeleteCountryStates() {\n            const selection = this.$refs.countryStateGrid.selection;\n            const countryStateIds = Object.keys(selection);\n\n            if (!countryStateIds.length) {\n                return Promise.resolve();\n            }\n\n            if (this.country.isNew()) {\n                countryStateIds.forEach(countryStateId => {\n                    this.country.states.remove(countryStateId);\n                });\n\n                this.$refs.countryStateGrid.resetSelection();\n                return Promise.resolve();\n            }\n\n            this.countryStateLoading = true;\n\n            return this.countryStateRepository.syncDeleted(countryStateIds, Shopware.Context.api)\n                .then(() => {\n                    this.$refs.countryStateGrid.resetSelection();\n                    this.refreshCountryStateList();\n                }).finally(() => {\n                    this.countryStateLoading = false;\n                });\n        },\n\n        onAddCountryState() {\n            this.currentCountryState = this.countryStateRepository.create(Shopware.Context.api);\n        },\n\n        onSaveCountryState(countryState) {\n            // do not send requests if we are on local mode(creating a new country)\n            if (this.country.isNew()) {\n                this.country.states.add(countryState);\n\n                return Promise.resolve().then(() => {\n                    this.currentCountryState = null;\n                });\n            }\n\n            return this.countryStateRepository.save(this.currentCountryState).then(() => {\n                this.refreshCountryStateList();\n            }).catch(errors => {\n                if (errors.response.data.errors[0].code === 'MISSING-SYSTEM-TRANSLATION') {\n                    this.createNotificationError({\n                        message: this.$tc('sw-country-state-detail.createNewStateError'),\n                    });\n                }\n            });\n        },\n\n        onCancelCountryState() {\n            this.currentCountryState = null;\n        },\n\n        onClickCountryState(item) {\n            // Create a copy with the same id which will be edited\n            const copy = this.countryStateRepository.create(Shopware.Context.api, item.id);\n            copy._isNew = false;\n\n            this.currentCountryState = Object.assign(copy, item);\n        },\n\n        refreshCountryStateList() {\n            this.countryStateLoading = true;\n\n            this.$refs.countryStateGrid.load().then(() => {\n                this.countryStateLoading = false;\n                this.currentCountryState = null;\n            });\n        },\n\n        getCountryStateName(item) {\n            return item?.translated?.name || item?.name;\n        },\n\n        checkEmptyState() {\n            if (this.country?.isNew()) {\n                this.showEmptyState = this.country?.states?.length === 0;\n                return;\n            }\n\n            this.showEmptyState = this.$refs.countryStateGrid?.total === 0;\n        },\n    },\n};\n"],"sourceRoot":""}