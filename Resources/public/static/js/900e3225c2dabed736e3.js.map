{"version":3,"sources":["webpack:///./src/app/asyncComponent/media/sw-media-modal-delete/index.js","webpack:///./src/app/asyncComponent/media/sw-media-modal-delete/sw-media-modal-delete.html.twig","webpack:///./src/app/asyncComponent/media/sw-media-modal-delete/sw-media-modal-delete.scss"],"names":["_Shopware","Shopware","Context","Mixin","Filter","template","inject","mixins","getByName","props","itemsToDelete","required","type","Array","validator","value","length","data","mediaItems","folders","notificationId","computed","mediaRepository","this","repositoryFactory","create","mediaFolderRepository","mediaNameFilter","snippets","successOverall","errorOverall","$tc","modalTitle","deleteMessage","mediaCount","folderCount","name","count","mediaQuickInfo","_checkInUsage","mediaInUsages","_this","filter","mediaItem","created","createdComponent","methods","item","getEntityName","closeDeleteModal","originalDomEvent","$emit","getEntityRepository","entityName","_deleteSelection","_this2","repository","isLoading","delete","id","api","then","catch","errorSnippet","message","concat","createNotificationError","finally","deleteSelection","_this3","_asyncToGenerator","_regeneratorRuntime","mark","_callee","deleteSelections","deletions","amounts","wrap","_context","prev","next","map","Promise","all","sent","reduce","acc","isSuccess","success","failure","updateSuccessNotification","mediaIds","media","folderIds","folder","stop","successAmount","failureAmount","totalAmount","_this4","_callee2","notification","newNotificationId","_context2","total","growl","State","dispatch","_objectSpread","uuid","abrupt","variant","avatarUsers","some","association","content","__esModule","default","module","i","locals","exports","add"],"mappings":"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","file":"static/js/900e3225c2dabed736e3.js","sourcesContent":["import template from './sw-media-modal-delete.html.twig';\nimport './sw-media-modal-delete.scss';\n\nconst { Context, Mixin, Filter } = Shopware;\n\n/**\n * @status ready\n * @description The <u>sw-media-modal-delete</u> component is used to validate the delete action.\n * @package content\n * @example-type code-only\n * @component-example\n * <sw-media-modal-delete :itemsToDelete=\"[items]\">\n * </sw-media-modal-delete>\n */\n// eslint-disable-next-line sw-deprecation-rules/private-feature-declarations\nexport default {\n    template,\n\n    inject: ['repositoryFactory'],\n\n    mixins: [\n        Mixin.getByName('notification'),\n    ],\n\n    props: {\n        itemsToDelete: {\n            required: true,\n            type: Array,\n            validator(value) {\n                return (value.length !== 0);\n            },\n        },\n    },\n\n    data() {\n        return {\n            mediaItems: [],\n            folders: [],\n            notificationId: null,\n        };\n    },\n\n    computed: {\n        mediaRepository() {\n            return this.repositoryFactory.create('media');\n        },\n        mediaFolderRepository() {\n            return this.repositoryFactory.create('media_folder');\n        },\n        mediaNameFilter() {\n            return Filter.getByName('mediaName');\n        },\n\n        snippets() {\n            if (this.mediaItems.length > 0 && this.folders.length > 0) {\n                return {\n                    successOverall: 'global.sw-media-modal-delete.notification.successOverall.message.mediaAndFolder',\n                    errorOverall: this.$tc(\n                        'global.sw-media-modal-delete.notification.errorOverall.message.mediaAndFolder',\n                    ),\n                    modalTitle: this.$tc('global.default.warning'),\n                    deleteMessage: this.$tc(\n                        'global.sw-media-modal-delete.deleteMessage.mediaAndFolder',\n                        this.itemsToDelete.length,\n                        {\n                            mediaCount: this.mediaItems.length,\n                            folderCount: this.folders.length,\n                        },\n                    ),\n                };\n            }\n\n            if (this.mediaItems.length > 0) {\n                return {\n                    successOverall: 'global.sw-media-modal-delete.notification.successOverall.message.media',\n                    errorOverall: this.$tc('global.sw-media-modal-delete.notification.errorOverall.message.media'),\n                    modalTitle: this.$tc('global.default.warning'),\n                    deleteMessage: this.$tc(\n                        'global.sw-media-modal-delete.deleteMessage.media',\n                        this.mediaItems.length,\n                        {\n                            name: this.mediaNameFilter(this.mediaItems[0]),\n                            count: this.mediaItems.length,\n                        },\n                    ),\n                };\n            }\n\n            return {\n                successOverall: 'global.sw-media-modal-delete.notification.successOverall.message.folder',\n                errorOverall: this.$tc('global.sw-media-modal-delete.notification.errorOverall.message.folder'),\n                modalTitle: this.$tc('global.default.warning'),\n                deleteMessage: this.$tc(\n                    'global.sw-media-modal-delete.deleteMessage.folder',\n                    this.folders.length,\n                    {\n                        name: this.folders[0].name,\n                        count: this.folders.length,\n                    },\n                ),\n            };\n        },\n\n        mediaQuickInfo() {\n            const usedMediaItem = this.mediaItems.length === 1 && this._checkInUsage(this.mediaItems[0]);\n            return usedMediaItem ? this.mediaItems[0] : null;\n        },\n\n        mediaInUsages() {\n            if (this.mediaItems.length <= 1) return [];\n\n            return this.mediaItems.filter(mediaItem => this._checkInUsage(mediaItem));\n        },\n    },\n\n    created() {\n        this.createdComponent();\n    },\n\n    methods: {\n        createdComponent() {\n            this.mediaItems = this.itemsToDelete.filter((item) => {\n                return item.getEntityName() === 'media';\n            });\n\n            this.folders = this.itemsToDelete.filter((item) => {\n                return item.getEntityName() === 'media_folder';\n            });\n        },\n\n        closeDeleteModal(originalDomEvent) {\n            this.$emit('media-delete-modal-close', { originalDomEvent });\n        },\n\n        getEntityRepository(entityName) {\n            if (entityName === 'media') {\n                return this.mediaRepository;\n            }\n\n            if (entityName === 'media_folder') {\n                return this.mediaFolderRepository;\n            }\n\n            return null;\n        },\n\n        _deleteSelection(item) {\n            const entityName = item.getEntityName();\n            const repository = this.getEntityRepository(entityName);\n\n            item.isLoading = true;\n\n            return repository.delete(item.id, Context.api)\n                .then(() => {\n                    return true;\n                })\n                .catch(() => {\n                    const isMedia = item.getEntityName() === 'media';\n                    const errorSnippet = 'global.sw-media-modal-delete.notification.errorSingle.message';\n\n                    const message = isMedia ?\n                        this.$tc(`${errorSnippet}.media`, 1, { name: this.mediaNameFilter(item) }) :\n                        this.$tc(`${errorSnippet}.folder`, 1, { name: item.name });\n\n                    this.createNotificationError({\n                        message,\n                    });\n\n                    return false;\n                })\n                .finally(() => {\n                    item.isLoading = false;\n                });\n        },\n\n        async deleteSelection() {\n            const deleteSelections = this.itemsToDelete.map((item) => {\n                return this._deleteSelection(item).catch(() => false);\n            });\n\n            const deletions = await Promise.all(deleteSelections);\n\n            const amounts = deletions.reduce((acc, isSuccess) => {\n                acc.success = isSuccess ? acc.success += 1 : acc.success;\n                acc.failure = isSuccess ? acc.failure : acc.failure += 1;\n\n                return acc;\n            }, { success: 0, failure: 0 });\n\n            if (amounts.success > 0) {\n                this.updateSuccessNotification(amounts.success, amounts.failure, deletions.length);\n            }\n\n            this.$emit(\n                'media-delete-modal-items-delete',\n                {\n                    mediaIds: this.mediaItems.map((media) => { return media.id; }),\n                    folderIds: this.folders.map((folder) => { return folder.id; }),\n                },\n            );\n        },\n\n        async updateSuccessNotification(successAmount, failureAmount, totalAmount) {\n            const notification = {\n                message: this.$tc(\n                    this.snippets.successOverall,\n                    successAmount,\n                    {\n                        count: successAmount,\n                        total: totalAmount,\n                    },\n                ),\n                growl: successAmount + failureAmount === totalAmount,\n            };\n\n            if (this.notificationId !== null) {\n                await Shopware.State.dispatch('notification/updateNotification', {\n                    uuid: this.notificationId,\n                    ...notification,\n                });\n\n                if (successAmount + failureAmount === totalAmount) {\n                    this.notificationId = null;\n                }\n\n                return;\n            }\n\n            const newNotificationId = await Shopware.State.dispatch('notification/createNotification', {\n                variant: 'success',\n                ...notification,\n            });\n\n            if (successAmount + failureAmount < totalAmount) {\n                this.notificationId = newNotificationId;\n            }\n        },\n\n        _checkInUsage(mediaItem) {\n            if (mediaItem.avatarUsers) {\n                return true;\n            }\n\n            const mediaAssociations = [\n                'categories',\n                'productMedia',\n                'productManufacturers',\n                'mailTemplateMedia',\n                'documentBaseConfigs',\n                'paymentMethods',\n                'shippingMethods',\n                'cmsBlocks',\n                'cmsSections',\n                'cmsPages',\n            ];\n\n            return mediaAssociations.some((association) => {\n                return mediaItem[association].length > 0;\n            });\n        },\n    },\n};\n","export default \"\\n{% block sw_media_modal_delete %}\\n<sw-modal\\n    variant=\\\"small\\\"\\n    class=\\\"sw-media-modal-delete\\\"\\n    :title=\\\"snippets.modalTitle\\\"\\n    @modal-close=\\\"closeDeleteModal($event)\\\"\\n>\\n\\n    \\n    {% block sw_media_modal_body %}\\n    <div v-if=\\\"mediaQuickInfo\\\">\\n        <p>{{ $tc('global.sw-media-modal-delete.mediaQuickInfoMessage') }}</p>\\n        <sw-media-quickinfo-usage\\n            :item=\\\"mediaQuickInfo\\\"\\n            router-link-target=\\\"_blank\\\"\\n        />\\n    </div>\\n    <div v-if=\\\"mediaInUsages && mediaInUsages.length > 0\\\">\\n        <p>{{ $tc('global.sw-media-modal-delete.mediaInUsagesMessage') }}</p>\\n        <sw-media-media-item\\n            v-for=\\\"mediaInUsage in mediaInUsages\\\"\\n            :key=\\\"`sw-media-modal-delete-${mediaInUsage.id}`\\\"\\n            class=\\\"sw-media-modal-delete__media-list-item\\\"\\n            :item=\\\"mediaInUsage\\\"\\n            :is-list=\\\"true\\\"\\n            :editable=\\\"false\\\"\\n            :selected=\\\"false\\\"\\n            :show-selection-indicator=\\\"false\\\"\\n            :show-context-menu-button=\\\"false\\\"\\n        />\\n    </div>\\n    <p v-html=\\\"$sanitize(snippets.deleteMessage)\\\"></p>\\n    {% endblock %}\\n\\n    \\n    {% block sw_media_modal_footer %}\\n    <template #modal-footer>\\n\\n        \\n        {% block sw_media_modal_delete_cancel_button %}\\n        <sw-button\\n            size=\\\"small\\\"\\n            @click=\\\"closeDeleteModal($event)\\\"\\n        >\\n            {{ $tc('global.default.cancel') }}\\n        </sw-button>\\n        {% endblock %}\\n\\n        \\n        {% block sw_media_modal_delete_confirm_button %}\\n        <sw-button\\n            class=\\\"sw-media-modal-delete__confirm\\\"\\n            size=\\\"small\\\"\\n            variant=\\\"danger\\\"\\n            @click=\\\"deleteSelection($event)\\\"\\n        >\\n            {{ $tc('global.default.delete') }}\\n        </sw-button>\\n        {% endblock %}\\n\\n    </template>\\n    {% endblock %}\\n</sw-modal>\\n{% endblock %}\\n\";","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../../../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--15-1!../../../../../node_modules/css-loader/dist/cjs.js??ref--15-2!../../../../../node_modules/sass-loader/dist/cjs.js??ref--15-3!./sw-media-modal-delete.scss\");\nif(content.__esModule) content = content.default;\nif(typeof content === 'string') content = [[module.id, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar add = require(\"!../../../../../node_modules/vue-style-loader/lib/addStylesClient.js\").default\nvar update = add(\"6adc66f0\", content, true, {});"],"sourceRoot":""}