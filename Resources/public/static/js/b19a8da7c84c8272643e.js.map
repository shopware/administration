{"version":3,"sources":["webpack:///./src/module/sw-flow/component/modals/sw-flow-rule-modal/sw-flow-rule-modal.scss","webpack:///./src/module/sw-flow/component/modals/sw-flow-rule-modal/index.js","webpack:///./src/module/sw-flow/component/modals/sw-flow-rule-modal/sw-flow-rule-modal.html.twig"],"names":["content","__esModule","default","module","i","locals","exports","add","_Shopware","Shopware","Component","Mixin","Context","Criteria","Data","mapPropertyErrors","getComponentHelper","template","inject","mixins","getByName","props","ruleId","type","String","required","data","isLoading","isSaveLoading","isSaveSuccessful","rule","conditions","conditionTree","deletedIds","computed","_objectSpread","modalTitle","this","$tc","ruleRepository","repositoryFactory","create","conditionRepository","_this$rule","_this$rule$conditions","_this$rule2","_this$rule2$condition","entity","source","appScriptConditionRepository","availableModuleTypes","ruleConditionDataProviderService","getModuleTypes","moduleType","moduleTypes","get","types","set","value","length","scopesOfRuleAwarenessKey","_awarenessConfig$scop","ruleAwarenessKey","concat","flow","eventName","awarenessConfig","getAwarenessConfigurationByAssignmentName","scopes","undefined","mapState","created","createdComponent","methods","_this","loadConditionData","then","scripts","addScriptConditions","createRule","loadRule","context","api","languageId","State","criteria","Promise","all","search","ruleConditionsConfigApiService","load","results","_this$rule3","flowSequences","push","_this2","loadConditions","_this3","arguments","inheritance","searchResult","total","resolve","page","limit","addAssociation","apply","_toConsumableArray","syncConditions","_this4","sync","syncDeleted","onConditionsChanged","_ref","getRuleDetail","_this$rule4","_this5","id","$emit","catch","finally","onClose","onSaveRule","_this6","isNew","saveRule","dispatch","showErrorNotification","save","createNotificationError","message","name"],"mappings":"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","file":"static/js/b19a8da7c84c8272643e.js","sourcesContent":["// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../../../../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--15-1!../../../../../../node_modules/css-loader/dist/cjs.js??ref--15-2!../../../../../../node_modules/sass-loader/dist/cjs.js??ref--15-3!./sw-flow-rule-modal.scss\");\nif(content.__esModule) content = content.default;\nif(typeof content === 'string') content = [[module.id, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar add = require(\"!../../../../../../node_modules/vue-style-loader/lib/addStylesClient.js\").default\nvar update = add(\"3ece02a5\", content, true, {});","import { mapState } from 'vuex';\nimport template from './sw-flow-rule-modal.html.twig';\nimport './sw-flow-rule-modal.scss';\n\nconst { Component, Mixin, Context } = Shopware;\nconst { Criteria } = Shopware.Data;\nconst { mapPropertyErrors } = Component.getComponentHelper();\n\n/**\n * @private\n * @package services-settings\n */\nexport default {\n    template,\n\n    inject: [\n        'repositoryFactory',\n        'ruleConditionDataProviderService',\n        'ruleConditionsConfigApiService',\n        'feature',\n    ],\n\n    mixins: [\n        Mixin.getByName('placeholder'),\n        Mixin.getByName('notification'),\n    ],\n\n    props: {\n        ruleId: {\n            type: String,\n            required: false,\n            default: null,\n        },\n    },\n\n    data() {\n        return {\n            isLoading: false,\n            isSaveLoading: false,\n            isSaveSuccessful: false,\n            rule: null,\n            conditions: null,\n            conditionTree: null,\n            deletedIds: [],\n        };\n    },\n\n    computed: {\n        modalTitle() {\n            return this.ruleId\n                ? this.$tc('sw-flow.modals.rule.labelEditRule')\n                : this.$tc('sw-flow.modals.rule.labelAddNewRule');\n        },\n\n        ruleRepository() {\n            return this.repositoryFactory.create('rule');\n        },\n\n        conditionRepository() {\n            if (!this.rule) {\n                return null;\n            }\n\n            return this.repositoryFactory.create(\n                this.rule?.conditions?.entity,\n                this.rule?.conditions?.source,\n            );\n        },\n\n        appScriptConditionRepository() {\n            return this.repositoryFactory.create('app_script_condition');\n        },\n\n        availableModuleTypes() {\n            return this.ruleConditionDataProviderService.getModuleTypes(moduleType => moduleType);\n        },\n\n        moduleTypes: {\n            get() {\n                if (!this.rule || !this.rule.moduleTypes) {\n                    return [];\n                }\n                return this.rule.moduleTypes.types;\n            },\n\n            set(value) {\n                if (value === null || value.length === 0) {\n                    this.rule.moduleTypes = null;\n                    return;\n                }\n\n                this.rule.moduleTypes = { types: value };\n            },\n        },\n\n        scopesOfRuleAwarenessKey() {\n            const ruleAwarenessKey = `flowTrigger.${this.flow.eventName}`;\n            const awarenessConfig = this.ruleConditionDataProviderService\n                .getAwarenessConfigurationByAssignmentName(ruleAwarenessKey);\n\n\n            return awarenessConfig?.scopes ?? undefined;\n        },\n\n        ...mapState('swFlowState', ['flow']),\n\n        ...mapPropertyErrors('rule', ['name', 'priority']),\n    },\n\n    created() {\n        this.createdComponent();\n    },\n\n    methods: {\n        createdComponent() {\n            this.isLoading = true;\n\n            this.loadConditionData().then((scripts) => {\n                this.ruleConditionDataProviderService.addScriptConditions(scripts);\n\n                if (!this.ruleId) {\n                    this.isLoading = false;\n                    this.createRule();\n                    return;\n                }\n\n                this.loadRule(this.ruleId).then(() => {\n                    this.isLoading = false;\n                });\n            });\n        },\n\n        loadConditionData() {\n            const context = { ...Context.api, languageId: Shopware.State.get('session').languageId };\n            const criteria = new Criteria(1, 500);\n\n            return Promise.all([\n                this.appScriptConditionRepository.search(criteria, context),\n                this.ruleConditionsConfigApiService.load(),\n            ]).then((results) => {\n                return results[0];\n            });\n        },\n\n        createRule() {\n            this.rule = this.ruleRepository.create();\n            this.conditions = this.rule?.conditions;\n            this.conditionTree = this.conditions;\n            this.rule.flowSequences = [];\n            this.rule.flowSequences.push({ flow: { eventName: this.flow.eventName } });\n        },\n\n        loadRule(ruleId) {\n            this.isLoading = true;\n            this.conditions = null;\n\n            return this.ruleRepository.get(ruleId, Context.api).then((rule) => {\n                this.rule = rule;\n                this.loadConditions();\n            });\n        },\n\n        loadConditions(conditions = null) {\n            const context = { ...Context.api, inheritance: true };\n\n            if (conditions === null) {\n                return this.conditionRepository.search(new Criteria(1, 25), context).then((searchResult) => {\n                    return this.loadConditions(searchResult);\n                });\n            }\n\n            if (conditions.total <= conditions.length) {\n                this.conditions = conditions;\n                return Promise.resolve();\n            }\n\n            const criteria = new Criteria(\n                conditions.criteria.page + 1,\n                conditions.criteria.limit,\n            );\n\n            if (conditions.entity === 'product') {\n                criteria.addAssociation('options.group');\n            }\n\n            return this.conditionRepository.search(criteria, conditions.context).then((searchResult) => {\n                conditions.push(...searchResult);\n                conditions.criteria = searchResult.criteria;\n                conditions.total = searchResult.total;\n\n                return this.loadConditions(conditions);\n            });\n        },\n\n        syncConditions() {\n            return this.conditionRepository.sync(this.conditionTree, Context.api)\n                .then(() => {\n                    if (this.deletedIds.length > 0) {\n                        return this.conditionRepository.syncDeleted(this.deletedIds, Context.api).then(() => {\n                            this.deletedIds = [];\n                        });\n                    }\n                    return Promise.resolve();\n                });\n        },\n\n        onConditionsChanged({ conditions, deletedIds }) {\n            this.conditionTree = conditions;\n            this.deletedIds = [...this.deletedIds, ...deletedIds];\n        },\n\n        getRuleDetail() {\n            if (!this.rule?.id) {\n                return null;\n            }\n\n            return this.ruleRepository.get(this.rule.id)\n                .then((rule) => {\n                    this.$emit('process-finish', rule);\n                })\n                .catch(() => {\n                    this.$emit('process-finish', null);\n                })\n                .finally(() => {\n                    this.onClose();\n                });\n        },\n\n        onSaveRule() {\n            this.isSaveSuccessful = false;\n            this.isSaveLoading = true;\n\n            if (this.rule.isNew()) {\n                this.rule.flowSequences = [];\n                this.rule.conditions = this.conditionTree;\n\n                this.saveRule()\n                    .then(() => {\n                        Shopware.State.dispatch('error/resetApiErrors');\n                        this.getRuleDetail();\n\n                        this.isSaveSuccessful = true;\n                    }).catch(() => {\n                        this.showErrorNotification();\n                    }).finally(() => {\n                        this.isSaveLoading = false;\n                    });\n\n                return;\n            }\n\n            this.saveRule()\n                .then(this.syncConditions)\n                .then(() => {\n                    Shopware.State.dispatch('error/resetApiErrors');\n                    this.getRuleDetail();\n\n                    this.isSaveSuccessful = true;\n                })\n                .catch(() => {\n                    this.showErrorNotification();\n                })\n                .finally(() => {\n                    this.isSaveLoading = false;\n                });\n        },\n\n        saveRule() {\n            return this.ruleRepository.save(this.rule, Context.api);\n        },\n\n        showErrorNotification() {\n            this.createNotificationError({\n                message: this.$tc('sw-settings-rule.detail.messageSaveError', 0, { name: this.rule.name }),\n            });\n        },\n\n        onClose() {\n            this.$emit('modal-close');\n        },\n    },\n};\n","export default \"\\n{% block sw_flow_rule_modal %}\\n<sw-modal\\n    class=\\\"sw-flow-rule-modal\\\"\\n    variant=\\\"large\\\"\\n    :title=\\\"modalTitle\\\"\\n    :is-loading=\\\"isLoading\\\"\\n    :closable=\\\"false\\\"\\n    @modal-close=\\\"onClose\\\"\\n>\\n    \\n    {% block sw_flow_rule_modal_tabs %}\\n    <sw-tabs\\n        default-item=\\\"detail\\\"\\n        position-identifier=\\\"sw-flow-rule-modal\\\"\\n    >\\n        \\n        {% block sw_flow_rule_headers %}\\n        <template #default=\\\"{ active }\\\">\\n            \\n            {% block sw_flow_rule_modal_tab_detail %}\\n            <sw-tabs-item\\n                class=\\\"sw-flow-rule-modal__tab-detail\\\"\\n                v-bind=\\\"$props\\\"\\n                name=\\\"detail\\\"\\n                :active-tab=\\\"active\\\"\\n            >\\n                {{ $tc('sw-flow.modals.rule.tabDetail') }}\\n            </sw-tabs-item>\\n            {% endblock %}\\n\\n            \\n            {% block sw_flow_rule_modal_tab_rule %}\\n            <sw-tabs-item\\n                class=\\\"sw-flow-rule-modal__tab-rule\\\"\\n                v-bind=\\\"$props\\\"\\n                name=\\\"rule\\\"\\n                :active-tab=\\\"active\\\"\\n            >\\n                {{ $tc('sw-flow.modals.rule.tabRule') }}\\n            </sw-tabs-item>\\n            {% endblock %}\\n        </template>\\n        {% endblock %}\\n\\n        \\n        {% block sw_flow_rule_modal_content %}\\n        <template #content=\\\"{ active }\\\">\\n            <div class=\\\"sw-flow-rule-modal__content\\\">\\n                \\n                {% block sw_flow_rule_modal_tab_detail_content %}\\n                <template v-if=\\\"active === 'detail' && rule\\\">\\n                    <sw-container\\n                        columns=\\\"2fr 1fr\\\"\\n                        gap=\\\"0px 32px\\\"\\n                    >\\n                        \\n                        {% block sw_flow_rule_modal_detail_name %}\\n                        <sw-text-field\\n                            {% if VUE3 %}\\n                            v-model:value=\\\"rule.name\\\"\\n                            {% else %}\\n                            v-model=\\\"rule.name\\\"\\n                            {% endif %}\\n                            class=\\\"sw-flow-rule-modal__name\\\"\\n                            required\\n                            :label=\\\"$tc('sw-flow.modals.rule.labelName')\\\"\\n                            :placeholder=\\\"$tc('sw-flow.modals.rule.placeholderName')\\\"\\n                            :error=\\\"ruleNameError\\\"\\n                        />\\n                        {% endblock %}\\n\\n                        \\n                        {% block sw_flow_rule_modal_detail_priority %}\\n                        <sw-number-field\\n                            {% if VUE3 %}\\n                            v-model:value=\\\"rule.priority\\\"\\n                            {% else %}\\n                            v-model=\\\"rule.priority\\\"\\n                            {% endif %}\\n                            class=\\\"sw-flow-rule-modal__priority\\\"\\n                            required\\n                            :label=\\\"$tc('sw-flow.modals.rule.labelPriority')\\\"\\n                            :placeholder=\\\"$tc('sw-flow.modals.rule.placeholderPriority')\\\"\\n                            :error=\\\"rulePriorityError\\\"\\n                        />\\n                    {% endblock %}\\n                    </sw-container>\\n\\n                    \\n                    {% block sw_flow_rule_modal_detail_description %}\\n                    <sw-textarea-field\\n                        {% if VUE3 %}\\n                        v-model:value=\\\"rule.description\\\"\\n                        {% else %}\\n                        v-model=\\\"rule.description\\\"\\n                        {% endif %}\\n                        class=\\\"sw-flow-rule-modal__description\\\"\\n                        :label=\\\"$tc('sw-flow.modals.rule.labelDescription')\\\"\\n                        :placeholder=\\\"$tc('sw-flow.modals.rule.placeholderDescription')\\\"\\n                    />\\n                    {% endblock %}\\n\\n                    \\n                    {% block sw_flow_rule_modal_detail_type %}\\n                    <sw-multi-select\\n                        {% if VUE3 %}\\n                        v-model:value=\\\"moduleTypes\\\"\\n                        {% else %}\\n                        v-model=\\\"moduleTypes\\\"\\n                        {% endif %}\\n                        class=\\\"sw-flow-rule-modal__type\\\"\\n                        value-property=\\\"id\\\"\\n                        label-property=\\\"name\\\"\\n                        :label=\\\"$tc('sw-flow.modals.rule.labelType')\\\"\\n                        :placeholder=\\\"$tc('sw-flow.modals.rule.placeholderType')\\\"\\n                        :options=\\\"availableModuleTypes\\\"\\n                    >\\n                        <template #selection-label-property=\\\"{ item }\\\">\\n                            {{ $tc(item.name) }}\\n                        </template>\\n\\n                        <template #result-label-property=\\\"{ item }\\\">\\n                            {{ $tc(item.name) }}\\n                        </template>\\n                    </sw-multi-select>\\n                    {% endblock %}\\n                </template>\\n                {% endblock %}\\n\\n                \\n                {% block sw_flow_rule_modal_tab_rule_content %}\\n                <div v-show=\\\"active === 'rule'\\\">\\n                    \\n                    {% block sw_flow_rule_modal_conditions_card %}\\n                    <sw-condition-tree\\n                        v-if=\\\"conditionRepository\\\"\\n                        class=\\\"sw-flow-rule-modal__rule\\\"\\n                        association-field=\\\"ruleId\\\"\\n                        :initial-conditions=\\\"conditions\\\"\\n                        :condition-repository=\\\"conditionRepository\\\"\\n                        :condition-data-provider-service=\\\"ruleConditionDataProviderService\\\"\\n                        :association-value=\\\"rule.id\\\"\\n                        :association-entity=\\\"rule\\\"\\n                        :root-condition=\\\"null\\\"\\n                        @conditions-changed=\\\"onConditionsChanged\\\"\\n                    />\\n                    {% endblock %}\\n                </div>\\n                {% endblock %}\\n            </div>\\n        </template>\\n        {% endblock %}\\n    </sw-tabs>\\n    {% endblock %}\\n\\n    <template #modal-footer>\\n        \\n        {% block sw_flow_rule_modal_footer_cancel_button %}\\n        <sw-button\\n            class=\\\"sw-flow-rule-modal__cancel-button\\\"\\n            size=\\\"small\\\"\\n            @click=\\\"onClose\\\"\\n        >\\n            {{ $tc('global.default.cancel') }}\\n        </sw-button>\\n        {% endblock %}\\n\\n        \\n        {% block sw_flow_rule_modal_footer_save_button %}\\n        <sw-button-process\\n            class=\\\"sw-flow-rule-modal__save-button\\\"\\n            variant=\\\"primary\\\"\\n            size=\\\"small\\\"\\n            :is-loading=\\\"isSaveLoading\\\"\\n            :process-success=\\\"isSaveSuccessful\\\"\\n            @click=\\\"onSaveRule\\\"\\n        >\\n            {{ $tc('sw-flow.modals.rule.buttonAddRule') }}\\n        </sw-button-process>\\n        {% endblock %}\\n    </template>\\n</sw-modal>\\n{% endblock %}\\n\";"],"sourceRoot":""}