{"version":3,"sources":["webpack:///./src/module/sw-import-export/component/sw-import-export-entity-path-select/index.js","webpack:///./src/module/sw-import-export/component/sw-import-export-entity-path-select/sw-import-export-entity-path-select.html.twig","webpack:///./src/module/sw-import-export/component/sw-import-export-entity-path-select/sw-import-export-entity-path-select.scss"],"names":["Mixin","Shopware","_Shopware$Utils","Utils","debounce","get","flow","template","inject","mixins","getByName","model","prop","event","props","value","required","entityType","type","String","isLoading","Boolean","default","highlightSearchTerm","placeholder","valueProperty","searchFunction","Function","_ref","_this","options","labelProperty","searchTerm","filter","option","label","getKey","toLowerCase","includes","currencies","Array","isoCode","languages","locale","customFieldSets","data","searchInput","actualSearch","isExpanded","itemRecentlySelected","priceProperties","visibilityProperties","notMappedItem","this","$tc","relation","undefined","computed","currentValue","set","newValue","feature","isActive","$emit","inputClasses","selectionTextClasses","singleSelection","_this2","results","find","visibleResults","_this3","push","forEach","actualPathPrefix","actualPathParts","length","join","_this4","pathParts","split","splice","part","availableIsoCodes","availableLocales","currentEntity","actualDefinition","EntityDefinition","entityFound","propertyName","property","properties","entity","has","processFunctions","processTranslations","processVisibilities","processMedia","processAssignedProducts","processPrice","processLineItems","processDeliveries","processProperties","definition","isCustomField","unprocessedValues","getCustomFields","Object","keys","path","replace","sort","sortOptions","map","currency","language","code","pop","methods","isSelected","item","onSelectExpanded","_this5","$nextTick","resetActiveItem","$refs","swSelectInput","select","focus","tryGetSearchText","onSelectCollapsed","$attrs","disabled","blur","closeResultList","selectBase","collapse","setValue","concat","pos","arguments","resultsList","setActiveItemIndex","onInputSearch","debouncedSearch","search","_this6","object","keyPath","defaultValue","_ref2","translationProperty","translations","translationDefinition","translationProperties","newOptions","_toConsumableArray","getTranslationProperties","name","_ref3","priceProperty","price","getPriceProperties","generatePriceProperties","priceType","_this7","_ref4","lineItemProperty","lineItems","generateLineItemProperties","_ref5","deliveryProperty","deliveries","deliveryDefinition","deliveryProperties","generateDeliveryProperties","_ref6","_ref7","visibilityProperty","visibilities","getVisibilityProperties","_ref8","mediaProperty","media","getMediaProperties","_ref9","assignedProductsProperty","assignedProducts","getAssignedProductsProperties","a","b","entityName","customFields","customFieldSet","relations","customField","content","__esModule","module","i","locals","exports","add"],"mappings":"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","file":"static/js/3f8ab782284330e57dbc.js","sourcesContent":["/**\n * @package services-settings\n */\nimport './sw-import-export-entity-path-select.scss';\nimport template from './sw-import-export-entity-path-select.html.twig';\n\nconst { Mixin } = Shopware;\nconst { debounce, get, flow } = Shopware.Utils;\n\n/**\n * @private\n */\nexport default {\n    template,\n\n    inject: ['feature'],\n\n    mixins: [\n        Mixin.getByName('remove-api-error'),\n    ],\n\n    model: {\n        prop: 'value',\n        event: 'change',\n    },\n\n    props: {\n        // FIXME: add type attribute\n        // eslint-disable-next-line vue/require-prop-types\n        value: {\n            required: true,\n        },\n        entityType: {\n            type: String,\n            required: true,\n        },\n        isLoading: {\n            type: Boolean,\n            required: false,\n            default: false,\n        },\n        highlightSearchTerm: {\n            type: Boolean,\n            required: false,\n            // TODO: Boolean props should only be opt in and therefore default to false\n            // eslint-disable-next-line vue/no-boolean-default\n            default: true,\n        },\n        placeholder: {\n            type: String,\n            required: false,\n            default: '',\n        },\n        valueProperty: {\n            type: String,\n            required: false,\n            default: 'value',\n        },\n\n        searchFunction: {\n            type: Function,\n            required: false,\n            default({ options, labelProperty, searchTerm }) {\n                return options.filter(option => {\n                    const label = this.getKey(option, labelProperty);\n                    if (!label) {\n                        return false;\n                    }\n                    return label.toLowerCase().includes(searchTerm.toLowerCase());\n                });\n            },\n        },\n\n        currencies: {\n            type: Array,\n            required: false,\n            default() {\n                return [{ isoCode: 'DEFAULT' }];\n            },\n        },\n\n        languages: {\n            type: Array,\n            required: false,\n            default() {\n                return [{ locale: 'DEFAULT' }];\n            },\n        },\n\n        customFieldSets: {\n            type: Array,\n            required: false,\n            default() {\n                return [];\n            },\n        },\n    },\n\n    data() {\n        return {\n            labelProperty: 'label',\n            searchInput: '',\n            actualSearch: '',\n            isExpanded: false,\n            // used to track if an item was selected before closing the result list\n            itemRecentlySelected: false,\n            priceProperties: [\n                'net',\n                'gross',\n                'currencyId',\n                'linked',\n                'listPrice.net',\n                'listPrice.gross',\n                'listPrice.linked',\n            ],\n            visibilityProperties: ['all', 'link', 'search'],\n            notMappedItem: {\n                label: this.$tc('sw-import-export.profile.mapping.notMapped'),\n                relation: undefined,\n                value: '',\n            },\n        };\n    },\n\n    computed: {\n        currentValue: {\n            get() {\n                return this.value || '';\n            },\n            set(newValue) {\n                if (this.feature.isActive('VUE3')) {\n                    this.$emit('update:value', newValue);\n\n                    return;\n                }\n\n                this.$emit('change', newValue);\n            },\n        },\n\n        inputClasses() {\n            return {\n                'is--expanded': this.isExpanded,\n            };\n        },\n\n        selectionTextClasses() {\n            return {\n                'is--placeholder': !this.singleSelection,\n            };\n        },\n\n        singleSelection: {\n            get() {\n                if (this.currentValue === '' || this.currentValue === null) {\n                    return this.notMappedItem;\n                }\n\n                return this.results.find(option => {\n                    return this.getKey(option, this.valueProperty) === this.currentValue;\n                });\n            },\n            set(newValue) {\n                if (newValue === null) {\n                    newValue = '';\n                }\n\n                this.currentValue = this.getKey(newValue, this.valueProperty);\n            },\n        },\n\n        /**\n         * Returns the visibleResults with the actual selection as first entry\n         * @returns {Array}\n         */\n        visibleResults() {\n            if (this.singleSelection) {\n                const results = [];\n\n                if (this.singleSelection.value !== this.notMappedItem.value) {\n                    // not mapped position is always visible above everything and doesn't need to be added here.\n                    results.push(this.singleSelection);\n                }\n\n                const value = this.getKey(this.singleSelection, this.valueProperty);\n                this.results.forEach(option => {\n                    // Prevent duplicate options\n                    if (this.getKey(option, this.valueProperty) !== value) {\n                        results.push(option);\n                    }\n                });\n                return results;\n            }\n\n            return this.results;\n        },\n\n        actualPathPrefix() {\n            return this.actualPathParts.length > 0 ? this.actualPathParts.join('.') : '';\n        },\n\n        actualPathParts() {\n            const pathParts = (this.isExpanded && this.actualSearch) ?\n                this.actualSearch.split('.') : this.currentValue.split('.');\n\n            // remove last element of path which is the user search input\n            pathParts.splice(-1, 1);\n\n            if (pathParts[pathParts.length - 1] === 'customFields') {\n                return pathParts;\n            }\n\n            // Remove special cases for prices and translations\n            return pathParts.filter(part => {\n                // Remove if path is a iso code\n                if (this.availableIsoCodes.includes(part)) {\n                    return false;\n                }\n                // Remove if path is a locale code\n                if (this.availableLocales.includes(part)) {\n                    return false;\n                }\n\n                return !(\n                    part === 'translations' ||\n                    part === 'visibilities' ||\n                    part === 'price' ||\n                    part === 'listPrice' ||\n                    part === 'purchasePrices'\n                );\n            });\n        },\n\n        currentEntity() {\n            if (this.actualPathParts.length < 1) {\n                return this.entityType;\n            }\n\n            const pathParts = this.actualPathParts;\n\n            // Use this.entityType if there is not path yet\n            if (pathParts.length === 0) {\n                return this.entityType;\n            }\n\n            let actualDefinition = Shopware.EntityDefinition.get(this.entityType);\n            let entityFound = false;\n\n            pathParts.forEach((propertyName) => {\n                const property = actualDefinition.properties[propertyName];\n\n                // Return if propertyName does not exist in the definition, e.g. \"DEFAULT\", \"en_GB\"\n                if (!property) {\n                    return;\n                }\n\n                // Return if property is translations association\n                if (propertyName === 'translations' && property.relation === 'one_to_many') {\n                    return;\n                }\n\n                // Return if property is a visibility association\n                if (propertyName === 'visibilities' && property.relation === 'one_to_many') {\n                    return;\n                }\n\n                // Return if property is a media association\n                if (propertyName === 'media' && property.relation === 'one_to_many') {\n                    return;\n                }\n\n                // Return if property is a assignedProducts association\n                if (propertyName === 'assignedProducts' && property.relation === 'one_to_many') {\n                    return;\n                }\n\n                // Return if property is a lineItems association\n                if (propertyName === 'lineItems' && property.relation === 'one_to_many') {\n                    return;\n                }\n\n                // Return if property is a price\n                if (propertyName === 'price' && property.type === 'json_object') {\n                    return;\n                }\n\n                // Return if property is custom fields\n                if (propertyName === 'customFields' && property.type === 'json_object') {\n                    return;\n                }\n\n                const entity = actualDefinition.properties[propertyName].entity;\n                entityFound = Shopware.EntityDefinition.has(entity);\n\n                if (entityFound) {\n                    actualDefinition = Shopware.EntityDefinition.get(entity);\n                }\n            });\n\n            if (!entityFound) {\n                return null;\n            }\n\n            return actualDefinition.entity;\n        },\n\n        processFunctions() {\n            return [\n                this.processTranslations,\n                this.processVisibilities,\n                this.processMedia,\n                this.processAssignedProducts,\n                this.processPrice,\n                this.processLineItems,\n                this.processDeliveries,\n                this.processProperties,\n            ];\n        },\n\n        options() {\n            const isCustomField = this.actualPathParts[this.actualPathParts.length - 1] === 'customFields';\n\n            if (this.currentEntity === null && !isCustomField) {\n                return [];\n            }\n\n            let definition;\n            if (isCustomField) {\n                definition = { properties: this.getCustomFields(this.currentEntity || this.entityType) };\n            } else {\n                definition = Shopware.EntityDefinition.get(this.currentEntity);\n            }\n            const unprocessedValues = {\n                definition: definition,\n                options: [],\n                properties: Object.keys(definition.properties),\n                path: this.actualPathPrefix.length > 0 ? this.actualPathPrefix.replace(/\\.?$/, '.') : this.actualPathPrefix,\n            };\n\n            // flow is from lodash\n            const { options } = flow(this.processFunctions)(unprocessedValues);\n\n            return options.sort(this.sortOptions);\n        },\n\n        results() {\n            return this.searchFunction(\n                {\n                    options: this.options,\n                    labelProperty: this.labelProperty,\n                    valueProperty: this.valueProperty,\n                    searchTerm: this.searchTerm,\n                },\n            );\n        },\n\n        availableIsoCodes() {\n            return this.currencies.map(currency => currency.isoCode);\n        },\n\n        availableLocales() {\n            return this.languages.map(language => language.locale.code);\n        },\n\n        searchTerm() {\n            return this.actualSearch.split('.').pop();\n        },\n    },\n\n    methods: {\n        isSelected(item) {\n            return this.getKey(item, this.valueProperty) === this.value;\n        },\n\n        onSelectExpanded() {\n            this.isExpanded = true;\n\n            // Get the search text of the selected item as prefilled value\n            this.searchInput = this.currentValue;\n\n            this.$nextTick(() => {\n                this.resetActiveItem();\n                this.$refs.swSelectInput.select();\n                this.$refs.swSelectInput.focus();\n            });\n        },\n\n        tryGetSearchText(option) {\n            return this.getKey(option, this.labelProperty, '');\n        },\n\n        onSelectCollapsed() {\n            if (this.$attrs.disabled) {\n                return;\n            }\n\n            // Empty the selection if the search term is empty\n            if (this.searchInput === '' && !this.itemRecentlySelected) {\n                this.$emit('before-selection-clear', this.singleSelection, this.value);\n                this.currentValue = '';\n            }\n\n            this.$refs.swSelectInput.blur();\n            this.searchInput = '';\n            this.actualSearch = '';\n            this.itemRecentlySelected = false;\n            this.isExpanded = false;\n        },\n\n        closeResultList() {\n            this.$refs.selectBase.collapse();\n        },\n\n        setValue(item) {\n            this.itemRecentlySelected = true;\n            this.singleSelection = item;\n\n            // If selected item is a relation\n            if (item.relation && item.relation !== 'many_to_many') {\n                this.actualSearch = `${item.value}.`;\n                this.searchInput = this.actualSearch;\n                this.$refs.swSelectInput.select();\n                return;\n            }\n\n            this.currentValue = item.value;\n\n            this.closeResultList();\n        },\n\n        resetActiveItem(pos = 0) {\n            // Return if the result list is closed before the search request returns\n            if (!this.$refs.resultsList) {\n                return;\n            }\n            // If an item is selected the second entry is the first search result\n            if (this.singleSelection) {\n                pos = 1;\n            }\n            this.$refs.resultsList.setActiveItemIndex(pos);\n        },\n\n        onInputSearch() {\n            this.debouncedSearch();\n        },\n\n        debouncedSearch: debounce(function updateSearchTerm() {\n            this.search();\n        }, 300),\n\n        search() {\n            this.$emit('search', this.searchInput);\n\n            this.actualSearch = this.searchInput;\n\n            this.$nextTick(() => {\n                this.resetActiveItem();\n            });\n        },\n\n        getKey(object, keyPath, defaultValue) {\n            return get(object, keyPath, defaultValue);\n        },\n\n        processTranslations({ definition, options, properties, path }) {\n            const translationProperty = definition.properties.translations;\n\n            if (!translationProperty || translationProperty.relation !== 'one_to_many') {\n                return { properties, options, definition, path };\n            }\n\n            const translationDefinition = Shopware.EntityDefinition.get(translationProperty.entity);\n            const translationProperties = Object.keys(translationDefinition.properties);\n\n            const newOptions = [...options, ...this.getTranslationProperties(path, translationProperties)];\n\n            // Remove translation property and translatable properties\n            const filteredProperties = properties.filter(propertyName => {\n                return !translationProperties.includes(propertyName) && propertyName !== 'translations';\n            });\n\n            return {\n                properties: filteredProperties,\n                options: newOptions,\n                definition: definition,\n                path: path,\n            };\n        },\n\n        getTranslationProperties(path, properties) {\n            path = `${path}translations.`;\n            const options = [];\n\n            this.availableLocales.forEach((locale) => {\n                properties.forEach(propertyName => {\n                    const name = `${path}${locale}.${propertyName}`;\n\n                    if (propertyName === 'customFields') {\n                        options.push({ label: name, value: name, relation: true });\n\n                        return;\n                    }\n\n                    options.push({ label: name, value: name });\n                });\n            });\n\n            return options;\n        },\n\n        processPrice({ definition, options, properties, path }) {\n            const priceProperty = definition.properties.price;\n\n            if (!priceProperty || priceProperty.type !== 'json_object') {\n                return { properties, options, definition, path };\n            }\n\n            const newOptions = [...options, ...this.getPriceProperties(path)];\n\n            // Remove visibility property\n            const filteredProperties = properties.filter(propertyName => {\n                return propertyName !== 'price' && propertyName !== 'purchasePrices';\n            });\n\n            return {\n                properties: filteredProperties,\n                options: newOptions,\n                definition: definition,\n                path: path,\n            };\n        },\n\n        getPriceProperties(path) {\n            return [\n                ...this.generatePriceProperties('price', path),\n                ...this.generatePriceProperties('purchasePrices', path),\n            ];\n        },\n\n        generatePriceProperties(priceType, path) {\n            const options = [];\n\n            this.currencies.forEach((currency) => {\n                this.priceProperties.forEach(propertyName => {\n                    const name = `${path}${priceType}.${currency.isoCode}.${propertyName}`;\n                    options.push({ label: name, value: name });\n                });\n            });\n\n            return options;\n        },\n\n        processLineItems({ definition, options, properties, path }) {\n            const lineItemProperty = definition.properties.lineItems;\n\n            if (!lineItemProperty || lineItemProperty.relation !== 'one_to_many') {\n                return { definition, options, properties, path };\n            }\n\n            const newOptions = [...options, ...this.generateLineItemProperties(path)];\n            const filteredProperties = properties.filter(propertyName => {\n                return propertyName !== 'lineItems';\n            });\n\n            return {\n                properties: filteredProperties,\n                options: newOptions,\n                definition: definition,\n                path: path,\n            };\n        },\n\n        generateLineItemProperties(path) {\n            const name = `${path}lineItems`;\n\n            return [{ label: name, value: name }];\n        },\n\n        processDeliveries({ definition, options, properties, path }) {\n            const deliveryProperty = definition.properties.deliveries;\n\n            if (!deliveryProperty || deliveryProperty.relation !== 'one_to_many') {\n                return { properties, options, definition, path };\n            }\n\n            const deliveryDefinition = Shopware.EntityDefinition.get(deliveryProperty.entity);\n            const deliveryProperties = Object.keys(deliveryDefinition.properties);\n\n            const newOptions = [...options, ...this.generateDeliveryProperties(path, deliveryProperties)];\n            const filteredProperties = properties.filter(propertyName => {\n                return propertyName !== 'deliveries';\n            });\n\n            return {\n                properties: filteredProperties,\n                options: newOptions,\n                definition: definition,\n                path: path,\n            };\n        },\n\n        generateDeliveryProperties(path, properties) {\n            const options = [];\n\n            properties.forEach(propertyName => {\n                const name = `${path}deliveries.${propertyName}`;\n\n                options.push({ value: name, label: name });\n            });\n\n            return options;\n        },\n\n        processProperties({ definition, options, properties, path }) {\n            const newOptions = [...options];\n\n            properties.forEach((propertyName) => {\n                const name = `${path}${propertyName}`;\n                const property = definition.properties[propertyName];\n\n                if (property.relation === 'one_to_many') {\n                    return;\n                }\n\n                newOptions.push({ label: name, value: name, relation: property.relation });\n            });\n\n            return { definition, options: newOptions, properties, path };\n        },\n\n        processVisibilities({ definition, options, properties, path }) {\n            const visibilityProperty = definition.properties.visibilities;\n\n            if (!visibilityProperty || visibilityProperty.relation !== 'one_to_many') {\n                return { properties, options, definition, path };\n            }\n\n            const newOptions = [...options, ...this.getVisibilityProperties(path)];\n\n            // Remove visibility property\n            const filteredProperties = properties.filter(propertyName => {\n                return propertyName !== 'visibilities';\n            });\n\n            return {\n                properties: filteredProperties,\n                options: newOptions,\n                definition: definition,\n                path: path,\n            };\n        },\n\n        getVisibilityProperties(path) {\n            const options = [];\n\n            this.visibilityProperties.forEach(property => {\n                const name = `${path}visibilities.${property}`;\n                options.push({ label: name, value: name });\n            });\n\n            return options;\n        },\n\n        processMedia({ definition, options, properties, path }) {\n            const mediaProperty = definition.properties.media;\n\n            if (!mediaProperty || mediaProperty.relation !== 'one_to_many') {\n                return { properties, options, definition, path };\n            }\n\n            const newOptions = [...options, ...this.getMediaProperties(path)];\n\n            // Remove media property\n            const filteredProperties = properties.filter(propertyName => {\n                return propertyName !== 'media';\n            });\n\n            return {\n                properties: filteredProperties,\n                options: newOptions,\n                definition: definition,\n                path: path,\n            };\n        },\n\n        getMediaProperties(path) {\n            const name = `${path}media`;\n\n            return [{ label: name, value: name }];\n        },\n\n        processAssignedProducts({ definition, options, properties, path }) {\n            const assignedProductsProperty = definition.properties.assignedProducts;\n\n            if (!assignedProductsProperty || assignedProductsProperty.relation !== 'one_to_many') {\n                return { properties, options, definition, path };\n            }\n\n            const newOptions = [...options, ...this.getAssignedProductsProperties(path)];\n\n            // Remove assignedProducts property\n            const filteredProperties = properties.filter(propertyName => {\n                return propertyName !== 'assignedProducts';\n            });\n\n            return {\n                properties: filteredProperties,\n                options: newOptions,\n                definition: definition,\n                path: path,\n            };\n        },\n\n        getAssignedProductsProperties(path) {\n            const name = `${path}assignedProducts`;\n\n            return [{ label: name, value: name }];\n        },\n\n        sortOptions(a, b) {\n            if (a.value > b.value) {\n                return 1;\n            }\n            if (b.value > a.value) {\n                return -1;\n            }\n            return 0;\n        },\n\n        getCustomFields(entityName) {\n            const customFields = {};\n\n            this.customFieldSets.forEach((customFieldSet) => {\n                const hasRelation = customFieldSet.relations.filter((relation) => {\n                    return relation.entityName === entityName;\n                }).length > 0;\n\n                if (!hasRelation) {\n                    return;\n                }\n\n                customFieldSet.customFields.forEach((customField) => {\n                    customFields[customField.name] = {\n                        label: customField.name,\n                        value: customField.name,\n                    };\n                });\n            });\n\n            return customFields;\n        },\n    },\n};\n","export default \"\\n{% block sw_import_export_entity_path_select %}\\n<sw-select-base\\n    ref=\\\"selectBase\\\"\\n    class=\\\"sw-import-export-entity-path-select\\\"\\n    :is-loading=\\\"isLoading\\\"\\n    v-bind=\\\"$attrs\\\"\\n    @select-expanded=\\\"onSelectExpanded\\\"\\n    @select-collapsed=\\\"onSelectCollapsed\\\"\\n    v-on=\\\"$listeners\\\"\\n>\\n    \\n    {% block sw_import_export_entity_path_select_base %}\\n    \\n    {% block sw_import_export_entity_path_select_base_selection %}\\n    <template #sw-select-selection=\\\"{ identification, error, disabled, size, setFocusClass, removeFocusClass }\\\">\\n        \\n        {% block sw_import_export_entity_path_select_base_selection_slot %}\\n        <div class=\\\"sw-import-export-entity-path-select__selection\\\">\\n            \\n            {% block sw_import_export_entity_path_select_single_selection_inner %}\\n            \\n            {% block sw_import_export_entity_path_select_single_selection_inner_label %}\\n            <div\\n                v-if=\\\"!isExpanded\\\"\\n                class=\\\"sw-import-export-entity-path-select__selection-text\\\"\\n                :class=\\\"selectionTextClasses\\\"\\n            >\\n                <template v-if=\\\"singleSelection\\\">\\n                    <slot\\n                        name=\\\"selection-label-property\\\"\\n                        v-bind=\\\"{ item: singleSelection, labelProperty, valueProperty, searchTerm, getKey }\\\"\\n                    >\\n                        {{ getKey(singleSelection, labelProperty) }}\\n                    </slot>\\n                </template>\\n                <template v-else>\\n                    {{ placeholder }}\\n                </template>\\n            </div>\\n            {% endblock %}\\n            \\n            {% block sw_import_export_entity_path_select_single_selection_inner_input %}\\n            \\n            <input\\n                ref=\\\"swSelectInput\\\"\\n                v-model=\\\"searchInput\\\"\\n                class=\\\"sw-import-export-entity-path-select__selection-input\\\"\\n                :class=\\\"inputClasses\\\"\\n                type=\\\"text\\\"\\n                :placeholder=\\\"placeholder\\\"\\n                @input=\\\"onInputSearch\\\"\\n            >\\n            {% endblock %}\\n            {% endblock %}\\n        </div>\\n        {% endblock %}\\n    </template>\\n    {% endblock %}\\n\\n    \\n    {% block sw_import_export_entity_path_select_base_results %}\\n    <template #results-list>\\n        \\n        {% block sw_import_export_entity_path_select_base_results_slot %}\\n        <sw-select-result-list\\n            ref=\\\"resultsList\\\"\\n            :options=\\\"visibleResults\\\"\\n            :is-loading=\\\"isLoading\\\"\\n            :empty-message=\\\"$tc('global.sw-single-select.messageNoResults', 0, { term: searchInput })\\\"\\n            :focus-el=\\\"$refs.swSelectInput\\\"\\n            @paginate=\\\"$emit('paginate')\\\"\\n            @item-select=\\\"setValue\\\"\\n        >\\n            \\n            {% block sw_import_export_entity_path_select_base_results_list %}\\n            \\n            {% block sw_import_export_entity_path_select_base_results_list_before %}\\n            <template #before-item-list>\\n                <slot name=\\\"before-item-list\\\">\\n                    <sw-select-result\\n                        :selected=\\\"isSelected(notMappedItem)\\\"\\n                        v-bind=\\\"{ item: notMappedItem, index: -1 }\\\"\\n                        @item-select=\\\"setValue\\\"\\n                    >\\n                        \\n                        {% block sw_import_export_entity_path_select_base_results_list_not_mapped_label %}\\n                        {{ notMappedItem.label }}\\n                        {% endblock %}\\n                    </sw-select-result>\\n                    <hr class=\\\"sw-import-export-entity-path-select__listing-seperator\\\">\\n                </slot>\\n            </template>\\n            {% endblock %}\\n\\n            \\n            {% block sw_import_export_entity_path_select_base_results_list_result %}\\n            <template #result-item=\\\"{ item, index }\\\">\\n                <slot\\n                    name=\\\"result-item\\\"\\n                    v-bind=\\\"{ item, index, labelProperty, searchTerm, highlightSearchTerm, isSelected, setValue, getKey }\\\"\\n                >\\n                    <sw-select-result\\n                        :selected=\\\"isSelected(item)\\\"\\n                        v-bind=\\\"{ item, index }\\\"\\n                        @item-select=\\\"setValue\\\"\\n                    >\\n                        \\n                        {% block sw_import_export_entity_path_select_base_results_list_result_label %}\\n                        <slot\\n                            name=\\\"result-label-property\\\"\\n                            v-bind=\\\"{ item, index, labelProperty, valueProperty, searchTerm, highlightSearchTerm, getKey }\\\"\\n                        >\\n                            <sw-highlight-text\\n                                v-if=\\\"highlightSearchTerm\\\"\\n                                :text=\\\"getKey(item, labelProperty)\\\"\\n                                :search-term=\\\"searchTerm\\\"\\n                            />\\n                            <template v-else>\\n                                {{ getKey(item, labelProperty) }}\\n                            </template>\\n\\n                            <sw-icon\\n                                v-if=\\\"item.relation && item.relation !== 'many_to_many'\\\"\\n                                name=\\\"regular-chevron-right-xxs\\\"\\n                                size=\\\"16px\\\"\\n                            />\\n                        </slot>\\n                        {% endblock %}\\n                    </sw-select-result>\\n                </slot>\\n            </template>\\n            {% endblock %}\\n\\n            \\n            {% block sw_import_export_entity_path_select_base_results_list_after %}\\n            <template #after-item-list>\\n                <slot name=\\\"after-item-list\\\"></slot>\\n            </template>\\n            {% endblock %}\\n            {% endblock %}\\n        </sw-select-result-list>\\n        {% endblock %}\\n    </template>\\n    {% endblock %}\\n    {% endblock %}\\n</sw-select-base>\\n{% endblock %}\\n\";","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../../../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--15-1!../../../../../node_modules/css-loader/dist/cjs.js??ref--15-2!../../../../../node_modules/sass-loader/dist/cjs.js??ref--15-3!./sw-import-export-entity-path-select.scss\");\nif(content.__esModule) content = content.default;\nif(typeof content === 'string') content = [[module.id, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar add = require(\"!../../../../../node_modules/vue-style-loader/lib/addStylesClient.js\").default\nvar update = add(\"64f5303d\", content, true, {});"],"sourceRoot":""}