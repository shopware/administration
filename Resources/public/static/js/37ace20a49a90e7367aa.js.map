{"version":3,"sources":["webpack:///./src/module/sw-settings-country/page/sw-settings-country-list/sw-settings-country-list.html.twig","webpack:///./src/module/sw-settings-country/page/sw-settings-country-list/index.js","webpack:///./src/module/sw-settings-country/page/sw-settings-country-list/sw-settings-country-list.scss"],"names":["Mixin","Shopware","Criteria","Data","template","inject","mixins","getByName","data","entityName","country","sortBy","isLoading","sortDirection","naturalSorting","showDeleteModal","metaInfo","title","this","$createTitle","computed","countryRepository","repositoryFactory","create","detailPageLinkText","acl","can","$tc","methods","getList","_this","criteria","page","limit","setTerm","term","addSorting","sort","search","Context","api","then","items","total","catch","onInlineEditSave","promise","_this2","createNotificationSuccess","message","name","createNotificationError","onChangeLanguage","languageId","State","commit","onDelete","id","onCloseDeleteModal","onConfirmDelete","_this3","delete","getCountryColumns","property","dataIndex","inlineEdit","label","routerLink","primary","content","__esModule","default","module","i","locals","exports","add"],"mappings":"wIAAe,ICMPA,EAAUC,SAAVD,MACAE,EAAaD,SAASE,KAAtBD,SAGO,WACXE,SDXW,ynTCaXC,OAAQ,CACJ,oBACA,OAGJC,OAAQ,CACJN,EAAMO,UAAU,YAGpBC,KAAI,WACA,MAAO,CACHC,WAAY,UACZC,QAAS,KACTC,OAAQ,eACRC,WAAW,EACXC,cAAe,MACfC,gBAAgB,EAChBC,iBAAiB,IAIzBC,SAAQ,WACJ,MAAO,CACHC,MAAOC,KAAKC,iBAIpBC,SAAU,CACNC,kBAAiB,WACb,OAAOH,KAAKI,kBAAkBC,OAAO,YAGzCC,mBAAkB,WACd,OAAKN,KAAKO,IAAIC,IAAI,mBAAqBR,KAAKO,IAAIC,IAAI,kBACzCR,KAAKS,IAAI,uBAGbT,KAAKS,IAAI,yBAIxBC,QAAS,CACLC,QAAO,WAAI,IAADC,EAAA,KACAC,EAAW,IAAI7B,EAASgB,KAAKc,KAAMd,KAAKe,OAE9Cf,KAAKN,WAAY,EAEjBM,KAAKJ,eAAiC,SAAhBI,KAAKP,OAC3BoB,EAASG,QAAQhB,KAAKiB,MACtBJ,EAASK,WAAWlC,EAASmC,KAAKnB,KAAKP,OAAQO,KAAKL,cAAeK,KAAKJ,iBAExEI,KAAKG,kBAAkBiB,OAAOP,EAAU9B,SAASsC,QAAQC,KAAKC,MAAK,SAACC,GAKhE,OAJAZ,EAAKa,MAAQD,EAAMC,MACnBb,EAAKpB,QAAUgC,EACfZ,EAAKlB,WAAY,EAEV8B,KACRE,OAAM,WACLd,EAAKlB,WAAY,MAIzBiC,iBAAgB,SAACC,EAASpC,GAAU,IAADqC,EAAA,KAC/BD,EAAQL,MAAK,WACTM,EAAKC,0BAA0B,CAC3BC,QAASF,EAAKpB,IAAI,gDAAiD,EAAG,CAAEuB,KAAMxC,EAAQwC,YAE3FN,OAAM,WACLG,EAAKlB,UACLkB,EAAKI,wBAAwB,CACzBF,QAASF,EAAKpB,IAAI,qDAK9ByB,iBAAgB,SAACC,GACbpD,SAASqD,MAAMC,OAAO,2BAA4BF,GAClDnC,KAAKW,WAGT2B,SAAQ,SAACC,GACLvC,KAAKH,gBAAkB0C,GAG3BC,mBAAkB,WACdxC,KAAKH,iBAAkB,GAG3B4C,gBAAe,SAACF,GAAK,IAADG,EAAA,KAGhB,OAFA1C,KAAKH,iBAAkB,EAEhBG,KAAKG,kBAAkBwC,OAAOJ,GAAIhB,MAAK,WAC1CmB,EAAK/B,cAIbiC,kBAAiB,WACb,MAAO,CAAC,CACJC,SAAU,OACVC,UAAW,OACXC,WAAY,SACZC,MAAO,sCACPC,WAAY,6BACZC,SAAS,GACV,CACCL,SAAU,WACVE,WAAY,SACZC,MAAO,2CACR,CACCH,SAAU,MACVE,WAAY,SACZC,MAAO,sCACR,CACCH,SAAU,OACVE,WAAY,SACZC,MAAO,uCACR,CACCH,SAAU,SACVE,WAAY,SACZC,MAAO,8C,qBCjIvB,IAAIG,EAAU,EAAQ,QACnBA,EAAQC,aAAYD,EAAUA,EAAQE,SACnB,iBAAZF,IAAsBA,EAAU,CAAC,CAACG,EAAOC,EAAIJ,EAAS,MAC7DA,EAAQK,SAAQF,EAAOG,QAAUN,EAAQK,SAG/BE,EADH,EAAQ,QAAwEL,SACzE,WAAYF,GAAS,EAAM,K","file":"static/js/37ace20a49a90e7367aa.js","sourcesContent":["export default \"\\n{% block sw_settings_list %}\\n\\n{% block sw_settings_country_index %}\\n<sw-page class=\\\"sw-settings-country-list\\\">\\n\\n    \\n    {% block sw_settings_country_list_search_bar %}\\n    <template #search-bar>\\n        <sw-search-bar\\n            initial-search-type=\\\"country\\\"\\n            :placeholder=\\\"$tc('sw-settings-country.general.placeholderSearchBar')\\\"\\n            :initial-search=\\\"term\\\"\\n            @search=\\\"onSearch\\\"\\n        />\\n    </template>\\n    {% endblock %}\\n\\n    \\n    {% block sw_settings_country_list_smart_bar_header %}\\n    <template #smart-bar-header>\\n        \\n        {% block sw_settings_country_list_smart_bar_header_title %}\\n        <h2>\\n            \\n            {% block sw_settings_country_list_smart_bar_header_title_text %}\\n            {{ $tc('sw-settings.index.title') }} <sw-icon\\n                name=\\\"regular-chevron-right-xs\\\"\\n                small\\n            /> {{ $tc('sw-settings-country.list.textHeadline') }}\\n            {% endblock %}\\n\\n            \\n            {% block sw_settings_country_list_smart_bar_header_amount %}\\n            <span\\n                v-if=\\\"!isLoading\\\"\\n                class=\\\"sw-page__smart-bar-amount\\\"\\n            >\\n                ({{ total }})\\n            </span>\\n            {% endblock %}\\n        </h2>\\n        {% endblock %}\\n    </template>\\n    {% endblock %}\\n\\n    \\n    {% block sw_settings_country_list_smart_bar_actions %}\\n    <template #smart-bar-actions>\\n        \\n        {% block sw_settings_country_list_smart_bar_actions_add %}\\n        <sw-button\\n            v-tooltip.bottom=\\\"{\\n                message: $tc('sw-privileges.tooltip.warning'),\\n                disabled: acl.can('country.creator'),\\n                showOnDisabledElements: true\\n            }\\\"\\n            class=\\\"sw-settings-country-list__button-create\\\"\\n            variant=\\\"primary\\\"\\n            :router-link=\\\"{ name: 'sw.settings.country.create' }\\\"\\n            :disabled=\\\"!acl.can('country.creator')\\\"\\n        >\\n            {{ $tc('sw-settings-country.list.buttonAddCountry') }}\\n        </sw-button>\\n        {% endblock %}\\n    </template>\\n    {% endblock %}\\n\\n    \\n    {% block sw_settings_country_list_language_switch %}\\n    <template #language-switch>\\n        <sw-language-switch @on-change=\\\"onChangeLanguage\\\" />\\n    </template>\\n    {% endblock %}\\n\\n    \\n    {% block sw_settings_country_list_content %}\\n    <template #content>\\n        <sw-card-view>\\n            \\n            {% block sw_settings_country_list_content_card %}\\n            <sw-card\\n                v-if=\\\"isLoading || country\\\"\\n                position-identifier=\\\"sw-settings-country-list\\\"\\n            >\\n                \\n                {% block sw_settings_country_list_grid %}\\n                <template #grid>\\n                    \\n                    {% block sw_settings_country_list_grid_inner %}\\n                    <sw-entity-listing\\n                        ref=\\\"swSettingsCountryGrid\\\"\\n                        class=\\\"sw-settings-country-list-grid\\\"\\n                        :items=\\\"country\\\"\\n                        :columns=\\\"getCountryColumns()\\\"\\n                        :repository=\\\"countryRepository\\\"\\n                        :full-page=\\\"false\\\"\\n                        detail-route=\\\"sw.settings.country.detail\\\"\\n                        :show-selection=\\\"true\\\"\\n                        :is-loading=\\\"isLoading\\\"\\n                        :allow-view=\\\"acl.can('country.viewer')\\\"\\n                        :allow-edit=\\\"acl.can('country.editor')\\\"\\n                        :allow-inline-edit=\\\"acl.can('country.editor')\\\"\\n                        :allow-delete=\\\"acl.can('country.deleter')\\\"\\n                        @inline-edit-save=\\\"onInlineEditSave\\\"\\n                    >\\n\\n                        <template #column-active=\\\"{ item, isInlineEdit }\\\">\\n                            <template v-if=\\\"isInlineEdit\\\">\\n                                \\n                                {% block sw_settings_country_list_columns_active_editor %}\\n                                <sw-checkbox-field\\n                                    {% if VUE3 %}\\n                                    v-model:value=\\\"item.active\\\"\\n                                    {% else %}\\n                                    v-model=\\\"item.active\\\"\\n                                    {% endif %}\\n                                />\\n                                {% endblock %}\\n                            </template>\\n                            <template v-else>\\n                                \\n                                {% block sw_settings_country_list_columns_active_label %}\\n                                <sw-icon\\n                                    v-if=\\\"item.active\\\"\\n                                    name=\\\"regular-checkmark-xs\\\"\\n                                    small\\n                                    class=\\\"is--active\\\"\\n                                />\\n                                <sw-icon\\n                                    v-else\\n                                    name=\\\"regular-times-s\\\"\\n                                    small\\n                                    class=\\\"is--inactive\\\"\\n                                />\\n                                {% endblock %}\\n                            </template>\\n                        </template>\\n\\n                        \\n                        {% block sw_settings_country_list_grid_columns_actions %}\\n                        <template #actions=\\\"{ item }\\\">\\n                            \\n                            {% block sw_settings_country_list_grid_columns_actions_edit %}\\n                            <sw-context-menu-item\\n                                :router-link=\\\"{ name: 'sw.settings.country.detail', params: { id: item.id, edit: 'edit' }}\\\"\\n                                :disabled=\\\"!acl.can('country.editor') && !acl.can('country.viewer')\\\"\\n                                class=\\\"sw-country-list__edit-action\\\"\\n                            >\\n                                {{ detailPageLinkText }}\\n                            </sw-context-menu-item>\\n                            {% endblock %}\\n\\n                            \\n                            {% block sw_settings_country_list_grid_columns_actions_delete %}\\n                            <sw-context-menu-item\\n                                class=\\\"sw-country-list__delete-action\\\"\\n                                variant=\\\"danger\\\"\\n                                :disabled=\\\"!acl.can('country.deleter')\\\"\\n                                @click=\\\"onDelete(item.id)\\\"\\n                            >\\n                                {{ $tc('sw-settings-country.list.contextMenuDelete') }}\\n                            </sw-context-menu-item>\\n                            {% endblock %}\\n                        </template>\\n                        {% endblock %}\\n\\n                        \\n                        {% block sw_settings_country_list_grid_action_modals %}\\n                        <template #action-modals=\\\"{ item }\\\">\\n                            \\n                            {% block sw_settings_country_list_delete_modal %}\\n                            <sw-modal\\n                                v-if=\\\"showDeleteModal === item.id\\\"\\n                                :title=\\\"$tc('global.default.warning')\\\"\\n                                variant=\\\"small\\\"\\n                                @modal-close=\\\"onCloseDeleteModal\\\"\\n                            >\\n                                \\n                                {% block sw_settings_country_list_delete_modal_confirm_delete_text %}\\n                                <p class=\\\"sw-settings-country-list__confirm-delete-text\\\">\\n                                    {{ $tc('sw-settings-country.list.textDeleteConfirm', 0, { name: item.name }) }}\\n                                </p>\\n                                {% endblock %}\\n\\n                                \\n                                {% block sw_settings_country_list_delete_modal_footer %}\\n                                <template #modal-footer>\\n                                    \\n                                    {% block sw_settings_country_list_delete_modal_cancel %}\\n                                    <sw-button\\n                                        size=\\\"small\\\"\\n                                        @click=\\\"onCloseDeleteModal\\\"\\n                                    >\\n                                        {{ $tc('sw-settings-country.list.buttonCancel') }}\\n                                    </sw-button>\\n                                    {% endblock %}\\n\\n                                    \\n                                    {% block sw_settings_country_list_delete_modal_confirm %}\\n                                    <sw-button\\n                                        variant=\\\"danger\\\"\\n                                        size=\\\"small\\\"\\n                                        @click=\\\"onConfirmDelete(item.id)\\\"\\n                                    >\\n                                        {{ $tc('sw-settings-country.list.buttonDelete') }}\\n                                    </sw-button>\\n                                    {% endblock %}\\n                                </template>\\n                                {% endblock %}\\n                            </sw-modal>\\n                            {% endblock %}\\n                        </template>\\n                        {% endblock %}\\n                    </sw-entity-listing>\\n                    {% endblock %}\\n                </template>\\n                {% endblock %}\\n            </sw-card>\\n            {% endblock %}\\n        </sw-card-view>\\n    </template>\\n    {% endblock %}\\n</sw-page>\\n    {% endblock %}\\n{% endblock %}\\n\";","/**\n * @package buyers-experience\n */\nimport template from './sw-settings-country-list.html.twig';\nimport './sw-settings-country-list.scss';\n\nconst { Mixin } = Shopware;\nconst { Criteria } = Shopware.Data;\n\n// eslint-disable-next-line sw-deprecation-rules/private-feature-declarations\nexport default {\n    template,\n\n    inject: [\n        'repositoryFactory',\n        'acl',\n    ],\n\n    mixins: [\n        Mixin.getByName('listing'),\n    ],\n\n    data() {\n        return {\n            entityName: 'country',\n            country: null,\n            sortBy: 'country.name',\n            isLoading: false,\n            sortDirection: 'ASC',\n            naturalSorting: true,\n            showDeleteModal: false,\n        };\n    },\n\n    metaInfo() {\n        return {\n            title: this.$createTitle(),\n        };\n    },\n\n    computed: {\n        countryRepository() {\n            return this.repositoryFactory.create('country');\n        },\n\n        detailPageLinkText() {\n            if (!this.acl.can('country.editor') && this.acl.can('country.viewer')) {\n                return this.$tc('global.default.view');\n            }\n\n            return this.$tc('global.default.edit');\n        },\n    },\n\n    methods: {\n        getList() {\n            const criteria = new Criteria(this.page, this.limit);\n\n            this.isLoading = true;\n\n            this.naturalSorting = this.sortBy === 'name';\n            criteria.setTerm(this.term);\n            criteria.addSorting(Criteria.sort(this.sortBy, this.sortDirection, this.naturalSorting));\n\n            this.countryRepository.search(criteria, Shopware.Context.api).then((items) => {\n                this.total = items.total;\n                this.country = items;\n                this.isLoading = false;\n\n                return items;\n            }).catch(() => {\n                this.isLoading = false;\n            });\n        },\n\n        onInlineEditSave(promise, country) {\n            promise.then(() => {\n                this.createNotificationSuccess({\n                    message: this.$tc('sw-settings-country.detail.messageSaveSuccess', 0, { name: country.name }),\n                });\n            }).catch(() => {\n                this.getList();\n                this.createNotificationError({\n                    message: this.$tc('sw-settings-country.detail.messageSaveError'),\n                });\n            });\n        },\n\n        onChangeLanguage(languageId) {\n            Shopware.State.commit('context/setApiLanguageId', languageId);\n            this.getList();\n        },\n\n        onDelete(id) {\n            this.showDeleteModal = id;\n        },\n\n        onCloseDeleteModal() {\n            this.showDeleteModal = false;\n        },\n\n        onConfirmDelete(id) {\n            this.showDeleteModal = false;\n\n            return this.countryRepository.delete(id).then(() => {\n                this.getList();\n            });\n        },\n\n        getCountryColumns() {\n            return [{\n                property: 'name',\n                dataIndex: 'name',\n                inlineEdit: 'string',\n                label: 'sw-settings-country.list.columnName',\n                routerLink: 'sw.settings.country.detail',\n                primary: true,\n            }, {\n                property: 'position',\n                inlineEdit: 'number',\n                label: 'sw-settings-country.list.columnPosition',\n            }, {\n                property: 'iso',\n                inlineEdit: 'string',\n                label: 'sw-settings-country.list.columnIso',\n            }, {\n                property: 'iso3',\n                inlineEdit: 'string',\n                label: 'sw-settings-country.list.columnIso3',\n            }, {\n                property: 'active',\n                inlineEdit: 'string',\n                label: 'sw-settings-country.list.columnActive',\n            }];\n        },\n    },\n};\n","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../../../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--15-1!../../../../../node_modules/css-loader/dist/cjs.js??ref--15-2!../../../../../node_modules/sass-loader/dist/cjs.js??ref--15-3!./sw-settings-country-list.scss\");\nif(content.__esModule) content = content.default;\nif(typeof content === 'string') content = [[module.id, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar add = require(\"!../../../../../node_modules/vue-style-loader/lib/addStylesClient.js\").default\nvar update = add(\"1adacf6d\", content, true, {});"],"sourceRoot":""}