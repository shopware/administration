{"version":3,"sources":["webpack:///./src/app/asyncComponent/form/sw-code-editor/sw-code-editor.scss","webpack:///./src/app/asyncComponent/form/sw-code-editor/index.js","webpack:///./src/app/asyncComponent/form/sw-code-editor/sw-code-editor.html.twig"],"names":["content","__esModule","default","module","i","locals","exports","add","utils","Shopware","Utils","template","inject","props","value","type","String","required","label","completerFunction","Function","editorConfig","Object","completionMode","validValues","validator","length","includes","mode","softWraps","Boolean","setFocus","disabled","sanitizeInput","sanitizeFieldName","error","data","editor","editorId","createId","contentWasSanitized","computed","aceConfig","_objectSpread","concat","this","showPrintMargin","wrap","readOnly","classes","enableHtmlSanitizer","Context","app","config","settings","watch","getValue","setValue","session","setOption","mounted","mountedComponent","destroyed","destroyedComponent","methods","Ace","edit","$refs","defineAutocompletion","on","onInput","onBlur","focus","$emit","_this","_asyncToGenerator","_regeneratorRuntime","mark","_callee","_context","prev","next","sanitizeEditorInput","t0","sent","stop","_this2","_callee2","sanitizedValue","_sanitizedValue$previ","_context2","userInputSanitizeService","html","field","preview","abrupt","setCompleters","textCompleterClonedPlain","JSON","parse","stringify","textCompleter","textCompleterCloned","identifierRegexps","getCompletions","pos","prefix","callback","completers","commands","e","command","name","args","execCommand"],"mappings":"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","file":"static/js/3b7301dcffb3d19d62b2.js","sourcesContent":["// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../../../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--15-1!../../../../../node_modules/css-loader/dist/cjs.js??ref--15-2!../../../../../node_modules/sass-loader/dist/cjs.js??ref--15-3!./sw-code-editor.scss\");\nif(content.__esModule) content = content.default;\nif(typeof content === 'string') content = [[module.id, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar add = require(\"!../../../../../node_modules/vue-style-loader/lib/addStylesClient.js\").default\nvar update = add(\"b1918b7a\", content, true, {});","import Ace from 'ace-builds/src-noconflict/ace';\nimport { setCompleters, textCompleter } from 'ace-builds/src-noconflict/ext-language_tools';\nimport 'ace-builds/src-noconflict/mode-twig';\nimport template from './sw-code-editor.html.twig';\nimport './sw-code-editor.scss';\n\nconst utils = Shopware.Utils;\n\n/**\n * @package admin\n *\n * @deprecated tag:v6.6.0 - Will be private\n * @public\n * @status ready\n * @description\n * Renders a code editor\n * @example-type dynamic\n * @component-example\n * <sw-code-editor label=\"Description\">\n * </sw-code-editor>\n */\n// eslint-disable-next-line sw-deprecation-rules/private-feature-declarations\nexport default {\n    template,\n\n    inject: [\n        'feature',\n        'userInputSanitizeService',\n    ],\n\n    props: {\n        value: {\n            type: String,\n            required: false,\n            default: '',\n        },\n\n        label: {\n            type: String,\n            required: false,\n            default: '',\n        },\n\n        completerFunction: {\n            type: Function,\n            required: false,\n            default: null,\n        },\n\n        editorConfig: {\n            type: Object,\n            required: false,\n            default() {\n                return {};\n            },\n        },\n\n        completionMode: {\n            type: String,\n            required: false,\n            default: 'text',\n            validValues: ['entity', 'text'],\n            validator(value) {\n                if (!value.length) {\n                    return true;\n                }\n                return ['entity', 'text'].includes(value);\n            },\n        },\n\n        mode: {\n            type: String,\n            required: false,\n            default: 'twig',\n            validValues: ['twig', 'text'],\n            validator(value) {\n                if (!value.length) {\n                    return true;\n                }\n                return ['twig', 'text'].includes(value);\n            },\n        },\n\n        softWraps: {\n            type: Boolean,\n            required: false,\n            // TODO: Boolean props should only be opt in and therefore default to false\n            // eslint-disable-next-line vue/no-boolean-default\n            default: true,\n        },\n\n        // set focus to the component when initially mounted\n        setFocus: {\n            type: Boolean,\n            required: false,\n            default: false,\n        },\n\n        disabled: {\n            type: Boolean,\n            required: false,\n            default: false,\n        },\n\n        required: {\n            type: Boolean,\n            required: false,\n            default: false,\n        },\n\n        sanitizeInput: {\n            type: Boolean,\n            required: false,\n            default: false,\n        },\n\n        sanitizeFieldName: {\n            type: String,\n            required: false,\n            default: null,\n        },\n\n        error: {\n            type: Object,\n            required: false,\n            default: null,\n        },\n    },\n\n    data() {\n        return {\n            editor: {},\n            editorId: utils.createId(),\n            contentWasSanitized: false,\n        };\n    },\n\n    computed: {\n        aceConfig() {\n            return {\n                ...{\n                    mode: `ace/mode/${this.mode}`,\n                    showPrintMargin: false,\n                    wrap: this.softWraps,\n                    readOnly: this.disabled,\n                },\n                ...this.editorConfig,\n            };\n        },\n\n        classes() {\n            return {\n                'has--error': !!this.error,\n            };\n        },\n\n        enableHtmlSanitizer() {\n            return Shopware.Context.app.config.settings.enableHtmlSanitizer;\n        },\n    },\n\n    watch: {\n        value(value) {\n            if (value !== null && value !== this.editor.getValue()) {\n                this.editor.setValue(value, 1);\n            }\n        },\n\n        softWraps() {\n            this.editor.session.setOption('wrap', this.softWraps);\n        },\n    },\n\n    mounted() {\n        this.mountedComponent();\n    },\n\n    destroyed() {\n        this.destroyedComponent();\n    },\n\n    methods: {\n        mountedComponent() {\n            this.editor = Ace.edit(this.$refs['editor'.concat(this.editorId)], this.aceConfig);\n\n            this.defineAutocompletion(this.completerFunction);\n\n            this.editor.setValue(this.value || '', 1);\n            this.editor.on('input', this.onInput);\n            this.editor.on('blur', this.onBlur);\n\n            if (this.setFocus) {\n                this.editor.focus();\n            }\n\n            this.$emit('mounted');\n        },\n\n        destroyedComponent() {\n            delete this.editor;\n        },\n\n        onInput() {\n            const value = this.editor.getValue();\n\n            if (this.value !== value) {\n                this.$emit('input', value);\n            }\n        },\n\n        async onBlur() {\n            const value = this.enableHtmlSanitizer\n                ? await this.sanitizeEditorInput(this.editor.getValue())\n                : this.editor.getValue();\n\n            this.$emit('blur', value);\n        },\n\n        async sanitizeEditorInput(value) {\n            if (this.sanitizeInput) {\n                this.contentWasSanitized = false;\n\n                if (this.value !== value) {\n                    try {\n                        const sanitizedValue = await this.userInputSanitizeService.sanitizeInput({\n                            html: value,\n                            field: this.sanitizeFieldName,\n                        });\n\n                        this.contentWasSanitized = sanitizedValue?.preview !== value;\n\n                        if (this.contentWasSanitized) {\n                            this.editor.setValue(sanitizedValue?.preview ?? value, 1);\n                            return this.editor.getValue();\n                        }\n                    } catch (ignore) { /* api endpoint did not work, keep user entry */ }\n                }\n            }\n            return value;\n        },\n\n        defineAutocompletion(completerFunction) {\n            /**\n             * Sets a completer function. If completitionMode is set to \"entity\"\n             * Autocomplete can handle [x] and . otherwise it uses the default\n             * RegEx from ACE.\n             * The ExecCommands sets a hook to the \"insertstring\" command to\n             * prevent the autocompletion-popup to hide after a .\n             */\n            setCompleters([]);\n            if (completerFunction) {\n                const textCompleterClonedPlain = JSON.parse(JSON.stringify(textCompleter));\n                const textCompleterCloned = JSON.parse(JSON.stringify(textCompleter));\n\n                if (this.completionMode === 'entity') {\n                    textCompleterCloned.identifierRegexps = [/[\\[\\]\\.a-zA-Z_0-9\\$\\-\\u00A2-\\uFFFF]/];\n\n                    textCompleterCloned.getCompletions = function getComps(editor, session, pos, prefix, callback) {\n                        this.identifierRegexps = [/[\\[\\][a-zA-Z_0-9\\$\\-\\u00A2-\\uFFFF]/];\n                        callback(null, completerFunction(prefix));\n                        this.identifierRegexps = [/[\\[\\]\\.a-zA-Z_0-9\\$\\-\\u00A2-\\uFFFF]/];\n                    };\n\n                    textCompleterCloned.completerFunction = completerFunction;\n                    this.editor.completers = [textCompleterCloned];\n\n                    const startCallback = (function startCall(e) {\n                        if (e.command.name === 'insertstring') {\n                            if (e.args !== '\\n' && e.args !== ' ') {\n                                e.editor.execCommand('startAutocomplete', null);\n                            }\n                        }\n                    });\n\n                    this.editor.commands.on('afterExec', startCallback);\n                } else {\n                    textCompleterClonedPlain.identifierRegexps = null;\n                    textCompleterClonedPlain.getCompletions = function getComps(editor, session, pos, prefix, callback) {\n                        callback(null, completerFunction(prefix));\n                    };\n\n                    textCompleterClonedPlain.completerFunction = completerFunction;\n                    this.editor.completers = [textCompleterClonedPlain];\n                }\n            } else {\n                this.editor.completers = [];\n            }\n        },\n    },\n};\n","export default \"\\n{% block sw_code_editor %}\\n<div\\n    class=\\\"sw-code-editor\\\"\\n    :class=\\\"classes\\\"\\n>\\n\\n    \\n    {% block sw_text_editor_label %}\\n    {% endblock %}\\n\\n    \\n    {% block sw_code_editor_editor %}\\n    \\n    <sw-base-field\\n        v-bind=\\\"$attrs\\\"\\n        :label=\\\"label\\\"\\n        :disabled=\\\"disabled\\\"\\n        :required=\\\"required\\\"\\n        :error=\\\"error\\\"\\n    >\\n        <template #sw-field-input>\\n            <div\\n                :ref=\\\"`editor${editorId}`\\\"\\n                class=\\\"sw-code-editor__editor\\\"\\n                :content=\\\"value\\\"\\n                tabindex=\\\"0\\\"\\n            ></div>\\n        </template>\\n    </sw-base-field>\\n    {% endblock %}\\n    \\n    {% block sw_code_editor_sanitize_info %}\\n    <div\\n        v-if=\\\"sanitizeInput\\\"\\n        class=\\\"sw-code-editor__sanitize-bar\\\"\\n    >\\n        \\n        {% block sw_code_editor_sanitize_info_content %}\\n        <div\\n            v-if=\\\"contentWasSanitized && enableHtmlSanitizer\\\"\\n            class=\\\"sw-code-editor__sanitized-hint\\\"\\n            :class=\\\"{'sw-code-editor__sanitized-hint--visible': contentWasSanitized}\\\"\\n        >\\n            \\n            {% block sw_code_editor_sanitize_info_content_sanitized %}\\n            <sw-circle-icon\\n                icon-name=\\\"regular-info-circle\\\"\\n                :size=\\\"30\\\"\\n                variant=\\\"warning\\\"\\n            />\\n            <p class=\\\"sw-code-editor__sanitize-text\\\">\\n                {{ $tc('global.sw-code-editor.sanitizedHint') }}\\n            </p>\\n            {% endblock %}\\n        </div>\\n        <div\\n            v-if=\\\"enableHtmlSanitizer\\\"\\n            class=\\\"sw-code-editor__sanitize-info\\\"\\n            :class=\\\"{'sw-code-editor__sanitize-info--visible': !contentWasSanitized}\\\"\\n        >\\n            \\n            {% block sw_code_editor_sanitize_info_content_hint %}\\n            <sw-circle-icon\\n                icon-name=\\\"regular-info-circle\\\"\\n                :size=\\\"30\\\"\\n                variant=\\\"info\\\"\\n            />\\n            <p class=\\\"sw-code-editor__sanitize-text\\\">\\n                {{ $tc('global.sw-code-editor.sanitizeInfo') }}\\n            </p>\\n            {% endblock %}\\n        </div>\\n        {% endblock %}\\n\\n    </div>\\n    {% endblock %}\\n</div>\\n{% endblock %}\\n\";"],"sourceRoot":""}