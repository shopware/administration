{"version":3,"sources":["webpack:///./src/module/sw-media/page/sw-media-index/sw-media-index.scss","webpack:///./src/module/sw-media/page/sw-media-index/index.js","webpack:///./src/module/sw-media/page/sw-media-index/sw-media-index.html.twig"],"names":["content","__esModule","default","module","i","locals","exports","add","_Shopware","Shopware","Context","Filter","template","inject","props","routeFolderId","type","String","fileAccept","required","data","_this$$route$query$te","_this$$route$query","isLoading","selectedItems","uploads","term","this","$route","query","uploadTag","parentFolder","currentFolder","metaInfo","title","$createTitle","computed","mediaFolderRepository","repositoryFactory","create","mediaRepository","rootFolder","root","api","name","$tc","id","assetFilter","getByName","watch","feature","isActive","updateFolder","created","createdComponent","destroyed","destroyedComponent","methods","updateRoute","_this","_asyncToGenerator","_regeneratorRuntime","mark","_callee","wrap","_context","prev","next","get","sent","parentId","stop","$root","$off","onSearch","onUploadsAdded","_this2","_callee2","_context2","mediaService","runUploads","reloadList","onUploadFinished","_ref","targetId","filter","upload","onUploadFailed","_ref2","onChangeLanguage","clearSelection","value","onItemsDeleted","ids","onMediaFoldersDissolved","folderIds","includes","routeId","$router","push","params","folderId","$refs","mediaLibrary","refreshList","splice","length","onMediaUnselect","_ref3","item","index","findIndex","selected","newFolderId","_this$$route$query$te2","_this$$route$query2"],"mappings":"iIAGA,IAAIA,EAAU,EAAQ,QACnBA,EAAQC,aAAYD,EAAUA,EAAQE,SACnB,iBAAZF,IAAsBA,EAAU,CAAC,CAACG,EAAOC,EAAIJ,EAAS,MAC7DA,EAAQK,SAAQF,EAAOG,QAAUN,EAAQK,SAG/BE,EADH,EAAQ,QAAwEL,SACzE,WAAYF,GAAS,EAAM,K,uFCN5CQ,G,UAA4BC,UAApBC,EAAOF,EAAPE,QAASC,EAAMH,EAANG,OAMF,WACXC,SCVW,uhJDYXC,OAAQ,CACJ,oBACA,eACA,MACA,WAGJC,MAAO,CACHC,cAAe,CACXC,KAAMC,OACNf,QAAS,MAGbgB,WAAY,CACRF,KAAMC,OACNE,UAAU,EACVjB,QAAS,QAIjBkB,KAAI,WAAI,IAADC,EAAAC,EACH,MAAO,CACHC,WAAW,EACXC,cAAe,GACfC,QAAS,GACTC,KAA6B,QAAzBL,EAAmB,QAAnBC,EAAEK,KAAKC,OAAOC,aAAK,IAAAP,OAAA,EAAjBA,EAAmBI,YAAI,IAAAL,IAAI,GACjCS,UAAW,4BACXC,aAAc,KACdC,cAAe,OAIvBC,SAAQ,WACJ,MAAO,CACHC,MAAOP,KAAKQ,iBAIpBC,SAAU,CACNC,sBAAqB,WACjB,OAAOV,KAAKW,kBAAkBC,OAAO,iBAEzCC,gBAAe,WACX,OAAOb,KAAKW,kBAAkBC,OAAO,UAEzCE,WAAU,WACN,IAAMC,EAAOf,KAAKU,sBAAsBE,OAAO7B,EAAQiC,KAGvD,OAFAD,EAAKE,KAAOjB,KAAKkB,IAAI,iCACrBH,EAAKI,GAAK,KACHJ,GAGXK,YAAW,WACP,OAAOpC,EAAOqC,UAAU,WAIhCC,MAAO,CACHlC,cAAa,WACT,GAAIY,KAAKuB,QAAQC,SAAS,QAItB,OAHAxB,KAAKD,KAAO,QACZC,KAAKyB,eAKTzB,KAAKD,KAAO,KACZC,KAAKyB,iBAIbC,QAAO,WACH1B,KAAK2B,oBAGTC,UAAS,WACL5B,KAAK6B,sBAGTC,QAAS,CACLH,iBAAgB,WAER3B,KAAKuB,QAAQC,SAAS,SAAkC,KAAvBxB,KAAKZ,cACtCY,KAAK+B,YAAY,MAKrB/B,KAAKyB,gBAGHA,aAAY,WAAI,IAADO,EAAA,YAAAC,IAAAC,IAAAC,MAAA,SAAAC,IAAA,OAAAF,IAAAG,MAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,UACZR,EAAK5C,cAAc,CAADkD,EAAAE,KAAA,QACnBR,EAAK3B,cAAgB2B,EAAKlB,WAC1BkB,EAAK5B,aAAe,KAAKkC,EAAAE,KAAA,uBAAAF,EAAAE,KAAA,EAEER,EAAKtB,sBAAsB+B,IAAIT,EAAK5C,cAAeL,EAAQiC,KAAK,KAAD,EAAxE,GAAlBgB,EAAK3B,cAAaiC,EAAAI,MAEdV,EAAK3B,gBAAiB2B,EAAK3B,cAAcsC,SAAQ,CAAAL,EAAAE,KAAA,gBAAAF,EAAAE,KAAA,GACvBR,EAAKtB,sBAAsB+B,IAAIT,EAAK3B,cAAcsC,SAAU5D,EAAQiC,KAAK,KAAD,GAAlGgB,EAAK5B,aAAYkC,EAAAI,KAAAJ,EAAAE,KAAA,iBAEjBR,EAAK5B,aAAe4B,EAAKlB,WAAW,yBAAAwB,EAAAM,UAAAR,MAV3BH,IAerBJ,mBAAkB,WACd7B,KAAK6C,MAAMC,KAAK,SAAU9C,KAAK+C,WAG7BC,eAAc,WAAI,IAADC,EAAA,YAAAhB,IAAAC,IAAAC,MAAA,SAAAe,IAAA,OAAAhB,IAAAG,MAAA,SAAAc,GAAA,cAAAA,EAAAZ,KAAAY,EAAAX,MAAA,cAAAW,EAAAX,KAAA,EACbS,EAAKG,aAAaC,WAAWJ,EAAK9C,WAAW,KAAD,EAClD8C,EAAKK,aAAa,wBAAAH,EAAAP,UAAAM,MAFCjB,IAKvBsB,iBAAgB,SAAAC,GAAgB,IAAbC,EAAQD,EAARC,SACfzD,KAAKF,QAAUE,KAAKF,QAAQ4D,QAAO,SAACC,GAChC,OAAOA,EAAOxC,KAAOsC,MAI7BG,eAAc,SAAAC,GAAgB,IAAbJ,EAAQI,EAARJ,SACbzD,KAAKF,QAAUE,KAAKF,QAAQ4D,QAAO,SAACC,GAChC,OAAOF,IAAaE,EAAOxC,OAInC2C,iBAAgB,WACZ9D,KAAK+D,kBAGThB,SAAQ,SAACiB,GACLhE,KAAKD,KAAOiE,EACZhE,KAAK+D,kBAGTE,eAAc,SAACC,GACXlE,KAAKmE,wBAAwBD,EAAIE,YAGrCD,wBAAuB,SAACD,GAEpB,GADAlE,KAAK+D,iBACDG,EAAIG,SAASrE,KAAKZ,eAAgB,CAClC,IAAIkF,EAAU,KAWd,OAVItE,KAAKI,eACLkE,EAAUtE,KAAKI,aAAae,SAGhCnB,KAAKuE,QAAQC,KAAK,CACdvD,KAAM,iBACNwD,OAAQ,CACJC,SAAUJ,KAMtBtE,KAAKsD,cAGTA,WAAU,WACNtD,KAAK2E,MAAMC,aAAaC,eAG5Bd,eAAc,WACV/D,KAAKH,cAAciF,OAAO,EAAG9E,KAAKH,cAAckF,SAGpDC,gBAAe,SAAAC,GAAY,IAATC,EAAID,EAAJC,KACRC,EAAQnF,KAAKH,cAAcuF,WAAU,SAACC,GACxC,OAAOA,IAAaH,KAGpBC,GAAS,GACTnF,KAAKH,cAAciF,OAAOK,EAAO,IAIzCpD,YAAW,SAACuD,GAAc,IAADC,EAAAC,EACrBxF,KAAKD,KAA8B,QAA1BwF,EAAoB,QAApBC,EAAGxF,KAAKC,OAAOC,aAAK,IAAAsF,OAAA,EAAjBA,EAAmBzF,YAAI,IAAAwF,IAAI,GACvCvF,KAAKuE,QAAQC,KAAK,CACdvD,KAAM,iBACNwD,OAAQ,CACJC,SAAUY","file":"static/js/c7f476c2e0f87d194f61.js","sourcesContent":["// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../../../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--15-1!../../../../../node_modules/css-loader/dist/cjs.js??ref--15-2!../../../../../node_modules/sass-loader/dist/cjs.js??ref--15-3!./sw-media-index.scss\");\nif(content.__esModule) content = content.default;\nif(typeof content === 'string') content = [[module.id, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar add = require(\"!../../../../../node_modules/vue-style-loader/lib/addStylesClient.js\").default\nvar update = add(\"76100639\", content, true, {});","import template from './sw-media-index.html.twig';\nimport './sw-media-index.scss';\n\nconst { Context, Filter } = Shopware;\n\n/**\n * @package buyers-experience\n */\n// eslint-disable-next-line sw-deprecation-rules/private-feature-declarations\nexport default {\n    template,\n\n    inject: [\n        'repositoryFactory',\n        'mediaService',\n        'acl',\n        'feature',\n    ],\n\n    props: {\n        routeFolderId: {\n            type: String,\n            default: null,\n        },\n\n        fileAccept: {\n            type: String,\n            required: false,\n            default: '*/*',\n        },\n    },\n\n    data() {\n        return {\n            isLoading: false,\n            selectedItems: [],\n            uploads: [],\n            term: this.$route.query?.term ?? '',\n            uploadTag: 'upload-tag-sw-media-index',\n            parentFolder: null,\n            currentFolder: null,\n        };\n    },\n\n    metaInfo() {\n        return {\n            title: this.$createTitle(),\n        };\n    },\n\n    computed: {\n        mediaFolderRepository() {\n            return this.repositoryFactory.create('media_folder');\n        },\n        mediaRepository() {\n            return this.repositoryFactory.create('media');\n        },\n        rootFolder() {\n            const root = this.mediaFolderRepository.create(Context.api);\n            root.name = this.$tc('sw-media.index.rootFolderName');\n            root.id = null;\n            return root;\n        },\n\n        assetFilter() {\n            return Filter.getByName('asset');\n        },\n    },\n\n    watch: {\n        routeFolderId() {\n            if (this.feature.isActive('VUE3')) {\n                this.term = '';\n                this.updateFolder();\n\n                return;\n            }\n\n            this.term = null;\n            this.updateFolder();\n        },\n    },\n\n    created() {\n        this.createdComponent();\n    },\n\n    destroyed() {\n        this.destroyedComponent();\n    },\n\n    methods: {\n        createdComponent() {\n            // Vue router sets the folder id to an empty string if the page is reloaded\n            if (this.feature.isActive('VUE3') && this.routeFolderId === '') {\n                this.updateRoute(null);\n\n                return;\n            }\n\n            this.updateFolder();\n        },\n\n        async updateFolder() {\n            if (!this.routeFolderId) {\n                this.currentFolder = this.rootFolder;\n                this.parentFolder = null;\n            } else {\n                this.currentFolder = await this.mediaFolderRepository.get(this.routeFolderId, Context.api);\n\n                if (this.currentFolder && this.currentFolder.parentId) {\n                    this.parentFolder = await this.mediaFolderRepository.get(this.currentFolder.parentId, Context.api);\n                } else {\n                    this.parentFolder = this.rootFolder;\n                }\n            }\n        },\n\n        destroyedComponent() {\n            this.$root.$off('search', this.onSearch);\n        },\n\n        async onUploadsAdded() {\n            await this.mediaService.runUploads(this.uploadTag);\n            this.reloadList();\n        },\n\n        onUploadFinished({ targetId }) {\n            this.uploads = this.uploads.filter((upload) => {\n                return upload.id !== targetId;\n            });\n        },\n\n        onUploadFailed({ targetId }) {\n            this.uploads = this.uploads.filter((upload) => {\n                return targetId !== upload.id;\n            });\n        },\n\n        onChangeLanguage() {\n            this.clearSelection();\n        },\n\n        onSearch(value) {\n            this.term = value;\n            this.clearSelection();\n        },\n\n        onItemsDeleted(ids) {\n            this.onMediaFoldersDissolved(ids.folderIds);\n        },\n\n        onMediaFoldersDissolved(ids) {\n            this.clearSelection();\n            if (ids.includes(this.routeFolderId)) {\n                let routeId = null;\n                if (this.parentFolder) {\n                    routeId = this.parentFolder.id;\n                }\n\n                this.$router.push({\n                    name: 'sw.media.index',\n                    params: {\n                        folderId: routeId,\n                    },\n                });\n                return;\n            }\n\n            this.reloadList();\n        },\n\n        reloadList() {\n            this.$refs.mediaLibrary.refreshList();\n        },\n\n        clearSelection() {\n            this.selectedItems.splice(0, this.selectedItems.length);\n        },\n\n        onMediaUnselect({ item }) {\n            const index = this.selectedItems.findIndex((selected) => {\n                return selected === item;\n            });\n\n            if (index > -1) {\n                this.selectedItems.splice(index, 1);\n            }\n        },\n\n        updateRoute(newFolderId) {\n            this.term = this.$route.query?.term ?? '';\n            this.$router.push({\n                name: 'sw.media.index',\n                params: {\n                    folderId: newFolderId,\n                },\n            });\n        },\n    },\n};\n","export default \"\\n{% block sw_media_index %}\\n<sw-page class=\\\"sw-media-index\\\">\\n\\n    \\n    {% block sw_media_list_search_bar %}\\n    <template #search-bar>\\n        <sw-search-bar\\n            initial-search-type=\\\"media\\\"\\n            :initial-search=\\\"term\\\"\\n            @search=\\\"onSearch\\\"\\n        />\\n    </template>\\n    {% endblock %}\\n\\n    \\n    {% block sw_media_index_smart_bar %}\\n    \\n    {% block sw_media_index_bread_crumb_navigation %}\\n    <template #smart-bar-back>\\n        <div class=\\\"sw-media-index__navigation\\\">\\n\\n            <template v-if=\\\"parentFolder\\\">\\n                \\n                {% block sw_media_index_bread_crumb_navigation_icon %}\\n                <router-link :to=\\\"{ name: 'sw.media.index', params: { folderId: null } }\\\">\\n                    <img\\n                        :src=\\\"assetFilter('/administration/static/img/media/folder--back--breadcrumb.svg')\\\"\\n                        class=\\\"sw-media-index__navigation-breadcrumb\\\"\\n                        alt=\\\"Folder back breadcrumb\\\"\\n                    >\\n                </router-link>\\n                {% endblock %}\\n\\n                \\n                {% block sw_media_index_bread_crumb_navigation_parent%}\\n                <router-link\\n                    class=\\\"sw-media-index__navigation-label\\\"\\n                    :to=\\\"{ name: 'sw.media.index', params: { folderId: parentFolder.id } }\\\"\\n                >\\n                    {{ parentFolder.name }}\\n                </router-link>\\n                {% endblock %}\\n            </template>\\n        </div>\\n    </template>\\n    {% endblock %}\\n\\n    \\n    {% block sw_media_index_smart_bar_header %}\\n    <template\\n        v-if=\\\"currentFolder\\\"\\n        #smart-bar-header\\n    >\\n        <h2>\\n            \\n            {% block sw_media_index_smart_bar_heading %}\\n            {{ currentFolder.name }}\\n            {% endblock %}\\n        </h2>\\n    </template>\\n    {% endblock %}\\n\\n    <template #smart-bar-actions>\\n        \\n        {% block sw_media_index_smart_bar_media_upload %}\\n        <sw-media-upload-v2\\n            v-tooltip=\\\"{\\n                message: $tc('sw-privileges.tooltip.warning'),\\n                disabled: acl.can('media.creator'),\\n                showOnDisabledElements: true\\n            }\\\"\\n            :disabled=\\\"!acl.can('media.creator')\\\"\\n            variant=\\\"compact\\\"\\n            :file-accept=\\\"fileAccept\\\"\\n            :target-folder-id=\\\"routeFolderId\\\"\\n            :upload-tag=\\\"uploadTag\\\"\\n        />\\n        {% endblock %}\\n    </template>\\n    {% endblock %}\\n\\n    \\n    {% block sw_media_index_language_switch %}\\n    <template #language-switch>\\n        <sw-language-switch @on-change=\\\"reloadList\\\" />\\n    </template>\\n    {% endblock %}\\n\\n    \\n    {% block sw_media_index_page_content %}\\n    <template #content>\\n        <div class=\\\"sw-media-index__page-content\\\">\\n            \\n            {% block sw_media_index_listing_grid %}\\n            <sw-upload-listener\\n                :upload-tag=\\\"uploadTag\\\"\\n                @media-upload-add=\\\"onUploadsAdded\\\"\\n                @media-upload-finish=\\\"onUploadFinished\\\"\\n                @media-upload-fail=\\\"onUploadFailed\\\"\\n                @media-upload-cancel=\\\"reloadList\\\"\\n            />\\n            <sw-media-library\\n                ref=\\\"mediaLibrary\\\"\\n                {% if VUE3 %}\\n                v-model:selection=\\\"selectedItems\\\"\\n                {% else %}\\n                v-model=\\\"selectedItems\\\"\\n                {% endif %}\\n                class=\\\"sw-media-index__media-library\\\"\\n                :folder-id=\\\"routeFolderId\\\"\\n                :pending-uploads=\\\"uploads\\\"\\n                :term=\\\"term\\\"\\n                editable\\n                @media-folder-change=\\\"updateRoute\\\"\\n            />\\n            {% endblock %}\\n\\n            \\n            {% block sw_media_index_sidebar %}\\n            <sw-media-sidebar\\n                :items=\\\"selectedItems\\\"\\n                :current-folder-id=\\\"routeFolderId\\\"\\n                editable\\n                @media-sidebar-folder-renamed=\\\"updateFolder\\\"\\n                @media-sidebar-items-delete=\\\"onItemsDeleted\\\"\\n                @media-sidebar-folder-items-dissolve=\\\"onMediaFoldersDissolved\\\"\\n                @media-sidebar-items-move=\\\"reloadList\\\"\\n                @media-item-replaced=\\\"reloadList\\\"\\n                @media-item-selection-remove=\\\"onMediaUnselect\\\"\\n            />\\n            {% endblock %}\\n\\n            \\n            {% block sw_media_index_list_grid_loader %}\\n            <sw-loader v-if=\\\"isLoading\\\" />\\n            {% endblock %}\\n        </div>\\n    </template>\\n    {% endblock %}\\n</sw-page>\\n{% endblock %}\\n\";"],"sourceRoot":""}