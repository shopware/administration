(window.webpackJsonpAdministration=window.webpackJsonpAdministration||[]).push([[89565],{772215:function(){},789565:function(e,s,t){"use strict";t.r(s),t.d(s,{default:function(){return l}});var r=t(500624);t(903275);let{EntityDefinition:d,Mixin:i}=Shopware,{Criteria:n}=Shopware.Data,{mapState:o}=Shopware.Component.getComponentHelper(),{cloneDeep:a}=Shopware.Utils.object;var l={template:'\n{% block sw_order_address_selection %}\n<div class="sw-order-address">\n    \n    {% block sw_order_address_selection_modal %}\n    <sw-modal\n        v-if="currentAddress"\n        :title="modalTitle"\n        @modal-close="currentAddress = null"\n    >\n        \n        {% block sw_order_address_modal_content %}\n        <sw-customer-address-form\n            :address="currentAddress"\n            :customer="customer"\n        >\n            <sw-customer-address-form-options\n                :address="currentAddress"\n                :customer="customer"\n                :custom-field-sets="customerAddressCustomFieldSets"\n                @default-address-change="onChangeDefaultAddress"\n            />\n        </sw-customer-address-form>\n        {% endblock %}\n\n        \n        {% block sw_order_address_modal_actions %}\n        <template #modal-footer>\n            \n            {% block sw_order_address_modal_action_close %}\n            <sw-button\n                size="small"\n                @click="currentAddress = null"\n            >\n                {{ $tc(\'global.default.cancel\') }}\n            </sw-button>\n            {% endblock %}\n\n            \n            {% block sw_order_address_modal_actions_apply %}\n            <sw-button\n                variant="primary"\n                size="small"\n                @click="onSaveAddress"\n            >\n                {{ $tc(\'global.default.apply\') }}\n            </sw-button>\n            {% endblock %}\n        </template>\n        {% endblock %}\n    </sw-modal>\n    {% endblock %}\n\n    \n    {% block sw_order_address_selection_entity_single_select %}\n    <sw-single-select\n        :value="addressId"\n        class="sw-order-address-selection"\n        :options="addressOptions"\n        value-property="id"\n        :label="label"\n        :placeholder="$tc(\'sw-order.createBase.detailsBody.placeholderAddress\')"\n        :popover-classes="[\'sw-order-address-selection__popover\']"\n        :disabled="disabled"\n        @update:value="onAddressChange"\n    >\n        <template #before-item-list>\n            <ul class="sw-select-result__item-list">\n                <li\n                    class="sw-select-result sw-select-result__add-new-address"\n                    role="button"\n                    tabindex="0"\n                    @click="onCreateNewAddress"\n                    @keydown.enter="onCreateNewAddress"\n                >\n                    {{ $tc(\'sw-order.createBase.detailsBody.buttonAddNewAddress\') }}\n                </li>\n            </ul>\n        </template>\n\n        <template #result-item="{ item, index, labelProperty, isSelected }">\n            <sw-select-result\n                :selected="isSelected(item)"\n                v-bind="{ item, index }"\n                :class="{\'sw-order-address-selection__order-address\': isSelected(item)}"\n            >\n                <div class="sw-order-address-selection__information">\n\n                    <p>{{ item.firstName }} {{ item.lastName }}</p>\n                    <p class="text-gray">\n                        {{ item.street }}\n                    </p>\n                    <p class="text-gray">\n                        {{ item.zipcode }} {{ item.city }}\n                    </p>\n                    <p class="text-gray">\n                        {{ item.country.translated.name }}\n                    </p>\n                </div>\n\n                <div class="sw-order-address-selection__edit-action">\n                    <sw-context-menu-item @click="onEditAddress(item.id)">\n                        {{ $tc(\'global.default.edit\') }}\n                    </sw-context-menu-item>\n                </div>\n            </sw-select-result>\n        </template>\n    </sw-single-select>\n    {% endblock %}\n</div>\n{% endblock %}\n',inject:["repositoryFactory"],mixins:[i.getByName("notification")],props:{address:{type:Object,required:!1,default:()=>{}},label:{type:String,required:!1,default:""},addressId:{type:String,required:!1,default:null},disabled:{type:Boolean,required:!1,default:!1},type:{type:String,required:!1,default:""}},data(){return{customer:{},currentAddress:null,customerAddressCustomFieldSets:null,orderAddressId:a(this.address?.id)}},computed:{...o("swOrderDetail",["order","versionContext"]),orderCustomer(){return this.order.orderCustomer},orderRepository(){return this.repositoryFactory.create("order")},addressRepository(){return this.repositoryFactory.create(this.customer.addresses.entity,this.customer.addresses.source)},customerRepository(){return this.repositoryFactory.create("customer")},customerCriteria(){let e=new n(1,25);return e.addAssociation("addresses.country"),e},customFieldSetRepository(){return this.repositoryFactory.create("custom_field_set")},customFieldSetCriteria(){let e=new n(1,25);return e.addFilter(n.equals("relations.entityName","customer_address")).addAssociation("customFields"),e},addressOptions(){let e=(this.customer?.addresses||[]).map(e=>({label:`${e.street}, ${e.zipcode} ${e.city}, ${e.country?.translated?.name}`,...e}));return this.address&&e.unshift({label:this.address?.zipCode!==null?`${this.address.street}, ${this.address.zipcode} ${this.address.city}, ${this.address?.country?.translated?.name}`:`${this.address.street}, ${this.address.city}, ${this.address?.country?.translated?.name}`,...this.address}),e},modalTitle(){return this.$tc(`sw-order.addressSelection.${this.currentAddress?._isNew?"modalTitleEditAddress":"modalTitleSelectAddress"}`)},selectedAddressId(){return this.address?.customerAddressId??this.addressId}},created(){this.createdComponent()},methods:{createdComponent(){this.getCustomer(),this.getCustomFieldSet()},onEditAddress(e){if(this.orderAddressId=e,e===this.address.id){this.currentAddress=this.address;return}let s=this.addressRepository.create(Shopware.Context.api,e);this.currentAddress=Object.assign(s,this.customer.addresses.get(e))},onCreateNewAddress(){this.createNewCustomerAddress()},createNewCustomerAddress(){let e=this.addressRepository.create();e.customerId=this.customer.id,this.currentAddress=e},onSaveAddress(){if(null===this.currentAddress)return Promise.resolve();if(this.currentAddress.id===this.address.id)return this.orderRepository.save(this.order,this.versionContext).then(()=>{this.currentAddress=null}).catch(()=>{this.createNotificationError({message:this.$tc("sw-order.detail.messageSaveError")})});if(!this.isValidAddress(this.currentAddress))return this.createNotificationError({message:this.$tc("sw-customer.notification.requiredFields")}),Promise.reject();let e=this.customer.addresses.get(this.currentAddress.id)??this.addressRepository.create(Shopware.Context.api,this.currentAddress.id);return Object.assign(e,this.currentAddress),this.customer.addresses.has(e.id)&&this.customer.addresses.remove(e.id),this.customer.addresses.push(e),this.customerRepository.save(this.customer).then(()=>{this.currentAddress=null})},isValidAddress(e){let s=["createdAt"];return Object.keys(d.getRequiredFields("customer_address")).every(t=>-1!==s.indexOf(t)||(0,r.C1)(e[t]))},onChangeDefaultAddress(e){if(!e.value){this.hasOwnProperty("defaultShippingAddressId")&&(this.customer.defaultShippingAddressId=this.defaultShippingAddressId),this.hasOwnProperty("defaultBillingAddressId")&&(this.customer.defaultBillingAddressId=this.defaultBillingAddressId);return}let s=this.createPrefix(e.name,"-address"),t=`default${s}AddressId`;this[t]=this.customer[t],this.customer[t]=e.id},createPrefix(e,s){let t=e.replace(s,"");return`${t.charAt(0).toUpperCase()}${t.slice(1)}`},onAddressChange(e){this.$emit("change-address",{orderAddressId:this.orderAddressId,customerAddressId:e,type:this.type})},getCustomer(){return this.orderCustomer.customerId?this.customerRepository.get(this.orderCustomer.customerId,Shopware.Context.api,this.customerCriteria).then(e=>{this.customer=e}):Promise.reject()},getCustomFieldSet(){return this.customFieldSetRepository.search(this.customFieldSetCriteria).then(e=>{this.customerAddressCustomFieldSets=e})}}}},903275:function(e,s,t){var r=t(772215);r.__esModule&&(r=r.default),"string"==typeof r&&(r=[[e.id,r,""]]),r.locals&&(e.exports=r.locals),t(745346).Z("77c2b422",r,!0,{})}}]);