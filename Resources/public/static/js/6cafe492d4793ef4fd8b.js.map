{"version":3,"sources":["webpack:///./src/module/sw-settings-custom-field/component/sw-custom-field-type-entity/sw-custom-field-type-entity.html.twig","webpack:///./src/module/sw-settings-custom-field/component/sw-custom-field-type-entity/index.js"],"names":["Criteria","Shopware","Data","template","inject","mounted","_this","this","customEntityRepository","search","Context","api","then","result","customEntities","data","computed","entityTypes","_this2","label","$tc","value","config","labelProperty","customFieldsAwareCustomEntities","forEach","customEntity","push","concat","name","filter","customFieldsAware","repositoryFactory","create","sortedEntityTypes","sort","a","b","localeCompare","methods","createdComponent","currentCustomField","hasOwnProperty","componentName","multiSelectSwitch","onChangeEntityType","entity","entityType","find","type","$delete","onChangeMultiSelectSwitch","state"],"mappings":"8HAAe,ICKPA,EAAaC,SAASC,KAAtBF,SAGO,WACXG,SDTW,6hDCWXC,OAAQ,CACJ,qBAEJC,QAAO,WAAI,IAADC,EAAA,KACNC,KAAKC,uBAAuBC,OAAO,IAAIT,EAAYC,SAASS,QAAQC,KAC/DC,MAAK,SAAAC,GACFP,EAAKQ,eAAiBD,MAGlCE,KAAI,WACA,MAAO,CACHD,eAAgB,KAGxBE,SAAU,CACNC,YAAW,WAAI,IAADC,EAAA,KACJD,EAAc,CAChB,CACIE,MAAOZ,KAAKa,IAAI,uDAChBC,MAAO,WAEX,CACIF,MAAOZ,KAAKa,IAAI,wDAChBC,MAAO,YAEX,CACIF,MAAOZ,KAAKa,IAAI,8DAChBC,MAAO,mBAEX,CACIF,MAAOZ,KAAKa,IAAI,6DAChBC,MAAO,kBAEX,CACIF,MAAOZ,KAAKa,IAAI,uDAChBC,MAAO,WAEX,CACIF,MAAOZ,KAAKa,IAAI,wDAChBC,MAAO,WACPC,OAAQ,CACJC,cAAe,CAAC,YAAa,cAGrC,CACIJ,MAAOZ,KAAKa,IAAI,4DAChBC,MAAO,iBAEX,CACIF,MAAOZ,KAAKa,IAAI,4DAChBC,MAAO,wBAEX,CACIF,MAAOZ,KAAKa,IAAI,mEAChBC,MAAO,kBAEX,CACIF,MAAOZ,KAAKa,IAAI,wEAChBC,MAAO,aAcf,OAVAd,KAAKiB,gCAAgCC,SAAQ,SAAAC,GACzCT,EAAYU,KAAK,CACbR,MAAOD,EAAKE,IAAI,GAADQ,OAAIF,EAAaG,KAAI,WACpCR,MAAOK,EAAaG,KACpBP,OAAQ,CACJC,cAAeG,EAAaH,oBAKjCN,GAGXO,gCAA+B,WAC3B,OAAOjB,KAAKO,eAAegB,QAAO,SAAAJ,GAAY,OAAIA,EAAaK,sBAGnEvB,uBAAsB,WAClB,OAAOD,KAAKyB,kBAAkBC,OAC1B,kBAIRC,kBAAiB,WAEb,OAAO3B,KAAKU,YAAYkB,MAAK,SAACC,EAAGC,GAC7B,OAAOD,EAAEjB,MAAMmB,cAAcD,EAAElB,YAK3CoB,QAAS,CACLC,iBAAgB,WACPjC,KAAKkC,mBAAmBnB,OAAOoB,eAAe,mBAC/CnC,KAAKkC,mBAAmBnB,OAAOqB,cAAgB,2BAGnDpC,KAAKqC,kBAAqE,8BAAjDrC,KAAKkC,mBAAmBnB,OAAOqB,eAG5DE,mBAAkB,SAACC,GACf,IAAMC,EAAaxC,KAAKU,YAAY+B,MAAK,SAAAC,GAAI,OAAIA,EAAK5B,QAAUyB,KAEhEvC,KAAK2C,QAAQ3C,KAAKkC,mBAAmBnB,OAAQ,iBAGzCyB,EAAWL,eAAe,WAAaK,EAAWzB,OAAOoB,eAAe,mBACxEnC,KAAKkC,mBAAmBnB,OAAOC,cAAgBwB,EAAWzB,OAAOC,gBAIzE4B,0BAAyB,SAACC,GAElB7C,KAAKkC,mBAAmBnB,OAAOqB,cAD/BS,EAC+C,4BAIJ","file":"static/js/6cafe492d4793ef4fd8b.js","sourcesContent":["export default \"\\n{% block sw_custom_field_type_base_content %}\\n\\n\\n{% block sw_custom_field_type_select_options %}{% endblock %}\\n\\n\\n{% block sw_custom_field_type_select_add_option %}{% endblock %}\\n\\n\\n{% block sw_custom_field_type_select_multi %}{% endblock %}\\n\\n{% parent() %}\\n\\n\\n{% block sw_custom_field_type_entity_type %}\\n<sw-single-select\\n    {% if VUE3 %}\\n    v-model:value=\\\"currentCustomField.config.entity\\\"\\n    {% else %}\\n    v-model=\\\"currentCustomField.config.entity\\\"\\n    {% endif %}\\n    :disabled=\\\"!currentCustomField._isNew\\\"\\n    :help-text=\\\"$tc('sw-settings-custom-field.customField.detail.helpTextEntitySelect')\\\"\\n    :label=\\\"$tc('sw-settings-custom-field.customField.detail.labelEntityTypeSelect')\\\"\\n    :options=\\\"sortedEntityTypes\\\"\\n    show-clearable-button\\n    {% if VUE3 %}\\n    @update:value=\\\"onChangeEntityType\\\"\\n    {% else %}\\n    @change=\\\"onChangeEntityType\\\"\\n    {% endif %}\\n/>\\n{% endblock %}\\n\\n\\n{% block sw_custom_field_type_entity_multi %}\\n<sw-switch-field\\n    {% if VUE3 %}\\n    v-model:value=\\\"multiSelectSwitch\\\"\\n    {% else %}\\n    v-model=\\\"multiSelectSwitch\\\"\\n    {% endif %}\\n    class=\\\"sw-custom-field-detail__switch\\\"\\n    :disabled=\\\"!currentCustomField._isNew\\\"\\n    :help-text=\\\"$tc('sw-settings-custom-field.customField.detail.helpTextMultiSelect')\\\"\\n    :label=\\\"$tc('sw-settings-custom-field.customField.detail.labelMultiSelect')\\\"\\n    {% if VUE3 %}\\n    @update:value=\\\"onChangeMultiSelectSwitch\\\"\\n    {% else %}\\n    @change=\\\"onChangeMultiSelectSwitch\\\"\\n    {% endif %}\\n/>\\n    {% endblock %}\\n\\n{% endblock %}\\n\";","/**\n * @package services-settings\n */\nimport template from './sw-custom-field-type-entity.html.twig';\n\nconst { Criteria } = Shopware.Data;\n\n// eslint-disable-next-line sw-deprecation-rules/private-feature-declarations\nexport default {\n    template,\n\n    inject: [\n        'repositoryFactory',\n    ],\n    mounted() {\n        this.customEntityRepository.search(new Criteria(), Shopware.Context.api)\n            .then(result => {\n                this.customEntities = result;\n            });\n    },\n    data() {\n        return {\n            customEntities: [],\n        };\n    },\n    computed: {\n        entityTypes() {\n            const entityTypes = [\n                {\n                    label: this.$tc('sw-settings-custom-field.customField.entity.product'),\n                    value: 'product',\n                },\n                {\n                    label: this.$tc('sw-settings-custom-field.customField.entity.category'),\n                    value: 'category',\n                },\n                {\n                    label: this.$tc('sw-settings-custom-field.customField.entity.shippingMethod'),\n                    value: 'shipping_method',\n                },\n                {\n                    label: this.$tc('sw-settings-custom-field.customField.entity.paymentMethod'),\n                    value: 'payment_method',\n                },\n                {\n                    label: this.$tc('sw-settings-custom-field.customField.entity.country'),\n                    value: 'country',\n                },\n                {\n                    label: this.$tc('sw-settings-custom-field.customField.entity.customer'),\n                    value: 'customer',\n                    config: {\n                        labelProperty: ['firstName', 'lastName'],\n                    },\n                },\n                {\n                    label: this.$tc('sw-settings-custom-field.customField.entity.salesChannel'),\n                    value: 'sales_channel',\n                },\n                {\n                    label: this.$tc('sw-settings-custom-field.customField.entity.manufacturer'),\n                    value: 'product_manufacturer',\n                },\n                {\n                    label: this.$tc('sw-settings-custom-field.customField.entity.dynamicProductGroup'),\n                    value: 'product_stream',\n                },\n                {\n                    label: this.$tc('sw-settings-custom-field.customField.entity.shoppingExperienceLayout'),\n                    value: 'cms_page',\n                },\n            ];\n\n            this.customFieldsAwareCustomEntities.forEach(customEntity => {\n                entityTypes.push({\n                    label: this.$tc(`${customEntity.name}.label`),\n                    value: customEntity.name,\n                    config: {\n                        labelProperty: customEntity.labelProperty,\n                    },\n                });\n            });\n\n            return entityTypes;\n        },\n\n        customFieldsAwareCustomEntities() {\n            return this.customEntities.filter(customEntity => customEntity.customFieldsAware);\n        },\n\n        customEntityRepository() {\n            return this.repositoryFactory.create(\n                'custom_entity',\n            );\n        },\n\n        sortedEntityTypes() {\n            // eslint-disable-next-line vue/no-side-effects-in-computed-properties\n            return this.entityTypes.sort((a, b) => {\n                return a.label.localeCompare(b.label);\n            });\n        },\n    },\n\n    methods: {\n        createdComponent() {\n            if (!this.currentCustomField.config.hasOwnProperty('componentName')) {\n                this.currentCustomField.config.componentName = 'sw-entity-single-select';\n            }\n\n            this.multiSelectSwitch = this.currentCustomField.config.componentName === 'sw-entity-multi-id-select';\n        },\n\n        onChangeEntityType(entity) {\n            const entityType = this.entityTypes.find(type => type.value === entity);\n\n            this.$delete(this.currentCustomField.config, 'labelProperty');\n\n            // pass the label property into the custom field's config to allow different / multiple labelProperties\n            if (entityType.hasOwnProperty('config') && entityType.config.hasOwnProperty('labelProperty')) {\n                this.currentCustomField.config.labelProperty = entityType.config.labelProperty;\n            }\n        },\n\n        onChangeMultiSelectSwitch(state) {\n            if (state) {\n                this.currentCustomField.config.componentName = 'sw-entity-multi-id-select';\n                return;\n            }\n\n            this.currentCustomField.config.componentName = 'sw-entity-single-select';\n        },\n    },\n};\n"],"sourceRoot":""}