{"version":3,"sources":["webpack:///./src/module/sw-flow/view/detail/sw-flow-detail-flow/index.js","webpack:///./src/module/sw-flow/view/detail/sw-flow-detail-flow/sw-flow-detail-flow.html.twig","webpack:///./src/module/sw-flow/view/detail/sw-flow-detail-flow/sw-flow-detail-flow.scss"],"names":["_Shopware","Shopware","Component","State","utils","Utils","cloneDeep","object","_Component$getCompone","getComponentHelper","mapGetters","mapState","template","inject","props","isLoading","type","Boolean","required","default","isNewFlow","isTemplate","isUnknownTrigger","data","flowContainerStyle","computed","_objectSpread","sequenceRepository","this","repositoryFactory","create","formatSequences","convertSequenceData","rootSequences","sequences","filter","sequence","parentId","showActionWarning","_this","triggerActions","length","some","actionName","_isNew","ruleId","hasAvailableAction","watch","handler","value","flow","eventName","createSequence","commit","immediate","_this2","sequenceContainers","document","getElementsByName","maxWidth","$nextTick","Array","from","forEach","item","offsetWidth","created","createdComponent","methods","_this$triggerActions","getTriggerActions","flowActionService","getActions","then","actions","_this3","results","reduce","result","isArray","displayGroup","push","Object","values","rootSequence","convertToTreeData","node","parentIndex","findIndex","el","id","trueCase","trueBlock","_defineProperty","falseBlock","newSequence","config","position","createId","assign","onEventChange","expression","concat","onAddRootSequence","acl","can","newItem","getSequenceId","content","__esModule","module","i","locals","exports","add"],"mappings":"kuBAGA,IAAAA,EAA6BC,SAArBC,EAASF,EAATE,UAAWC,EAAKH,EAALG,MACbC,EAAQH,SAASI,MACfC,EAAcL,SAASI,MAAME,OAA7BD,UACRE,EAAiCN,EAAUO,qBAAnCC,EAAUF,EAAVE,WAAYC,EAAQH,EAARG,SAML,WACXC,SCbW,+qKDeXC,OAAQ,CACJ,oBACA,MACA,oBACA,oCAGJC,MAAO,CACHC,UAAW,CACPC,KAAMC,QACNC,UAAU,EACVC,SAAS,GAEbC,UAAW,CACPJ,KAAMC,QACNC,UAAU,EACVC,SAAS,GAEbE,WAAY,CACRL,KAAMC,QACNC,UAAU,EACVC,SAAS,GAEbG,iBAAkB,CACdN,KAAMC,QACNC,UAAU,EACVC,SAAS,IAIjBI,KAAI,WACA,MAAO,CACHC,mBAAoB,OAI5BC,SAAQC,IAAA,CACJC,mBAAkB,WACd,OAAOC,KAAKC,kBAAkBC,OAAO,kBAGzCC,gBAAe,WACX,OAAOH,KAAKI,uBAGhBC,cAAa,WACT,OAAOL,KAAKM,UAAUC,QAAO,SAAAC,GAAQ,OAAKA,EAASC,aAGvDC,kBAAiB,WAAI,IAADC,EAAA,KAChB,SAAKX,KAAKY,eAAeC,SAAWb,KAAKM,UAAUO,SAI5Cb,KAAKM,UAAUQ,MAAK,SAAAN,GACvB,IAAQO,EAA+BP,EAA/BO,WAAYC,EAAmBR,EAAnBQ,OAAQC,EAAWT,EAAXS,OAC5B,SAAKF,GAAcE,MAIXD,IAAWL,EAAKO,mBAAmBH,SAIhDhC,EAAS,cAAe,CAAC,OAAQ,oBACjCD,EAAW,cAAe,CAAC,YAAa,mBAAoB,wBAGnEqC,MAAO,CACHd,cAAe,CACXe,QAAO,SAACC,GACJ,GAAKrB,KAAKsB,KAAKC,YAIVF,EAAMR,OAAQ,CACf,IAAML,EAAWR,KAAKwB,iBACtBjD,EAAMkD,OAAO,0BAA2BjB,KAGhDkB,WAAW,GAGfpB,UAAW,CACPc,QAAO,WAAI,IAADO,EAAA,KACAC,EAAqBC,SAASC,kBAAkB,iBAClDC,EAAW,EAEf/B,KAAKgC,WAAU,WACXC,MAAMC,KAAKN,GAAoBO,SAAQ,SAACC,GACpCL,EAAWK,EAAKC,YAAcN,EAAWK,EAAKC,YAAcN,KAI5DJ,EAAK/B,mBADLmC,GAAY,IACc,KAI1BA,EAAW,KAAOA,GAAY,KACJ,CAAE,YAAa,UAInB,CAAE,YAAa,YAGjDL,WAAW,IAInBY,QAAO,WACHtC,KAAKuC,oBAGTC,QAAS,CACLD,iBAAgB,WAAI,IAADE,EACS,QAApBA,EAACzC,KAAKY,sBAAc,IAAA6B,GAAnBA,EAAqB5B,QACtBb,KAAK0C,qBAIbA,kBAAiB,WACb,OAAO1C,KAAK2C,kBAAkBC,aAAaC,MAAK,SAACC,GAC7CvE,EAAMkD,OAAO,gCAAiCqB,OAItD1C,oBAAmB,WAAI,IAAD2C,EAAA,KAClB,IAAK/C,KAAKM,UACN,MAAO,GAGX,IAGM0C,EAHYtE,EAAUsB,KAAKM,WAGP2C,QAAO,SAACC,EAAQ1C,GAMtC,OALKyB,MAAMkB,QAAQD,EAAO1C,EAAS4C,iBAC/BF,EAAO1C,EAAS4C,cAAgB,IAGpCF,EAAO1C,EAAS4C,cAAcC,KAAK7C,GAC5B0C,IACR,IAEH,OAAOI,OAAOC,OAAOP,GAASC,QAAO,SAACC,EAAQd,GAC1C,IAAMoB,EAAeT,EAAKU,kBAAkBrB,GAM5C,OAJIoB,GACAN,EAAOG,KAAKG,GAGTN,IACR,KAGPO,kBAAiB,SAACnD,GACd,IAAIE,EAAW,KAgCf,OA9BAF,EAAU6B,SAAQ,SAAAuB,GAEd,GAAKA,EAAKjD,SAAV,CAOA,IAAMkD,EAAcrD,EAAUsD,WAAU,SAAAC,GAAE,OAAIA,EAAGC,KAAOJ,EAAKjD,YAGxDH,EAAUqD,KAKXD,EAAKK,SACLzD,EAAUqD,GAAaK,UAASlE,IAAA,GACzBQ,EAAUqD,GAAaK,WAAS,GAAAC,IAAA,GAClCP,EAAKI,GAAKJ,IAGfpD,EAAUqD,GAAaO,WAAUpE,IAAA,GAC1BQ,EAAUqD,GAAaO,YAAU,GAAAD,IAAA,GACnCP,EAAKI,GAAKJ,UAtBflD,EAA+B,OAApBkD,EAAK3C,WACV2C,EAAI5D,IAAA,GACCU,GAAQ,GAAAyD,IAAA,GAAGP,EAAKI,GAAKJ,OAyBjClD,GAGXgB,eAAc,WACV,IAAIhB,EAAWR,KAAKD,mBAAmBG,SACjCiE,EAAWrE,IAAA,GACVU,GAAQ,IACXC,SAAU,KACVQ,OAAQ,KACRF,WAAY,KACZqD,OAAQ,GACRC,SAAU,EACVjB,aAAc,EACdU,GAAItF,EAAM8F,aAId,OADA9D,EAAW8C,OAAOiB,OAAO/D,EAAU2D,IAIvCK,cAAa,SAACjD,GAMV,GALAhD,EAAMkD,OAAO,2BAA4BF,GACzChD,EAAMkD,OAAO,uBAAwB,CACjCgD,WAAW,QAADC,OAAU1E,KAAKsB,KAAKwC,GAAE,iBAG/B9D,KAAKK,cAAcQ,OAAQ,CAC5B,IAAML,EAAWR,KAAKwB,iBACtBjD,EAAMkD,OAAO,0BAA2BjB,KAIhDmE,kBAAiB,WACb,GAAK3E,KAAK4E,IAAIC,IAAI,eAAlB,CAIA,IAAMC,EAAU9E,KAAKwB,iBACrBsD,EAAQT,SAAW,EACnBS,EAAQ1B,aAAepD,KAAKK,cAAcL,KAAKK,cAAcQ,OAAS,GAAGuC,aAAe,EAExF7E,EAAMkD,OAAO,0BAA2BqD,KAG5CC,cAAa,SAACvE,GACV,OAAIA,EAASsD,GACFtD,EAAS4C,aAIbE,OAAOC,OAAO/C,GAAU,GAAG4C,iB,qBE1P9C,IAAI4B,EAAU,EAAQ,QACnBA,EAAQC,aAAYD,EAAUA,EAAQzF,SACnB,iBAAZyF,IAAsBA,EAAU,CAAC,CAACE,EAAOC,EAAIH,EAAS,MAC7DA,EAAQI,SAAQF,EAAOG,QAAUL,EAAQI,SAG/BE,EADH,EAAQ,QAA2E/F,SAC5E,WAAYyF,GAAS,EAAM,K","file":"static/js/9cc6bc7e56e57eea3817.js","sourcesContent":["import template from './sw-flow-detail-flow.html.twig';\nimport './sw-flow-detail-flow.scss';\n\nconst { Component, State } = Shopware;\nconst utils = Shopware.Utils;\nconst { cloneDeep } = Shopware.Utils.object;\nconst { mapGetters, mapState } = Component.getComponentHelper();\n\n/**\n * @private\n * @package services-settings\n */\nexport default {\n    template,\n\n    inject: [\n        'repositoryFactory',\n        'acl',\n        'flowActionService',\n        'ruleConditionDataProviderService',\n    ],\n\n    props: {\n        isLoading: {\n            type: Boolean,\n            required: false,\n            default: false,\n        },\n        isNewFlow: {\n            type: Boolean,\n            required: false,\n            default: false,\n        },\n        isTemplate: {\n            type: Boolean,\n            required: false,\n            default: false,\n        },\n        isUnknownTrigger: {\n            type: Boolean,\n            required: false,\n            default: false,\n        },\n    },\n\n    data() {\n        return {\n            flowContainerStyle: null,\n        };\n    },\n\n    computed: {\n        sequenceRepository() {\n            return this.repositoryFactory.create('flow_sequence');\n        },\n\n        formatSequences() {\n            return this.convertSequenceData();\n        },\n\n        rootSequences() {\n            return this.sequences.filter(sequence => !sequence.parentId);\n        },\n\n        showActionWarning() {\n            if (!this.triggerActions.length || !this.sequences.length) {\n                return false;\n            }\n\n            return this.sequences.some(sequence => {\n                const { actionName, _isNew, ruleId } = sequence;\n                if (!actionName && ruleId) {\n                    return false;\n                }\n\n                return !_isNew && !this.hasAvailableAction(actionName);\n            });\n        },\n\n        ...mapState('swFlowState', ['flow', 'triggerActions']),\n        ...mapGetters('swFlowState', ['sequences', 'availableActions', 'hasAvailableAction']),\n    },\n\n    watch: {\n        rootSequences: {\n            handler(value) {\n                if (!this.flow.eventName) {\n                    return;\n                }\n\n                if (!value.length) {\n                    const sequence = this.createSequence();\n                    State.commit('swFlowState/addSequence', sequence);\n                }\n            },\n            immediate: true,\n        },\n\n        sequences: {\n            handler() {\n                const sequenceContainers = document.getElementsByName('root-sequence');\n                let maxWidth = 0;\n\n                this.$nextTick(() => {\n                    Array.from(sequenceContainers).forEach((item) => {\n                        maxWidth = item.offsetWidth > maxWidth ? item.offsetWidth : maxWidth;\n                    });\n\n                    if (maxWidth <= 870) {\n                        this.flowContainerStyle = null;\n                        return;\n                    }\n\n                    if (maxWidth > 870 && maxWidth <= 1300) {\n                        this.flowContainerStyle = { 'max-width': '1300px' };\n                        return;\n                    }\n\n                    this.flowContainerStyle = { 'max-width': '100%' };\n                });\n            },\n            immediate: true,\n        },\n    },\n\n    created() {\n        this.createdComponent();\n    },\n\n    methods: {\n        createdComponent() {\n            if (!this.triggerActions?.length) {\n                this.getTriggerActions();\n            }\n        },\n\n        getTriggerActions() {\n            return this.flowActionService.getActions().then((actions) => {\n                State.commit('swFlowState/setTriggerActions', actions);\n            });\n        },\n\n        convertSequenceData() {\n            if (!this.sequences) {\n                return [];\n            }\n\n            const sequences = cloneDeep(this.sequences);\n\n            // Group sequences by its displayGroup, then those groups are arranged in ascending order.\n            const results = sequences.reduce((result, sequence) => {\n                if (!Array.isArray(result[sequence.displayGroup])) {\n                    result[sequence.displayGroup] = [];\n                }\n\n                result[sequence.displayGroup].push(sequence);\n                return result;\n            }, {});\n\n            return Object.values(results).reduce((result, item) => {\n                const rootSequence = this.convertToTreeData(item);\n\n                if (rootSequence) {\n                    result.push(rootSequence);\n                }\n\n                return result;\n            }, []);\n        },\n\n        convertToTreeData(sequences) {\n            let sequence = null;\n\n            sequences.forEach(node => {\n                // Check if node is a root sequence\n                if (!node.parentId) {\n                    sequence = node.actionName === null\n                        ? node\n                        : { ...sequence, [node.id]: node }; // Generate action groups\n                    return;\n                }\n\n                const parentIndex = sequences.findIndex(el => el.id === node.parentId);\n\n                // Skip node parent does not existed\n                if (!sequences[parentIndex]) {\n                    return;\n                }\n\n                // Child node is assigned to parent's true block or false block based on their trueCase\n                if (node.trueCase) {\n                    sequences[parentIndex].trueBlock = {\n                        ...sequences[parentIndex].trueBlock,\n                        [node.id]: node,\n                    };\n                } else {\n                    sequences[parentIndex].falseBlock = {\n                        ...sequences[parentIndex].falseBlock,\n                        [node.id]: node,\n                    };\n                }\n            });\n\n            return sequence;\n        },\n\n        createSequence() {\n            let sequence = this.sequenceRepository.create();\n            const newSequence = {\n                ...sequence,\n                parentId: null,\n                ruleId: null,\n                actionName: null,\n                config: {},\n                position: 1,\n                displayGroup: 1,\n                id: utils.createId(),\n            };\n\n            sequence = Object.assign(sequence, newSequence);\n            return sequence;\n        },\n\n        onEventChange(eventName) {\n            State.commit('swFlowState/setEventName', eventName);\n            State.commit('error/removeApiError', {\n                expression: `flow.${this.flow.id}.eventName`,\n            });\n\n            if (!this.rootSequences.length) {\n                const sequence = this.createSequence();\n                State.commit('swFlowState/addSequence', sequence);\n            }\n        },\n\n        onAddRootSequence() {\n            if (!this.acl.can('flow.editor')) {\n                return;\n            }\n\n            const newItem = this.createSequence();\n            newItem.position = 1;\n            newItem.displayGroup = this.rootSequences[this.rootSequences.length - 1].displayGroup + 1;\n\n            State.commit('swFlowState/addSequence', newItem);\n        },\n\n        getSequenceId(sequence) {\n            if (sequence.id) {\n                return sequence.displayGroup;\n            }\n\n            // In case of action sequence list, return displayGroup of first item\n            return Object.values(sequence)[0].displayGroup;\n        },\n    },\n};\n","export default \"\\n{% block sw_flow_detail_flow %}\\n<div class=\\\"sw-flow-detail-flow\\\">\\n    \\n    {% block sw_flow_detail_flow_content %}\\n    <div\\n        class=\\\"sw-flow-detail-flow__content\\\"\\n        :class=\\\"{'sw-flow-detail-flow-template': isTemplate }\\\"\\n        :style=\\\"flowContainerStyle\\\"\\n    >\\n        <sw-alert\\n            v-if=\\\"isUnknownTrigger\\\"\\n            variant=\\\"warning\\\"\\n            class=\\\"sw-flow-detail-flow__warning-unknow-trigger\\\"\\n        >\\n            <p>{{ $tc('sw-flow.flowNotification.messageUnknownTriggerWarning') }}</p>\\n            <p>{{ $tc('sw-flow.flowNotification.textIntroduce') }}</p>\\n            <ul>\\n                <li>{{ $tc('sw-flow.flowNotification.textGuide1') }}</li>\\n                <li>{{ $tc('sw-flow.flowNotification.textGuide2') }}</li>\\n                <li>{{ $tc('sw-flow.flowNotification.textGuide3') }}</li>\\n            </ul>\\n        </sw-alert>\\n\\n        <sw-alert\\n            v-if=\\\"!isLoading && !isUnknownTrigger && showActionWarning \\\"\\n            variant=\\\"warning\\\"\\n            class=\\\"sw-flow-detail-flow__warning-box\\\"\\n        >\\n            {{ $tc('sw-flow.detail.warningText') }}\\n        </sw-alert>\\n        \\n        {% block sw_flow_detail_trigger_card %}\\n        <div class=\\\"sw-flow-detail-flow__trigger-card\\\">\\n            \\n            {% block sw_flow_detail_flow_trigger_select %}\\n            <div class=\\\"sw-flow-detail-flow__trigger-select\\\">\\n                \\n                {% block sw_flow_detail_flow_single_select %}\\n                <sw-flow-trigger\\n                    :disabled=\\\"!acl.can('flow.editor')\\\"\\n                    :event-name=\\\"flow.eventName\\\"\\n                    :is-unknown-trigger=\\\"isUnknownTrigger\\\"\\n                    @option-select=\\\"onEventChange\\\"\\n                />\\n                {% endblock %}\\n            </div>\\n            {% endblock %}\\n\\n            \\n            {% block sw_flow_detail_flow_trigger_explains %}\\n            <div\\n                v-if=\\\"!flow.eventName\\\"\\n                class=\\\"sw-flow-detail-flow__trigger-explain\\\"\\n            >\\n                \\n                {% block sw_flow_detail_flow_trigger_explains_title %}\\n                <h4>{{ $tc('sw-flow.detail.trigger.title') }}</h4>\\n                {% endblock %}\\n\\n                \\n                {% block sw_flow_detail_flow_trigger_explains_help_text %}\\n                <p v-html=\\\"$tc('sw-flow.detail.trigger.helpText')\\\"></p>\\n                {% endblock %}\\n            </div>\\n            {% endblock %}\\n        </div>\\n        {% endblock %}\\n\\n        \\n        {% block sw_flow_detail_flow_sequence_diagram %}\\n        <div\\n            v-if=\\\"flow.eventName\\\"\\n            class=\\\"sw-flow-detail-flow__sequence-diagram\\\"\\n        >\\n            \\n            {% block sw_flow_detail_flow_start_line %}\\n            <div class=\\\"sw-flow-detail-flow__oval\\\"></div>\\n            {% endblock %}\\n\\n            \\n            {% block sw_flow_detail_flow_transition_group %}\\n            <transition-group\\n                name=\\\"list\\\"\\n                tag=\\\"div\\\"\\n            >\\n                \\n                {% block sw_flow_detail_flow_position %}\\n                <div\\n                    v-for=\\\"sequence in formatSequences\\\"\\n                    :key=\\\"getSequenceId(sequence)\\\"\\n                    class=\\\"sw-flow-detail-flow__position list-item\\\"\\n                >\\n\\n                    \\n                    {% block sw_flow_sequence_icon_plus %}\\n                    <div\\n                        class=\\\"sw-flow-detail-flow__position-plus\\\"\\n                        :disabled=\\\"!acl.can('flow.editor')\\\"\\n                        role=\\\"button\\\"\\n                        tabindex=\\\"0\\\"\\n                        @click=\\\"onAddRootSequence\\\"\\n                        @keydown.enter=\\\"onAddRootSequence\\\"\\n                    >\\n                        <sw-icon\\n                            small\\n                            name=\\\"regular-plus-xs\\\"\\n                        />\\n                    </div>\\n                    {% endblock %}\\n\\n                    \\n                    {% block sw_flow_sequence_icon_connection %}\\n                    <div class=\\\"sw-flow-detail-flow__position-connection\\\">\\n                        <sw-icon\\n                            small\\n                            name=\\\"regular-chevron-right-s\\\"\\n                        />\\n                    </div>\\n                    {% endblock %}\\n\\n                    \\n                    {% block sw_flow_detail_flow_sequences %}\\n                    <div\\n                        class=\\\"sw-flow-detail-flow__sequences\\\"\\n                    >\\n                        <sw-flow-sequence\\n                            name=\\\"root-sequence\\\"\\n                            :sequence=\\\"sequence\\\"\\n                            :disabled=\\\"!acl.can('flow.editor')\\\"\\n                            :is-unknown-trigger=\\\"isUnknownTrigger\\\"\\n                        />\\n                    </div>\\n                    {% endblock %}\\n                </div>\\n                {% endblock %}\\n            </transition-group>\\n            {% endblock %}\\n        </div>\\n        {% endblock %}\\n    </div>\\n    {% endblock %}\\n\\n    \\n    {% block sw_flow_detail_flow_modal_extension %}\\n    {% endblock %}\\n</div>\\n{% endblock %}\\n\";","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../../../../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--15-1!../../../../../../node_modules/css-loader/dist/cjs.js??ref--15-2!../../../../../../node_modules/sass-loader/dist/cjs.js??ref--15-3!./sw-flow-detail-flow.scss\");\nif(content.__esModule) content = content.default;\nif(typeof content === 'string') content = [[module.id, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar add = require(\"!../../../../../../node_modules/vue-style-loader/lib/addStylesClient.js\").default\nvar update = add(\"e0be4bac\", content, true, {});"],"sourceRoot":""}