{"version":3,"sources":["webpack:///./src/module/sw-settings-snippet/page/sw-settings-snippet-set-list/sw-settings-snippet-set-list.scss","webpack:///./src/module/sw-settings-snippet/page/sw-settings-snippet-set-list/index.js","webpack:///./src/module/sw-settings-snippet/page/sw-settings-snippet-set-list/sw-settings-snippet-set-list.html.twig"],"names":["content","__esModule","default","module","i","locals","exports","add","_Shopware","Shopware","Mixin","Criteria","Data","template","inject","mixins","getByName","data","isLoading","entityName","sortBy","sortDirection","offset","baseFiles","snippetSets","showDeleteModal","showCloneModal","snippetsEditable","selection","metaInfo","title","this","$createTitle","computed","snippetSetRepository","repositoryFactory","create","snippetSetCriteria","criteria","page","limit","addSorting","sort","term","setTerm","contextMenuEditSnippet","acl","can","$tc","dateFilter","Filter","methods","getList","_this","loadBaseFiles","then","search","response","total","_this2","snippetSetService","getBaseFiles","items","onAddSnippetSet","_this3","newSnippetSet","baseFile","Object","values","name","splice","length","$nextTick","foundRow","$refs","snippetSetList","$children","find","vueComponent","feature","isActive","$options","undefined","item","id","isEditingActive","onInlineEditSave","_this4","match","element","iso","save","createInlineSuccessNote","catch","createInlineErrorNote","finally","onEditSnippetSets","keys","snippetSelection","$router","push","query","ids","createNotEditableErrorNote","onSelectionChanged","snippetSelectionCount","onInlineEditCancel","onDeleteSet","onConfirmDelete","_this5","delete","createDeleteSuccessNote","onCloseDeleteModal","createDeleteErrorNote","onClone","closeCloneModal","onConfirmClone","_this6","_asyncToGenerator","_regeneratorRuntime","mark","_callee","clone","set","baseName","checkUsedNames","copyCounter","wrap","_context","prev","next","sent","get","abrupt","concat","some","createCloneSuccessNote","t0","createCloneErrorNote","finish","t1","stop","createNotificationSuccess","message","createNotificationError","getNoPermissionsTooltip","role","showOnDisabledElements","arguments","showDelay","appearance","disabled"],"mappings":"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","file":"static/js/c7b38571011d947977cb.js","sourcesContent":["// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../../../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--15-1!../../../../../node_modules/css-loader/dist/cjs.js??ref--15-2!../../../../../node_modules/sass-loader/dist/cjs.js??ref--15-3!./sw-settings-snippet-set-list.scss\");\nif(content.__esModule) content = content.default;\nif(typeof content === 'string') content = [[module.id, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar add = require(\"!../../../../../node_modules/vue-style-loader/lib/addStylesClient.js\").default\nvar update = add(\"1adcdc58\", content, true, {});","/**\n * @package services-settings\n */\nimport template from './sw-settings-snippet-set-list.html.twig';\nimport './sw-settings-snippet-set-list.scss';\n\nconst { Mixin, Data: { Criteria } } = Shopware;\n\n// eslint-disable-next-line sw-deprecation-rules/private-feature-declarations\nexport default {\n    template,\n\n    inject: [\n        'snippetSetService',\n        'repositoryFactory',\n        'acl',\n        'feature',\n    ],\n\n    mixins: [\n        Mixin.getByName('sw-settings-list'),\n    ],\n\n    data() {\n        return {\n            isLoading: false,\n            entityName: 'snippetSet',\n            sortBy: 'name',\n            sortDirection: 'ASC',\n            offset: 0,\n            baseFiles: [],\n            snippetSets: [],\n            showDeleteModal: false,\n            showCloneModal: false,\n            snippetsEditable: false,\n            selection: {},\n        };\n    },\n\n    metaInfo() {\n        return {\n            title: this.$createTitle(),\n        };\n    },\n\n    computed: {\n        snippetSetRepository() {\n            return this.repositoryFactory.create('snippet_set');\n        },\n\n        snippetSetCriteria() {\n            const criteria = new Criteria(this.page, this.limit);\n\n            criteria.addSorting(\n                Criteria.sort('name', 'ASC'),\n            );\n\n            if (this.term) {\n                criteria.setTerm(this.term);\n            }\n\n            return criteria;\n        },\n\n        contextMenuEditSnippet() {\n            return this.acl.can('snippet.editor') ?\n                this.$tc('global.default.edit') :\n                this.$tc('global.default.view');\n        },\n\n        dateFilter() {\n            return Shopware.Filter.getByName('date');\n        },\n    },\n\n    methods: {\n        getList() {\n            this.isLoading = true;\n\n            return this.loadBaseFiles().then(() => {\n                return this.snippetSetRepository.search(this.snippetSetCriteria).then((response) => {\n                    this.total = response.total;\n                    this.snippetSets = response;\n                    this.isLoading = false;\n                });\n            });\n        },\n\n        loadBaseFiles() {\n            return this.snippetSetService.getBaseFiles().then((response) => {\n                this.baseFiles = response.items;\n            });\n        },\n\n        onAddSnippetSet() {\n            const newSnippetSet = this.snippetSetRepository.create();\n            newSnippetSet.baseFile = Object.values(this.baseFiles)[0].name;\n\n            const result = this.snippetSets.splice(0, 0, newSnippetSet);\n\n            if (result.length !== 0) {\n                return;\n            }\n\n            this.$nextTick(() => {\n                let foundRow = this.$refs.snippetSetList.$children.find((vueComponent) => {\n                    if (this.feature.isActive('VUE3')) {\n                        if (vueComponent.$options.name === 'AsyncComponentWrapper') {\n                            vueComponent = vueComponent.$children[0];\n                        }\n                    }\n\n                    return vueComponent.item !== undefined && vueComponent.item.id === newSnippetSet.id;\n                });\n\n                if (!foundRow) {\n                    return false;\n                }\n\n                if (this.feature.isActive('VUE3')) {\n                    if (foundRow.$options.name === 'AsyncComponentWrapper') {\n                        foundRow = foundRow.$children[0];\n                    }\n                }\n\n                foundRow.isEditingActive = true;\n\n                return true;\n            });\n        },\n\n        onInlineEditSave(item) {\n            this.isLoading = true;\n\n            const match = Object.values(this.baseFiles).find((element) => {\n                return element.name === item.baseFile;\n            });\n\n            if (match && match.iso !== null) {\n                item.iso = match.iso;\n\n                this.snippetSetRepository.save(item)\n                    .then(() => {\n                        this.createInlineSuccessNote(item.name);\n                    })\n                    .catch(() => {\n                        this.createInlineErrorNote(item.name);\n                        this.getList();\n                    })\n                    .finally(() => {\n                        this.isLoading = false;\n                    });\n            } else {\n                this.isLoading = false;\n                this.createInlineErrorNote(item.name);\n                this.getList();\n            }\n        },\n\n        onEditSnippetSets() {\n            if (!this.snippetsEditable) {\n                this.createNotEditableErrorNote();\n\n                return;\n            }\n            const selection = Object.keys(this.snippetSelection);\n\n            this.$router.push({\n                name: 'sw.settings.snippet.list',\n                query: { ids: selection },\n            });\n        },\n\n        onSelectionChanged(selection) {\n            this.snippetSelection = selection;\n            this.snippetSelectionCount = Object.keys(selection).length;\n            this.snippetsEditable = this.snippetSelectionCount >= 1;\n        },\n\n        onInlineEditCancel() {\n            this.getList();\n        },\n\n        onDeleteSet(id) {\n            this.showDeleteModal = id;\n        },\n\n        onConfirmDelete(id) {\n            this.showDeleteModal = false;\n\n            return this.snippetSetRepository.delete(id)\n                .then(() => {\n                    this.getList();\n                    this.createDeleteSuccessNote();\n                }).catch(() => {\n                    this.onCloseDeleteModal();\n                    this.createDeleteErrorNote();\n                });\n        },\n\n        onClone(id) {\n            this.showCloneModal = id;\n        },\n\n        closeCloneModal() {\n            this.showCloneModal = false;\n        },\n\n        async onConfirmClone(id) {\n            this.isLoading = true;\n\n            try {\n                const clone = await this.snippetSetRepository.clone(id);\n                const set = await this.snippetSetRepository.get(clone.id);\n\n                if (!set) {\n                    return;\n                }\n\n                set.name = `${set.name} ${this.$tc('sw-settings-snippet.general.copyName')}`;\n\n                const baseName = set.name;\n                const checkUsedNames = item => item.name === set.name;\n                let copyCounter = 1;\n\n                while (this.snippetSets.some(checkUsedNames)) {\n                    copyCounter += 1;\n                    set.name = `${baseName} (${copyCounter})`;\n                }\n\n                try {\n                    await this.snippetSetRepository.save(set);\n\n                    this.createCloneSuccessNote();\n                } catch {\n                    await this.snippetSetRepository.delete(set.id);\n\n                    this.createCloneErrorNote();\n                } finally {\n                    this.getList();\n                }\n            } catch {\n                this.createCloneErrorNote();\n            } finally {\n                this.isLoading = false;\n                this.closeCloneModal();\n            }\n        },\n\n        createDeleteSuccessNote() {\n            this.createNotificationSuccess({\n                message: this.$tc('sw-settings-snippet.setList.deleteNoteSuccessMessage'),\n            });\n        },\n\n        createDeleteErrorNote() {\n            this.createNotificationError({\n                message: this.$tc('sw-settings-snippet.setList.deleteNoteErrorMessage'),\n            });\n        },\n\n        createInlineSuccessNote(name) {\n            this.createNotificationSuccess({\n                message: this.$tc('sw-settings-snippet.setList.inlineEditSuccessMessage', 0, { name }),\n            });\n        },\n\n        createInlineErrorNote(name) {\n            this.createNotificationError({\n                message: this.$tc('sw-settings-snippet.setList.inlineEditErrorMessage', name !== null, { name }),\n            });\n        },\n\n        createCloneSuccessNote() {\n            this.createNotificationSuccess({\n                message: this.$tc('sw-settings-snippet.setList.cloneSuccessMessage'),\n            });\n        },\n\n        createCloneErrorNote() {\n            this.createNotificationError({\n                message: this.$tc('sw-settings-snippet.setList.cloneErrorMessage'),\n            });\n        },\n\n        createNotEditableErrorNote() {\n            this.createNotificationError({\n                message: this.$tc('sw-settings-snippet.setList.notEditableNoteErrorMessage'),\n            });\n        },\n\n        getNoPermissionsTooltip(role, showOnDisabledElements = true) {\n            return {\n                showDelay: 300,\n                appearance: 'dark',\n                showOnDisabledElements,\n                disabled: this.acl.can(role),\n                message: this.$tc('sw-privileges.tooltip.warning'),\n            };\n        },\n    },\n};\n","export default \"\\n{% block sw_settings_snippet_set_list %}\\n<sw-page class=\\\"sw-settings-snippet-set-list\\\">\\n    \\n    {% block sw_settings_snippet_set_list_search_bar %}\\n    <template #search-bar>\\n        <sw-search-bar\\n            :initial-search-type=\\\"$tc('sw-settings-snippet.general.searchBarTitleSets')\\\"\\n            :placeholder=\\\"$tc('sw-settings-snippet.general.placeholderSearchBarSets')\\\"\\n            :initial-search=\\\"term\\\"\\n            @search=\\\"onSearch\\\"\\n        />\\n    </template>\\n    {% endblock %}\\n\\n    \\n    {% block sw_settings_snippet_set_list_smart_bar_header %}\\n    <template #smart-bar-header>\\n        \\n        {% block sw_settings_snippet_set_list_smart_bar_header_title %}\\n        <h2>\\n            \\n            {% block sw_settings_snippet_set_list_smart_bar_header_title_text %}\\n            {{ $tc('sw-settings.index.title') }}\\n            <sw-icon\\n                name=\\\"regular-chevron-right-xs\\\"\\n                small\\n            />\\n            {{ $tc('sw-settings-snippet.general.mainMenuItemGeneral') }}\\n            {% endblock %}\\n        </h2>\\n        {% endblock %}\\n    </template>\\n    {% endblock %}\\n\\n    \\n    {% block sw_settings_snippet_set_list_card %}\\n    <template #content>\\n        <sw-card-view>\\n            \\n            {% block sw_settings_snippet_set_list_card_title %}\\n            <sw-card position-identifier=\\\"sw-settings-snippet-set-list-title\\\">\\n                <h3>{{ $tc('sw-settings-snippet.setList.title') }}</h3>\\n                <p>{{ $tc('sw-settings-snippet.setList.description') }}</p>\\n            </sw-card>\\n            {% endblock %}\\n\\n            \\n            {% block sw_settings_snippet_set_list_card_list %}\\n            <sw-card\\n                position-identifier=\\\"sw-settings-snippet-set-list-card-list\\\"\\n                :is-loading=\\\"isLoading\\\"\\n                :title=\\\"$tc('sw-settings-snippet.setList.cardTitle')\\\"\\n            >\\n                \\n                {% block sw_settings_snippet_set_list_card_list_container %}\\n                <sw-container columns=\\\"1fr\\\">\\n                    <sw-card-section divider=\\\"bottom\\\">\\n                        \\n                        {% block sw_settings_snippet_set_list_card_list_container_header %}\\n                        <div class=\\\"sw-settings-snippet-set-list__actions\\\">\\n                            \\n                            {% block sw_settings_snippet_set_list_card_list_container_header_btn_export %}\\n                            <sw-button\\n                                v-if=\\\"false\\\"\\n                                size=\\\"small\\\"\\n                                variant=\\\"ghost\\\"\\n                                disabled\\n                            >\\n                                {{ $tc('sw-settings-snippet.setList.buttonExport') }}\\n                            </sw-button>\\n                            {% endblock %}\\n\\n                            \\n                            {% block sw_settings_snippet_set_list_card_list_container_header_btn_edit_set %}\\n                            <sw-button\\n                                v-tooltip=\\\"getNoPermissionsTooltip('snippet.editor')\\\"\\n                                class=\\\"sw-settings-snippet-set-list__edit-set-action\\\"\\n                                size=\\\"small\\\"\\n                                variant=\\\"primary\\\"\\n                                :disabled=\\\"!acl.can('snippet.editor') || !snippetsEditable\\\"\\n                                @click=\\\"onEditSnippetSets\\\"\\n                            >\\n                                {{ $tc('sw-settings-snippet.setList.buttonEditSet') }}\\n                            </sw-button>\\n                            {% endblock %}\\n\\n                            \\n                            {% block sw_settings_snippet_set_list_card_list_container_header_btn_split %}\\n                            <sw-button-group\\n                                v-tooltip=\\\"getNoPermissionsTooltip('snippet.creator', false)\\\"\\n                                class=\\\"sw-settings-snippet-set-list__action-split\\\"\\n                                split-button\\n                            >\\n                                \\n                                {% block sw_settings_snippet_set_list_card_list_container_header_btn_add_set %}\\n                                <sw-button\\n                                    class=\\\"sw-settings-snippet-set-list__action-add\\\"\\n                                    size=\\\"small\\\"\\n                                    variant=\\\"ghost\\\"\\n                                    :disabled=\\\"!acl.can('snippet.creator')\\\"\\n                                    @click=\\\"onAddSnippetSet\\\"\\n                                >\\n                                    {{ $tc('sw-settings-snippet.setList.buttonAddSet') }}\\n                                </sw-button>\\n                                {% endblock %}\\n\\n                                \\n                                {% block sw_settings_snippet_set_list_card_list_btn_copy_split %}\\n                                <sw-context-button\\n                                    headline=\\\"hi\\\"\\n                                    :disabled=\\\"!acl.can('snippet.creator')\\\"\\n                                >\\n\\n                                    \\n                                    {% block sw_settings_snippet_set_list_card_btn_copy %}\\n                                    <template #button>\\n                                        <sw-button\\n                                            class=\\\"sw-settings-snippet-set-list__action-context-menu\\\"\\n                                            size=\\\"small\\\"\\n                                            variant=\\\"ghost\\\"\\n                                            :disabled=\\\"!acl.can('snippet.creator')\\\"\\n                                            square\\n                                        >\\n                                            \\n                                            {% block sw_settings_snippet_set_list_card_btn_copy_icon %}\\n                                            <sw-icon\\n                                                name=\\\"regular-chevron-down-xs\\\"\\n                                                size=\\\"16\\\"\\n                                            />\\n                                            {% endblock %}\\n                                        </sw-button>\\n                                    </template>\\n                                    {% endblock %}\\n\\n                                    \\n                                    {% block sw_settings_snippet_set_list_card_copy_context_menu %}\\n                                    <sw-context-menu-item variant=\\\"headline\\\">\\n                                        {{ $tc('sw-settings-snippet.setList.splitButtonDuplicateContent') }}\\n                                    </sw-context-menu-item>\\n                                    {% endblock %}\\n\\n                                    \\n                                    {% block sw_settings_snippet_set_list_card_copy_context_divider %}\\n                                    <sw-context-menu-divider />\\n                                    {% endblock %}\\n\\n                                    \\n                                    {% block sw_settings_snippet_set_list_card_copy_context_menu_items %}\\n                                    <sw-context-menu-item\\n                                        v-for=\\\"set in snippetSets\\\"\\n                                        :key=\\\"set.id\\\"\\n                                        @click=\\\"onClone(set.id)\\\"\\n                                    >\\n                                        {{ set.name }}\\n                                    </sw-context-menu-item>\\n                                    {% endblock %}\\n                                </sw-context-button>\\n                                {% endblock %}\\n                            </sw-button-group>\\n                            {% endblock %}\\n                        </div>\\n                        {% endblock %}\\n                    </sw-card-section>\\n                </sw-container>\\n                {% endblock %}\\n\\n                \\n                {% block sw_settings_snippet_set_list_card_list_grid %}\\n                <template #grid>\\n                    <sw-grid\\n                        ref=\\\"snippetSetList\\\"\\n                        :items=\\\"snippetSets\\\"\\n                        :sort-direction=\\\"sortDirection\\\"\\n                        :sort-by=\\\"sortBy\\\"\\n                        :selectable=\\\"acl.can('snippet.editor')\\\"\\n                        :allow-inline-edit=\\\"acl.can('snippet.editor')\\\"\\n                        table\\n                        @inline-edit-finish=\\\"onInlineEditSave\\\"\\n                        @inline-edit-cancel=\\\"onInlineEditCancel\\\"\\n                        @sw-grid-select-item=\\\"onSelectionChanged\\\"\\n                        @sw-grid-select-all=\\\"onSelectionChanged\\\"\\n                        @sort-column=\\\"onSortColumn\\\"\\n                    >\\n                        \\n                        {% block sw_settings_snippet_set_list_card_list_grid_template %}\\n                        <template\\n                            #columns=\\\"{ item }\\\"\\n                        >\\n                            \\n                            {% block sw_settings_snippet_set_list_card_list_grid_column_name %}\\n                            <sw-grid-column\\n                                flex=\\\"minmax(200px, 1fr)\\\"\\n                                class=\\\"sw-settings-snippet-set__column-name\\\"\\n                                :label=\\\"$tc('sw-settings-snippet.setList.columnName')\\\"\\n                                data-index=\\\"name\\\"\\n                                editable\\n                                truncate\\n                                sortable\\n                            >\\n\\n                                \\n                                {% block sw_settings_snippet_set_list_card_list_grid_column_name_link %}\\n                                <router-link :to=\\\"{ name: 'sw.settings.snippet.list', query: { ids: [item.id] } }\\\">\\n                                    {{ item.name }}\\n                                </router-link>\\n                                {% endblock %}\\n\\n                                \\n                                {% block sw_settings_snippet_set_list_card_list_grid_column_name_editor %}\\n                                <template #inline-edit>\\n                                    <sw-text-field\\n                                        ref=\\\"nameEditor\\\"\\n                                        {% if VUE3 %}\\n                                        v-model:value=\\\"item.name\\\"\\n                                        {% else %}\\n                                        v-model=\\\"item.name\\\"\\n                                        {% endif %}\\n                                        name=\\\"sw-field--item-name\\\"\\n                                        :placeholder=\\\"$tc('sw-settings-snippet.setList.placeholderName')\\\"\\n                                    />\\n                                </template>\\n                                {% endblock %}\\n                            </sw-grid-column>\\n                            {% endblock %}\\n\\n                            \\n                            {% block sw_settings_snippet_set_list_card_list_grid_column_changed %}\\n                            <sw-grid-column\\n                                flex=\\\"1fr\\\"\\n                                class=\\\"sw-settings-snippet-set-file__column-changed-at\\\"\\n                                sortable\\n                                :label=\\\"$tc('sw-settings-snippet.setList.columnChangedAt')\\\"\\n                                data-index=\\\"createdAt\\\"\\n                            >\\n                                \\n                                {% block sw_settings_snippet_set_list_card_list_grid_column_changed_date %}\\n                                <div v-if=\\\"item.updatedAt\\\">\\n                                    {{ dateFilter(item.updatedAt) }}\\n                                </div>\\n                                <div v-else>\\n                                    {{ dateFilter(item.createdAt) }}\\n                                </div>\\n                                {% endblock %}\\n                            </sw-grid-column>\\n                            {% endblock %}\\n\\n                            \\n                            {% block sw_settings_snippet_set_list_card_list_grid_column_base_file %}\\n                            <sw-grid-column\\n                                flex=\\\"minmax(200px, 1fr)\\\"\\n                                class=\\\"sw-settings-snippet-set-file__column-base-file\\\"\\n                                sortable\\n                                :label=\\\"$tc('sw-settings-snippet.setList.columnBaseFile')\\\"\\n                                data-index=\\\"baseFile\\\"\\n                                truncate\\n                            >\\n                                {{ item.baseFile }}\\n\\n                                \\n                                {% block sw_settings_snippet_set_list_card_list_grid_column_base_file_editor %}\\n                                <template #inline-edit>\\n                                    <sw-select-field\\n                                        {% if VUE3 %}\\n                                        v-model:value=\\\"item.baseFile\\\"\\n                                        {% else %}\\n                                        v-model=\\\"item.baseFile\\\"\\n                                        {% endif %}\\n                                    >\\n                                        <option\\n                                            v-for=\\\"file in baseFiles\\\"\\n                                            :key=\\\"file.name\\\"\\n                                            :value=\\\"file.name\\\"\\n                                        >\\n                                            {{ file.name }}\\n                                        </option>\\n                                    </sw-select-field>\\n                                </template>\\n                                {% endblock %}\\n                            </sw-grid-column>\\n                            {% endblock %}\\n\\n                            \\n                            {% block sw_settings_snippet_set_list_card_list_grid_column_base_action %}\\n                            <sw-grid-column\\n                                flex=\\\"100px\\\"\\n                                align=\\\"center\\\"\\n                            >\\n                                \\n                                {% block sw_settings_snippet_set_list_card_list_grid_column_base_action_buttons %}\\n                                <sw-context-button>\\n                                    \\n                                    {% block sw_settings_snippet_set_list_card_list_grid_column_base_action_btn_edit %}\\n                                    <sw-context-menu-item\\n                                        class=\\\"sw-setting-snippet-set-list__edit-action\\\"\\n                                        :router-link=\\\"{ name: 'sw.settings.snippet.list', query: { ids: [item.id] } }\\\"\\n                                    >\\n                                        {{ contextMenuEditSnippet }}\\n                                    </sw-context-menu-item>\\n                                    {% endblock %}\\n\\n                                    \\n                                    {% block sw_settings_snippet_set_list_card_list_grid_column_base_action_btn_clone %}\\n                                    <sw-context-menu-item\\n                                        v-tooltip.left=\\\"getNoPermissionsTooltip('snippet.editor')\\\"\\n                                        :disabled=\\\"!acl.can('snippet.creator')\\\"\\n                                        @click=\\\"onClone(item.id)\\\"\\n                                    >\\n                                        {{ $tc('sw-settings-snippet.setList.contextMenuClone') }}\\n                                    </sw-context-menu-item>\\n                                    {% endblock %}\\n\\n                                    \\n                                    {% block sw_settings_snippet_set_list_card_list_grid_column_base_action_btn_delete %}\\n                                    <sw-context-menu-item\\n                                        v-tooltip.left=\\\"getNoPermissionsTooltip('snippet.deleter')\\\"\\n                                        variant=\\\"danger\\\"\\n                                        :disabled=\\\"!acl.can('snippet.deleter')\\\"\\n                                        @click=\\\"onDeleteSet(item.id)\\\"\\n                                    >\\n                                        {{ $tc('sw-settings-snippet.setList.contextMenuDelete') }}\\n                                    </sw-context-menu-item>\\n                                    {% endblock %}\\n                                </sw-context-button>\\n                                {% endblock %}\\n                            </sw-grid-column>\\n                            {% endblock %}\\n\\n                            \\n                            {% block sw_settings_snippet_set_list_columns_delete_modal %}\\n                            <sw-modal\\n                                v-if=\\\"showDeleteModal === item.id\\\"\\n                                :title=\\\"$tc('global.default.warning')\\\"\\n                                variant=\\\"small\\\"\\n                                @modal-close=\\\"onCloseDeleteModal\\\"\\n                            >\\n                                \\n                                {% block sw_settings_snippet_set_list_delete_modal_confirm_delete_text %}\\n                                <p class=\\\"sw-settings-snippet-set-list__confirm-delete-text\\\">\\n                                    {{ $tc('sw-settings-snippet.setList.textDeleteConfirm', 0, { name: item.name }) }}\\n                                </p>\\n                                {% endblock %}\\n\\n                                \\n                                {% block sw_settings_snippet_set_list_delete_modal_footer %}\\n                                <template #modal-footer>\\n                                    \\n                                    {% block sw_settings_snippet_set_list_delete_modal_cancel %}\\n                                    <sw-button\\n                                        size=\\\"small\\\"\\n                                        @click=\\\"onCloseDeleteModal\\\"\\n                                    >\\n                                        {{ $tc('sw-settings-snippet.setList.buttonCancel') }}\\n                                    </sw-button>\\n                                    {% endblock %}\\n\\n                                    \\n                                    {% block sw_settings_snippet_set_list_delete_modal_confirm %}\\n                                    <sw-button\\n                                        variant=\\\"danger\\\"\\n                                        size=\\\"small\\\"\\n                                        @click=\\\"onConfirmDelete(item.id)\\\"\\n                                    >\\n                                        {{ $tc('sw-settings-snippet.setList.buttonDelete') }}\\n                                    </sw-button>\\n                                    {% endblock %}\\n                                </template>\\n                                {% endblock %}\\n                            </sw-modal>\\n                            {% endblock %}\\n\\n                            \\n                            {% block sw_settings_snippet_set_list_columns_clone_modal %}\\n                            <sw-modal\\n                                v-if=\\\"showCloneModal === item.id\\\"\\n                                :title=\\\"$tc('sw-settings-snippet.setList.modalTitleClone')\\\"\\n                                variant=\\\"small\\\"\\n                                @modal-close=\\\"closeCloneModal\\\"\\n                            >\\n                                \\n                                {% block sw_settings_snippet_set_list_clone_modal_confirm_delete_text %}\\n                                <p class=\\\"sw-settings-snippet-set-list__confirm-delete-text\\\">\\n                                    {{ $tc('sw-settings-snippet.setList.textCloneConfirm', 0, { name: item.name }) }}\\n                                </p>\\n                                {% endblock %}\\n\\n                                \\n                                {% block sw_settings_snippet_set_list_clone_modal_footer %}\\n                                <template #modal-footer>\\n                                    \\n                                    {% block sw_settings_snippet_set_list_clone_modal_cancel %}\\n                                    <sw-button\\n                                        size=\\\"small\\\"\\n                                        @click=\\\"closeCloneModal\\\"\\n                                    >\\n                                        {{ $tc('sw-settings-snippet.setList.buttonCancel') }}\\n                                    </sw-button>\\n                                    {% endblock %}\\n\\n                                    \\n                                    {% block sw_settings_snippet_set_list_clone_modal_confirm %}\\n                                    <sw-button\\n                                        variant=\\\"primary\\\"\\n                                        size=\\\"small\\\"\\n                                        @click=\\\"onConfirmClone(item.id)\\\"\\n                                    >\\n                                        {{ $tc('sw-settings-snippet.setList.buttonClone') }}\\n                                    </sw-button>\\n                                    {% endblock %}\\n                                </template>\\n                                {% endblock %}\\n                            </sw-modal>\\n                            {% endblock %}\\n                        </template>\\n                        {% endblock %}\\n\\n                        \\n                        {% block sw_settings_snippet_set_list_card_list_grid_pagination %}\\n                        <template #pagination>\\n                            \\n                            {% block sw_settings_snippet_set_list_card_list_grid_pagination_bar %}\\n                            <sw-pagination\\n                                :offset=\\\"offset\\\"\\n                                :limit=\\\"limit\\\"\\n                                :total=\\\"total\\\"\\n                                :total-visible=\\\"7\\\"\\n                                :page=\\\"page\\\"\\n                                @page-change=\\\"onPageChange\\\"\\n                            />\\n                            {% endblock %}\\n                        </template>\\n                        {% endblock %}\\n                    </sw-grid>\\n                </template>\\n                {% endblock %}\\n            </sw-card>\\n            {% endblock %}\\n        </sw-card-view>\\n    </template>\\n    {% endblock %}\\n</sw-page>\\n{% endblock %}\\n\";"],"sourceRoot":""}