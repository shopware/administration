{"version":3,"sources":["webpack:///./src/app/asyncComponent/media/sw-media-folder-item/sw-media-folder-item.scss","webpack:///./src/app/asyncComponent/media/sw-media-folder-item/index.js","webpack:///./src/app/asyncComponent/media/sw-media-folder-item/sw-media-folder-item.html.twig"],"names":["content","__esModule","default","module","i","locals","exports","add","_Shopware","Shopware","Application","Mixin","Context","template","inheritAttrs","inject","mixins","getByName","props","isParent","type","Boolean","required","data","showSettings","showDissolveModal","showMoveModal","showDeleteModal","lastDefaultFolderId","iconConfig","name","color","computed","mediaFolderRepository","this","repositoryFactory","create","mediaDefaultFolderRepository","moduleFactory","getContainer","mediaFolder","$attrs","item","iconName","assetFilter","Filter","dateFilter","created","createdComponent","methods","getIconConfigFromFolder","_this","_asyncToGenerator","_regeneratorRuntime","mark","_callee","defaultFolder","wrap","_context","prev","next","defaultFolderId","abrupt","get","api","sent","getModuleByEntityName","entity","manifest","icon","stop","onChangeName","updatedName","endInlineEdit","_this2","_callee2","_context2","trim","rejectRenaming","includes","save","_isNew","t0","finish","onBlur","event","input","target","value","cause","title","$tc","message","createNotificationError","isNew","$emit","id","navigateToFolder","$router","push","params","folderId","openSettings","closeSettings","mediaFolderChanged","_this3","$nextTick","openDissolveModal","closeDissolveModal","openDeleteModal","closeDeleteModal","emitItemDeleted","ids","_this4","folderIds","onFolderDissolved","_this5","onFolderMoved","_this6","closeMoveModal","openMoveModal","refreshIconConfig","_this7","_callee3","_context3"],"mappings":"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","file":"static/js/01d197cb77dc30f1bfdb.js","sourcesContent":["// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../../../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--15-1!../../../../../node_modules/css-loader/dist/cjs.js??ref--15-2!../../../../../node_modules/sass-loader/dist/cjs.js??ref--15-3!./sw-media-folder-item.scss\");\nif(content.__esModule) content = content.default;\nif(typeof content === 'string') content = [[module.id, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar add = require(\"!../../../../../node_modules/vue-style-loader/lib/addStylesClient.js\").default\nvar update = add(\"93495756\", content, true, {});","import template from './sw-media-folder-item.html.twig';\nimport './sw-media-folder-item.scss';\n\nconst { Application, Mixin, Context } = Shopware;\n\n/**\n * @package content\n */\n// eslint-disable-next-line sw-deprecation-rules/private-feature-declarations\nexport default {\n    template,\n\n    inheritAttrs: false,\n\n    inject: ['repositoryFactory'],\n\n    mixins: [\n        Mixin.getByName('notification'),\n    ],\n\n    props: {\n        isParent: {\n            type: Boolean,\n            required: false,\n            default: false,\n        },\n    },\n\n    data() {\n        return {\n            showSettings: false,\n            showDissolveModal: false,\n            showMoveModal: false,\n            showDeleteModal: false,\n            lastDefaultFolderId: null,\n            iconConfig: {\n                name: '',\n                color: 'inherit',\n            },\n        };\n    },\n\n    computed: {\n        mediaFolderRepository() {\n            return this.repositoryFactory.create('media_folder');\n        },\n\n        mediaDefaultFolderRepository() {\n            return this.repositoryFactory.create('media_default_folder');\n        },\n\n        moduleFactory() {\n            return Application.getContainer('factory').module;\n        },\n\n        mediaFolder() {\n            return this.$attrs.item;\n        },\n\n        iconName() {\n            switch (this.iconConfig.name) {\n                case 'regular-box':\n                    return 'multicolor-folder-thumbnail--green';\n                case 'regular-products':\n                    return 'multicolor-folder-thumbnail--green';\n                case 'regular-database':\n                    return 'multicolor-folder-thumbnail--grey';\n                case 'regular-content':\n                    return 'multicolor-folder-thumbnail--pink';\n                case 'regular-cog':\n                    return 'multicolor-folder-thumbnail--grey';\n                default:\n                    return 'multicolor-folder-thumbnail';\n            }\n        },\n\n        assetFilter() {\n            return Shopware.Filter.getByName('asset');\n        },\n\n        dateFilter() {\n            return Shopware.Filter.getByName('date');\n        },\n    },\n\n    created() {\n        this.createdComponent();\n    },\n\n    methods: {\n        createdComponent() {\n            this.getIconConfigFromFolder();\n        },\n\n        async getIconConfigFromFolder() {\n            const { mediaFolder } = this;\n\n            if (mediaFolder.defaultFolderId === this.lastDefaultFolderId) {\n                return;\n            }\n\n            this.lastDefaultFolderId = mediaFolder.defaultFolderId;\n            const defaultFolder = await this.mediaDefaultFolderRepository.get(mediaFolder.defaultFolderId, Context.api);\n\n            if (!defaultFolder) {\n                return;\n            }\n\n            const module = this.moduleFactory.getModuleByEntityName(defaultFolder.entity);\n            this.iconConfig.name = module.manifest.icon;\n            this.iconConfig.color = module.manifest.color;\n        },\n\n        async onChangeName(updatedName, item, endInlineEdit) {\n            if (!updatedName || !updatedName.trim()) {\n                this.rejectRenaming(item, 'empty-name', endInlineEdit);\n                return;\n            }\n\n            if (updatedName.includes('<')) {\n                this.rejectRenaming(item, 'invalid-name', endInlineEdit);\n                return;\n            }\n\n            item.name = updatedName;\n\n            try {\n                await this.mediaFolderRepository.save(item, Context.api);\n                item._isNew = false;\n            } catch (error) {\n                this.rejectRenaming(item, error, endInlineEdit);\n            } finally {\n                endInlineEdit();\n            }\n        },\n\n        onBlur(event, item, endInlineEdit) {\n            const input = event.target.value;\n            if (input !== item.name) {\n                return;\n            }\n\n            if (!input || !input.trim()) {\n                this.rejectRenaming(item, 'empty-name', endInlineEdit);\n                return;\n            }\n\n            endInlineEdit();\n        },\n\n        rejectRenaming(item, cause, endInlineEdit) {\n            if (cause) {\n                let title = this.$tc('global.default.error');\n                let message = this.$tc('global.sw-media-folder-item.notification.renamingError.message');\n\n                if (cause === 'empty-name') {\n                    title = this.$tc('global.default.error');\n                    message = this.$tc('global.sw-media-folder-item.notification.errorBlankItemName.message');\n                } else if (cause === 'invalid-name') {\n                    title = this.$tc('global.default.error');\n                    message = this.$tc('global.sw-media-folder-item.notification.errorInvalidItemName.message');\n                }\n\n                this.createNotificationError({\n                    title: title,\n                    message: message,\n                });\n            }\n\n            if (item.isNew() === true) {\n                this.$emit('media-folder-remove', [item.id]);\n            }\n            endInlineEdit();\n        },\n\n        navigateToFolder(id) {\n            this.$router.push({\n                name: 'sw.media.index',\n                params: {\n                    folderId: id,\n                },\n            });\n        },\n\n        openSettings() {\n            this.showSettings = true;\n        },\n\n        closeSettings(mediaFolderChanged) {\n            this.showSettings = false;\n\n            // The boolean check if necessary, because sometimes the original html event is passed as an argument\n            if (typeof mediaFolderChanged === 'boolean' && mediaFolderChanged === true) {\n                this.$nextTick(() => {\n                    this.$emit('media-folder-changed');\n                });\n            }\n        },\n\n        openDissolveModal() {\n            this.showDissolveModal = true;\n        },\n\n        closeDissolveModal() {\n            this.showDissolveModal = false;\n        },\n\n        openDeleteModal() {\n            this.showDeleteModal = true;\n        },\n\n        closeDeleteModal() {\n            this.showDeleteModal = false;\n        },\n\n        emitItemDeleted(ids) {\n            this.closeDeleteModal();\n\n            this.$nextTick(() => {\n                this.$emit('media-folder-delete', ids.folderIds);\n            });\n        },\n\n        onFolderDissolved(ids) {\n            this.closeDissolveModal();\n\n            this.$nextTick(() => {\n                this.$emit('media-folder-dissolve', ids);\n            });\n        },\n\n        onFolderMoved(ids) {\n            this.closeMoveModal();\n\n            this.$nextTick(() => {\n                this.$emit('media-folder-move', ids);\n            });\n        },\n\n        openMoveModal() {\n            this.showMoveModal = true;\n        },\n\n        closeMoveModal() {\n            this.showMoveModal = false;\n        },\n\n        async refreshIconConfig() {\n            await this.getIconConfigFromFolder();\n            this.closeSettings(true);\n        },\n    },\n};\n","export default \"\\n{% block sw_media_folder_item %}\\n<sw-media-base-item\\n    class=\\\"sw-media-folder-item\\\"\\n    v-bind=\\\"$attrs\\\"\\n    :truncate-right=\\\"true\\\"\\n    :allow-multi-select=\\\"!isParent\\\"\\n    v-on=\\\"$listeners\\\"\\n>\\n\\n    \\n    {% block sw_media_folder_item_preview %}\\n    <template #preview=\\\"{ item }\\\">\\n        \\n        {% block sw_media_folder_parent_icon%}\\n        <img\\n            v-if=\\\"isParent\\\"\\n            {% if VUE2 %}\\n            key=\\\"sw-media-folder-preview\\\"\\n            {% endif %}\\n            :src=\\\"assetFilter('/administration/static/img/media/folder--back.svg')\\\"\\n            class=\\\"sw-media-folder-item__folder-thumbnails\\\"\\n            alt=\\\"Folder back\\\"\\n        >\\n        {% endblock %}\\n\\n        \\n        {% block sw_media_folder_default_icon%}\\n        <span\\n            v-else-if=\\\"!!item.defaultFolderId\\\"\\n            {% if VUE2 %}\\n            key=\\\"sw-media-folder-preview\\\"\\n            {% endif %}\\n        >\\n            <img\\n                :src=\\\"assetFilter('/administration/static/img/media/' + iconName + '.svg')\\\"\\n                class=\\\"sw-media-folder-item__folder-thumbnails\\\"\\n                :alt=\\\"iconName\\\"\\n            >\\n            <sw-icon\\n                v-if=\\\"iconConfig.name\\\"\\n                class=\\\"sw-media-folder-item__folder-thumbnails is--inner\\\"\\n                v-bind=\\\"iconConfig\\\"\\n            />\\n        </span>\\n        {% endblock %}\\n\\n        \\n        {% block sw_media_folder_folder_icon%}\\n        <img\\n            v-else\\n            {% if VUE2 %}\\n            key=\\\"sw-media-folder-preview\\\"\\n            {% endif %}\\n            :src=\\\"assetFilter('/administration/static/img/media/folder-thumbnail--large.svg')\\\"\\n            class=\\\"sw-media-folder-item__folder-thumbnails\\\"\\n            alt=\\\"Folder thumbnail\\\"\\n        >\\n        {% endblock %}\\n    </template>\\n    {% endblock %}\\n\\n    \\n    {% block sw_media_folder_name %}\\n    <template #name=\\\"{ item, isInlineEdit, startInlineEdit, endInlineEdit }\\\">\\n        \\n        {% block sw_media_base_item_name %}\\n        <sw-text-field\\n            v-if=\\\"!isParent && (isInlineEdit || item.isNew())\\\"\\n            v-autofocus\\n            class=\\\"sw-media-base-item__name-field\\\"\\n            :value=\\\"item.name\\\"\\n            name=\\\"media-item-name\\\"\\n            @change=\\\"onChangeName($event, item, endInlineEdit)\\\"\\n            @blur=\\\"onBlur($event, item, endInlineEdit)\\\"\\n            @click.stop\\n            {% if VUE3 %}\\n            @keydown.enter.stop\\n            {% endif %}\\n            @keyup.esc=\\\"endInlineEdit\\\"\\n        />\\n        <div\\n            v-else\\n            ref=\\\"itemName\\\"\\n            class=\\\"sw-media-base-item__name\\\"\\n            :title=\\\"item.name\\\"\\n        >\\n            {{ item.name }}\\n        </div>\\n        {% endblock %}\\n    </template>\\n    {% endblock %}\\n\\n    \\n    {% block sw_media_folder_meta_data %}\\n    <template #metadata=\\\"{ item }\\\">\\n        <div class=\\\"sw-media-folder-item__metadata\\\">\\n            {{ dateFilter(item.createdAt) }}\\n        </div>\\n    </template>\\n    {% endblock %}\\n\\n    \\n    {% block sw_media_folder_item_context_menu %}\\n    <template #context-menu=\\\"{ item, startInlineEdit, allowEdit, allowDelete }\\\">\\n        \\n        {% block sw_media_folder_item_context_item_show_media %}\\n        <sw-context-menu-item\\n            class=\\\"sw-media-context-item__show-media-action\\\"\\n            @click=\\\"navigateToFolder(item.id)\\\"\\n        >\\n            {{ $tc('global.sw-media-folder-item.labelContextMenuShowMedia') }}\\n        </sw-context-menu-item>\\n        {% endblock %}\\n\\n        <slot>\\n            \\n            {% block sw_media_folder_item_additional_context_menu_slot %}{% endblock %}\\n        </slot>\\n\\n        \\n        {% block sw_media_folder_item_context_group_quick_actions %}\\n        <div class=\\\"sw-context-menu__group\\\">\\n            \\n            {% block sw_media_folder_item_context_item_show_settings %}\\n            <sw-context-menu-item\\n                class=\\\"sw-media-context-item__open-settings-action\\\"\\n                @click=\\\"openSettings\\\"\\n            >\\n                {{ $tc('global.sw-media-folder-item.labelContextMenuShowSettings') }}\\n            </sw-context-menu-item>\\n            {% endblock %}\\n\\n            \\n            {% block sw_media_folder_item_context_item_move %}\\n            <sw-context-menu-item\\n                :disabled=\\\"!allowEdit\\\"\\n                class=\\\"sw-media-context-item__move-folder-action\\\"\\n                @click=\\\"openMoveModal\\\"\\n            >\\n                {{ $tc('global.sw-media-folder-item.labelContextMenuMove') }}\\n            </sw-context-menu-item>\\n            {% endblock %}\\n\\n            \\n            {% block sw_media_folder_item_context_item_dissolve %}\\n            <sw-context-menu-item\\n                :disabled=\\\"!allowEdit\\\"\\n                class=\\\"sw-media-context-item__dissolve-folder-action\\\"\\n                @click=\\\"openDissolveModal\\\"\\n            >\\n                {{ $tc('global.sw-media-folder-item.labelContextMenuDissolve') }}\\n            </sw-context-menu-item>\\n            {% endblock %}\\n\\n            \\n            {% block sw_media_folder_item_context_item_rename_item %}\\n            <sw-context-menu-item\\n                :disabled=\\\"!allowEdit\\\"\\n                class=\\\"sw-media-context-item__rename-folder-action\\\"\\n                @click=\\\"startInlineEdit\\\"\\n            >\\n                {{ $tc('global.sw-media-folder-item.labelContextMenuRename') }}\\n            </sw-context-menu-item>\\n            {% endblock %}\\n\\n            \\n            {% block sw_media_folder_item_context_item_delete %}\\n            <sw-context-menu-item\\n                :disabled=\\\"!allowDelete\\\"\\n                class=\\\"sw-media-context-item__delete-folder-action\\\"\\n                variant=\\\"danger\\\"\\n                @click=\\\"openDeleteModal\\\"\\n            >\\n                {{ $tc('global.default.delete') }}\\n            </sw-context-menu-item>\\n            {% endblock %}\\n        </div>\\n        {% endblock %}\\n    </template>\\n    {% endblock %}\\n\\n    \\n    {% block sw_media_folder_modal_windows %}\\n    <template #modal-windows=\\\"{ item, allowEdit, allowDelete }\\\">\\n        \\n        {% block sw_media_folder_settings_modal %}\\n        <sw-media-modal-folder-settings\\n            v-if=\\\"showSettings\\\"\\n            :disabled=\\\"!allowEdit\\\"\\n            :media-folder-id=\\\"item.id\\\"\\n            @media-settings-modal-save=\\\"refreshIconConfig\\\"\\n            @media-settings-modal-close=\\\"closeSettings\\\"\\n        />\\n        {% endblock %}\\n\\n        \\n        {% block sw_media_folder_dissolve_modal %}\\n        <sw-media-modal-folder-dissolve\\n            v-if=\\\"showDissolveModal\\\"\\n            :items-to-dissolve=\\\"[item]\\\"\\n            @media-folder-dissolve-modal-dissolve=\\\"onFolderDissolved\\\"\\n            @media-folder-dissolve-modal-close=\\\"closeDissolveModal\\\"\\n        />\\n        {% endblock %}\\n\\n        \\n        {% block sw_media_folder_move_modal %}\\n        <sw-media-modal-move\\n            v-if=\\\"showMoveModal\\\"\\n            :items-to-move=\\\"[item]\\\"\\n            @media-move-modal-close=\\\"closeMoveModal\\\"\\n            @media-move-modal-items-move=\\\"onFolderMoved\\\"\\n        />\\n        {% endblock %}\\n\\n        \\n        {% block sw_media_folder_delete_modal %}\\n        <sw-media-modal-delete\\n            v-if=\\\"showDeleteModal\\\"\\n            :items-to-delete=\\\"[item]\\\"\\n            @media-delete-modal-items-delete=\\\"emitItemDeleted\\\"\\n            @media-delete-modal-close=\\\"closeDeleteModal\\\"\\n        />\\n        {% endblock %}\\n    </template>\\n    {% endblock %}\\n</sw-media-base-item>\\n{% endblock %}\\n\";"],"sourceRoot":""}