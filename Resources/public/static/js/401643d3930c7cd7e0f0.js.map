{"version":3,"sources":["webpack:///./src/module/sw-customer/constant/sw-customer.constant.js","webpack:///./src/module/sw-order/component/sw-order-new-customer-modal/index.js","webpack:///./src/module/sw-order/component/sw-order-new-customer-modal/sw-order-new-customer-modal.html.twig","webpack:///./src/module/sw-order/component/sw-order-new-customer-modal/sw-order-new-customer-modal.scss"],"names":["Object","freeze","ACCOUNT_TYPE_PRIVATE","ACCOUNT_TYPE_BUSINESS","Mixin","Shopware","Criteria","Data","mapPageErrors","Component","getComponentHelper","template","inject","mixins","getByName","data","customer","salesChannels","isLoading","customerNumberPreview","computed","_objectSpread","customer_address","customerRepository","this","repositoryFactory","create","addressRepository","shippingAddress","isSameBilling","billingAddress","addresses","get","defaultShippingAddressId","defaultBillingAddressId","set","newValue","_this","isNew","filter","address","id","add","validCompanyField","_this$customer","_this$customer2","_this$customer2$compa","accountType","CUSTOMER","company","trim","length","languageRepository","languageCriteria","_this$customer3","criteria","setLimit","salesChannelId","addFilter","equals","languageId","loadLanguage","salutationRepository","salutationCriteria","watch","_this2","systemConfigApiService","getValues","then","response","boundSalesChannelId","value","_this$billingAddress","State","dispatch","expression","concat","created","createdComponent","methods","_this3","_asyncToGenerator","_regeneratorRuntime","mark","_callee","defaultSalutationId","wrap","_context","prev","next","getDefaultSalutationId","sent","salutationId","vatIds","stop","onSave","_this4","_callee2","hasError","res","numberRangePromise","_context2","validateEmail","isValid","createErrorMessageForCompanyField","createNotificationError","message","$tc","abrupt","Promise","resolve","customerNumber","numberRangeService","reserve","number","saveCustomer","_this5","_callee3","context","_context3","Context","api","save","$emit","onClose","catch","onChangeSalesChannel","_this6","error","Classes","ShopwareError","code","_this7","_this$customer4","email","customerValidationService","checkCustomerEmail","emailIsValid","exception","_exception$response","_exception$response$d","errors","_this8","_callee4","_context4","searchIds","_this9","_callee5","_res$data","_context5","content","__esModule","default","module","i","locals","exports"],"mappings":"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","file":"static/js/401643d3930c7cd7e0f0.js","sourcesContent":["/**\n * @package checkout\n */\n\nconst ACCOUNT_TYPE_PRIVATE = 'private';\nconst ACCOUNT_TYPE_BUSINESS = 'business';\n\n// eslint-disable-next-line sw-deprecation-rules/private-feature-declarations\nexport default Object.freeze({\n    ACCOUNT_TYPE_PRIVATE,\n    ACCOUNT_TYPE_BUSINESS,\n});\n","import template from './sw-order-new-customer-modal.html.twig';\nimport './sw-order-new-customer-modal.scss';\nimport CUSTOMER from '../../../sw-customer/constant/sw-customer.constant';\n\n/**\n * @package checkout\n */\n\nconst { Mixin } = Shopware;\nconst { Criteria } = Shopware.Data;\nconst { mapPageErrors } = Shopware.Component.getComponentHelper();\n\n// eslint-disable-next-line sw-deprecation-rules/private-feature-declarations\nexport default {\n    template,\n\n    inject: [\n        'repositoryFactory',\n        'numberRangeService',\n        'systemConfigApiService',\n        'customerValidationService',\n    ],\n\n    mixins: [\n        Mixin.getByName('notification'),\n    ],\n\n    data() {\n        return {\n            customer: null,\n            /**\n             * @deprecated tag:v6.6.0 - salesChannels Will be removed due to unused\n             * */\n            salesChannels: null,\n            isLoading: false,\n            customerNumberPreview: '',\n        };\n    },\n\n    computed: {\n        ...mapPageErrors({\n            'sw.order.new.customer.detail': {\n                customer: [\n                    'firstName',\n                    'lastName',\n                    'email',\n                    'salesChannelId',\n                    'customerNumber',\n                    'defaultPaymentMethodId',\n                    'groupId',\n                ],\n            },\n\n            'sw.order.new.customer.address': {\n                customer_address: [\n                    'firstName',\n                    'lastName',\n                    'street',\n                    'city',\n                    'countryId',\n                ],\n            },\n        }),\n\n        customerRepository() {\n            return this.repositoryFactory.create('customer');\n        },\n\n        addressRepository() {\n            return this.repositoryFactory.create('customer_address');\n        },\n\n        shippingAddress() {\n            if (this.isSameBilling) {\n                return this.billingAddress;\n            }\n\n            return this.customer !== null ? this.customer.addresses.get(this.customer.defaultShippingAddressId) : null;\n        },\n\n        billingAddress() {\n            return this.customer !== null ? this.customer.addresses.get(this.customer.defaultBillingAddressId) : null;\n        },\n\n        isSameBilling: {\n            get() {\n                if (this.customer === null) {\n                    return true;\n                }\n\n                return this.customer.defaultBillingAddressId === this.customer.defaultShippingAddressId;\n            },\n\n            set(newValue) {\n                if (newValue === true) {\n                    this.customer.defaultShippingAddressId = this.customer.defaultBillingAddressId;\n\n                    // remove all addresses but default billing...\n                    if (this.customer.isNew()) {\n                        this.customer.addresses = this.customer.addresses.filter((address) => {\n                            return address.id === this.customer.defaultBillingAddressId;\n                        });\n                    }\n\n                    return;\n                }\n\n                const shippingAddress = this.addressRepository.create();\n                this.customer.addresses.add(shippingAddress);\n                this.customer.defaultShippingAddressId = shippingAddress.id;\n            },\n        },\n\n        validCompanyField() {\n            return this.customer?.accountType === CUSTOMER.ACCOUNT_TYPE_BUSINESS ?\n                this.customer?.company?.trim().length : true;\n        },\n\n        languageRepository() {\n            return this.repositoryFactory.create('language');\n        },\n\n        languageCriteria() {\n            const criteria = new Criteria();\n            criteria.setLimit(1);\n\n            if (this.customer?.salesChannelId) {\n                criteria.addFilter(\n                    Criteria.equals('salesChannelDefaultAssignments.id', this.customer.salesChannelId),\n                );\n            }\n\n            return criteria;\n        },\n\n        languageId() {\n            return this.loadLanguage(this.customer.salesChannelId);\n        },\n\n        salutationRepository() {\n            return this.repositoryFactory.create('salutation');\n        },\n\n        salutationCriteria() {\n            const criteria = new Criteria(1, 1);\n\n            criteria.addFilter(Criteria.equals('salutationKey', 'not_specified'));\n\n            return criteria;\n        },\n    },\n\n    watch: {\n        'customer.salesChannelId'(salesChannelId) {\n            this.systemConfigApiService\n                .getValues('core.systemWideLoginRegistration').then(response => {\n                    if (response['core.systemWideLoginRegistration.isCustomerBoundToSalesChannel']) {\n                        this.customer.boundSalesChannelId = salesChannelId;\n                    }\n                });\n        },\n\n        'customer.accountType'(value) {\n            if (value === CUSTOMER.ACCOUNT_TYPE_BUSINESS) {\n                return;\n            }\n\n            Shopware.State.dispatch(\n                'error/removeApiError',\n                {\n                    expression: `customer_address.${this.billingAddress?.id}.company`,\n                },\n            );\n        },\n    },\n\n    created() {\n        this.createdComponent();\n    },\n\n    methods: {\n        async createdComponent() {\n            this.customer = this.customerRepository.create();\n\n            const defaultSalutationId = await this.getDefaultSalutationId();\n\n            const billingAddress = this.addressRepository.create();\n            billingAddress.salutationId = defaultSalutationId;\n\n            this.customer.addresses.add(billingAddress);\n\n            this.customer.defaultShippingAddressId = billingAddress.id;\n            this.customer.defaultBillingAddressId = billingAddress.id;\n            this.customer.accountType = CUSTOMER.ACCOUNT_TYPE_PRIVATE;\n            this.customer.vatIds = [];\n            this.customer.salutationId = defaultSalutationId;\n        },\n\n        async onSave() {\n            let hasError = false;\n\n            const res = await this.validateEmail();\n\n            if (!res || !res.isValid) {\n                hasError = true;\n            }\n\n            if (!this.validCompanyField) {\n                this.createErrorMessageForCompanyField();\n                hasError = true;\n            }\n\n            if (this.customer.accountType === CUSTOMER.ACCOUNT_TYPE_PRIVATE) {\n                this.customer.vatIds = [];\n            }\n\n            if (hasError) {\n                this.createNotificationError({\n                    message: this.$tc('sw-customer.detail.messageSaveError'),\n                });\n\n                this.isLoading = false;\n                return false;\n            }\n\n            let numberRangePromise = Promise.resolve();\n            if (this.customerNumberPreview === this.customer.customerNumber) {\n                numberRangePromise = this.numberRangeService\n                    .reserve('customer', this.customer.salesChannelId).then((response) => {\n                        this.customerNumberPreview = response.number;\n                        this.customer.customerNumber = response.number;\n                    });\n            }\n\n            return numberRangePromise.then(() => {\n                return this.saveCustomer();\n            });\n        },\n\n        async saveCustomer() {\n            const languageId = await this.languageId;\n\n            const context = { ...Shopware.Context.api, ...{ languageId } };\n\n            return this.customerRepository.save(this.customer, context).then((response) => {\n                this.$emit('on-select-existing-customer', this.customer.id);\n                this.isLoading = false;\n\n                this.onClose();\n\n                return response;\n            }).catch(() => {\n                this.createNotificationError({\n                    message: this.$tc('sw-customer.detail.messageSaveError'),\n                });\n                this.isLoading = false;\n            });\n        },\n\n        onChangeSalesChannel(salesChannelId) {\n            this.customer.salesChannelId = salesChannelId;\n            this.numberRangeService.reserve('customer', salesChannelId, true).then((response) => {\n                this.customerNumberPreview = response.number;\n                this.customer.customerNumber = response.number;\n            });\n        },\n\n        onClose() {\n            this.$emit('close');\n        },\n\n        createErrorMessageForCompanyField() {\n            Shopware.State.dispatch('error/addApiError', {\n                expression: `customer_address.${this.billingAddress.id}.company`,\n                error: new Shopware.Classes.ShopwareError({\n                    code: 'c1051bb4-d103-4f74-8988-acbcafc7fdc3',\n                }),\n            });\n        },\n\n        validateEmail() {\n            const { id, email, boundSalesChannelId } = this.customer;\n\n            if (!email) {\n                return Promise.resolve({ isValid: true });\n            }\n\n            return this.customerValidationService.checkCustomerEmail({\n                id,\n                email,\n                boundSalesChannelId,\n            }).then((emailIsValid) => {\n                return emailIsValid;\n            }).catch((exception) => {\n                if (!exception) {\n                    return;\n                }\n\n                Shopware.State.dispatch('error/addApiError', {\n                    expression: `customer.${this.customer.id}.email`,\n                    error: exception?.response?.data?.errors[0],\n                });\n            });\n        },\n\n        async loadLanguage(salesChannelId) {\n            const languageId = Shopware.Context.api.languageId;\n\n            if (!salesChannelId) {\n                return languageId;\n            }\n\n            const res = await this.languageRepository.searchIds(this.languageCriteria);\n\n            if (!res?.data) {\n                return languageId;\n            }\n\n            return res.data[0];\n        },\n\n        async getDefaultSalutationId() {\n            const res = await this.salutationRepository.searchIds(this.salutationCriteria);\n\n            return res.data?.[0];\n        },\n    },\n};\n","export default \"\\n{% block sw_order_new_customer_modal %}\\n<sw-modal\\n    :title=\\\"$tc('sw-order.createBase.detailsHeader.buttonAddNewCustomer')\\\"\\n    @modal-close=\\\"onClose\\\"\\n>\\n    \\n    {% block sw_order_new_customer_modal_tabs %}\\n    <sw-tabs\\n        class=\\\"sw-order-new-customer-modal\\\"\\n        position-identifier=\\\"sw-order-new-customer-modal\\\"\\n        default-item=\\\"details\\\"\\n    >\\n        <template #default=\\\"{ active }\\\">\\n            \\n            {% block sw_order_new_customer_modal_tabs_details %}\\n            <sw-tabs-item\\n                name=\\\"details\\\"\\n                :active-tab=\\\"active\\\"\\n                :has-error=\\\"swOrderNewCustomerDetailError\\\"\\n            >\\n                {{ $tc('sw-order.newCustomerModal.labelDetails') }}\\n            </sw-tabs-item>\\n            {% endblock %}\\n\\n            \\n            {% block sw_order_new_customer_modal_tabs_billing %}\\n            <sw-tabs-item\\n                name=\\\"billingAddress\\\"\\n                :active-tab=\\\"active\\\"\\n                :has-error=\\\"swOrderNewCustomerAddressError\\\"\\n            >\\n                {{ $tc('sw-order.createBase.detailsBody.labelBillingAddress') }}\\n            </sw-tabs-item>\\n            {% endblock %}\\n\\n            \\n            {% block sw_order_new_customer_modal_tabs_shipping %}\\n            <sw-tabs-item\\n                name=\\\"shippingAddress\\\"\\n                :active-tab=\\\"active\\\"\\n                :has-error=\\\"!isSameBilling && swOrderNewCustomerAddressError\\\"\\n            >\\n                {{ $tc('sw-order.createBase.detailsBody.labelShippingAddress') }}\\n            </sw-tabs-item>\\n            {% endblock %}\\n        </template>\\n\\n        <template #content=\\\"{ active }\\\">\\n            \\n            {% block sw_order_new_customer_modal_content_details %}\\n            <div v-if=\\\"active ==='details'\\\">\\n                \\n                {% block sw_order_new_customer_modal_content_details_guest %}\\n                <sw-switch-field\\n                    {% if VUE3 %}\\n                    v-model:value=\\\"customer.guest\\\"\\n                    {% else %}\\n                    v-model=\\\"customer.guest\\\"\\n                    {% endif %}\\n                    no-margin-top\\n                    :label=\\\"$tc('sw-order.newCustomerModal.labelGuest')\\\"\\n                />\\n                {% endblock %}\\n                \\n                {% block sw_order_new_customer_modal_content_details_form %}\\n                <sw-customer-base-form\\n                    :is-loading=\\\"isLoading\\\"\\n                    :customer=\\\"customer\\\"\\n                    @sales-channel-change=\\\"onChangeSalesChannel\\\"\\n                />\\n                {% endblock %}\\n            </div>\\n            {% endblock %}\\n\\n            \\n            {% block sw_order_new_customer_modal_content_shipping %}\\n            <div v-if=\\\"active === 'shippingAddress'\\\">\\n                \\n                {% block sw_order_new_customer_modal_content_shipping_same_billing %}\\n                <sw-switch-field\\n                    {% if VUE3 %}\\n                    v-model:value=\\\"isSameBilling\\\"\\n                    {% else %}\\n                    v-model=\\\"isSameBilling\\\"\\n                    {% endif %}\\n                    no-margin-top\\n                    :label=\\\"$tc('sw-customer.addressForm.labelSameBillingAddress')\\\"\\n                />\\n                {% endblock %}\\n\\n                \\n                {% block sw_order_new_customer_modal_content_shipping_form %}\\n                <sw-customer-address-form\\n                    :customer=\\\"customer\\\"\\n                    :disabled=\\\"isSameBilling\\\"\\n                    :address=\\\"shippingAddress\\\"\\n                />\\n                {% endblock %}\\n            </div>\\n            {% endblock %}\\n\\n            \\n            {% block sw_order_new_customer_modal_content_billing %}\\n            <div v-if=\\\"active ==='billingAddress'\\\">\\n                \\n                {% block sw_order_new_customer_modal_content_billing_form %}\\n                <sw-customer-address-form\\n                    :customer=\\\"customer\\\"\\n                    :address=\\\"billingAddress\\\"\\n                />\\n                {% endblock %}\\n            </div>\\n            {% endblock %}\\n        </template>\\n    </sw-tabs>\\n    {% endblock %}\\n\\n    \\n    {% block sw_order_new_customer_modal_actions %}\\n    <template #modal-footer>\\n        \\n        {% block sw_order_new_customer_modal_action_close %}\\n        <sw-button\\n            size=\\\"small\\\"\\n            @click=\\\"onClose\\\"\\n        >\\n            {{ $tc('global.default.cancel') }}\\n        </sw-button>\\n        {% endblock %}\\n\\n        \\n        {% block sw_order_new_customer_modal_actions_apply %}\\n        <sw-button\\n            size=\\\"small\\\"\\n            variant=\\\"primary\\\"\\n            :is-loading=\\\"isLoading\\\"\\n            @click=\\\"onSave\\\"\\n        >\\n            {{ $tc('global.default.save') }}\\n        </sw-button>\\n        {% endblock %}\\n    </template>\\n    {% endblock %}\\n</sw-modal>\\n{% endblock %}\\n\";","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../../../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--15-1!../../../../../node_modules/css-loader/dist/cjs.js??ref--15-2!../../../../../node_modules/sass-loader/dist/cjs.js??ref--15-3!./sw-order-new-customer-modal.scss\");\nif(content.__esModule) content = content.default;\nif(typeof content === 'string') content = [[module.id, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar add = require(\"!../../../../../node_modules/vue-style-loader/lib/addStylesClient.js\").default\nvar update = add(\"7aa04da8\", content, true, {});"],"sourceRoot":""}