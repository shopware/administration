{"version":3,"sources":["webpack:///./src/module/sw-order/component/sw-order-state-history-card/index.js","webpack:///./src/module/sw-order/component/sw-order-state-history-card/sw-order-state-history-card.html.twig"],"names":["Mixin","Shopware","Criteria","Data","template","inject","mixins","getByName","props","title","type","String","required","order","Object","isLoading","Boolean","default","data","showModal","orderHistory","orderOptions","transactionHistory","transactionOptions","deliveryHistory","deliveryOptions","statesLoading","modalConfirmed","currentActionName","currentStateType","technicalName","computed","stateMachineStateRepository","this","repositoryFactory","create","mailTemplateRepository","stateMachineHistoryRepository","transaction","i","transactions","length","includes","stateMachineState","last","delivery","deliveries","stateMachineHistoryCriteria","_this$order$transacti","_this$order$deliverie","criteria","entityIds","id","concat","_toConsumableArray","getIds","addFilter","equalsAny","addAssociation","addSorting","field","created","createdComponent","methods","loadHistory","_this","Promise","all","getStateHistoryEntries","getTransitionOptions","then","$emit","catch","error","createNotificationError","finally","_this2","search","fetchedEntries","buildStateHistory","fetchEntries","resolve","ids","allEntries","filter","entry","entityId","entity","state","createdAt","user","entries","push","fromStateMachineState","forEach","toStateMachineState","_this3","statePromises","stateMachineService","getState","getAllStates","allStates","orderState","buildTransitionOptions","transitions","orderTransactionState","orderDeliveryState","stateMachineStateCriteria","stateMachineName","allTransitions","possibleTransitions","options","stateMachine","map","index","stateName","name","translated","disabled","option","transitionToState","transition","toStateName","actionName","onOrderStateSelected","createStateChangeErrorNotification","$tc","onCancelCreation","onTransactionStateSelected","onDeliveryStateSelected","onLeaveModalClose","onLeaveModalConfirm","docIds","_this4","sendMail","arguments","undefined","orderStateMachineService","transitionOrderTransactionState","documentIds","transitionOrderState","transitionOrderDeliveryState","errorMessage","message"],"mappings":"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","file":"static/js/8541b841814d010431f7.js","sourcesContent":["import template from './sw-order-state-history-card.html.twig';\n\n/**\n * @package checkout\n */\n\nconst { Mixin } = Shopware;\nconst { Criteria } = Shopware.Data;\n\n// eslint-disable-next-line sw-deprecation-rules/private-feature-declarations\nexport default {\n    template,\n\n    inject: [\n        'orderService',\n        'stateMachineService',\n        'orderStateMachineService',\n        'repositoryFactory',\n        'acl',\n        'feature',\n    ],\n\n    mixins: [\n        Mixin.getByName('notification'),\n    ],\n\n    props: {\n        title: {\n            type: String,\n            required: true,\n        },\n        order: {\n            type: Object,\n            required: true,\n        },\n        isLoading: {\n            type: Boolean,\n            required: false,\n            default: false,\n        },\n    },\n    data() {\n        return {\n            showModal: false,\n            orderHistory: [],\n            orderOptions: [],\n            transactionHistory: [],\n            transactionOptions: [],\n            deliveryHistory: [],\n            deliveryOptions: [],\n            statesLoading: true,\n            modalConfirmed: false,\n            currentActionName: null,\n            currentStateType: null,\n            technicalName: '',\n        };\n    },\n    computed: {\n        stateMachineStateRepository() {\n            return this.repositoryFactory.create('state_machine_state');\n        },\n\n        mailTemplateRepository() {\n            return this.repositoryFactory.create('mail_template');\n        },\n\n        stateMachineHistoryRepository() {\n            return this.repositoryFactory.create('state_machine_history');\n        },\n\n        transaction() {\n            for (let i = 0; i < this.order.transactions.length; i += 1) {\n                if (!['cancelled', 'failed'].includes(this.order.transactions[i].stateMachineState.technicalName)) {\n                    return this.order.transactions[i];\n                }\n            }\n            return this.order.transactions.last();\n        },\n\n        delivery() {\n            return this.order.deliveries[0];\n        },\n\n        stateMachineHistoryCriteria() {\n            const criteria = new Criteria(1, null);\n\n            const entityIds = [\n                this.order.id,\n                ...this.order.transactions?.getIds() || [],\n                ...this.order.deliveries?.getIds() || [],\n            ];\n\n            criteria.addFilter(\n                Criteria.equalsAny(\n                    'state_machine_history.entityId.id',\n                    entityIds,\n                ),\n            );\n            criteria.addFilter(\n                Criteria.equalsAny(\n                    'state_machine_history.entityName',\n                    ['order', 'order_transaction', 'order_delivery'],\n                ),\n            );\n            criteria.addAssociation('fromStateMachineState');\n            criteria.addAssociation('toStateMachineState');\n            criteria.addAssociation('user');\n            criteria.addSorting({ field: 'state_machine_history.createdAt', order: 'ASC' });\n\n            return criteria;\n        },\n\n    },\n\n    created() {\n        this.createdComponent();\n    },\n\n    methods: {\n        createdComponent() {\n            this.loadHistory();\n        },\n\n        loadHistory() {\n            this.statesLoading = true;\n            this.modalConfirmed = false;\n\n            Promise.all([\n                this.getStateHistoryEntries(),\n                this.getTransitionOptions(),\n            ]).then(() => {\n                this.$emit('options-change', 'order.states', this.orderOptions);\n                if (this.transaction) {\n                    this.$emit('options-change', 'order_transaction.states', this.transactionOptions);\n                }\n                if (this.delivery) {\n                    this.$emit('options-change', 'order_delivery.states', this.deliveryOptions);\n                }\n            }).catch((error) => {\n                this.createNotificationError(error);\n            }).finally(() => {\n                this.statesLoading = false;\n            });\n        },\n\n        getStateHistoryEntries() {\n            return this.stateMachineHistoryRepository.search(this.stateMachineHistoryCriteria).then((fetchedEntries) => {\n                this.orderHistory = this.buildStateHistory(\n                    this.order,\n                    this.fetchEntries([this.order.id], fetchedEntries),\n                );\n\n                if (this.transaction && this.order.transactions) {\n                    this.transactionHistory = this.buildStateHistory(\n                        this.transaction,\n                        this.fetchEntries(this.order.transactions.getIds(), fetchedEntries),\n                    );\n                }\n\n                if (this.delivery && this.order.deliveries) {\n                    this.deliveryHistory = this.buildStateHistory(\n                        this.delivery,\n                        this.fetchEntries(this.order.deliveries.getIds(), fetchedEntries),\n                    );\n                }\n\n                return Promise.resolve(fetchedEntries);\n            });\n        },\n\n        fetchEntries(ids, allEntries) {\n            if (!ids.length || !allEntries.length) {\n                return [];\n            }\n\n            return allEntries.filter((entry) => {\n                return ids.includes(entry.entityId.id);\n            });\n        },\n\n        buildStateHistory(entity, fetchedEntries) {\n            // this entity has no state history\n            if (fetchedEntries.length === 0) {\n                return [{\n                    state: entity.stateMachineState,\n                    createdAt: entity.createdAt,\n                    user: null,\n                }];\n            }\n\n            const entries = [];\n            // Prepend start state\n            entries.push({\n                state: fetchedEntries[0].fromStateMachineState,\n                createdAt: fetchedEntries[0].createdAt,\n                user: null,\n            });\n\n            fetchedEntries.forEach((entry) => {\n                entries.push({\n                    state: entry.toStateMachineState,\n                    createdAt: entry.createdAt,\n                    user: entry.user ? entry.user : null,\n                });\n            });\n\n            return entries;\n        },\n\n        getTransitionOptions() {\n            const statePromises = [this.stateMachineService.getState('order', this.order.id)];\n            if (this.transaction) {\n                statePromises.push(this.stateMachineService.getState('order_transaction', this.transaction.id));\n            }\n            if (this.delivery) {\n                statePromises.push(this.stateMachineService.getState('order_delivery', this.delivery.id));\n            }\n\n            return Promise.all(\n                [\n                    this.getAllStates(),\n                    ...statePromises,\n                ],\n            ).then((data) => {\n                const allStates = data[0];\n                const orderState = data[1];\n                this.orderOptions = this.buildTransitionOptions(\n                    'order.state',\n                    allStates,\n                    orderState.data.transitions,\n                );\n\n                if (this.transaction) {\n                    const orderTransactionState = data[2];\n                    this.transactionOptions = this.buildTransitionOptions(\n                        'order_transaction.state',\n                        allStates,\n                        orderTransactionState.data.transitions,\n                    );\n                }\n\n                if (this.delivery) {\n                    const orderDeliveryState = data[3];\n                    this.deliveryOptions = this.buildTransitionOptions(\n                        'order_delivery.state',\n                        allStates,\n                        orderDeliveryState.data.transitions,\n                    );\n                }\n\n                return Promise.resolve();\n            });\n        },\n\n        getAllStates() {\n            return this.stateMachineStateRepository.search(this.stateMachineStateCriteria());\n        },\n\n        stateMachineStateCriteria() {\n            const criteria = new Criteria(1, null);\n            criteria.addSorting({ field: 'name', order: 'ASC' });\n            criteria.addAssociation('stateMachine');\n            criteria.addFilter(\n                Criteria.equalsAny(\n                    'state_machine_state.stateMachine.technicalName',\n                    ['order.state', 'order_transaction.state', 'order_delivery.state'],\n                ),\n            );\n\n            return criteria;\n        },\n\n        buildTransitionOptions(stateMachineName, allTransitions, possibleTransitions) {\n            const entries = allTransitions.filter((entry) => {\n                return entry.stateMachine.technicalName === stateMachineName;\n            });\n\n            const options = entries.map((state, index) => {\n                return {\n                    stateName: state.technicalName,\n                    id: index,\n                    name: state.translated.name,\n                    disabled: true,\n                };\n            });\n\n            options.forEach((option) => {\n                const transitionToState = possibleTransitions.filter((transition) => {\n                    return transition.toStateName === option.stateName;\n                });\n                if (transitionToState.length >= 1) {\n                    option.disabled = false;\n                    option.id = transitionToState[0].actionName;\n                }\n            });\n            return options;\n        },\n\n        onOrderStateSelected(actionName) {\n            if (!actionName) {\n                this.createStateChangeErrorNotification(this.$tc('sw-order.stateCard.labelErrorNoAction'));\n                return;\n            }\n\n            if (this.modalConfirmed === false) {\n                this.currentActionName = actionName;\n                this.currentStateType = 'orderState';\n\n                this.showModal = true;\n\n                return;\n            }\n            this.modalConfirmed = false;\n        },\n\n        onCancelCreation() {\n            this.showModal = false;\n        },\n\n        onTransactionStateSelected(actionName) {\n            if (!actionName) {\n                this.createStateChangeErrorNotification(this.$tc('sw-order.stateCard.labelErrorNoAction'));\n                return;\n            }\n\n            if (this.modalConfirmed === false) {\n                this.currentActionName = actionName;\n                this.currentStateType = 'orderTransactionState';\n\n                this.showModal = true;\n                return;\n            }\n            this.modalConfirmed = false;\n        },\n\n        onDeliveryStateSelected(actionName) {\n            if (!actionName) {\n                this.createStateChangeErrorNotification(this.$tc('sw-order.stateCard.labelErrorNoAction'));\n                return;\n            }\n\n            if (this.modalConfirmed === false) {\n                this.currentActionName = actionName;\n                this.currentStateType = 'orderDeliveryState';\n\n                this.showModal = true;\n                return;\n            }\n            this.modalConfirmed = false;\n        },\n\n        onLeaveModalClose() {\n            this.modalConfirmed = false;\n            this.currentActionName = null;\n            this.currentStateType = null;\n            this.showModal = false;\n        },\n\n        onLeaveModalConfirm(docIds, sendMail = true) {\n            this.showModal = false;\n            if (this.currentStateType === 'orderTransactionState') {\n                this.orderStateMachineService.transitionOrderTransactionState(\n                    this.transaction.id,\n                    this.currentActionName,\n                    { documentIds: docIds, sendMail },\n                ).then(() => {\n                    this.$emit('order-state-change');\n                    this.loadHistory();\n                }).catch((error) => {\n                    this.createStateChangeErrorNotification(error);\n                });\n            } else if (this.currentStateType === 'orderState') {\n                this.orderStateMachineService.transitionOrderState(\n                    this.order.id,\n                    this.currentActionName,\n                    { documentIds: docIds, sendMail },\n                ).then(() => {\n                    this.$emit('order-state-change');\n                    this.loadHistory();\n                }).catch((error) => {\n                    this.createStateChangeErrorNotification(error);\n                });\n            } else if (this.currentStateType === 'orderDeliveryState') {\n                this.orderStateMachineService.transitionOrderDeliveryState(\n                    this.delivery.id,\n                    this.currentActionName,\n                    { documentIds: docIds, sendMail },\n                ).then(() => {\n                    this.$emit('order-state-change');\n                    this.loadHistory();\n                }).catch((error) => {\n                    this.createStateChangeErrorNotification(error);\n                });\n            }\n            this.currentActionName = null;\n            this.currentStateType = null;\n        },\n\n        createStateChangeErrorNotification(errorMessage) {\n            this.createNotificationError({\n                message: this.$tc('sw-order.stateCard.labelErrorStateChange') + errorMessage,\n            });\n        },\n    },\n};\n","export default \"\\n{% block sw_order_state_history_card %}\\n<sw-card\\n    :title=\\\"title\\\"\\n    :is-loading=\\\"isLoading || statesLoading\\\"\\n    class=\\\"sw-order-state-card\\\"\\n    position-identifier=\\\"sw-order-state-history-card\\\"\\n>\\n    \\n    {% block sw_order_state_change_card_modal %}\\n    <sw-order-state-change-modal\\n        v-if=\\\"showModal\\\"\\n        :order=\\\"order\\\"\\n        :is-loading=\\\"isLoading\\\"\\n        :technical-name=\\\"technicalName\\\"\\n        @page-leave=\\\"onLeaveModalClose\\\"\\n        @page-leave-confirm=\\\"onLeaveModalConfirm\\\"\\n    />\\n    {% endblock %}\\n    \\n    {% block sw_order_state_history_card_container %}\\n    <sw-container\\n        columns=\\\"repeat(auto-fit, minmax(250px, 1fr))\\\"\\n        gap=\\\"30px 30px\\\"\\n    >\\n        \\n        {% block sw_order_state_history_card_transaction %}\\n        <sw-order-state-history-card-entry\\n            v-if=\\\"transaction\\\"\\n            v-tooltip=\\\"{\\n                message: $tc('sw-privileges.tooltip.warning'),\\n                disabled: acl.can('order.editor'),\\n                showOnDisabledElements: true\\n            }\\\"\\n            class=\\\"sw-order-state-history-card__payment-state\\\"\\n            :disabled=\\\"!acl.can('order.editor')\\\"\\n            :history=\\\"transactionHistory\\\"\\n            :transition-options=\\\"transactionOptions\\\"\\n            state-machine-name=\\\"order_transaction.state\\\"\\n            :title=\\\"$tc('sw-order.stateCard.headlineTransactionState')\\\"\\n            @state-select=\\\"onTransactionStateSelected\\\"\\n        />\\n\\n        <template v-else>\\n            <div>\\n                <h2>{{ $tc('sw-order.stateCard.headlineTransactionState') }}</h2>\\n                {{ $tc('sw-order.stateCard.labelNoTransactionState') }}\\n            </div>\\n        </template>\\n        {% endblock %}\\n\\n        \\n        {% block sw_order_state_history_card_delivery %}\\n        <sw-order-state-history-card-entry\\n            v-if=\\\"delivery\\\"\\n            v-tooltip=\\\"{\\n                message: $tc('sw-privileges.tooltip.warning'),\\n                disabled: acl.can('order.editor'),\\n                showOnDisabledElements: true\\n            }\\\"\\n            class=\\\"sw-order-state-history-card__delivery-state\\\"\\n            :history=\\\"deliveryHistory\\\"\\n            :disabled=\\\"!acl.can('order.editor')\\\"\\n            :transition-options=\\\"deliveryOptions\\\"\\n            state-machine-name=\\\"order_delivery.state\\\"\\n            :title=\\\"$tc('sw-order.stateCard.headlineDeliveryState')\\\"\\n            @state-select=\\\"onDeliveryStateSelected\\\"\\n        />\\n\\n        <template v-else>\\n            <div>\\n                <h2>{{ $tc('sw-order.stateCard.headlineDeliveryState') }}</h2>\\n                {{ $tc('sw-order.stateCard.labelNoDeliveryState') }}\\n            </div>\\n        </template>\\n        {% endblock %}\\n\\n        \\n        {% block sw_order_state_history_card_order%}\\n        <sw-order-state-history-card-entry\\n            v-tooltip=\\\"{\\n                message: $tc('sw-privileges.tooltip.warning'),\\n                disabled: acl.can('order.editor'),\\n                showOnDisabledElements: true\\n            }\\\"\\n            class=\\\"sw-order-state-history-card__order-state\\\"\\n            :history=\\\"orderHistory\\\"\\n            :disabled=\\\"!acl.can('order.editor')\\\"\\n            :transition-options=\\\"orderOptions\\\"\\n            state-machine-name=\\\"order.state\\\"\\n            :title=\\\"$tc('sw-order.stateCard.headlineOrderState')\\\"\\n            @state-select=\\\"onOrderStateSelected\\\"\\n        />\\n        {% endblock %}\\n    </sw-container>\\n    {% endblock %}\\n</sw-card>\\n{% endblock %}\\n\";"],"sourceRoot":""}