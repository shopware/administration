{"version":3,"sources":["webpack:///./src/module/sw-first-run-wizard/component/sw-plugin-card/sw-plugin-card.scss","webpack:///./src/module/sw-first-run-wizard/component/sw-plugin-card/index.ts","webpack:///./src/module/sw-first-run-wizard/component/sw-plugin-card/sw-plugin-card.html.twig"],"names":["content","__esModule","default","module","i","locals","exports","add","Shopware","Component","wrapComponentConfig","template","inject","mixins","Mixin","getByName","props","plugin","type","Object","required","showDescription","Boolean","data","pluginIsLoading","pluginIsSaveSuccessful","computed","pluginIsNotActive","this","active","truncateFilter","Filter","methods","onInstall","setupPlugin","_this","_asyncToGenerator","_regeneratorRuntime","mark","_callee","wrap","_context","prev","next","extensionHelperService","downloadAndActivateExtension","name","$emit","t0","showExtensionErrors","cacheApiService","clear","shopwareExtensionService","updateExtensionData","finish","stop"],"mappings":"wGAGA,IAAIA,EAAU,EAAQ,QACnBA,EAAQC,aAAYD,EAAUA,EAAQE,SACnB,iBAAZF,IAAsBA,EAAU,CAAC,CAACG,EAAOC,EAAIJ,EAAS,MAC7DA,EAAQK,SAAQF,EAAOG,QAAUN,EAAQK,SAG/BE,EADH,EAAQ,QAAwEL,SACzE,WAAYF,GAAS,EAAM,K,iGCgB7BQ,mBAASC,UAAUC,oBAAoB,CAClDC,SC1BW,09CD4BXC,OAAQ,CACJ,kBACA,yBACA,4BAGJC,OAAQ,CAACL,SAASM,MAAMC,UAAU,uBAElCC,MAAO,CACHC,OAAQ,CACJC,KAAMC,OACNC,UAAU,GAEdC,gBAAiB,CACbH,KAAMI,QAGNpB,SAAS,EACTkB,UAAU,IAIlBG,KAAI,WACA,MAAO,CACHC,iBAAiB,EACjBC,wBAAwB,IAIhCC,SAAU,CACNC,kBAAiB,WACb,OAAQC,KAAKX,OAAOY,QAGxBC,eAAc,WACV,OAAOtB,SAASuB,OAAOhB,UAAU,cAIzCiB,QAAS,CACLC,UAAS,WACAL,KAAKM,eAMRA,YAAW,WAAmB,IAADC,EAAA,YAAAC,IAAAC,IAAAC,MAAA,SAAAC,IAAA,OAAAF,IAAAG,MAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OAEK,OADpCR,EAAKX,iBAAkB,EACvBW,EAAKV,wBAAyB,EAAMgB,EAAAC,KAAA,EAAAD,EAAAE,KAAA,EAG1BR,EAAKS,uBAAuBC,6BAA6BV,EAAKlB,OAAO6B,KAAMX,EAAKlB,OAAOC,MAAM,KAAD,EAClGiB,EAAKV,wBAAyB,EAC9BU,EAAKY,MAAM,uBAAuBN,EAAAE,KAAA,gBAAAF,EAAAC,KAAA,EAAAD,EAAAO,GAAAP,EAAA,SAKlCN,EAAKc,oBAAmBR,EAAAO,IAAQ,QAS/B,OAT+BP,EAAAC,KAAA,GAEhCP,EAAKX,iBAAkB,EAEE,WAArBW,EAAKlB,OAAOC,MAIZiB,EAAKe,gBAAgBC,QACxBV,EAAAE,KAAA,GAEKR,EAAKiB,yBAAyBC,sBAAsB,KAAD,GAGP,OADlDlB,EAAKY,MAAM,sBAAuBZ,EAAKlB,OAAO6B,MAC9CX,EAAKY,MAAM,oBAAqBZ,EAAKlB,OAAO6B,MAAML,EAAAa,OAAA,6BAAAb,EAAAc,UAAAhB,EAAA,uBA1BvBH,Q","file":"static/js/b90e7e942e5ecdc061e1.js","sourcesContent":["// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../../../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--15-1!../../../../../node_modules/css-loader/dist/cjs.js??ref--15-2!../../../../../node_modules/sass-loader/dist/cjs.js??ref--15-3!./sw-plugin-card.scss\");\nif(content.__esModule) content = content.default;\nif(typeof content === 'string') content = [[module.id, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar add = require(\"!../../../../../node_modules/vue-style-loader/lib/addStylesClient.js\").default\nvar update = add(\"1c063b3a\", content, true, {});","import type { PropType } from 'vue';\nimport type { ExtensionType } from 'src/module/sw-extension/service/extension-store-action.service';\nimport template from './sw-plugin-card.html.twig';\nimport './sw-plugin-card.scss';\n\ntype ComponentData = {\n    pluginIsLoading: boolean,\n    pluginIsSaveSuccessful: boolean,\n}\n\ntype RecommendedPlugin = {\n    active: boolean,\n    name: string,\n    iconPath: string,\n    label: string,\n    manufacturer: string,\n    shortDescription: string,\n    type: ExtensionType,\n}\n\n/**\n * @package services-settings\n * @deprecated tag:v6.6.0 - Will be private\n */\n// eslint-disable-next-line sw-deprecation-rules/private-feature-declarations\nexport default Shopware.Component.wrapComponentConfig({\n    template,\n\n    inject: [\n        'cacheApiService',\n        'extensionHelperService',\n        'shopwareExtensionService',\n    ],\n\n    mixins: [Shopware.Mixin.getByName('sw-extension-error')],\n\n    props: {\n        plugin: {\n            type: Object as PropType<RecommendedPlugin>,\n            required: true,\n        },\n        showDescription: {\n            type: Boolean,\n            // TODO: Boolean props should only be opt in and therefore default to false\n            // eslint-disable-next-line vue/no-boolean-default\n            default: true,\n            required: false,\n        },\n    },\n\n    data(): ComponentData {\n        return {\n            pluginIsLoading: false,\n            pluginIsSaveSuccessful: false,\n        };\n    },\n\n    computed: {\n        pluginIsNotActive(): boolean {\n            return !this.plugin.active;\n        },\n\n        truncateFilter() {\n            return Shopware.Filter.getByName('truncate');\n        },\n    },\n\n    methods: {\n        onInstall(): void {\n            void this.setupPlugin();\n        },\n\n        /**\n         * @deprecated tag:v6.6.0 - Will emit hypernated event only.\n         */\n        async setupPlugin(): Promise<void> {\n            this.pluginIsLoading = true;\n            this.pluginIsSaveSuccessful = false;\n\n            try {\n                await this.extensionHelperService.downloadAndActivateExtension(this.plugin.name, this.plugin.type);\n                this.pluginIsSaveSuccessful = true;\n                this.$emit('extension-activated');\n            } catch (error: unknown) {\n                // ts can not recognize functions from mixins\n                // @ts-expect-error\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-call\n                this.showExtensionErrors(error);\n            } finally {\n                this.pluginIsLoading = false;\n\n                if (this.plugin.type === 'plugin') {\n                    // wait until cacheApiService is transpiled to ts\n                    // @ts-expect-error\n                    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access,@typescript-eslint/no-unsafe-call\n                    this.cacheApiService.clear();\n                }\n\n                await this.shopwareExtensionService.updateExtensionData();\n\n                this.$emit('on-plugin-installed', this.plugin.name);\n                this.$emit('onPluginInstalled', this.plugin.name);\n            }\n        },\n    },\n});\n","export default \"\\n{% block sw_plugin_card %}\\n<div class=\\\"sw-plugin-card\\\">\\n    <sw-extension-icon\\n        :src=\\\"plugin.iconPath\\\"\\n    />\\n    <div class=\\\"sw-plugin-card__info\\\">\\n        <div class=\\\"sw-plugin-card__label\\\">\\n            {{ plugin.label }}\\n        </div>\\n        <div class=\\\"sw-plugin-card__manufacturer\\\">\\n            {{ plugin.manufacturer }}\\n        </div>\\n        <div\\n            v-if=\\\"showDescription\\\"\\n            class=\\\"sw-plugin-card__short-description\\\"\\n        >\\n            {{ truncateFilter(plugin.shortDescription, 140) }}\\n        </div>\\n\\n        <div\\n            v-if=\\\"pluginIsNotActive\\\"\\n            class=\\\"bottom\\\"\\n        >\\n            <sw-button-process\\n                variant=\\\"primary\\\"\\n                :is-loading=\\\"pluginIsLoading\\\"\\n                :disabled=\\\"pluginIsLoading\\\"\\n                :process-success=\\\"pluginIsSaveSuccessful\\\"\\n                class=\\\"button-plugin-install\\\"\\n                @click=\\\"onInstall\\\"\\n            >\\n                {{ $tc('sw-first-run-wizard.general.buttonInstall') }}\\n            </sw-button-process>\\n        </div>\\n        <div\\n            v-else\\n            class=\\\"plugin-status\\\"\\n        >\\n            <span class=\\\"plugin-installed\\\">\\n                <sw-icon\\n                    name=\\\"regular-check-circle-s\\\"\\n                    size=\\\"16\\\"\\n                />\\n                {{ $tc('sw-first-run-wizard.general.pluginInstalled') }}\\n            </span>\\n        </div>\\n    </div>\\n</div>\\n{% endblock %}\\n\";"],"sourceRoot":""}